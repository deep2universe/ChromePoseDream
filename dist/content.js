// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"QVnC":[function(require,module,exports) {
var define;
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

},{}],"JOwF":[function(require,module,exports) {
var global = arguments[3];
(function(){/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/
'use strict';var A;function aa(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}var ba="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(a==Array.prototype||a==Object.prototype)return a;a[b]=c.value;return a};
function ca(a){a=["object"==typeof globalThis&&globalThis,a,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error("Cannot find global object");}var F=ca(this);function J(a,b){if(b)a:{var c=F;a=a.split(".");for(var d=0;d<a.length-1;d++){var f=a[d];if(!(f in c))break a;c=c[f]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ba(c,a,{configurable:!0,writable:!0,value:b})}}
J("Symbol",function(a){function b(g){if(this instanceof b)throw new TypeError("Symbol is not a constructor");return new c(d+(g||"")+"_"+f++,g)}function c(g,e){this.g=g;ba(this,"description",{configurable:!0,writable:!0,value:e})}if(a)return a;c.prototype.toString=function(){return this.g};var d="jscomp_symbol_"+(1E9*Math.random()>>>0)+"_",f=0;return b});
J("Symbol.iterator",function(a){if(a)return a;a=Symbol("Symbol.iterator");for(var b="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),c=0;c<b.length;c++){var d=F[b[c]];"function"===typeof d&&"function"!=typeof d.prototype[a]&&ba(d.prototype,a,{configurable:!0,writable:!0,value:function(){return da(aa(this))}})}return a});function da(a){a={next:a};a[Symbol.iterator]=function(){return this};return a}
function M(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:aa(a)}}function ea(a){if(!(a instanceof Array)){a=M(a);for(var b,c=[];!(b=a.next()).done;)c.push(b.value);a=c}return a}var fa="function"==typeof Object.create?Object.create:function(a){function b(){}b.prototype=a;return new b},ha;
if("function"==typeof Object.setPrototypeOf)ha=Object.setPrototypeOf;else{var ia;a:{var ja={a:!0},ka={};try{ka.__proto__=ja;ia=ka.a;break a}catch(a){}ia=!1}ha=ia?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null}var la=ha;
function ma(a,b){a.prototype=fa(b.prototype);a.prototype.constructor=a;if(la)la(a,b);else for(var c in b)if("prototype"!=c)if(Object.defineProperties){var d=Object.getOwnPropertyDescriptor(b,c);d&&Object.defineProperty(a,c,d)}else a[c]=b[c];a.ca=b.prototype}function na(){this.l=!1;this.i=null;this.h=void 0;this.g=1;this.s=this.m=0;this.j=null}function oa(a){if(a.l)throw new TypeError("Generator is already running");a.l=!0}na.prototype.o=function(a){this.h=a};
function pa(a,b){a.j={S:b,T:!0};a.g=a.m||a.s}na.prototype.return=function(a){this.j={return:a};this.g=this.s};function N(a,b,c){a.g=c;return{value:b}}function qa(a){this.g=new na;this.h=a}function ra(a,b){oa(a.g);var c=a.g.i;if(c)return sa(a,"return"in c?c["return"]:function(d){return{value:d,done:!0}},b,a.g.return);a.g.return(b);return ta(a)}
function sa(a,b,c,d){try{var f=b.call(a.g.i,c);if(!(f instanceof Object))throw new TypeError("Iterator result "+f+" is not an object");if(!f.done)return a.g.l=!1,f;var g=f.value}catch(e){return a.g.i=null,pa(a.g,e),ta(a)}a.g.i=null;d.call(a.g,g);return ta(a)}function ta(a){for(;a.g.g;)try{var b=a.h(a.g);if(b)return a.g.l=!1,{value:b.value,done:!1}}catch(c){a.g.h=void 0,pa(a.g,c)}a.g.l=!1;if(a.g.j){b=a.g.j;a.g.j=null;if(b.T)throw b.S;return{value:b.return,done:!0}}return{value:void 0,done:!0}}
function ua(a){this.next=function(b){oa(a.g);a.g.i?b=sa(a,a.g.i.next,b,a.g.o):(a.g.o(b),b=ta(a));return b};this.throw=function(b){oa(a.g);a.g.i?b=sa(a,a.g.i["throw"],b,a.g.o):(pa(a.g,b),b=ta(a));return b};this.return=function(b){return ra(a,b)};this[Symbol.iterator]=function(){return this}}function O(a,b){b=new ua(new qa(b));la&&a.prototype&&la(b,a.prototype);return b}
function va(a,b){a instanceof String&&(a+="");var c=0,d=!1,f={next:function(){if(!d&&c<a.length){var g=c++;return{value:b(g,a[g]),done:!1}}d=!0;return{done:!0,value:void 0}}};f[Symbol.iterator]=function(){return f};return f}var wa="function"==typeof Object.assign?Object.assign:function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(d)for(var f in d)Object.prototype.hasOwnProperty.call(d,f)&&(a[f]=d[f])}return a};J("Object.assign",function(a){return a||wa});
J("Promise",function(a){function b(e){this.h=0;this.i=void 0;this.g=[];this.o=!1;var h=this.j();try{e(h.resolve,h.reject)}catch(k){h.reject(k)}}function c(){this.g=null}function d(e){return e instanceof b?e:new b(function(h){h(e)})}if(a)return a;c.prototype.h=function(e){if(null==this.g){this.g=[];var h=this;this.i(function(){h.l()})}this.g.push(e)};var f=F.setTimeout;c.prototype.i=function(e){f(e,0)};c.prototype.l=function(){for(;this.g&&this.g.length;){var e=this.g;this.g=[];for(var h=0;h<e.length;++h){var k=
e[h];e[h]=null;try{k()}catch(l){this.j(l)}}}this.g=null};c.prototype.j=function(e){this.i(function(){throw e;})};b.prototype.j=function(){function e(l){return function(n){k||(k=!0,l.call(h,n))}}var h=this,k=!1;return{resolve:e(this.B),reject:e(this.l)}};b.prototype.B=function(e){if(e===this)this.l(new TypeError("A Promise cannot resolve to itself"));else if(e instanceof b)this.D(e);else{a:switch(typeof e){case "object":var h=null!=e;break a;case "function":h=!0;break a;default:h=!1}h?this.u(e):this.m(e)}};
b.prototype.u=function(e){var h=void 0;try{h=e.then}catch(k){this.l(k);return}"function"==typeof h?this.F(h,e):this.m(e)};b.prototype.l=function(e){this.s(2,e)};b.prototype.m=function(e){this.s(1,e)};b.prototype.s=function(e,h){if(0!=this.h)throw Error("Cannot settle("+e+", "+h+"): Promise already settled in state"+this.h);this.h=e;this.i=h;2===this.h&&this.C();this.v()};b.prototype.C=function(){var e=this;f(function(){if(e.A()){var h=F.console;"undefined"!==typeof h&&h.error(e.i)}},1)};b.prototype.A=
function(){if(this.o)return!1;var e=F.CustomEvent,h=F.Event,k=F.dispatchEvent;if("undefined"===typeof k)return!0;"function"===typeof e?e=new e("unhandledrejection",{cancelable:!0}):"function"===typeof h?e=new h("unhandledrejection",{cancelable:!0}):(e=F.document.createEvent("CustomEvent"),e.initCustomEvent("unhandledrejection",!1,!0,e));e.promise=this;e.reason=this.i;return k(e)};b.prototype.v=function(){if(null!=this.g){for(var e=0;e<this.g.length;++e)g.h(this.g[e]);this.g=null}};var g=new c;b.prototype.D=
function(e){var h=this.j();e.I(h.resolve,h.reject)};b.prototype.F=function(e,h){var k=this.j();try{e.call(h,k.resolve,k.reject)}catch(l){k.reject(l)}};b.prototype.then=function(e,h){function k(w,u){return"function"==typeof w?function(z){try{l(w(z))}catch(m){n(m)}}:u}var l,n,v=new b(function(w,u){l=w;n=u});this.I(k(e,l),k(h,n));return v};b.prototype.catch=function(e){return this.then(void 0,e)};b.prototype.I=function(e,h){function k(){switch(l.h){case 1:e(l.i);break;case 2:h(l.i);break;default:throw Error("Unexpected state: "+
l.h);}}var l=this;null==this.g?g.h(k):this.g.push(k);this.o=!0};b.resolve=d;b.reject=function(e){return new b(function(h,k){k(e)})};b.race=function(e){return new b(function(h,k){for(var l=M(e),n=l.next();!n.done;n=l.next())d(n.value).I(h,k)})};b.all=function(e){var h=M(e),k=h.next();return k.done?d([]):new b(function(l,n){function v(z){return function(m){w[z]=m;u--;0==u&&l(w)}}var w=[],u=0;do w.push(void 0),u++,d(k.value).I(v(w.length-1),n),k=h.next();while(!k.done)})};return b});
J("Object.is",function(a){return a?a:function(b,c){return b===c?0!==b||1/b===1/c:b!==b&&c!==c}});J("Array.prototype.includes",function(a){return a?a:function(b,c){var d=this;d instanceof String&&(d=String(d));var f=d.length;c=c||0;for(0>c&&(c=Math.max(c+f,0));c<f;c++){var g=d[c];if(g===b||Object.is(g,b))return!0}return!1}});
J("String.prototype.includes",function(a){return a?a:function(b,c){if(null==this)throw new TypeError("The 'this' value for String.prototype.includes must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype.includes must not be a regular expression");return-1!==this.indexOf(b,c||0)}});J("Array.prototype.keys",function(a){return a?a:function(){return va(this,function(b){return b})}});var xa=this||self;
function P(a,b){a=a.split(".");var c=xa;a[0]in c||"undefined"==typeof c.execScript||c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());)a.length||void 0===b?c[d]&&c[d]!==Object.prototype[d]?c=c[d]:c=c[d]={}:c[d]=b};function ya(a,b){b=String.fromCharCode.apply(null,b);return null==a?b:a+b}var za,Aa="undefined"!==typeof TextDecoder,Ba,Ca="undefined"!==typeof TextEncoder;
function Da(a){if(Ca)a=(Ba||(Ba=new TextEncoder)).encode(a);else{var b=void 0;b=void 0===b?!1:b;for(var c=0,d=new Uint8Array(3*a.length),f=0;f<a.length;f++){var g=a.charCodeAt(f);if(128>g)d[c++]=g;else{if(2048>g)d[c++]=g>>6|192;else{if(55296<=g&&57343>=g){if(56319>=g&&f<a.length){var e=a.charCodeAt(++f);if(56320<=e&&57343>=e){g=1024*(g-55296)+e-56320+65536;d[c++]=g>>18|240;d[c++]=g>>12&63|128;d[c++]=g>>6&63|128;d[c++]=g&63|128;continue}else f--}if(b)throw Error("Found an unpaired surrogate");g=65533}d[c++]=
g>>12|224;d[c++]=g>>6&63|128}d[c++]=g&63|128}}a=d.subarray(0,c)}return a};var Ea="function"===typeof Uint8Array.prototype.slice,Q=0,R=0;function Fa(a){this.h=null;this.g=this.i=this.j=0;this.l=!1;a&&Ga(this,a)}function Ga(a,b){b=b.constructor===Uint8Array?b:b.constructor===ArrayBuffer?new Uint8Array(b):b.constructor===Array?new Uint8Array(b):b.constructor===String?Ia(b):b instanceof Uint8Array?new Uint8Array(b.buffer,b.byteOffset,b.byteLength):new Uint8Array(0);a.h=b;a.j=0;a.i=a.h.length;a.g=a.j}Fa.prototype.reset=function(){this.g=this.j};
function Ja(a){var b=a.h,c=b[a.g],d=c&127;if(128>c)return a.g+=1,d;c=b[a.g+1];d|=(c&127)<<7;if(128>c)return a.g+=2,d;c=b[a.g+2];d|=(c&127)<<14;if(128>c)return a.g+=3,d;c=b[a.g+3];d|=(c&127)<<21;if(128>c)return a.g+=4,d;c=b[a.g+4];d|=(c&15)<<28;if(128>c)return a.g+=5,d>>>0;a.g+=5;128<=b[a.g++]&&128<=b[a.g++]&&128<=b[a.g++]&&128<=b[a.g++]&&a.g++;return d}
function S(a){var b=a.h[a.g];var c=a.h[a.g+1];var d=a.h[a.g+2],f=a.h[a.g+3];a.g+=4;c=(b<<0|c<<8|d<<16|f<<24)>>>0;a=2*(c>>31)+1;b=c>>>23&255;c&=8388607;return 255==b?c?NaN:Infinity*a:0==b?a*Math.pow(2,-149)*c:a*Math.pow(2,b-150)*(c+Math.pow(2,23))}var Ka=[];function La(){this.g=new Uint8Array(64);this.h=0}La.prototype.push=function(a){if(!(this.h+1<this.g.length)){var b=this.g;this.g=new Uint8Array(Math.ceil(1+2*this.g.length));this.g.set(b)}this.g[this.h++]=a};La.prototype.length=function(){return this.h};La.prototype.end=function(){var a=this.g,b=this.h;this.h=0;return Ea?a.slice(0,b):new Uint8Array(a.subarray(0,b))};function Ma(a,b){for(;127<b;)a.push(b&127|128),b>>>=7;a.push(b)};function Na(a){if(Ka.length){var b=Ka.pop();a&&Ga(b,a);a=b}else a=new Fa(a);this.g=a;this.h=this.i=this.l=-1;this.j=!1}Na.prototype.reset=function(){this.g.reset();this.h=this.l=-1};function Oa(a){var b=a.g;(b=b.g==b.i)||(b=a.j)||(b=a.g,b=b.l||0>b.g||b.g>b.i);if(b)return!1;b=Ja(a.g);var c=b&7;if(0!=c&&5!=c&&1!=c&&2!=c&&3!=c&&4!=c)return a.j=!0,!1;a.i=b;a.l=b>>>3;a.h=c;return!0}
function Pa(a){switch(a.h){case 0:if(0!=a.h)Pa(a);else{for(a=a.g;a.h[a.g]&128;)a.g++;a.g++}break;case 1:1!=a.h?Pa(a):(a=a.g,a.g+=8);break;case 2:if(2!=a.h)Pa(a);else{var b=Ja(a.g);a=a.g;a.g+=b}break;case 5:5!=a.h?Pa(a):(a=a.g,a.g+=4);break;case 3:b=a.l;do{if(!Oa(a)){a.j=!0;break}if(4==a.h){a.l!=b&&(a.j=!0);break}Pa(a)}while(1);break;default:a.j=!0}}function Qa(a,b,c){var d=a.g.i,f=Ja(a.g);f=a.g.g+f;a.g.i=f;c(b,a);a.g.g=f;a.g.i=d;return b}
function Ra(a){var b=Ja(a.g);a=a.g;var c=a.g;a.g+=b;a=a.h;var d;if(Aa)(d=za)||(d=za=new TextDecoder("utf-8",{fatal:!1})),d=d.decode(a.subarray(c,c+b));else{b=c+b;for(var f=[],g=null,e,h,k;c<b;)e=a[c++],128>e?f.push(e):224>e?c>=b?f.push(65533):(h=a[c++],194>e||128!==(h&192)?(c--,f.push(65533)):f.push((e&31)<<6|h&63)):240>e?c>=b-1?f.push(65533):(h=a[c++],128!==(h&192)||224===e&&160>h||237===e&&160<=h||128!==((d=a[c++])&192)?(c--,f.push(65533)):f.push((e&15)<<12|(h&63)<<6|d&63)):244>=e?c>=b-2?f.push(65533):
(h=a[c++],128!==(h&192)||0!==(e<<28)+(h-144)>>30||128!==((d=a[c++])&192)||128!==((k=a[c++])&192)?(c--,f.push(65533)):(e=(e&7)<<18|(h&63)<<12|(d&63)<<6|k&63,e-=65536,f.push((e>>10&1023)+55296,(e&1023)+56320))):f.push(65533),8192<=f.length&&(g=ya(g,f),f.length=0);d=ya(g,f)}return d};var Sa={},Ta=null;function Ia(a){var b=a.length,c=3*b/4;c%3?c=Math.floor(c):-1!="=.".indexOf(a[b-1])&&(c=-1!="=.".indexOf(a[b-2])?c-2:c-1);var d=new Uint8Array(c),f=0;Ua(a,function(g){d[f++]=g});return d.subarray(0,f)}
function Ua(a,b){function c(k){for(;d<a.length;){var l=a.charAt(d++),n=Ta[l];if(null!=n)return n;if(!/^[\s\xa0]*$/.test(l))throw Error("Unknown base64 encoding at char: "+l);}return k}Va();for(var d=0;;){var f=c(-1),g=c(0),e=c(64),h=c(64);if(64===h&&-1===f)break;b(f<<2|g>>4);64!=e&&(b(g<<4&240|e>>2),64!=h&&b(e<<6&192|h))}}
function Va(){if(!Ta){Ta={};for(var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++){var d=a.concat(b[c].split(""));Sa[c]=d;for(var f=0;f<d.length;f++){var g=d[f];void 0===Ta[g]&&(Ta[g]=f)}}}};function Wa(){this.h=[];this.i=0;this.g=new La}function Xa(a){var b=a.i+a.g.length();if(0===b)return new Uint8Array(0);b=new Uint8Array(b);for(var c=a.h,d=c.length,f=0,g=0;g<d;g++){var e=c[g];0!==e.length&&(b.set(e,f),f+=e.length)}c=a.g;d=c.h;0!==d&&(b.set(c.g.subarray(0,d),f),c.h=0);a.h=[b];return b}
function T(a,b,c){if(null!=c){Ma(a.g,8*b+5);a=a.g;var d=c;d=(c=0>d?1:0)?-d:d;0===d?0<1/d?Q=R=0:(R=0,Q=2147483648):isNaN(d)?(R=0,Q=2147483647):3.4028234663852886E38<d?(R=0,Q=(c<<31|2139095040)>>>0):1.1754943508222875E-38>d?(d=Math.round(d/Math.pow(2,-149)),R=0,Q=(c<<31|d)>>>0):(b=Math.floor(Math.log(d)/Math.LN2),d*=Math.pow(2,-b),d=Math.round(8388608*d)&8388607,R=0,Q=(c<<31|b+127<<23|d)>>>0);c=Q;a.push(c>>>0&255);a.push(c>>>8&255);a.push(c>>>16&255);a.push(c>>>24&255)}}
function Ya(a,b,c){Ma(a.g,8*b+2);Ma(a.g,c.length);b=a.g.end();a.h.push(b);a.h.push(c);a.i+=b.length+c.length};var Za="function"===typeof Uint8Array;function $a(a,b,c){return"object"===typeof a?Za&&!Array.isArray(a)&&a instanceof Uint8Array?c(a):ab(a,b,c):b(a)}function ab(a,b,c){if(Array.isArray(a)){for(var d=Array(a.length),f=0;f<a.length;f++){var g=a[f];null!=g&&(d[f]=$a(g,b,c))}Array.isArray(a)&&a.U&&bb(d);return d}d={};for(f in a)g=a[f],null!=g&&(d[f]=$a(g,b,c));return d}
function cb(a){return ab(a,function(b){return"number"===typeof b?isFinite(b)?b:String(b):b},function(b){var c;void 0===c&&(c=0);Va();c=Sa[c];for(var d=Array(Math.floor(b.length/3)),f=c[64]||"",g=0,e=0;g<b.length-2;g+=3){var h=b[g],k=b[g+1],l=b[g+2],n=c[h>>2];h=c[(h&3)<<4|k>>4];k=c[(k&15)<<2|l>>6];l=c[l&63];d[e++]=n+h+k+l}n=0;l=f;switch(b.length-g){case 2:n=b[g+1],l=c[(n&15)<<2]||f;case 1:b=b[g],d[e]=c[b>>2]+c[(b&3)<<4|n>>4]+l+f}return d.join("")})}var db={U:{value:!0,configurable:!0}};
function bb(a){Array.isArray(a)&&!Object.isFrozen(a)&&Object.defineProperties(a,db);return a};var eb;function U(a,b,c){var d=eb;eb=null;a||(a=d);d=this.constructor.aa;a||(a=d?[d]:[]);this.j=d?0:-1;this.i=null;this.g=a;a:{d=this.g.length;a=d-1;if(d&&(d=this.g[a],!(null===d||"object"!=typeof d||Array.isArray(d)||Za&&d instanceof Uint8Array))){this.l=a-this.j;this.h=d;break a}void 0!==b&&-1<b?(this.l=Math.max(b,a+1-this.j),this.h=null):this.l=Number.MAX_VALUE}if(c)for(b=0;b<c.length;b++)a=c[b],a<this.l?(a+=this.j,(d=this.g[a])?bb(d):this.g[a]=fb):(gb(this),(d=this.h[a])?bb(d):this.h[a]=fb)}var fb=Object.freeze(bb([]));
function gb(a){var b=a.l+a.j;a.g[b]||(a.h=a.g[b]={})}function V(a,b){if(-1===b)return null;if(b<a.l){b+=a.j;var c=a.g[b];return c!==fb?c:a.g[b]=bb([])}if(a.h)return c=a.h[b],c!==fb?c:a.h[b]=bb([])}function W(a,b,c){c=void 0===c?0:c;a=V(a,b);a=null==a?a:+a;return null==a?c:a}function X(a,b,c){b<a.l?a.g[b+a.j]=c:(gb(a),a.h[b]=c)}function hb(a,b){a.i||(a.i={});if(!a.i[1]){var c=V(a,1);for(var d=[],f=0;f<c.length;f++)d[f]=new b(c[f]);a.i[1]=d}return a.i[1]}
function ib(a,b,c,d){var f=hb(a,c);b=b?b:new c;a=V(a,1);void 0!=d?(f.splice(d,0,b),a.splice(d,0,jb(b,!1))):(f.push(b),a.push(jb(b,!1)));return b}U.prototype.toJSON=function(){var a=jb(this,!1);return cb(a)};function jb(a,b){if(a.i)for(var c in a.i){var d=a.i[c];if(Array.isArray(d))for(var f=0;f<d.length;f++)d[f]&&jb(d[f],b);else d&&jb(d,b)}return a.g}U.prototype.toString=function(){return jb(this,!1).toString()};function kb(a,b){a=V(a,b);return null==a?0:a}
function lb(a,b){a=V(a,b);return null==a?"":a};function mb(a){if(4==a.h)return!1;Pa(a);return!0};function Y(a,b){var c=void 0;return new (c||(c=Promise))(function(d,f){function g(k){try{h(b.next(k))}catch(l){f(l)}}function e(k){try{h(b["throw"](k))}catch(l){f(l)}}function h(k){k.done?d(k.value):(new c(function(l){l(k.value)})).then(g,e)}h((b=b.apply(a,void 0)).next())})};function nb(a){U.call(this,a)}ma(nb,U);function ob(a,b){for(;Oa(b);)switch(b.i){case 8:var c=Ja(b.g);X(a,1,c);break;case 21:c=S(b.g);X(a,2,c);break;case 26:c=Ra(b);X(a,3,c);break;case 34:c=Ra(b);X(a,4,c);break;default:if(!mb(b))return a}return a};function pb(a){U.call(this,a,-1,qb)}ma(pb,U);pb.prototype.addClassification=function(a,b){return ib(this,a,nb,b)};var qb=[1];function rb(a){U.call(this,a)}ma(rb,U);function sb(a,b){for(;Oa(b);)switch(b.i){case 13:var c=S(b.g);X(a,1,c);break;case 21:c=S(b.g);X(a,2,c);break;case 29:c=S(b.g);X(a,3,c);break;case 37:c=S(b.g);X(a,4,c);break;case 45:c=S(b.g);X(a,5,c);break;default:if(!mb(b))return a}return a};function tb(a){U.call(this,a,-1,ub)}ma(tb,U);var ub=[1];function vb(a){U.call(this,a)}ma(vb,U);function wb(a,b,c){c=a.createShader(0===c?a.VERTEX_SHADER:a.FRAGMENT_SHADER);a.shaderSource(c,b);a.compileShader(c);if(!a.getShaderParameter(c,a.COMPILE_STATUS))throw Error("Could not compile WebGL shader.\n\n"+a.getShaderInfoLog(c));return c};function xb(a){return hb(a,nb).map(function(b){return{index:kb(b,1),W:W(b,2),label:null!=V(b,3)?lb(b,3):void 0,displayName:null!=V(b,4)?lb(b,4):void 0}})};function yb(a){return{x:W(a,1),y:W(a,2),z:W(a,3),visibility:null!=V(a,4)?W(a,4):void 0}}function zb(a){a:{var b=new tb;for(a=new Na(a);Oa(a);)switch(a.i){case 10:var c=Qa(a,new rb,sb);ib(b,c,rb,void 0);break;default:if(!mb(a))break a}}return hb(b,rb).map(yb)};function Ab(a,b){this.h=a;this.g=b;this.l=0}
function Bb(a,b,c){Cb(a,b);if("function"===typeof a.g.canvas.transferToImageBitmap)return Promise.resolve(a.g.canvas.transferToImageBitmap());if(c)return Promise.resolve(a.g.canvas);if("function"===typeof createImageBitmap)return createImageBitmap(a.g.canvas);void 0===a.i&&(a.i=document.createElement("canvas"));return new Promise(function(d){a.i.height=a.g.canvas.height;a.i.width=a.g.canvas.width;a.i.getContext("2d",{}).drawImage(a.g.canvas,0,0,a.g.canvas.width,a.g.canvas.height);d(a.i)})}
function Cb(a,b){var c=a.g;if(void 0===a.m){var d=wb(c,"\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }",0),f=wb(c,"\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }",1),g=c.createProgram();c.attachShader(g,d);c.attachShader(g,f);c.linkProgram(g);if(!c.getProgramParameter(g,c.LINK_STATUS))throw Error("Could not compile WebGL program.\n\n"+
c.getProgramInfoLog(g));d=a.m=g;c.useProgram(d);f=c.getUniformLocation(d,"sampler0");a.j={H:c.getAttribLocation(d,"aVertex"),G:c.getAttribLocation(d,"aTex"),ba:f};a.s=c.createBuffer();c.bindBuffer(c.ARRAY_BUFFER,a.s);c.enableVertexAttribArray(a.j.H);c.vertexAttribPointer(a.j.H,2,c.FLOAT,!1,0,0);c.bufferData(c.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),c.STATIC_DRAW);c.bindBuffer(c.ARRAY_BUFFER,null);a.o=c.createBuffer();c.bindBuffer(c.ARRAY_BUFFER,a.o);c.enableVertexAttribArray(a.j.G);c.vertexAttribPointer(a.j.G,
2,c.FLOAT,!1,0,0);c.bufferData(c.ARRAY_BUFFER,new Float32Array([0,1,0,0,1,0,1,1]),c.STATIC_DRAW);c.bindBuffer(c.ARRAY_BUFFER,null);c.uniform1i(f,0)}d=a.j;c.useProgram(a.m);c.canvas.width=b.width;c.canvas.height=b.height;c.viewport(0,0,b.width,b.height);c.activeTexture(c.TEXTURE0);a.h.bindTexture2d(b.glName);c.enableVertexAttribArray(d.H);c.bindBuffer(c.ARRAY_BUFFER,a.s);c.vertexAttribPointer(d.H,2,c.FLOAT,!1,0,0);c.enableVertexAttribArray(d.G);c.bindBuffer(c.ARRAY_BUFFER,a.o);c.vertexAttribPointer(d.G,
2,c.FLOAT,!1,0,0);c.bindFramebuffer(c.DRAW_FRAMEBUFFER?c.DRAW_FRAMEBUFFER:c.FRAMEBUFFER,null);c.clearColor(0,0,0,0);c.clear(c.COLOR_BUFFER_BIT);c.colorMask(!0,!0,!0,!0);c.drawArrays(c.TRIANGLE_FAN,0,4);c.disableVertexAttribArray(d.H);c.disableVertexAttribArray(d.G);c.bindBuffer(c.ARRAY_BUFFER,null);a.h.bindTexture2d(0)}function Db(a){this.g=a};var Eb=new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]);function Fb(a,b){return b+a}function Gb(a,b){window[a]=b}function Hb(a){var b=document.createElement("script");b.setAttribute("src",a);b.setAttribute("crossorigin","anonymous");return new Promise(function(c){b.addEventListener("load",function(){c()},!1);b.addEventListener("error",function(){c()},!1);document.body.appendChild(b)})}
function Ib(){return Y(this,function b(){return O(b,function(c){switch(c.g){case 1:return c.m=2,N(c,WebAssembly.instantiate(Eb),4);case 4:c.g=3;c.m=0;break;case 2:return c.m=0,c.j=null,c.return(!1);case 3:return c.return(!0)}})})}
function Jb(a){this.g=a;this.listeners={};this.j={};this.D={};this.m={};this.s={};this.F=this.o=this.O=!0;this.B=Promise.resolve();this.N="";this.A={};this.locateFile=a&&a.locateFile||Fb;if("object"===typeof window)var b=window.location.pathname.toString().substring(0,window.location.pathname.toString().lastIndexOf("/"))+"/";else if("undefined"!==typeof location)b=location.pathname.toString().substring(0,location.pathname.toString().lastIndexOf("/"))+"/";else throw Error("solutions can only be loaded on a web page or in a web worker");
this.P=b;if(a.options){b=M(Object.keys(a.options));for(var c=b.next();!c.done;c=b.next()){c=c.value;var d=a.options[c].default;void 0!==d&&(this.j[c]="function"===typeof d?d():d)}}}A=Jb.prototype;A.close=function(){this.i&&this.i.delete();return Promise.resolve()};function Kb(a,b){return void 0===a.g.files?[]:"function"===typeof a.g.files?a.g.files(b):a.g.files}
function Lb(a){return Y(a,function c(){var d=this,f,g,e,h,k,l,n,v,w,u,z;return O(c,function(m){switch(m.g){case 1:f=d;if(!d.O)return m.return();g=Kb(d,d.j);return N(m,Ib(),2);case 2:e=m.h;if("object"===typeof window)return Gb("createMediapipeSolutionsWasm",{locateFile:d.locateFile}),Gb("createMediapipeSolutionsPackedAssets",{locateFile:d.locateFile}),l=g.filter(function(t){return void 0!==t.data}),n=g.filter(function(t){return void 0===t.data}),v=Promise.all(l.map(function(t){var x=Mb(f,t.url);if(void 0!==
t.path){var y=t.path;x=x.then(function(C){f.overrideFile(y,C);return Promise.resolve(C)})}return x})),w=Promise.all(n.map(function(t){return void 0===t.simd||t.simd&&e||!t.simd&&!e?Hb(f.locateFile(t.url,f.P)):Promise.resolve()})).then(function(){return Y(f,function x(){var y,C,D=this;return O(x,function(K){if(1==K.g)return y=window.createMediapipeSolutionsWasm,C=window.createMediapipeSolutionsPackedAssets,N(K,y(C),2);D.h=K.h;K.g=0})})}),u=function(){return Y(f,function x(){var y=this;return O(x,function(C){y.g.graph&&
y.g.graph.url?C=N(C,Mb(y,y.g.graph.url),0):(C.g=0,C=void 0);return C})})}(),N(m,Promise.all([w,v,u]),7);if("function"!==typeof importScripts)throw Error("solutions can only be loaded on a web page or in a web worker");h=g.filter(function(t){return void 0===t.simd||t.simd&&e||!t.simd&&!e}).map(function(t){return f.locateFile(t.url,f.P)});importScripts.apply(null,ea(h));return N(m,createMediapipeSolutionsWasm(Module),6);case 6:d.h=m.h;d.l=new OffscreenCanvas(1,1);d.h.canvas=d.l;k=d.h.GL.createContext(d.l,
{antialias:!1,alpha:!1,$:"undefined"!==typeof WebGL2RenderingContext?2:1});d.h.GL.makeContextCurrent(k);m.g=4;break;case 7:d.l=document.createElement("canvas");z=d.l.getContext("webgl2",{});if(!z&&(z=d.l.getContext("webgl",{}),!z))return alert("Failed to create WebGL canvas context when passing video frame."),m.return();d.C=z;d.h.canvas=d.l;d.h.createContext(d.l,!0,!0,{});case 4:d.i=new d.h.SolutionWasm,d.O=!1,m.g=0}})})}
function Nb(a){return Y(a,function c(){var d=this,f,g,e,h,k,l,n,v;return O(c,function(w){if(1==w.g){if(d.g.graph&&d.g.graph.url&&d.N===d.g.graph.url)return w.return();d.o=!0;if(!d.g.graph||!d.g.graph.url){w.g=2;return}d.N=d.g.graph.url;return N(w,Mb(d,d.g.graph.url),3)}2!=w.g&&(f=w.h,d.i.loadGraph(f));g=M(Object.keys(d.A));for(e=g.next();!e.done;e=g.next())h=e.value,d.i.overrideFile(h,d.A[h]);d.A={};if(d.g.listeners)for(k=M(d.g.listeners),l=k.next();!l.done;l=k.next())n=l.value,Ob(d,n);v=d.j;d.j=
{};d.setOptions(v);w.g=0})})}A.reset=function(){return Y(this,function b(){var c=this;return O(b,function(d){c.i&&(c.i.reset(),c.m={},c.s={});d.g=0})})};
A.setOptions=function(a,b){var c=this;if(b=b||this.g.options){for(var d=[],f=[],g={},e=M(Object.keys(a)),h=e.next();!h.done;g={J:g.J,K:g.K},h=e.next()){var k=h.value;k in this.j&&this.j[k]===a[k]||(this.j[k]=a[k],h=b[k],void 0!==h&&(h.onChange&&(g.J=h.onChange,g.K=a[k],d.push(function(l){return function(){return Y(c,function v(){var w,u=this;return O(v,function(z){if(1==z.g)return N(z,l.J(l.K),2);w=z.h;!0===w&&(u.o=!0);z.g=0})})}}(g))),h.graphOptionXref&&(k={valueNumber:1===h.type?a[k]:0,valueBoolean:0===
h.type?a[k]:!1,valueString:2===h.type?a[k]:""},h=Object.assign(Object.assign(Object.assign({},{calculatorName:"",calculatorIndex:0}),h.graphOptionXref),k),f.push(h))))}if(0!==d.length||0!==f.length)this.o=!0,this.v=(void 0===this.v?[]:this.v).concat(f),this.u=(void 0===this.u?[]:this.u).concat(d)}};
function Pb(a){return Y(a,function c(){var d=this,f,g,e,h,k,l,n;return O(c,function(v){switch(v.g){case 1:if(!d.o)return v.return();if(!d.u){v.g=2;break}f=M(d.u);g=f.next();case 3:if(g.done){v.g=5;break}e=g.value;return N(v,e(),4);case 4:g=f.next();v.g=3;break;case 5:d.u=void 0;case 2:if(d.v){h=new d.h.GraphOptionChangeRequestList;k=M(d.v);for(l=k.next();!l.done;l=k.next())n=l.value,h.push_back(n);d.i.changeOptions(h);h.delete();d.v=void 0}d.o=!1;v.g=0}})})}
A.initialize=function(){return Y(this,function b(){var c=this;return O(b,function(d){return 1==d.g?N(d,Lb(c),2):3!=d.g?N(d,Nb(c),3):N(d,Pb(c),0)})})};function Mb(a,b){return Y(a,function d(){var f=this,g,e;return O(d,function(h){if(b in f.D)return h.return(f.D[b]);g=f.locateFile(b,"");e=fetch(g).then(function(k){return k.arrayBuffer()});f.D[b]=e;return h.return(e)})})}A.overrideFile=function(a,b){this.i?this.i.overrideFile(a,b):this.A[a]=b};A.clearOverriddenFiles=function(){this.A={};this.i&&this.i.clearOverriddenFiles()};
A.send=function(a,b){return Y(this,function d(){var f=this,g,e,h,k,l,n,v,w,u;return O(d,function(z){switch(z.g){case 1:if(!f.g.inputs)return z.return();g=1E3*(void 0===b||null===b?performance.now():b);return N(z,f.B,2);case 2:return N(z,f.initialize(),3);case 3:e=new f.h.PacketDataList;h=M(Object.keys(a));for(k=h.next();!k.done;k=h.next())if(l=k.value,n=f.g.inputs[l]){a:{var m=f;var t=a[l];switch(n.type){case "video":var x=m.m[n.stream];x||(x=new Ab(m.h,m.C),m.m[n.stream]=x);m=x;0===m.l&&(m.l=m.h.createTexture());
if("undefined"!==typeof HTMLVideoElement&&t instanceof HTMLVideoElement){var y=t.videoWidth;x=t.videoHeight}else"undefined"!==typeof HTMLImageElement&&t instanceof HTMLImageElement?(y=t.naturalWidth,x=t.naturalHeight):(y=t.width,x=t.height);x={glName:m.l,width:y,height:x};y=m.g;y.canvas.width=x.width;y.canvas.height=x.height;y.activeTexture(y.TEXTURE0);m.h.bindTexture2d(m.l);y.texImage2D(y.TEXTURE_2D,0,y.RGBA,y.RGBA,y.UNSIGNED_BYTE,t);m.h.bindTexture2d(0);m=x;break a;case "detections":x=m.m[n.stream];
x||(x=new Db(m.h),m.m[n.stream]=x);m=x;m.data||(m.data=new m.g.DetectionListData);m.data.reset(t.length);for(x=0;x<t.length;++x){y=t[x];var C=m.data,D=C.setBoundingBox,K=x;var H=y.R;var p=new vb;X(p,1,H.X);X(p,2,H.Y);X(p,3,H.height);X(p,4,H.width);X(p,5,H.rotation);X(p,6,H.V);H=new Wa;var q=p;p=H;T(p,1,V(q,1));T(p,2,V(q,2));T(p,3,V(q,3));T(p,4,V(q,4));T(p,5,V(q,5));q=V(q,6);if(null!=q&&null!=q){Ma(p.g,48);p=p.g;var B=q;q=0>B;B=Math.abs(B);var r=B>>>0;B=Math.floor((B-r)/4294967296);B>>>=0;q&&(B=~B>>>
0,r=(~r>>>0)+1,4294967295<r&&(r=0,B++,4294967295<B&&(B=0)));Q=r;R=B;q=Q;for(r=R;0<r||127<q;)p.push(q&127|128),q=(q>>>7|r<<25)>>>0,r>>>=7;p.push(q)}H=Xa(H);D.call(C,K,H);if(y.M)for(C=0;C<y.M.length;++C)p=y.M[C],q=p.visibility?!0:!1,D=m.data,K=D.addNormalizedLandmark,H=x,p=Object.assign(Object.assign({},p),{visibility:q?p.visibility:0}),q=new rb,X(q,1,p.x),X(q,2,p.y),X(q,3,p.z),p.visibility&&X(q,4,p.visibility),r=p=new Wa,T(r,1,V(q,1)),T(r,2,V(q,2)),T(r,3,V(q,3)),T(r,4,V(q,4)),T(r,5,V(q,5)),p=Xa(p),
K.call(D,H,p);if(y.L)for(C=0;C<y.L.length;++C){D=m.data;K=D.addClassification;H=x;p=y.L[C];q=new nb;X(q,2,p.W);p.index&&X(q,1,p.index);p.label&&X(q,3,p.label);p.displayName&&X(q,4,p.displayName);p=new Wa;r=q;q=p;var G=V(r,1);if(null!=G&&null!=G)if(Ma(q.g,8),B=q.g,0<=G)Ma(B,G);else{for(var E=0;9>E;E++)B.push(G&127|128),G>>=7;B.push(1)}T(q,2,V(r,2));B=V(r,3);null!=B&&Ya(q,3,Da(B));r=V(r,4);null!=r&&Ya(q,4,Da(r));p=Xa(p);K.call(D,H,p)}}m=m.data;break a;default:m={}}}v=m;w=n.stream;switch(n.type){case "video":e.pushTexture2d(Object.assign(Object.assign({},
v),{stream:w,timestamp:g}));break;case "detections":u=v;u.stream=w;u.timestamp=g;e.pushDetectionList(u);break;default:throw Error("Unknown input config type: '"+n.type+"'");}}f.i.send(e);return N(z,f.B,4);case 4:e.delete(),z.g=0}})})};
function Qb(a,b,c){return Y(a,function f(){var g,e,h,k,l,n,v=this,w,u,z,m,t,x,y,C;return O(f,function(D){switch(D.g){case 1:if(!c)return D.return(b);g={};e=0;h=M(Object.keys(c));for(k=h.next();!k.done;k=h.next())l=k.value,n=c[l],"string"!==typeof n&&"texture"===n.type&&void 0!==b[n.stream]&&++e;1<e&&(v.F=!1);w=M(Object.keys(c));k=w.next();case 2:if(k.done){D.g=4;break}u=k.value;z=c[u];if("string"===typeof z)return y=g,C=u,N(D,Rb(v,u,b[z]),13);m=b[z.stream];if("detection_list"===z.type){if(m){var K=
m.getRectList();for(var H=m.getLandmarksList(),p=m.getClassificationsList(),q=[],B=0;B<K.size();++B){var r=K.get(B);a:{var G=new vb;for(r=new Na(r);Oa(r);)switch(r.i){case 13:var E=S(r.g);X(G,1,E);break;case 21:E=S(r.g);X(G,2,E);break;case 29:E=S(r.g);X(G,3,E);break;case 37:E=S(r.g);X(G,4,E);break;case 45:E=S(r.g);X(G,5,E);break;case 48:for(var I=r.g,L=128,Ha=0,Z=E=0;4>Z&&128<=L;Z++)L=I.h[I.g++],Ha|=(L&127)<<7*Z;128<=L&&(L=I.h[I.g++],Ha|=(L&127)<<28,E|=(L&127)>>4);if(128<=L)for(Z=0;5>Z&&128<=L;Z++)L=
I.h[I.g++],E|=(L&127)<<7*Z+3;if(128>L){I=Ha>>>0;L=E>>>0;if(E=L&2147483648)I=~I+1>>>0,L=~L>>>0,0==I&&(L=L+1>>>0);I=4294967296*L+(I>>>0);E=E?-I:I}else I.l=!0,E=void 0;X(G,6,E);break;default:if(!mb(r))break a}}G={X:W(G,1),Y:W(G,2),height:W(G,3),width:W(G,4),rotation:W(G,5,0),V:kb(G,6)};r=zb(H.get(B));I=p.get(B);a:for(E=new pb,I=new Na(I);Oa(I);)switch(I.i){case 10:E.addClassification(Qa(I,new nb,ob));break;default:if(!mb(I))break a}G={R:G,M:r,L:xb(E)};q.push(G)}K=q}else K=[];g[u]=K;D.g=7;break}if("proto_list"===
z.type){if(m){K=Array(m.size());for(H=0;H<m.size();H++)K[H]=m.get(H);m.delete()}else K=[];g[u]=K;D.g=7;break}if(void 0===m){D.g=3;break}if("proto"===z.type){g[u]=m;D.g=7;break}if("texture"!==z.type)throw Error("Unknown output config type: '"+z.type+"'");t=v.s[u];t||(t=new Ab(v.h,v.C),v.s[u]=t);return N(D,Bb(t,m,v.F),12);case 12:x=D.h,g[u]=x;case 7:z.transform&&g[u]&&(g[u]=z.transform(g[u]));D.g=3;break;case 13:y[C]=D.h;case 3:k=w.next();D.g=2;break;case 4:return D.return(g)}})})}
function Rb(a,b,c){return Y(a,function f(){var g=this,e;return O(f,function(h){return"number"===typeof c||c instanceof Uint8Array||c instanceof g.h.Uint8BlobList?h.return(c):c instanceof g.h.Texture2dDataOut?(e=g.s[b],e||(e=new Ab(g.h,g.C),g.s[b]=e),h.return(Bb(e,c,g.F))):h.return(void 0)})})}
function Ob(a,b){for(var c=b.name||"$",d=[].concat(ea(b.wants)),f=new a.h.StringList,g=M(b.wants),e=g.next();!e.done;e=g.next())f.push_back(e.value);g=a.h.PacketListener.implement({onResults:function(h){for(var k={},l=0;l<b.wants.length;++l)k[d[l]]=h.get(l);var n=a.listeners[c];n&&(a.B=Qb(a,k,b.outs).then(function(v){v=n(v);for(var w=0;w<b.wants.length;++w){var u=k[d[w]];"object"===typeof u&&u.hasOwnProperty&&u.hasOwnProperty("delete")&&u.delete()}v&&(a.B=v)}))}});a.i.attachMultiListener(f,g);f.delete()}
A.onResults=function(a,b){this.listeners[b||"$"]=a};P("Solution",Jb);P("OptionType",{BOOL:0,NUMBER:1,Z:2,0:"BOOL",1:"NUMBER",2:"STRING"});function Sb(a){void 0===a&&(a=0);switch(a){case 1:return"pose_landmark_full.tflite";case 2:return"pose_landmark_heavy.tflite";default:return"pose_landmark_lite.tflite"}}
function Tb(a){var b=this;a=a||{};this.g=new Jb({locateFile:a.locateFile,files:function(c){return[{url:"pose_solution_packed_assets_loader.js"},{simd:!1,url:"pose_solution_wasm_bin.js"},{simd:!0,url:"pose_solution_simd_wasm_bin.js"},{data:!0,url:Sb(c.modelComplexity)}]},graph:{url:"pose_web.binarypb"},listeners:[{wants:["pose_landmarks","world_landmarks","segmentation_mask","image_transformed"],outs:{image:{type:"texture",stream:"image_transformed"},poseLandmarks:{type:"proto",stream:"pose_landmarks",
transform:zb},poseWorldLandmarks:{type:"proto",stream:"world_landmarks",transform:zb},segmentationMask:{type:"texture",stream:"segmentation_mask"}}}],inputs:{image:{type:"video",stream:"input_frames_gpu"}},options:{useCpuInference:{type:0,graphOptionXref:{calculatorType:"InferenceCalculator",fieldName:"use_cpu_inference"},default:"iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document},
selfieMode:{type:0,graphOptionXref:{calculatorType:"GlScalerCalculator",calculatorIndex:1,fieldName:"flip_horizontal"}},modelComplexity:{type:1,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorModelComplexity",fieldName:"int_value"},onChange:function(c){return Y(b,function f(){var g,e,h=this,k;return O(f,function(l){if(1==l.g)return g=Sb(c),e="third_party/mediapipe/modules/pose_landmark/"+g,N(l,Mb(h.g,g),2);k=l.h;h.g.overrideFile(e,k);return l.return(!0)})})}},
smoothLandmarks:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorSmoothLandmarks",fieldName:"bool_value"}},enableSegmentation:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorEnableSegmentation",fieldName:"bool_value"}},smoothSegmentation:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorSmoothSegmentation",
fieldName:"bool_value"}},minDetectionConfidence:{type:1,graphOptionXref:{calculatorType:"TensorsToDetectionsCalculator",calculatorName:"poselandmarkgpu__posedetectiongpu__TensorsToDetectionsCalculator",fieldName:"min_score_thresh"}},minTrackingConfidence:{type:1,graphOptionXref:{calculatorType:"ThresholdingCalculator",calculatorName:"poselandmarkgpu__poselandmarkbyroigpu__tensorstoposelandmarksandsegmentation__ThresholdingCalculator",fieldName:"threshold"}}}})}A=Tb.prototype;A.reset=function(){this.g.reset()};
A.close=function(){this.g.close();return Promise.resolve()};A.onResults=function(a){this.g.onResults(a)};A.initialize=function(){return Y(this,function b(){var c=this;return O(b,function(d){return N(d,c.g.initialize(),0)})})};A.send=function(a,b){return Y(this,function d(){var f=this;return O(d,function(g){return N(g,f.g.send(a,b),0)})})};A.setOptions=function(a){this.g.setOptions(a)};P("Pose",Tb);
P("POSE_CONNECTIONS",[[0,1],[1,2],[2,3],[3,7],[0,4],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[13,15],[15,17],[15,19],[15,21],[17,19],[12,14],[14,16],[16,18],[16,20],[16,22],[18,20],[11,23],[12,24],[23,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30],[29,31],[30,32],[27,31],[28,32]]);
P("POSE_LANDMARKS",{NOSE:0,LEFT_EYE_INNER:1,LEFT_EYE:2,LEFT_EYE_OUTER:3,RIGHT_EYE_INNER:4,RIGHT_EYE:5,RIGHT_EYE_OUTER:6,LEFT_EAR:7,RIGHT_EAR:8,LEFT_RIGHT:9,RIGHT_LEFT:10,LEFT_SHOULDER:11,RIGHT_SHOULDER:12,LEFT_ELBOW:13,RIGHT_ELBOW:14,LEFT_WRIST:15,RIGHT_WRIST:16,LEFT_PINKY:17,RIGHT_PINKY:18,LEFT_INDEX:19,RIGHT_INDEX:20,LEFT_THUMB:21,RIGHT_THUMB:22,LEFT_HIP:23,RIGHT_HIP:24,LEFT_KNEE:25,RIGHT_KNEE:26,LEFT_ANKLE:27,RIGHT_ANKLE:28,LEFT_HEEL:29,RIGHT_HEEL:30,LEFT_FOOT_INDEX:31,RIGHT_FOOT_INDEX:32});
P("POSE_LANDMARKS_LEFT",{LEFT_EYE_INNER:1,LEFT_EYE:2,LEFT_EYE_OUTER:3,LEFT_EAR:7,LEFT_RIGHT:9,LEFT_SHOULDER:11,LEFT_ELBOW:13,LEFT_WRIST:15,LEFT_PINKY:17,LEFT_INDEX:19,LEFT_THUMB:21,LEFT_HIP:23,LEFT_KNEE:25,LEFT_ANKLE:27,LEFT_HEEL:29,LEFT_FOOT_INDEX:31});
P("POSE_LANDMARKS_RIGHT",{RIGHT_EYE_INNER:4,RIGHT_EYE:5,RIGHT_EYE_OUTER:6,RIGHT_EAR:8,RIGHT_LEFT:10,RIGHT_SHOULDER:12,RIGHT_ELBOW:14,RIGHT_WRIST:16,RIGHT_PINKY:18,RIGHT_INDEX:20,RIGHT_THUMB:22,RIGHT_HIP:24,RIGHT_KNEE:26,RIGHT_ANKLE:28,RIGHT_HEEL:30,RIGHT_FOOT_INDEX:32});P("POSE_LANDMARKS_NEUTRAL",{NOSE:0});P("VERSION","0.4.1630009814");}).call(this);

},{}],"Sk1f":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KernelBackend = exports.DataStorage = exports.EPSILON_FLOAT16 = exports.EPSILON_FLOAT32 = void 0;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EPSILON_FLOAT32 = 1e-7;
exports.EPSILON_FLOAT32 = EPSILON_FLOAT32;
const EPSILON_FLOAT16 = 1e-4;
/** Convenient class for storing tensor-related data. */

exports.EPSILON_FLOAT16 = EPSILON_FLOAT16;

class DataStorage {
  constructor(backend, dataMover) {
    this.backend = backend;
    this.dataMover = dataMover;
    this.data = new WeakMap();
    this.dataIdsCount = 0;
  }

  get(dataId) {
    if (!this.data.has(dataId)) {
      this.dataMover.moveData(this.backend, dataId);
    }

    return this.data.get(dataId);
  }

  set(dataId, value) {
    this.dataIdsCount++;
    this.data.set(dataId, value);
  }

  has(dataId) {
    return this.data.has(dataId);
  }

  delete(dataId) {
    this.dataIdsCount--;
    return this.data.delete(dataId);
  }

  numDataIds() {
    return this.dataIdsCount;
  }

}
/**
 * The interface that defines the kernels that should be implemented when
 * adding a new backend. New backends don't need to implement every one of the
 * methods, this can be done gradually (throw an error for unimplemented
 * methods).
 */


exports.DataStorage = DataStorage;

class KernelBackend {
  refCount(dataId) {
    return notYetImplemented('refCount');
  }

  incRef(dataId) {
    return notYetImplemented('incRef');
  }

  timerAvailable() {
    return true;
  }

  time(f) {
    return notYetImplemented('time');
  }

  read(dataId) {
    return notYetImplemented('read');
  }

  readSync(dataId) {
    return notYetImplemented('readSync');
  }

  numDataIds() {
    return notYetImplemented('numDataIds');
  }

  disposeData(dataId, force) {
    return notYetImplemented('disposeData');
  }

  write(values, shape, dtype) {
    return notYetImplemented('write');
  }

  move(dataId, values, shape, dtype, refCount) {
    return notYetImplemented('move');
  }

  memory() {
    return notYetImplemented('memory');
  }
  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */


  floatPrecision() {
    return notYetImplemented('floatPrecision');
  }
  /** Returns the smallest representable number.  */


  epsilon() {
    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
  }

  dispose() {
    return notYetImplemented('dispose');
  }

}

exports.KernelBackend = KernelBackend;

function notYetImplemented(kernelName) {
  throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` + `This kernel may not be supported by the tfjs backend you have chosen`);
}
},{}],"uID4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shuffle = shuffle;
exports.shuffleCombo = shuffleCombo;
exports.clamp = clamp;
exports.nearestLargerEven = nearestLargerEven;
exports.swap = swap;
exports.sum = sum;
exports.randUniform = randUniform;
exports.distSquared = distSquared;
exports.assert = assert;
exports.assertShapesMatch = assertShapesMatch;
exports.assertNonNull = assertNonNull;
exports.flatten = flatten;
exports.sizeFromShape = sizeFromShape;
exports.isScalarShape = isScalarShape;
exports.arraysEqual = arraysEqual;
exports.isInt = isInt;
exports.tanh = tanh;
exports.sizeToSquarishShape = sizeToSquarishShape;
exports.createShuffledIndices = createShuffledIndices;
exports.rightPad = rightPad;
exports.repeatedTry = repeatedTry;
exports.inferFromImplicitShape = inferFromImplicitShape;
exports.parseAxisParam = parseAxisParam;
exports.squeezeShape = squeezeShape;
exports.getTypedArrayFromDType = getTypedArrayFromDType;
exports.getArrayFromDType = getArrayFromDType;
exports.checkConversionForErrors = checkConversionForErrors;
exports.isValidDtype = isValidDtype;
exports.hasEncodingLoss = hasEncodingLoss;
exports.isTypedArray = isTypedArray;
exports.bytesPerElement = bytesPerElement;
exports.bytesFromStringArray = bytesFromStringArray;
exports.isString = isString;
exports.isBoolean = isBoolean;
exports.isNumber = isNumber;
exports.inferDtype = inferDtype;
exports.isFunction = isFunction;
exports.nearestDivisor = nearestDivisor;
exports.computeStrides = computeStrides;
exports.toNestedArray = toNestedArray;
exports.makeOnesTypedArray = makeOnesTypedArray;
exports.makeZerosTypedArray = makeZerosTypedArray;
exports.makeZerosNestedTypedArray = makeZerosNestedTypedArray;
exports.assertNonNegativeIntegerDimensions = assertNonNegativeIntegerDimensions;
exports.locToIndex = locToIndex;
exports.indexToLoc = indexToLoc;
exports.isPromise = isPromise;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Shuffles the array in-place using Fisher-Yates algorithm.
 *
 * ```js
 * const a = [1, 2, 3, 4, 5];
 * tf.util.shuffle(a);
 * console.log(a);
 * ```
 *
 * @param array The array to shuffle in-place.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
// tslint:disable-next-line:no-any
function shuffle(array) {
  let counter = array.length;
  let index = 0; // While there are elements in the array

  while (counter > 0) {
    // Pick a random index
    index = Math.random() * counter | 0; // Decrease counter by 1

    counter--; // And swap the last element with it

    swap(array, counter, index);
  }
}
/**
 * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.
 *
 * ```js
 * const a = [1,2,3,4,5];
 * const b = [11,22,33,44,55];
 * tf.util.shuffleCombo(a, b);
 * console.log(a, b);
 * ```
 *
 * @param array The first array to shuffle in-place.
 * @param array2 The second array to shuffle in-place with the same permutation
 *     as the first array.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */


function shuffleCombo( // tslint:disable-next-line:no-any
array, // tslint:disable-next-line:no-any
array2) {
  if (array.length !== array2.length) {
    throw new Error(`Array sizes must match to be shuffled together ` + `First array length was ${array.length}` + `Second array length was ${array2.length}`);
  }

  let counter = array.length;
  let index = 0; // While there are elements in the array

  while (counter > 0) {
    // Pick a random index
    index = Math.random() * counter | 0; // Decrease counter by 1

    counter--; // And swap the last element of each array with it

    swap(array, counter, index);
    swap(array2, counter, index);
  }
}
/** Clamps a value to a specified range. */


function clamp(min, x, max) {
  return Math.max(min, Math.min(x, max));
}

function nearestLargerEven(val) {
  return val % 2 === 0 ? val : val + 1;
}

function swap(object, left, right) {
  const temp = object[left];
  object[left] = object[right];
  object[right] = temp;
}

function sum(arr) {
  let sum = 0;

  for (let i = 0; i < arr.length; i++) {
    sum += arr[i];
  }

  return sum;
}
/**
 * Returns a sample from a uniform [a, b) distribution.
 *
 * @param a The minimum support (inclusive).
 * @param b The maximum support (exclusive).
 * @return A pseudorandom number on the half-open interval [a,b).
 */


function randUniform(a, b) {
  const r = Math.random();
  return b * r + (1 - r) * a;
}
/** Returns the squared Euclidean distance between two vectors. */


function distSquared(a, b) {
  let result = 0;

  for (let i = 0; i < a.length; i++) {
    const diff = Number(a[i]) - Number(b[i]);
    result += diff * diff;
  }

  return result;
}
/**
 * Asserts that the expression is true. Otherwise throws an error with the
 * provided message.
 *
 * ```js
 * const x = 2;
 * tf.util.assert(x === 2, 'x is not 2');
 * ```
 *
 * @param expr The expression to assert (as a boolean).
 * @param msg A function that returns the message to report when throwing an
 *     error. We use a function for performance reasons.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */


function assert(expr, msg) {
  if (!expr) {
    throw new Error(typeof msg === 'string' ? msg : msg());
  }
}

function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {
  assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
}

function assertNonNull(a) {
  assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);
} // NOTE: We explicitly type out what T extends instead of any so that
// util.flatten on a nested array of number doesn't try to infer T as a
// number[][], causing us to explicitly type util.flatten<number>().

/**
 *  Flattens an arbitrarily nested array.
 *
 * ```js
 * const a = [[1, 2], [3, 4], [5, [6, [7]]]];
 * const flat = tf.util.flatten(a);
 * console.log(flat);
 * ```
 *
 *  @param arr The nested array to flatten.
 *  @param result The destination array which holds the elements.
 *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults
 *      to false.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */


function flatten(arr, result = [], skipTypedArray = false) {
  if (result == null) {
    result = [];
  }

  if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {
    for (let i = 0; i < arr.length; ++i) {
      flatten(arr[i], result, skipTypedArray);
    }
  } else {
    result.push(arr);
  }

  return result;
}
/**
 * Returns the size (number of elements) of the tensor given its shape.
 *
 * ```js
 * const shape = [3, 4, 2];
 * const size = tf.util.sizeFromShape(shape);
 * console.log(size);
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */


function sizeFromShape(shape) {
  if (shape.length === 0) {
    // Scalar.
    return 1;
  }

  let size = shape[0];

  for (let i = 1; i < shape.length; i++) {
    size *= shape[i];
  }

  return size;
}

function isScalarShape(shape) {
  return shape.length === 0;
}

function arraysEqual(n1, n2) {
  if (n1 === n2) {
    return true;
  }

  if (n1 == null || n2 == null) {
    return false;
  }

  if (n1.length !== n2.length) {
    return false;
  }

  for (let i = 0; i < n1.length; i++) {
    if (n1[i] !== n2[i]) {
      return false;
    }
  }

  return true;
}

function isInt(a) {
  return a % 1 === 0;
}

function tanh(x) {
  // tslint:disable-next-line:no-any
  if (Math.tanh != null) {
    // tslint:disable-next-line:no-any
    return Math.tanh(x);
  }

  if (x === Infinity) {
    return 1;
  } else if (x === -Infinity) {
    return -1;
  } else {
    const e2x = Math.exp(2 * x);
    return (e2x - 1) / (e2x + 1);
  }
}

function sizeToSquarishShape(size) {
  const width = Math.ceil(Math.sqrt(size));
  return [width, Math.ceil(size / width)];
}
/**
 * Creates a new array with randomized indicies to a given quantity.
 *
 * ```js
 * const randomTen = tf.util.createShuffledIndices(10);
 * console.log(randomTen);
 * ```
 *
 * @param number Quantity of how many shuffled indicies to create.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */


function createShuffledIndices(n) {
  const shuffledIndices = new Uint32Array(n);

  for (let i = 0; i < n; ++i) {
    shuffledIndices[i] = i;
  }

  shuffle(shuffledIndices);
  return shuffledIndices;
}

function rightPad(a, size) {
  if (size <= a.length) {
    return a;
  }

  return a + ' '.repeat(size - a.length);
}

function repeatedTry(checkFn, delayFn = counter => 0, maxCounter) {
  return new Promise((resolve, reject) => {
    let tryCount = 0;

    const tryFn = () => {
      if (checkFn()) {
        resolve();
        return;
      }

      tryCount++;
      const nextBackoff = delayFn(tryCount);

      if (maxCounter != null && tryCount >= maxCounter) {
        reject();
        return;
      }

      setTimeout(tryFn, nextBackoff);
    };

    tryFn();
  });
}
/**
 * Given the full size of the array and a shape that may contain -1 as the
 * implicit dimension, returns the inferred shape where -1 is replaced.
 * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].
 *
 * @param shape The shape, which may contain -1 in some dimension.
 * @param size The full size (number of elements) of the array.
 * @return The inferred shape where -1 is replaced with the inferred size.
 */


function inferFromImplicitShape(shape, size) {
  let shapeProd = 1;
  let implicitIdx = -1;

  for (let i = 0; i < shape.length; ++i) {
    if (shape[i] >= 0) {
      shapeProd *= shape[i];
    } else if (shape[i] === -1) {
      if (implicitIdx !== -1) {
        throw Error(`Shapes can only have 1 implicit size. ` + `Found -1 at dim ${implicitIdx} and dim ${i}`);
      }

      implicitIdx = i;
    } else if (shape[i] < 0) {
      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);
    }
  }

  if (implicitIdx === -1) {
    if (size > 0 && size !== shapeProd) {
      throw Error(`Size(${size}) must match the product of shape ${shape}`);
    }

    return shape;
  }

  if (shapeProd === 0) {
    throw Error(`Cannot infer the missing size in [${shape}] when ` + `there are 0 elements`);
  }

  if (size % shapeProd !== 0) {
    throw Error(`The implicit shape can't be a fractional number. ` + `Got ${size} / ${shapeProd}`);
  }

  const newShape = shape.slice();
  newShape[implicitIdx] = size / shapeProd;
  return newShape;
}

function parseAxisParam(axis, shape) {
  const rank = shape.length; // Normalize input

  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis); // Check for valid range

  assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` + `got axis ${axis}`); // Check for only integers

  assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` + `got axis ${axis}`); // Handle negative axis.

  return axis.map(a => a < 0 ? rank + a : a);
}
/** Reduces the shape by removing all dimensions of shape 1. */


function squeezeShape(shape, axis) {
  const newShape = [];
  const keptDims = [];
  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;
  const axes = axis == null || isEmptyArray ? null : parseAxisParam(axis, shape).sort();
  let j = 0;

  for (let i = 0; i < shape.length; ++i) {
    if (axes != null) {
      if (axes[j] === i && shape[i] !== 1) {
        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);
      }

      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {
        newShape.push(shape[i]);
        keptDims.push(i);
      }

      if (axes[j] <= i) {
        j++;
      }
    }

    if (shape[i] !== 1) {
      newShape.push(shape[i]);
      keptDims.push(i);
    }
  }

  return {
    newShape,
    keptDims
  };
}

function getTypedArrayFromDType(dtype, size) {
  let values = null;

  if (dtype == null || dtype === 'float32') {
    values = new Float32Array(size);
  } else if (dtype === 'int32') {
    values = new Int32Array(size);
  } else if (dtype === 'bool') {
    values = new Uint8Array(size);
  } else {
    throw new Error(`Unknown data type ${dtype}`);
  }

  return values;
}

function getArrayFromDType(dtype, size) {
  let values = null;

  if (dtype == null || dtype === 'float32') {
    values = new Float32Array(size);
  } else if (dtype === 'int32') {
    values = new Int32Array(size);
  } else if (dtype === 'bool') {
    values = new Uint8Array(size);
  } else if (dtype === 'string') {
    values = new Array(size);
  } else {
    throw new Error(`Unknown data type ${dtype}`);
  }

  return values;
}

function checkConversionForErrors(vals, dtype) {
  for (let i = 0; i < vals.length; i++) {
    const num = vals[i];

    if (isNaN(num) || !isFinite(num)) {
      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);
    }
  }
}
/** Returns true if the dtype is valid. */


function isValidDtype(dtype) {
  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' || dtype === 'int32' || dtype === 'string';
}
/**
 * Returns true if the new type can't encode the old type without loss of
 * precision.
 */


function hasEncodingLoss(oldType, newType) {
  if (newType === 'complex64') {
    return false;
  }

  if (newType === 'float32' && oldType !== 'complex64') {
    return false;
  }

  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {
    return false;
  }

  if (newType === 'bool' && oldType === 'bool') {
    return false;
  }

  return true;
}

function isTypedArray(a) {
  return a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array;
}

function bytesPerElement(dtype) {
  if (dtype === 'float32' || dtype === 'int32') {
    return 4;
  } else if (dtype === 'complex64') {
    return 8;
  } else if (dtype === 'bool') {
    return 1;
  } else {
    throw new Error(`Unknown dtype ${dtype}`);
  }
}
/**
 * Returns the approximate number of bytes allocated in the string array - 2
 * bytes per character. Computing the exact bytes for a native string in JS is
 * not possible since it depends on the encoding of the html page that serves
 * the website.
 */


function bytesFromStringArray(arr) {
  if (arr == null) {
    return 0;
  }

  let bytes = 0;
  arr.forEach(x => bytes += x.length);
  return bytes;
}
/** Returns true if the value is a string. */


function isString(value) {
  return typeof value === 'string' || value instanceof String;
}

function isBoolean(value) {
  return typeof value === 'boolean';
}

function isNumber(value) {
  return typeof value === 'number';
}

function inferDtype(values) {
  if (Array.isArray(values)) {
    return inferDtype(values[0]);
  }

  if (values instanceof Float32Array) {
    return 'float32';
  } else if (values instanceof Int32Array || values instanceof Uint8Array) {
    return 'int32';
  } else if (isNumber(values)) {
    return 'float32';
  } else if (isString(values)) {
    return 'string';
  } else if (isBoolean(values)) {
    return 'bool';
  }

  return 'float32';
}

function isFunction(f) {
  return !!(f && f.constructor && f.call && f.apply);
}

function nearestDivisor(size, start) {
  for (let i = start; i < size; ++i) {
    if (size % i === 0) {
      return i;
    }
  }

  return size;
}

function computeStrides(shape) {
  const rank = shape.length;

  if (rank < 2) {
    return [];
  } // Last dimension has implicit stride of 1, thus having D-1 (instead of D)
  // strides.


  const strides = new Array(rank - 1);
  strides[rank - 2] = shape[rank - 1];

  for (let i = rank - 3; i >= 0; --i) {
    strides[i] = strides[i + 1] * shape[i + 1];
  }

  return strides;
}

function createNestedArray(offset, shape, a, isComplex = false) {
  const ret = new Array();

  if (shape.length === 1) {
    const d = shape[0] * (isComplex ? 2 : 1);

    for (let i = 0; i < d; i++) {
      ret[i] = a[offset + i];
    }
  } else {
    const d = shape[0];
    const rest = shape.slice(1);
    const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);

    for (let i = 0; i < d; i++) {
      ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);
    }
  }

  return ret;
} // Provide a nested array of TypedArray in given shape.


function toNestedArray(shape, a, isComplex = false) {
  if (shape.length === 0) {
    // Scalar type should return a single number.
    return a[0];
  }

  const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);

  if (size === 0) {
    // A tensor with shape zero should be turned into empty list.
    return [];
  }

  if (size !== a.length) {
    throw new Error(`[${shape}] does not match the input size ${a.length}${isComplex ? ' for a complex tensor' : ''}.`);
  }

  return createNestedArray(0, shape, a, isComplex);
}

function makeOnesTypedArray(size, dtype) {
  const array = makeZerosTypedArray(size, dtype);

  for (let i = 0; i < array.length; i++) {
    array[i] = 1;
  }

  return array;
}

function makeZerosTypedArray(size, dtype) {
  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
    return new Float32Array(size);
  } else if (dtype === 'int32') {
    return new Int32Array(size);
  } else if (dtype === 'bool') {
    return new Uint8Array(size);
  } else {
    throw new Error(`Unknown data type ${dtype}`);
  }
}
/**
 * Make nested `TypedArray` filled with zeros.
 * @param shape The shape information for the nested array.
 * @param dtype dtype of the array element.
 */


function makeZerosNestedTypedArray(shape, dtype) {
  const size = shape.reduce((prev, curr) => prev * curr, 1);

  if (dtype == null || dtype === 'float32') {
    return toNestedArray(shape, new Float32Array(size));
  } else if (dtype === 'int32') {
    return toNestedArray(shape, new Int32Array(size));
  } else if (dtype === 'bool') {
    return toNestedArray(shape, new Uint8Array(size));
  } else {
    throw new Error(`Unknown data type ${dtype}`);
  }
}

function assertNonNegativeIntegerDimensions(shape) {
  shape.forEach(dimSize => {
    assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` + `shape [${shape}].`);
  });
}
/**
 * Computes flat index for a given location (multidimentionsal index) in a
 * Tensor/multidimensional array.
 *
 * @param locs Location in the tensor.
 * @param rank Rank of the tensor.
 * @param strides Tensor strides.
 */


function locToIndex(locs, rank, strides) {
  if (rank === 0) {
    return 0;
  } else if (rank === 1) {
    return locs[0];
  }

  let index = locs[locs.length - 1];

  for (let i = 0; i < locs.length - 1; ++i) {
    index += strides[i] * locs[i];
  }

  return index;
}
/**
 * Computes the location (multidimensional index) in a tensor/multidimentional
 * array for a given flat index.
 *
 * @param index Index in flat array.
 * @param rank Rank of tensor.
 * @param strides Strides of tensor.
 */


function indexToLoc(index, rank, strides) {
  if (rank === 0) {
    return [];
  } else if (rank === 1) {
    return [index];
  }

  const locs = new Array(rank);

  for (let i = 0; i < locs.length - 1; ++i) {
    locs[i] = Math.floor(index / strides[i]);
    index -= locs[i] * strides[i];
  }

  locs[locs.length - 1] = index;
  return locs;
}
/**
 * This method asserts whether an object is a Promise instance.
 * @param object
 */
// tslint:disable-next-line: no-any


function isPromise(object) {
  //  We chose to not use 'obj instanceOf Promise' for two reasons:
  //  1. It only reliably works for es6 Promise, not other Promise
  //  implementations.
  //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch
  //  the async calls, so it is possible the obj (patched) is comparing to a
  //  pre-patched Promise.
  return object && object.then && typeof object.then === 'function';
}
},{}],"vpgN":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueryParams = getQueryParams;
exports.env = env;
exports.setEnvironmentGlobal = setEnvironmentGlobal;
exports.ENV = exports.Environment = void 0;

var _util_base = require("./util_base");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.
const TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';
/**
 * The environment contains evaluated flags as well as the registered platform.
 * This is always used as a global singleton and can be retrieved with
 * `tf.env()`.
 *
 * @doc {heading: 'Environment'}
 */

class Environment {
  // tslint:disable-next-line: no-any
  constructor(global) {
    this.global = global;
    this.flags = {};
    this.flagRegistry = {};
    this.urlFlags = {}; // Jasmine spies on this in 'environment_test.ts'

    this.getQueryParams = getQueryParams;
    this.populateURLFlags();
  }

  setPlatform(platformName, platform) {
    if (this.platform != null) {
      console.warn(`Platform ${this.platformName} has already been set. ` + `Overwriting the platform with ${platform}.`);
    }

    this.platformName = platformName;
    this.platform = platform;
  }

  registerFlag(flagName, evaluationFn, setHook) {
    this.flagRegistry[flagName] = {
      evaluationFn,
      setHook
    }; // Override the flag value from the URL. This has to happen here because the
    // environment is initialized before flags get registered.

    if (this.urlFlags[flagName] != null) {
      const flagValue = this.urlFlags[flagName];
      console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);
      this.set(flagName, flagValue);
    }
  }

  async getAsync(flagName) {
    if (flagName in this.flags) {
      return this.flags[flagName];
    }

    this.flags[flagName] = await this.evaluateFlag(flagName);
    return this.flags[flagName];
  }

  get(flagName) {
    if (flagName in this.flags) {
      return this.flags[flagName];
    }

    const flagValue = this.evaluateFlag(flagName);

    if ((0, _util_base.isPromise)(flagValue)) {
      throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` + `Please use getAsync() instead.`);
    }

    this.flags[flagName] = flagValue;
    return this.flags[flagName];
  }

  getNumber(flagName) {
    return this.get(flagName);
  }

  getBool(flagName) {
    return this.get(flagName);
  }

  getFlags() {
    return this.flags;
  } // For backwards compatibility.


  get features() {
    return this.flags;
  }

  set(flagName, value) {
    if (this.flagRegistry[flagName] == null) {
      throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);
    }

    this.flags[flagName] = value;

    if (this.flagRegistry[flagName].setHook != null) {
      this.flagRegistry[flagName].setHook(value);
    }
  }

  evaluateFlag(flagName) {
    if (this.flagRegistry[flagName] == null) {
      throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);
    }

    return this.flagRegistry[flagName].evaluationFn();
  }

  setFlags(flags) {
    this.flags = Object.assign({}, flags);
  }

  reset() {
    this.flags = {};
    this.urlFlags = {};
    this.populateURLFlags();
  }

  populateURLFlags() {
    if (typeof this.global === 'undefined' || typeof this.global.location === 'undefined' || typeof this.global.location.search === 'undefined') {
      return;
    }

    const urlParams = this.getQueryParams(this.global.location.search);

    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {
      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');
      keyValues.forEach(keyValue => {
        const [key, value] = keyValue.split(':');
        this.urlFlags[key] = parseValue(key, value);
      });
    }
  }

}

exports.Environment = Environment;

function getQueryParams(queryString) {
  const params = {};
  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {
    decodeParam(params, t[0], t[1]);
    return t.join('=');
  });
  return params;
}

function decodeParam(params, name, value) {
  params[decodeURIComponent(name)] = decodeURIComponent(value || '');
}

function parseValue(flagName, value) {
  value = value.toLowerCase();

  if (value === 'true' || value === 'false') {
    return value === 'true';
  } else if (`${+value}` === value) {
    return +value;
  }

  throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);
}
/**
 * Returns the current environment (a global singleton).
 *
 * The environment object contains the evaluated feature values as well as the
 * active platform.
 *
 * @doc {heading: 'Environment'}
 */


function env() {
  return ENV;
}

let ENV = null;
exports.ENV = ENV;

function setEnvironmentGlobal(environment) {
  exports.ENV = ENV = environment;
}
},{"./util_base":"uID4"}],"UloM":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"TJmh":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGlobalNamespace = getGlobalNamespace;
exports.getGlobal = getGlobal;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Note that the identifier globalNameSpace is scoped to this module, but will
// always resolve to the same global object regardless of how the module is
// resolved.
// tslint:disable-next-line:no-any
let globalNameSpace; // tslint:disable-next-line:no-any

function getGlobalNamespace() {
  if (globalNameSpace == null) {
    // tslint:disable-next-line:no-any
    let ns;

    if (typeof window !== 'undefined') {
      ns = window;
    } else if (typeof global !== 'undefined') {
      ns = global;
    } else if (typeof process !== 'undefined') {
      ns = process;
    } else if (typeof self !== 'undefined') {
      ns = self;
    } else {
      throw new Error('Could not find a global object');
    }

    globalNameSpace = ns;
  }

  return globalNameSpace;
} // tslint:disable-next-line:no-any


function getGlobalMap() {
  const ns = getGlobalNamespace();

  if (ns._tfGlobals == null) {
    ns._tfGlobals = new Map();
  }

  return ns._tfGlobals;
}
/**
 * Returns a globally accessible 'singleton' object.
 *
 * @param key the name of the object
 * @param init a function to initialize to initialize this object
 *             the first time it is fetched.
 */


function getGlobal(key, init) {
  const globalMap = getGlobalMap();

  if (globalMap.has(key)) {
    return globalMap.get(key);
  } else {
    const singleton = init();
    globalMap.set(key, singleton);
    return globalMap.get(key);
  }
}
},{"process":"UloM"}],"rJl6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotEqual = exports.Neg = exports.Multiply = exports.Multinomial = exports.Mod = exports.MirrorPad = exports.Minimum = exports.Min = exports.Mean = exports.MaxPoolWithArgmax = exports.MaxPool3DGrad = exports.MaxPool3D = exports.MaxPoolGrad = exports.MaxPool = exports.Maximum = exports.Max = exports.LRNGrad = exports.LRN = exports.LogSoftmax = exports.LogicalOr = exports.LogicalNot = exports.LogicalAnd = exports.Log1p = exports.Log = exports.LinSpace = exports.LessEqual = exports.Less = exports.LeakyRelu = exports.IsNan = exports.IsInf = exports.IsFinite = exports.Imag = exports.IFFT = exports.Identity = exports.GreaterEqual = exports.Greater = exports.GatherNd = exports.GatherV2 = exports.FusedBatchNorm = exports.FloorDiv = exports.Floor = exports.FlipLeftRight = exports.Fill = exports.FFT = exports.Expm1 = exports.ExpandDims = exports.Exp = exports.Equal = exports.Erf = exports.EluGrad = exports.Elu = exports.Einsum = exports.RealDiv = exports.Dilation2DBackpropFilter = exports.Dilation2DBackpropInput = exports.Dilation2D = exports.Diag = exports.DepthwiseConv2dNativeBackpropInput = exports.DepthwiseConv2dNativeBackpropFilter = exports.DepthwiseConv2dNative = exports.DepthToSpace = exports.DenseBincount = exports.CropAndResize = exports.Cumsum = exports.Cosh = exports.Cos = exports.Conv3DBackpropInputV2 = exports.Conv3DBackpropFilterV2 = exports.Conv3D = exports.Conv2DBackpropInput = exports.Conv2DBackpropFilter = exports.Conv2D = exports.Concat = exports.ComplexAbs = exports.Complex = exports.ClipByValue = exports.Ceil = exports.Cast = exports.BroadcastTo = exports.Bincount = exports.BatchToSpaceND = exports.BatchMatMul = exports.AvgPool3DGrad = exports.AvgPool3D = exports.AvgPoolGrad = exports.AvgPool = exports.Atan2 = exports.Atanh = exports.Atan = exports.Asinh = exports.Asin = exports.ArgMin = exports.ArgMax = exports.Any = exports.All = exports.AddN = exports.Add = exports.Acosh = exports.Acos = exports.Abs = void 0;
exports.FusedDepthwiseConv2D = exports.FusedConv2D = exports._FusedMatMul = exports.RotateWithOffset = exports.FromPixels = exports.Step = exports.ZerosLike = exports.UnsortedSegmentSum = exports.Unpack = exports.Unique = exports.Transpose = exports.Transform = exports.TopK = exports.Tile = exports.Tanh = exports.Tan = exports.Sub = exports.StringToHashBucketFast = exports.StringSplit = exports.StringNGrams = exports.StridedSlice = exports.Square = exports.SquaredDifference = exports.SparseToDense = exports.SparseSegmentSum = exports.SparseSegmentMean = exports.SparseReshape = exports.SparseFillEmptyRows = exports.Softmax = exports.SplitV = exports.SpaceToBatchND = exports.Sum = exports.Sqrt = exports.Softplus = exports.Sigmoid = exports.Sign = exports.Sinh = exports.Sin = exports.Slice = exports.Selu = exports.Select = exports.ScatterNd = exports.Rsqrt = exports.Round = exports.Reverse = exports.Relu6 = exports.ResizeBilinearGrad = exports.ResizeBilinear = exports.ResizeNearestNeighborGrad = exports.ResizeNearestNeighbor = exports.Reshape = exports.Relu = exports.Reciprocal = exports.Real = exports.Range = exports.Prod = exports.Prelu = exports.Pow = exports.Pool = exports.PadV2 = exports.Pack = exports.OneHot = exports.OnesLike = exports.NonMaxSuppressionV5 = exports.NonMaxSuppressionV4 = exports.NonMaxSuppressionV3 = void 0;
const Abs = 'Abs';
exports.Abs = Abs;
const Acos = 'Acos';
exports.Acos = Acos;
const Acosh = 'Acosh';
exports.Acosh = Acosh;
const Add = 'Add';
exports.Add = Add;
const AddN = 'AddN';
exports.AddN = AddN;
const All = 'All';
exports.All = All;
const Any = 'Any';
exports.Any = Any;
const ArgMax = 'ArgMax';
exports.ArgMax = ArgMax;
const ArgMin = 'ArgMin';
exports.ArgMin = ArgMin;
const Asin = 'Asin';
exports.Asin = Asin;
const Asinh = 'Asinh';
exports.Asinh = Asinh;
const Atan = 'Atan';
exports.Atan = Atan;
const Atanh = 'Atanh';
exports.Atanh = Atanh;
const Atan2 = 'Atan2';
exports.Atan2 = Atan2;
const AvgPool = 'AvgPool';
exports.AvgPool = AvgPool;
const AvgPoolGrad = 'AvgPoolGrad';
exports.AvgPoolGrad = AvgPoolGrad;
const AvgPool3D = 'AvgPool3D';
exports.AvgPool3D = AvgPool3D;
const AvgPool3DGrad = 'AvgPool3DGrad';
exports.AvgPool3DGrad = AvgPool3DGrad;
const BatchMatMul = 'BatchMatMul';
exports.BatchMatMul = BatchMatMul;
const BatchToSpaceND = 'BatchToSpaceND';
exports.BatchToSpaceND = BatchToSpaceND;
const Bincount = 'Bincount';
exports.Bincount = Bincount;
const BroadcastTo = 'BroadcastTo';
exports.BroadcastTo = BroadcastTo;
const Cast = 'Cast';
exports.Cast = Cast;
const Ceil = 'Ceil';
exports.Ceil = Ceil;
const ClipByValue = 'ClipByValue';
exports.ClipByValue = ClipByValue;
const Complex = 'Complex';
exports.Complex = Complex;
const ComplexAbs = 'ComplexAbs';
exports.ComplexAbs = ComplexAbs;
const Concat = 'Concat';
exports.Concat = Concat;
const Conv2D = 'Conv2D';
exports.Conv2D = Conv2D;
const Conv2DBackpropFilter = 'Conv2DBackpropFilter';
exports.Conv2DBackpropFilter = Conv2DBackpropFilter;
const Conv2DBackpropInput = 'Conv2DBackpropInput';
exports.Conv2DBackpropInput = Conv2DBackpropInput;
const Conv3D = 'Conv3D';
exports.Conv3D = Conv3D;
const Conv3DBackpropFilterV2 = 'Conv3DBackpropFilterV2';
exports.Conv3DBackpropFilterV2 = Conv3DBackpropFilterV2;
const Conv3DBackpropInputV2 = 'Conv3DBackpropInputV2';
exports.Conv3DBackpropInputV2 = Conv3DBackpropInputV2;
const Cos = 'Cos';
exports.Cos = Cos;
const Cosh = 'Cosh';
exports.Cosh = Cosh;
const Cumsum = 'Cumsum';
exports.Cumsum = Cumsum;
const CropAndResize = 'CropAndResize';
exports.CropAndResize = CropAndResize;
const DenseBincount = 'DenseBincount';
exports.DenseBincount = DenseBincount;
const DepthToSpace = 'DepthToSpace';
exports.DepthToSpace = DepthToSpace;
const DepthwiseConv2dNative = 'DepthwiseConv2dNative';
exports.DepthwiseConv2dNative = DepthwiseConv2dNative;
const DepthwiseConv2dNativeBackpropFilter = 'DepthwiseConv2dNativeBackpropFilter';
exports.DepthwiseConv2dNativeBackpropFilter = DepthwiseConv2dNativeBackpropFilter;
const DepthwiseConv2dNativeBackpropInput = 'DepthwiseConv2dNativeBackpropInput';
exports.DepthwiseConv2dNativeBackpropInput = DepthwiseConv2dNativeBackpropInput;
const Diag = 'Diag';
exports.Diag = Diag;
const Dilation2D = 'Dilation2D';
exports.Dilation2D = Dilation2D;
const Dilation2DBackpropInput = 'Dilation2DBackpropInput';
exports.Dilation2DBackpropInput = Dilation2DBackpropInput;
const Dilation2DBackpropFilter = 'Dilation2DBackpropFilter';
exports.Dilation2DBackpropFilter = Dilation2DBackpropFilter;
const RealDiv = 'RealDiv';
exports.RealDiv = RealDiv;
const Einsum = 'Einsum';
exports.Einsum = Einsum;
const Elu = 'Elu';
exports.Elu = Elu;
const EluGrad = 'EluGrad';
exports.EluGrad = EluGrad;
const Erf = 'Erf';
exports.Erf = Erf;
const Equal = 'Equal';
exports.Equal = Equal;
const Exp = 'Exp';
exports.Exp = Exp;
const ExpandDims = 'ExpandDims';
exports.ExpandDims = ExpandDims;
const Expm1 = 'Expm1';
exports.Expm1 = Expm1;
const FFT = 'FFT';
exports.FFT = FFT;
const Fill = 'Fill';
exports.Fill = Fill;
const FlipLeftRight = 'FlipLeftRight';
exports.FlipLeftRight = FlipLeftRight;
const Floor = 'Floor';
exports.Floor = Floor;
const FloorDiv = 'FloorDiv';
exports.FloorDiv = FloorDiv;
const FusedBatchNorm = 'FusedBatchNorm';
exports.FusedBatchNorm = FusedBatchNorm;
const GatherV2 = 'GatherV2';
exports.GatherV2 = GatherV2;
const GatherNd = 'GatherNd';
exports.GatherNd = GatherNd;
const Greater = 'Greater';
exports.Greater = Greater;
const GreaterEqual = 'GreaterEqual';
exports.GreaterEqual = GreaterEqual;
const Identity = 'Identity';
exports.Identity = Identity;
const IFFT = 'IFFT';
exports.IFFT = IFFT;
const Imag = 'Imag';
exports.Imag = Imag;
const IsFinite = 'IsFinite';
exports.IsFinite = IsFinite;
const IsInf = 'IsInf';
exports.IsInf = IsInf;
const IsNan = 'IsNan';
exports.IsNan = IsNan;
const LeakyRelu = 'LeakyRelu';
exports.LeakyRelu = LeakyRelu;
const Less = 'Less';
exports.Less = Less;
const LessEqual = 'LessEqual';
exports.LessEqual = LessEqual;
const LinSpace = 'LinSpace';
exports.LinSpace = LinSpace;
const Log = 'Log';
exports.Log = Log;
const Log1p = 'Log1p';
exports.Log1p = Log1p;
const LogicalAnd = 'LogicalAnd';
exports.LogicalAnd = LogicalAnd;
const LogicalNot = 'LogicalNot';
exports.LogicalNot = LogicalNot;
const LogicalOr = 'LogicalOr';
exports.LogicalOr = LogicalOr;
const LogSoftmax = 'LogSoftmax';
exports.LogSoftmax = LogSoftmax;
const LRN = 'LRN';
exports.LRN = LRN;
const LRNGrad = 'LRNGrad';
exports.LRNGrad = LRNGrad;
const Max = 'Max';
exports.Max = Max;
const Maximum = 'Maximum';
exports.Maximum = Maximum;
const MaxPool = 'MaxPool';
exports.MaxPool = MaxPool;
const MaxPoolGrad = 'MaxPoolGrad';
exports.MaxPoolGrad = MaxPoolGrad;
const MaxPool3D = 'MaxPool3D';
exports.MaxPool3D = MaxPool3D;
const MaxPool3DGrad = 'MaxPool3DGrad';
exports.MaxPool3DGrad = MaxPool3DGrad;
const MaxPoolWithArgmax = 'MaxPoolWithArgmax';
exports.MaxPoolWithArgmax = MaxPoolWithArgmax;
const Mean = 'Mean';
exports.Mean = Mean;
const Min = 'Min';
exports.Min = Min;
const Minimum = 'Minimum';
exports.Minimum = Minimum;
const MirrorPad = 'MirrorPad';
exports.MirrorPad = MirrorPad;
const Mod = 'Mod';
exports.Mod = Mod;
const Multinomial = 'Multinomial';
exports.Multinomial = Multinomial;
const Multiply = 'Multiply';
exports.Multiply = Multiply;
const Neg = 'Neg';
exports.Neg = Neg;
const NotEqual = 'NotEqual';
exports.NotEqual = NotEqual;
const NonMaxSuppressionV3 = 'NonMaxSuppressionV3';
exports.NonMaxSuppressionV3 = NonMaxSuppressionV3;
const NonMaxSuppressionV4 = 'NonMaxSuppressionV4';
exports.NonMaxSuppressionV4 = NonMaxSuppressionV4;
const NonMaxSuppressionV5 = 'NonMaxSuppressionV5';
exports.NonMaxSuppressionV5 = NonMaxSuppressionV5;
const OnesLike = 'OnesLike';
exports.OnesLike = OnesLike;
const OneHot = 'OneHot';
exports.OneHot = OneHot;
const Pack = 'Pack';
exports.Pack = Pack;
const PadV2 = 'PadV2';
exports.PadV2 = PadV2;
const Pool = 'Pool';
exports.Pool = Pool;
const Pow = 'Pow';
exports.Pow = Pow;
const Prelu = 'Prelu';
exports.Prelu = Prelu;
const Prod = 'Prod';
exports.Prod = Prod;
const Range = 'Range';
exports.Range = Range;
const Real = 'Real';
exports.Real = Real;
const Reciprocal = 'Reciprocal';
exports.Reciprocal = Reciprocal;
const Relu = 'Relu';
exports.Relu = Relu;
const Reshape = 'Reshape';
exports.Reshape = Reshape;
const ResizeNearestNeighbor = 'ResizeNearestNeighbor';
exports.ResizeNearestNeighbor = ResizeNearestNeighbor;
const ResizeNearestNeighborGrad = 'ResizeNearestNeighborGrad';
exports.ResizeNearestNeighborGrad = ResizeNearestNeighborGrad;
const ResizeBilinear = 'ResizeBilinear';
exports.ResizeBilinear = ResizeBilinear;
const ResizeBilinearGrad = 'ResizeBilinearGrad';
exports.ResizeBilinearGrad = ResizeBilinearGrad;
const Relu6 = 'Relu6';
exports.Relu6 = Relu6;
const Reverse = 'Reverse';
exports.Reverse = Reverse;
const Round = 'Round';
exports.Round = Round;
const Rsqrt = 'Rsqrt';
exports.Rsqrt = Rsqrt;
const ScatterNd = 'ScatterNd';
exports.ScatterNd = ScatterNd;
const Select = 'Select';
exports.Select = Select;
const Selu = 'Selu';
exports.Selu = Selu;
const Slice = 'Slice';
exports.Slice = Slice;
const Sin = 'Sin';
exports.Sin = Sin;
const Sinh = 'Sinh';
exports.Sinh = Sinh;
const Sign = 'Sign';
exports.Sign = Sign;
const Sigmoid = 'Sigmoid';
exports.Sigmoid = Sigmoid;
const Softplus = 'Softplus';
exports.Softplus = Softplus;
const Sqrt = 'Sqrt';
exports.Sqrt = Sqrt;
const Sum = 'Sum';
exports.Sum = Sum;
const SpaceToBatchND = 'SpaceToBatchND';
exports.SpaceToBatchND = SpaceToBatchND;
const SplitV = 'SplitV';
exports.SplitV = SplitV;
const Softmax = 'Softmax';
exports.Softmax = Softmax;
const SparseFillEmptyRows = 'SparseFillEmptyRows';
exports.SparseFillEmptyRows = SparseFillEmptyRows;
const SparseReshape = 'SparseReshape';
exports.SparseReshape = SparseReshape;
const SparseSegmentMean = 'SparseSegmentMean';
exports.SparseSegmentMean = SparseSegmentMean;
const SparseSegmentSum = 'SparseSegmentSum';
exports.SparseSegmentSum = SparseSegmentSum;
const SparseToDense = 'SparseToDense';
exports.SparseToDense = SparseToDense;
const SquaredDifference = 'SquaredDifference';
exports.SquaredDifference = SquaredDifference;
const Square = 'Square';
exports.Square = Square;
const StridedSlice = 'StridedSlice';
exports.StridedSlice = StridedSlice;
const StringNGrams = 'StringNGrams';
exports.StringNGrams = StringNGrams;
const StringSplit = 'StringSplit';
exports.StringSplit = StringSplit;
const StringToHashBucketFast = 'StringToHashBucketFast';
exports.StringToHashBucketFast = StringToHashBucketFast;
const Sub = 'Sub';
exports.Sub = Sub;
const Tan = 'Tan';
exports.Tan = Tan;
const Tanh = 'Tanh';
exports.Tanh = Tanh;
const Tile = 'Tile';
exports.Tile = Tile;
const TopK = 'TopK';
exports.TopK = TopK;
const Transform = 'Transform';
exports.Transform = Transform;
const Transpose = 'Transpose';
exports.Transpose = Transpose;
const Unique = 'Unique';
exports.Unique = Unique;
const Unpack = 'Unpack';
exports.Unpack = Unpack;
const UnsortedSegmentSum = 'UnsortedSegmentSum';
exports.UnsortedSegmentSum = UnsortedSegmentSum;
const ZerosLike = 'ZerosLike';
/**
 * TensorFlow.js-only kernels
 */

exports.ZerosLike = ZerosLike;
const Step = 'Step';
exports.Step = Step;
const FromPixels = 'FromPixels';
exports.FromPixels = FromPixels;
const RotateWithOffset = 'RotateWithOffset';
exports.RotateWithOffset = RotateWithOffset;
const _FusedMatMul = '_FusedMatMul';
exports._FusedMatMul = _FusedMatMul;
const FusedConv2D = 'FusedConv2D';
exports.FusedConv2D = FusedConv2D;
const FusedDepthwiseConv2D = 'FusedDepthwiseConv2D';
exports.FusedDepthwiseConv2D = FusedDepthwiseConv2D;
},{}],"PlaY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getKernel = getKernel;
exports.getGradient = getGradient;
exports.getKernelsForBackend = getKernelsForBackend;
exports.registerKernel = registerKernel;
exports.registerGradient = registerGradient;
exports.unregisterKernel = unregisterKernel;
exports.unregisterGradient = unregisterGradient;
exports.copyRegisteredKernels = copyRegisteredKernels;

var _environment = require("./environment");

var _global_util = require("./global_util");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kernelRegistry = (0, _global_util.getGlobal)('kernelRegistry', () => new Map());
const gradRegistry = (0, _global_util.getGlobal)('gradRegistry', () => new Map());
/**
 * Returns the kernel function (code) associated with the provided names.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 */

function getKernel(kernelName, backendName) {
  const key = makeKey(kernelName, backendName);
  return kernelRegistry.get(key);
}
/**
 * Returns the registered gradient info associated with the provided kernel.
 * @param kernelName The official TF kernel name.
 */


function getGradient(kernelName) {
  return gradRegistry.get(kernelName);
}

function getKernelsForBackend(backendName) {
  const it = kernelRegistry.entries();
  const result = [];

  while (true) {
    const {
      done,
      value
    } = it.next();

    if (done) {
      break;
    }

    const [key, config] = value;
    const [backend] = key.split('_');

    if (backend === backendName) {
      result.push(config);
    }
  }

  return result;
}
/**
 * Registers the function (forward pass) for the kernel in a global registry.
 *
 * @param config A config object with the following properties:
 * - `kernelName` The official name of the kernel.
 * - `backendName` The official name of the backend.
 * - `kernelFunc` The function to run during the forward pass of the kernel.
 * - `setupFunc` Optional. Gets called once, after the backend initializes.
 * - `disposeFunc` Optional. Gets called once, right before the backend is
 * disposed.
 */


function registerKernel(config) {
  const {
    kernelName,
    backendName
  } = config;
  const key = makeKey(kernelName, backendName);

  if (kernelRegistry.has(key)) {
    console.warn(`The kernel '${kernelName}' for backend ` + `'${backendName}' is already registered`);
  }

  kernelRegistry.set(key, config);
}
/**
 * Registers a gradient function for a given kernel in the global registry,
 * to be used during the back-propagation of that kernel.
 *
 * @param config An object with the following properties:
 * - `kernelName` The name of the kernel that the gradient function is for.
 * - `gradFunc` The function to run during back-propagation.
 */


function registerGradient(config) {
  const {
    kernelName
  } = config;

  if (gradRegistry.has(kernelName)) {
    // TODO (yassogba) after 3.0 assess whether we need to keep this gated
    // to debug mode.
    if ((0, _environment.env)().getBool('DEBUG')) {
      console.warn(`Overriding the gradient for '${kernelName}'`);
    }
  }

  gradRegistry.set(kernelName, config);
}
/**
 * Removes the kernel function from the registry.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 *
 */


function unregisterKernel(kernelName, backendName) {
  const key = makeKey(kernelName, backendName);

  if (!kernelRegistry.has(key)) {
    throw new Error(`The kernel '${kernelName}' for backend ` + `'${backendName}' is not registered`);
  }

  kernelRegistry.delete(key);
}
/** Removes the registered gradient from the global registry. */


function unregisterGradient(kernelName) {
  if (!gradRegistry.has(kernelName)) {
    throw new Error(`The gradient '${kernelName}' for backend is not registered`);
  }

  gradRegistry.delete(kernelName);
}
/**
 * Finds kernels that have already been registered to a backend and re-registers
 * them for a new backend. Useful for registering custom backends.
 * @param registeredBackendName Already registered backend.
 * @param newBackendName New backend.
 */


function copyRegisteredKernels(registeredBackendName, newBackendName) {
  const kernels = getKernelsForBackend(registeredBackendName);
  kernels.forEach(kernelConfig => {
    const newKernelConfig = Object.assign({}, kernelConfig, {
      backendName: newBackendName
    });
    registerKernel(newKernelConfig);
  });
}

function makeKey(kernelName, backendName) {
  return `${backendName}_${kernelName}`;
}
},{"./environment":"vpgN","./global_util":"TJmh"}],"YvD4":[function(require,module,exports) {
module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};

},{}],"rAgb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexToLong = hexToLong;
exports.fingerPrint64 = fingerPrint64;

var LongExports = _interopRequireWildcard(require("long"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Workaround for allowing cjs module to be included in bundle created by
// rollup.
// tslint:disable-next-line
const Long = // tslint:disable-next-line
LongExports.default || LongExports;

function hexToLong(hex) {
  return Long.fromString(hex, true, 16);
} // Some primes between 2^63 and 2^64 for various uses.
// Hex 0xc3a5c85c97cb3127


const k0 = hexToLong('c3a5c85c97cb3127'); // Hex 0xb492b66fbe98f273

const k1 = hexToLong('b492b66fbe98f273'); // Hex 0x9ae16a3b2f90404f

const k2 = hexToLong('9ae16a3b2f90404f');

function shiftMix(val) {
  return val.xor(val.shru(47));
}

function fetch(s, offset, numBytes) {
  const bytes = s.slice(offset, offset + numBytes);
  return Long.fromBytes(Array.from(bytes), true, true);
}

function fetch64(s, offset) {
  return fetch(s, offset, 8);
}

function fetch32(s, offset) {
  return fetch(s, offset, 4);
}

function rotate64(val, shift) {
  // Avoid shifting by 64: doing so yields an undefined result.
  return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));
}

function hashLen16(u, v, mul = hexToLong('9ddfea08eb382d69')) {
  // Murmur-inspired hashing.
  let a = u.xor(v).mul(mul);
  a = a.xor(a.shru(47));
  let b = v.xor(a).mul(mul);
  b = b.xor(b.shru(47));
  b = b.mul(mul);
  return b;
} // Return a 16-byte hash for 48 bytes.  Quick and dirty.
// Callers do best to use "random-looking" values for a and b.


function weakHashLen32WithSeeds(w, x, y, z, a, b) {
  a = a.add(w);
  b = rotate64(b.add(a).add(z), 21);
  const c = a;
  a = a.add(x);
  a = a.add(y);
  b = b.add(rotate64(a, 44));
  return [a.add(z), b.add(c)];
}

function weakHashLen32WithSeedsStr(s, offset, a, b) {
  return weakHashLen32WithSeeds(fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16), fetch64(s, offset + 24), a, b);
}

function hashLen0to16(s, len = s.length) {
  if (len >= 8) {
    const mul = k2.add(len * 2);
    const a = fetch64(s, 0).add(k2);
    const b = fetch64(s, len - 8);
    const c = rotate64(b, 37).mul(mul).add(a);
    const d = rotate64(a, 25).add(b).mul(mul);
    return hashLen16(c, d, mul);
  }

  if (len >= 4) {
    const mul = k2.add(len * 2);
    const a = fetch32(s, 0);
    return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul);
  }

  if (len > 0) {
    const a = s[0];
    const b = s[len >> 1];
    const c = s[len - 1];
    const y = a + (b << 8);
    const z = len + (c << 2);
    return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);
  }

  return k2;
}

function hashLen17to32(s, len = s.length) {
  const mul = k2.add(len * 2);
  const a = fetch64(s, 0).mul(k1);
  const b = fetch64(s, 8);
  const c = fetch64(s, len - 8).mul(mul);
  const d = fetch64(s, len - 16).mul(k2);
  return hashLen16(rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d), a.add(rotate64(b.add(k2), 18)).add(c), mul);
}

function hashLen33to64(s, len = s.length) {
  const mul = k2.add(len * 2);
  const a = fetch64(s, 0).mul(k2);
  const b = fetch64(s, 8);
  const c = fetch64(s, len - 8).mul(mul);
  const d = fetch64(s, len - 16).mul(k2);
  const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);
  const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);
  const e = fetch64(s, 16).mul(mul);
  const f = fetch64(s, 24);
  const g = y.add(fetch64(s, len - 32)).mul(mul);
  const h = z.add(fetch64(s, len - 24)).mul(mul);
  return hashLen16(rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h), e.add(rotate64(f.add(a), 18)).add(g), mul);
}

function fingerPrint64(s, len = s.length) {
  const seed = Long.fromNumber(81, true);

  if (len <= 32) {
    if (len <= 16) {
      return hashLen0to16(s, len);
    } else {
      return hashLen17to32(s, len);
    }
  } else if (len <= 64) {
    return hashLen33to64(s, len);
  } // For strings over 64 bytes we loop.  Internal state consists of
  // 56 bytes: v, w, x, y, and z.


  let x = seed;
  let y = seed.mul(k1).add(113);
  let z = shiftMix(y.mul(k2).add(113)).mul(k2);
  let v = [Long.UZERO, Long.UZERO];
  let w = [Long.UZERO, Long.UZERO];
  x = x.mul(k2).add(fetch64(s, 0));
  let offset = 0; // Set end so that after the loop we have 1 to 64 bytes left to process.

  const end = (len - 1 >> 6) * 64;
  const last64 = end + (len - 1 & 63) - 63;

  do {
    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);
    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);
    x = x.xor(w[1]);
    y = y.add(v[0]).add(fetch64(s, offset + 40));
    z = rotate64(z.add(w[0]), 33).mul(k1);
    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));
    w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));
    [z, x] = [x, z];
    offset += 64;
  } while (offset !== end);

  const mul = k1.add(z.and(0xff).shl(1)); // Point to the last 64 bytes of input.

  offset = last64;
  w[0] = w[0].add(len - 1 & 63);
  v[0] = v[0].add(w[0]);
  w[0] = w[0].add(v[0]);
  x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);
  y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);
  x = x.xor(w[1].mul(9));
  y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));
  z = rotate64(z.add(w[0]), 33).mul(mul);
  v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));
  w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));
  [z, x] = [x, z];
  return hashLen16(hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z), hashLen16(v[1], w[1], mul).add(x), mul);
}
},{"long":"YvD4"}],"XXxQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  createScalarValue: true,
  toTypedArray: true,
  now: true,
  fetch: true,
  encodeString: true,
  decodeString: true
};
exports.createScalarValue = createScalarValue;
exports.toTypedArray = toTypedArray;
exports.now = now;
exports.fetch = fetch;
exports.encodeString = encodeString;
exports.decodeString = decodeString;

var _environment = require("./environment");

var base = _interopRequireWildcard(require("./util_base"));

Object.keys(base).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === base[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return base[key];
    }
  });
});

var _hash_util = require("./hash_util");

Object.keys(_hash_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _hash_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _hash_util[key];
    }
  });
});

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Create typed array for scalar value. Used for storing in `DataStorage`.
 */
function createScalarValue(value, dtype) {
  if (dtype === 'string') {
    return encodeString(value);
  }

  return toTypedArray([value], dtype);
}

function noConversionNeeded(a, dtype) {
  return a instanceof Float32Array && dtype === 'float32' || a instanceof Int32Array && dtype === 'int32' || a instanceof Uint8Array && dtype === 'bool';
}

function toTypedArray(a, dtype) {
  if (dtype === 'string') {
    throw new Error('Cannot convert a string[] to a TypedArray');
  }

  if (Array.isArray(a)) {
    a = base.flatten(a);
  }

  if ((0, _environment.env)().getBool('DEBUG')) {
    base.checkConversionForErrors(a, dtype);
  }

  if (noConversionNeeded(a, dtype)) {
    return a;
  }

  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
    return new Float32Array(a);
  } else if (dtype === 'int32') {
    return new Int32Array(a);
  } else if (dtype === 'bool') {
    const bool = new Uint8Array(a.length);

    for (let i = 0; i < bool.length; ++i) {
      if (Math.round(a[i]) !== 0) {
        bool[i] = 1;
      }
    }

    return bool;
  } else {
    throw new Error(`Unknown data type ${dtype}`);
  }
}
/**
 * Returns the current high-resolution time in milliseconds relative to an
 * arbitrary time in the past. It works across different platforms (node.js,
 * browsers).
 *
 * ```js
 * console.log(tf.util.now());
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */


function now() {
  return (0, _environment.env)().platform.now();
}
/**
 * Returns a platform-specific implementation of
 * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 *
 * If `fetch` is defined on the global object (`window`, `process`, etc.),
 * `tf.util.fetch` returns that function.
 *
 * If not, `tf.util.fetch` returns a platform-specific solution.
 *
 * ```js
 * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');
 * // handle response
 * ```
 *
 * @doc {heading: 'Util'}
 */


function fetch(path, requestInits) {
  return (0, _environment.env)().platform.fetch(path, requestInits);
}
/**
 * Encodes the provided string into bytes using the provided encoding scheme.
 *
 * @param s The string to encode.
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */


function encodeString(s, encoding = 'utf-8') {
  encoding = encoding || 'utf-8';
  return (0, _environment.env)().platform.encode(s, encoding);
}
/**
 * Decodes the provided bytes into a string using the provided encoding scheme.
 * @param bytes The bytes to decode.
 *
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */


function decodeString(bytes, encoding = 'utf-8') {
  encoding = encoding || 'utf-8';
  return (0, _environment.env)().platform.decode(bytes, encoding);
}
},{"./environment":"vpgN","./util_base":"uID4","./hash_util":"rAgb"}],"g3XT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkComputationForErrors = checkComputationForErrors;
exports.Logger = exports.Profiler = void 0;

var _environment = require("./environment");

var util = _interopRequireWildcard(require("./util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Profiler {
  constructor(backendTimer, logger) {
    this.backendTimer = backendTimer;
    this.logger = logger;

    if (logger == null) {
      this.logger = new Logger();
    }
  }

  profileKernel(kernelName, inputs, f) {
    let outputs;

    const holdResultWrapperFn = () => {
      outputs = f();
    };

    let timer;
    const start = util.now();

    if (this.backendTimer.timerAvailable()) {
      timer = this.backendTimer.time(holdResultWrapperFn);
    } else {
      holdResultWrapperFn();

      for (const output of outputs) {
        output.dataSync();
      }

      timer = Promise.resolve({
        kernelMs: util.now() - start
      });
    }

    if ((0, _environment.env)().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {
      for (let i = 0; i < outputs.length; i++) {
        const output = outputs[i]; // Dangling promise here because we don't want to propagate up
        // asynchronicity.

        output.data().then(tensorVals => {
          checkComputationForErrors(tensorVals, output.dtype, kernelName);
        });
      }
    }

    const kernelProfile = {
      kernelName,
      outputs,
      inputs,
      timeMs: timer.then(timing => timing.kernelMs),
      extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : '')
    };
    return kernelProfile;
  }

  logKernelProfile(kernelProfile) {
    const {
      kernelName,
      outputs,
      timeMs,
      inputs,
      extraInfo
    } = kernelProfile;
    outputs.forEach(result => {
      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {
        this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);
      });
    });
  }

}

exports.Profiler = Profiler;

function checkComputationForErrors(vals, dtype, kernelName) {
  if (dtype !== 'float32') {
    // Only floating point computations will generate NaN values
    return false;
  }

  for (let i = 0; i < vals.length; i++) {
    const num = vals[i];

    if (isNaN(num) || !isFinite(num)) {
      // Throwing custom exception so behavior is testable.
      console.warn(`Found ${num} in the result of '${kernelName}'`);
      return true;
    }
  }

  return false;
}

class Logger {
  logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {
    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) : timeMs['error'];
    const paddedName = util.rightPad(name, 25);
    const rank = result.rank;
    const size = result.size;
    const shape = util.rightPad(result.shape.toString(), 14);
    let inputShapesDescription = '';

    for (const name in inputs) {
      const input = inputs[name];

      if (input != null) {
        // The input might be a non-tensor (e.g HTMLImageElement), in which case
        // we claim the output shape as input shape.
        const inputShape = input.shape || result.shape;
        const inputRank = inputShape.length;
        inputShapesDescription += `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;
      }
    }

    console.log(`%c${paddedName}\t%c${time}\t%c${rank}D ${shape}\t%c${size}\t%c${inputShapesDescription}\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');
  }

}

exports.Logger = Logger;
},{"./environment":"vpgN","./util":"XXxQ"}],"s88o":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFilteredNodesXToY = getFilteredNodesXToY;
exports.backpropagateGradients = backpropagateGradients;

var util = _interopRequireWildcard(require("./util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes a list of TapeNodes that connect x to y, filtering everything else
 * out and preserving the order of the original tape elements.
 *
 * @param tape The tape elements to filter.
 * @param xs The input Tensors.
 * @param y The output Tensor.
 */
function getFilteredNodesXToY(tape, xs, y) {
  // Forward pass to compute all the nodes and Tensors that are transitively a
  // function of x.
  const tensorsFromX = {};
  const nodesFromX = {};

  for (let i = 0; i < xs.length; i++) {
    tensorsFromX[xs[i].id] = true;
  }

  for (let i = 0; i < tape.length; i++) {
    const node = tape[i];
    const nodeInputs = node.inputs;

    for (const inputName in nodeInputs) {
      const input = nodeInputs[inputName];
      let anyInputFromX = false;

      for (let j = 0; j < xs.length; j++) {
        if (tensorsFromX[input.id]) {
          node.outputs.forEach(output => tensorsFromX[output.id] = true);
          anyInputFromX = true;
          nodesFromX[node.id] = true;
          break;
        }
      }

      if (anyInputFromX) {
        break;
      }
    }
  } // Backward pass to find all of the nodes and Tensors that lead to y.


  const tensorsLeadToY = {};
  tensorsLeadToY[y.id] = true;
  const nodesToY = {};

  for (let i = tape.length - 1; i >= 0; i--) {
    const node = tape[i];
    const nodeInputs = node.inputs; // If any of the outputs lead to y, mark all of the inputs as leading to y.

    for (let j = 0; j < node.outputs.length; j++) {
      if (tensorsLeadToY[node.outputs[j].id]) {
        for (const inputName in nodeInputs) {
          tensorsLeadToY[nodeInputs[inputName].id] = true;
          nodesToY[node.id] = true;
        }

        break;
      }
    }
  } // Return the paths that come from x and lead to y.


  const filteredTape = [];

  for (let i = 0; i < tape.length; i++) {
    const node = tape[i];

    if (nodesFromX[node.id] && nodesToY[node.id]) {
      // Prune the inputs from the node that aren't a function of x.
      const prunedInputs = {};

      for (const inputName in node.inputs) {
        const nodeInput = node.inputs[inputName];

        if (tensorsFromX[nodeInput.id]) {
          prunedInputs[inputName] = nodeInput;
        }
      } // Copy the node and overwrite inputsAndArgs to the pruned version.


      const prunedNode = Object.assign({}, node);
      prunedNode.inputs = prunedInputs;
      prunedNode.outputs = node.outputs;
      filteredTape.push(prunedNode);
    }
  }

  return filteredTape;
}
/**
 * Backpropagate gradients through the filtered TapeNodes.
 *
 * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map
 * is mutated by this method.
 * @param filteredTape The filtered TapeNodes to backprop through.
 */


function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {
  // Walk the tape backward and keep a map of Tensor to its gradient.
  for (let i = filteredTape.length - 1; i >= 0; i--) {
    const node = filteredTape[i];
    const dys = [];
    node.outputs.forEach(o => {
      const gradTensor = tensorAccumulatedGradientMap[o.id];

      if (gradTensor != null) {
        dys.push(gradTensor);
      } else {
        // This particular output is not in the back-propagation subgraph, so it
        // does not affect the final output, thus we put null for its dy.
        dys.push(null);
      }
    });

    if (node.gradient == null) {
      throw new Error(`Cannot compute gradient: gradient function not found ` + `for ${node.kernelName}.`);
    } // Backprop dy through this node and accumulate gradients over the inputs.


    const inputGradients = node.gradient(dys);

    for (const inputName in node.inputs) {
      if (!(inputName in inputGradients)) {
        throw new Error(`Cannot backprop through input ${inputName}. ` + `Available gradients found: ${Object.keys(inputGradients)}.`);
      } // Call the gradient function.


      const dx = tidy(() => inputGradients[inputName]());

      if (dx.dtype !== 'float32') {
        throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);
      }

      const x = node.inputs[inputName];

      if (!util.arraysEqual(dx.shape, x.shape)) {
        throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `'${inputName}' has shape '${dx.shape}', which does not match ` + `the shape of the input '${x.shape}'`);
      }

      if (tensorAccumulatedGradientMap[x.id] == null) {
        tensorAccumulatedGradientMap[x.id] = dx;
      } else {
        const curGradient = tensorAccumulatedGradientMap[x.id];
        tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);
        curGradient.dispose();
      }
    }
  }
}
},{"./util":"XXxQ"}],"MlMg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensorToString = tensorToString;

var _util = require("./util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Maximum number of values before we decide to show ellipsis.
const FORMAT_LIMIT_NUM_VALS = 20; // Number of first and last values to show when displaying a, b,...,y, z.

const FORMAT_NUM_FIRST_LAST_VALS = 3; // Number of significant digits to show.

const FORMAT_NUM_SIG_DIGITS = 7;

function tensorToString(vals, shape, dtype, verbose) {
  const strides = (0, _util.computeStrides)(shape);
  const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);
  const rank = shape.length;
  const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);
  const lines = ['Tensor'];

  if (verbose) {
    lines.push(`  dtype: ${dtype}`);
    lines.push(`  rank: ${rank}`);
    lines.push(`  shape: [${shape}]`);
    lines.push(`  values:`);
  }

  lines.push(valsLines.map(l => '    ' + l).join('\n'));
  return lines.join('\n');
}

function computeMaxSizePerColumn(vals, shape, dtype, strides) {
  const n = (0, _util.sizeFromShape)(shape);
  const numCols = strides[strides.length - 1];
  const padPerCol = new Array(numCols).fill(0);
  const rank = shape.length;
  const valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;

  if (rank > 1) {
    for (let row = 0; row < n / numCols; row++) {
      const offset = row * numCols;

      for (let j = 0; j < numCols; j++) {
        padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);
      }
    }
  }

  return padPerCol;
}

function valToString(val, pad, dtype) {
  let valStr;

  if (Array.isArray(val)) {
    valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` + `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;
  } else if ((0, _util.isString)(val)) {
    valStr = `'${val}'`;
  } else if (dtype === 'bool') {
    valStr = boolNumToString(val);
  } else {
    valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();
  }

  return (0, _util.rightPad)(valStr, pad);
}

function boolNumToString(v) {
  return v === 0 ? 'false' : 'true';
}

function subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {
  const storagePerElement = dtype === 'complex64' ? 2 : 1;
  const size = shape[0];
  const rank = shape.length;

  if (rank === 0) {
    if (dtype === 'complex64') {
      const complexTuple = createComplexTuples(vals);
      return [valToString(complexTuple[0], 0, dtype)];
    }

    if (dtype === 'bool') {
      return [boolNumToString(vals[0])];
    }

    return [vals[0].toString()];
  }

  if (rank === 1) {
    if (size > FORMAT_LIMIT_NUM_VALS) {
      const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;
      let firstVals = Array.from(vals.slice(0, firstValsSize));
      let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));

      if (dtype === 'complex64') {
        firstVals = createComplexTuples(firstVals);
        lastVals = createComplexTuples(lastVals);
      }

      return ['[' + firstVals.map((x, i) => valToString(x, padPerCol[i], dtype)).join(', ') + ', ..., ' + lastVals.map((x, i) => valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype)).join(', ') + ']'];
    }

    const displayVals = dtype === 'complex64' ? createComplexTuples(vals) : Array.from(vals);
    return ['[' + displayVals.map((x, i) => valToString(x, padPerCol[i], dtype)).join(', ') + ']'];
  } // The array is rank 2 or more.


  const subshape = shape.slice(1);
  const substrides = strides.slice(1);
  const stride = strides[0] * storagePerElement;
  const lines = [];

  if (size > FORMAT_LIMIT_NUM_VALS) {
    for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {
      const start = i * stride;
      const end = start + stride;
      lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false
      /* isLast */
      ));
    }

    lines.push('...');

    for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {
      const start = i * stride;
      const end = start + stride;
      lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1
      /* isLast */
      ));
    }
  } else {
    for (let i = 0; i < size; i++) {
      const start = i * stride;
      const end = start + stride;
      lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1
      /* isLast */
      ));
    }
  }

  const sep = rank === 2 ? ',' : '';
  lines[0] = '[' + lines[0] + sep;

  for (let i = 1; i < lines.length - 1; i++) {
    lines[i] = ' ' + lines[i] + sep;
  }

  let newLineSep = ',\n';

  for (let i = 2; i < rank; i++) {
    newLineSep += '\n';
  }

  lines[lines.length - 1] = ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);
  return lines;
}

function createComplexTuples(vals) {
  const complexTuples = [];

  for (let i = 0; i < vals.length; i += 2) {
    complexTuples.push([vals[i], vals[i + 1]]);
  }

  return complexTuples;
}
},{"./util":"XXxQ"}],"eFW4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setTensorTracker = setTensorTracker;
exports.setOpHandler = setOpHandler;
exports.setDeprecationWarningFn = setDeprecationWarningFn;
exports.getGlobalTensorClass = getGlobalTensorClass;
exports.Variable = exports.Tensor = exports.TensorBuffer = void 0;

var _global_util = require("./global_util");

var _tensor_format = require("./tensor_format");

var util = _interopRequireWildcard(require("./util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * A mutable object, similar to `tf.Tensor`, that allows users to set values
 * at locations before converting to an immutable `tf.Tensor`.
 *
 * See `tf.buffer` for creating a tensor buffer.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
class TensorBuffer {
  constructor(shape, dtype, values) {
    this.dtype = dtype;
    this.shape = shape.slice();
    this.size = util.sizeFromShape(shape);

    if (values != null) {
      const n = values.length;
      util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` + `inferred by the shape '${this.size}'.`);
    }

    if (dtype === 'complex64') {
      throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` + `a TensorBuffer for the real and imaginary parts separately and ` + `call tf.complex(real, imag).`);
    }

    this.values = values || util.getArrayFromDType(dtype, this.size);
    this.strides = (0, util.computeStrides)(shape);
  }
  /**
   * Sets a value in the buffer at a given location.
   *
   * @param value The value to set.
   * @param locs  The location indices.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */


  set(value, ...locs) {
    if (locs.length === 0) {
      locs = [0];
    }

    util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` + `match the rank (${this.rank})`);
    const index = this.locToIndex(locs);
    this.values[index] = value;
  }
  /**
   * Returns the value in the buffer at the provided location.
   *
   * @param locs The location indices.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */


  get(...locs) {
    if (locs.length === 0) {
      locs = [0];
    }

    let i = 0;

    for (const loc of locs) {
      if (loc < 0 || loc >= this.shape[i]) {
        const msg = `Requested out of range element at ${locs}. ` + `  Buffer shape=${this.shape}`;
        throw new Error(msg);
      }

      i++;
    }

    let index = locs[locs.length - 1];

    for (let i = 0; i < locs.length - 1; ++i) {
      index += this.strides[i] * locs[i];
    }

    return this.values[index];
  }

  locToIndex(locs) {
    if (this.rank === 0) {
      return 0;
    } else if (this.rank === 1) {
      return locs[0];
    }

    let index = locs[locs.length - 1];

    for (let i = 0; i < locs.length - 1; ++i) {
      index += this.strides[i] * locs[i];
    }

    return index;
  }

  indexToLoc(index) {
    if (this.rank === 0) {
      return [];
    } else if (this.rank === 1) {
      return [index];
    }

    const locs = new Array(this.shape.length);

    for (let i = 0; i < locs.length - 1; ++i) {
      locs[i] = Math.floor(index / this.strides[i]);
      index -= locs[i] * this.strides[i];
    }

    locs[locs.length - 1] = index;
    return locs;
  }

  get rank() {
    return this.shape.length;
  }
  /**
   * Creates an immutable `tf.Tensor` object from the buffer.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */


  toTensor() {
    return trackerFn().makeTensor(this.values, this.shape, this.dtype);
  }

} // For tracking tensor creation and disposal.


exports.TensorBuffer = TensorBuffer;
let trackerFn = null; // Used by chaining methods to call into ops.

let opHandler = null; // Used to warn about deprecated methods.

let deprecationWarningFn = null; // This here so that we can use this method on dev branches and keep the
// functionality at master.
// tslint:disable-next-line:no-unused-expression

[deprecationWarningFn];
/**
 * An external consumer can register itself as the tensor tracker. This way
 * the Tensor class can notify the tracker for every tensor created and
 * disposed.
 */

function setTensorTracker(fn) {
  trackerFn = fn;
}
/**
 * An external consumer can register itself as the op handler. This way the
 * Tensor class can have chaining methods that call into ops via the op
 * handler.
 */


function setOpHandler(handler) {
  opHandler = handler;
}
/**
 * Sets the deprecation warning function to be used by this file. This way the
 * Tensor class can be a leaf but still use the environment.
 */


function setDeprecationWarningFn(fn) {
  deprecationWarningFn = fn;
}
/**
 * A `tf.Tensor` object represents an immutable, multidimensional array of
 * numbers that has a shape and a data type.
 *
 * For performance reasons, functions that create tensors do not necessarily
 * perform a copy of the data passed to them (e.g. if the data is passed as a
 * `Float32Array`), and changes to the data will change the tensor. This is not
 * a feature and is not supported. To avoid this behavior, use the tensor before
 * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.
 *
 * See `tf.tensor` for details on how to create a `tf.Tensor`.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */


class Tensor {
  constructor(shape, dtype, dataId, id) {
    /** Whether this tensor has been globally kept. */
    this.kept = false;
    this.isDisposedInternal = false;
    this.shape = shape.slice();
    this.dtype = dtype || 'float32';
    this.size = util.sizeFromShape(shape);
    this.strides = (0, util.computeStrides)(shape);
    this.dataId = dataId;
    this.id = id;
    this.rankType = this.rank < 5 ? this.rank.toString() : 'higher';
  }

  get rank() {
    return this.shape.length;
  }
  /**
   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  async buffer() {
    const vals = await this.data();
    return opHandler.buffer(this.shape, this.dtype, vals);
  }
  /**
   * Returns a `tf.TensorBuffer` that holds the underlying data.
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  bufferSync() {
    return opHandler.buffer(this.shape, this.dtype, this.dataSync());
  }
  /**
   * Returns the tensor data as a nested array. The transfer of data is done
   * asynchronously.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  async array() {
    const vals = await this.data();
    return (0, util.toNestedArray)(this.shape, vals, this.dtype === 'complex64');
  }
  /**
   * Returns the tensor data as a nested array. The transfer of data is done
   * synchronously.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  arraySync() {
    return (0, util.toNestedArray)(this.shape, this.dataSync(), this.dtype === 'complex64');
  }
  /**
   * Asynchronously downloads the values from the `tf.Tensor`. Returns a
   * promise of `TypedArray` that resolves when the computation has finished.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  async data() {
    this.throwIfDisposed();
    const data = trackerFn().read(this.dataId);

    if (this.dtype === 'string') {
      const bytes = await data;

      try {
        return bytes.map(b => util.decodeString(b));
      } catch (_a) {
        throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');
      }
    }

    return data;
  }
  /**
   * Synchronously downloads the values from the `tf.Tensor`. This blocks the
   * UI thread until the values are ready, which can cause performance issues.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  dataSync() {
    this.throwIfDisposed();
    const data = trackerFn().readSync(this.dataId);

    if (this.dtype === 'string') {
      try {
        return data.map(b => util.decodeString(b));
      } catch (_a) {
        throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');
      }
    }

    return data;
  }
  /** Returns the underlying bytes of the tensor's data. */


  async bytes() {
    this.throwIfDisposed();
    const data = await trackerFn().read(this.dataId);

    if (this.dtype === 'string') {
      return data;
    } else {
      return new Uint8Array(data.buffer);
    }
  }
  /**
   * Disposes `tf.Tensor` from memory.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  dispose() {
    if (this.isDisposed) {
      return;
    }

    trackerFn().disposeTensor(this);
    this.isDisposedInternal = true;
  }

  get isDisposed() {
    return this.isDisposedInternal;
  }

  throwIfDisposed() {
    if (this.isDisposed) {
      throw new Error(`Tensor is disposed.`);
    }
  }
  /**
   * Prints the `tf.Tensor`. See `tf.print` for details.
   *
   * @param verbose Whether to print verbose information about the tensor,
   *    including dtype and size.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  print(verbose = false) {
    return opHandler.print(this, verbose);
  }
  /**
   * Returns a copy of the tensor. See `tf.clone` for details.
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  clone() {
    this.throwIfDisposed();
    return opHandler.clone(this);
  }
  /**
   * Returns a human-readable description of the tensor. Useful for logging.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  toString(verbose = false) {
    const vals = this.dataSync();
    return (0, _tensor_format.tensorToString)(vals, this.shape, this.dtype, verbose);
  }

  cast(dtype) {
    this.throwIfDisposed();
    return opHandler.cast(this, dtype);
  }

  variable(trainable = true, name, dtype) {
    this.throwIfDisposed();
    return trackerFn().makeVariable(this, trainable, name, dtype);
  }

}

exports.Tensor = Tensor;
Object.defineProperty(Tensor, Symbol.hasInstance, {
  value: instance => {
    // Implementation note: we should use properties of the object that will be
    // defined before the constructor body has finished executing (methods).
    // This is because when this code is transpiled by babel, babel will call
    // classCallCheck before the constructor body is run.
    // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.
    return !!instance && instance.data != null && instance.dataSync != null && instance.throwIfDisposed != null;
  }
});

function getGlobalTensorClass() {
  // Use getGlobal so that we can augment the Tensor class across package
  // boundaries becase the node resolution alg may result in different modules
  // being returned for this file depending on the path they are loaded from.
  return (0, _global_util.getGlobal)('Tensor', () => {
    return Tensor;
  });
} // Global side effect. Cache global reference to Tensor class


getGlobalTensorClass();
/**
 * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */

class Variable extends Tensor {
  constructor(initialValue, trainable, name, tensorId) {
    super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);
    this.trainable = trainable;
    this.name = name;
  }
  /**
   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
   * the same shape and dtype as the old `tf.Tensor`.
   *
   * @param newValue New tensor to be assigned to this variable.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */


  assign(newValue) {
    if (newValue.dtype !== this.dtype) {
      throw new Error(`dtype of the new value (${newValue.dtype}) and ` + `previous value (${this.dtype}) must match`);
    }

    if (!util.arraysEqual(newValue.shape, this.shape)) {
      throw new Error(`shape of the new value (${newValue.shape}) and ` + `previous value (${this.shape}) must match`);
    }

    trackerFn().disposeTensor(this);
    this.dataId = newValue.dataId;
    trackerFn().incRef(this, null
    /* backend */
    );
  }

  dispose() {
    trackerFn().disposeVariable(this);
    this.isDisposedInternal = true;
  }

}

exports.Variable = Variable;
Object.defineProperty(Variable, Symbol.hasInstance, {
  value: instance => {
    return instance instanceof Tensor && instance.assign != null && instance.assign instanceof Function;
  }
});
},{"./global_util":"TJmh","./tensor_format":"MlMg","./util":"XXxQ"}],"xhfJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.upcastType = upcastType;
exports.sumOutType = sumOutType;
exports.Rank = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Rank;
exports.Rank = Rank;

(function (Rank) {
  Rank["R0"] = "R0";
  Rank["R1"] = "R1";
  Rank["R2"] = "R2";
  Rank["R3"] = "R3";
  Rank["R4"] = "R4";
  Rank["R5"] = "R5";
  Rank["R6"] = "R6";
})(Rank || (exports.Rank = Rank = {})); // Looks for upcasting types. Used, for example, in operations with mixed dtype
// inputs.


var UpcastInt32AndMap;

(function (UpcastInt32AndMap) {
  UpcastInt32AndMap["float32"] = "float32";
  UpcastInt32AndMap["int32"] = "int32";
  UpcastInt32AndMap["bool"] = "int32";
  UpcastInt32AndMap["complex64"] = "complex64";
})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));

var UpcastBoolAndMap;

(function (UpcastBoolAndMap) {
  UpcastBoolAndMap["float32"] = "float32";
  UpcastBoolAndMap["int32"] = "int32";
  UpcastBoolAndMap["bool"] = "bool";
  UpcastBoolAndMap["complex64"] = "complex64";
})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));

var UpcastFloat32AndMap;

(function (UpcastFloat32AndMap) {
  UpcastFloat32AndMap["float32"] = "float32";
  UpcastFloat32AndMap["int32"] = "float32";
  UpcastFloat32AndMap["bool"] = "float32";
  UpcastFloat32AndMap["complex64"] = "complex64";
})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));

var UpcastComplex64AndMap;

(function (UpcastComplex64AndMap) {
  UpcastComplex64AndMap["float32"] = "complex64";
  UpcastComplex64AndMap["int32"] = "complex64";
  UpcastComplex64AndMap["bool"] = "complex64";
  UpcastComplex64AndMap["complex64"] = "complex64";
})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));

const upcastTypeMap = {
  'float32': UpcastFloat32AndMap,
  'int32': UpcastInt32AndMap,
  'bool': UpcastBoolAndMap,
  'complex64': UpcastComplex64AndMap
};

function upcastType(typeA, typeB) {
  if (typeA === 'string' || typeB === 'string') {
    if (typeA === 'string' && typeB === 'string') {
      return 'string';
    }

    throw new Error(`Can not upcast ${typeA} with ${typeB}`);
  }

  return upcastTypeMap[typeA][typeB];
}
/** Returns the output type after summation. */


function sumOutType(type) {
  return upcastType(type, 'int32');
}
},{}],"wtFc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeTypesMatch = makeTypesMatch;
exports.assertTypesMatch = assertTypesMatch;
exports.isTensorInList = isTensorInList;
exports.getTensorsInContainer = getTensorsInContainer;

var _tensor = require("./tensor");

var _types = require("./types");

var _util = require("./util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function makeTypesMatch(a, b) {
  if (a.dtype === b.dtype) {
    return [a, b];
  }

  const dtype = (0, _types.upcastType)(a.dtype, b.dtype);
  return [a.cast(dtype), b.cast(dtype)];
}

function assertTypesMatch(a, b) {
  (0, _util.assert)(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` + ` second(${b.dtype}) input must match`);
}

function isTensorInList(tensor, tensorList) {
  return tensorList.some(x => x.id === tensor.id);
}
/**
 * Extracts any `Tensor`s found within the provided object.
 *
 * @param container an object that may be a `Tensor` or may directly contain
 *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it
 *   is safe to pass any object here, except that `Promise`s are not
 *   supported.
 * @returns An array of `Tensors` found within the passed object. If the
 *   argument is simply a `Tensor', a list containing that `Tensor` is
 *   returned. If the object is not a `Tensor` or does not
 *   contain `Tensors`, an empty list is returned.
 */


function getTensorsInContainer(result) {
  const list = [];
  const seen = new Set();
  walkTensorContainer(result, list, seen);
  return list;
}

function walkTensorContainer(container, list, seen) {
  if (container == null) {
    return;
  }

  if (container instanceof _tensor.Tensor) {
    list.push(container);
    return;
  }

  if (!isIterable(container)) {
    return;
  } // Iteration over keys works also for arrays.


  const iterable = container;

  for (const k in iterable) {
    const val = iterable[k];

    if (!seen.has(val)) {
      seen.add(val);
      walkTensorContainer(val, list, seen);
    }
  }
} // tslint:disable-next-line:no-any


function isIterable(obj) {
  return Array.isArray(obj) || typeof obj === 'object';
}
},{"./tensor":"eFW4","./types":"xhfJ","./util":"XXxQ"}],"phT7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOrMakeEngine = getOrMakeEngine;
exports.add = add;
exports.ENGINE = exports.Engine = void 0;

var _backend = require("./backends/backend");

var _environment = require("./environment");

var _global_util = require("./global_util");

var _kernel_names = require("./kernel_names");

var _kernel_registry = require("./kernel_registry");

var _profiler = require("./profiler");

var _tape = require("./tape");

var _tensor = require("./tensor");

var _tensor_util = require("./tensor_util");

var util = _interopRequireWildcard(require("./util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function isRegisteredKernelInvocation(kernelInvocation) {
  return kernelInvocation.kernelName != null;
}

class EngineState {
  constructor() {
    // Public since optimizers will use it.
    this.registeredVariables = {};
    this.nextTapeNodeId = 0;
    this.numBytes = 0;
    this.numTensors = 0;
    this.numStringTensors = 0;
    this.numDataBuffers = 0; // Number of nested tf.grad() statements when computing higher-order
    // gradients. E.g. `1` for first-order gradients and `2` for second-order
    // gradients. Used to track if the tape should be removed after a backprop.

    this.gradientDepth = 0; // Number of nested kernel calls. When kernel depth is greater than 1, we turn
    // off the tape.

    this.kernelDepth = 0;
    this.scopeStack = [];
    /**
     * Keeps track of the number of data moves during a kernel execution. We
     * maintain a stack since kernels can call other kernels, recursively.
     */

    this.numDataMovesStack = [];
    this.nextScopeId = 0;
    this.tensorInfo = new WeakMap();
    this.profiling = false;
    this.activeProfile = {
      newBytes: 0,
      newTensors: 0,
      peakBytes: 0,
      kernels: [],
      result: null,

      get kernelNames() {
        return Array.from(new Set(this.kernels.map(k => k.name)));
      }

    };
  }

  dispose() {
    for (const variableName in this.registeredVariables) {
      this.registeredVariables[variableName].dispose();
    }
  }

}

class Engine {
  constructor(ENV) {
    this.ENV = ENV;
    this.registry = {};
    this.registryFactory = {};
    this.pendingBackendInitId = 0;
    this.state = new EngineState();
  }

  async ready() {
    if (this.pendingBackendInit != null) {
      return this.pendingBackendInit.then(() => {});
    }

    if (this.backendInstance != null) {
      return;
    }

    const sortedBackends = this.getSortedBackends();

    for (let i = 0; i < sortedBackends.length; i++) {
      const backendName = sortedBackends[i];
      const success = await this.initializeBackend(backendName).success;

      if (success) {
        await this.setBackend(backendName);
        return;
      }
    }

    throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);
  }

  get backend() {
    if (this.pendingBackendInit != null) {
      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` + `sure to await tf.ready() or await tf.setBackend() before calling ` + `other methods`);
    }

    if (this.backendInstance == null) {
      const {
        name,
        asyncInit
      } = this.initializeBackendsAndReturnBest();

      if (asyncInit) {
        throw new Error(`The highest priority backend '${name}' has not yet been ` + `initialized. Make sure to await tf.ready() or ` + `await tf.setBackend() before calling other methods`);
      }

      this.setBackend(name);
    }

    return this.backendInstance;
  }

  backendNames() {
    return Object.keys(this.registryFactory);
  }

  findBackend(backendName) {
    if (!(backendName in this.registry)) {
      // If the backend hasn't been initialized but we have a registry entry for
      // it, initialize it and return it.
      if (backendName in this.registryFactory) {
        const {
          asyncInit
        } = this.initializeBackend(backendName);

        if (asyncInit) {
          // Backend is not ready yet.
          return null;
        }
      } else {
        return null;
      }
    }

    return this.registry[backendName];
  }

  findBackendFactory(backendName) {
    if (!(backendName in this.registryFactory)) {
      return null;
    }

    return this.registryFactory[backendName].factory;
  }

  registerBackend(backendName, factory, priority = 1) {
    if (backendName in this.registryFactory) {
      console.warn(`${backendName} backend was already registered. ` + `Reusing existing backend factory.`);
      return false;
    }

    this.registryFactory[backendName] = {
      factory,
      priority
    };
    return true;
  }

  async setBackend(backendName) {
    if (this.registryFactory[backendName] == null) {
      throw new Error(`Backend name '${backendName}' not found in registry`);
    }

    this.backendName = backendName;

    if (this.registry[backendName] == null) {
      this.backendInstance = null;
      const {
        success,
        asyncInit
      } = this.initializeBackend(backendName);
      const result = asyncInit ? await success : success;

      if (!result) {
        return false;
      }
    }

    this.backendInstance = this.registry[backendName];
    this.setupRegisteredKernels(); // Reset the profiler.

    this.profiler = new _profiler.Profiler(this.backendInstance);
    return true;
  }

  setupRegisteredKernels() {
    const kernels = (0, _kernel_registry.getKernelsForBackend)(this.backendName);
    kernels.forEach(kernel => {
      if (kernel.setupFunc != null) {
        kernel.setupFunc(this.backendInstance);
      }
    });
  }

  disposeRegisteredKernels(backendName) {
    const kernels = (0, _kernel_registry.getKernelsForBackend)(backendName);
    kernels.forEach(kernel => {
      if (kernel.disposeFunc != null) {
        kernel.disposeFunc(this.registry[backendName]);
      }
    });
  }
  /**
   * Initializes a backend by looking up the backend name in the factory
   * registry and calling the factory method. Returns a boolean representing
   * whether the initialization of the backend suceeded. Throws an error if
   * there is no backend in the factory registry.
   */


  initializeBackend(backendName) {
    const registryFactoryEntry = this.registryFactory[backendName];

    if (registryFactoryEntry == null) {
      throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);
    }

    try {
      const backend = registryFactoryEntry.factory();
      /* Test if the factory returns a promise.
      Done in a more liberal way than
      previous 'Promise.resolve(backend)===backend'
      as we needed to account for custom Promise
      implementations (e.g. Angular) */

      if (backend && !(backend instanceof _backend.KernelBackend) && typeof backend.then === 'function') {
        const promiseId = ++this.pendingBackendInitId;
        const success = backend.then(backendInstance => {
          // Outdated promise. Another backend was set in the meantime.
          if (promiseId < this.pendingBackendInitId) {
            return false;
          }

          this.registry[backendName] = backendInstance;
          this.pendingBackendInit = null;
          return true;
        }).catch(err => {
          // Outdated promise. Another backend was set in the meantime.
          if (promiseId < this.pendingBackendInitId) {
            return false;
          }

          this.pendingBackendInit = null;
          console.warn(`Initialization of backend ${backendName} failed`);
          console.warn(err.stack || err.message);
          return false;
        });
        this.pendingBackendInit = success;
        return {
          success,
          asyncInit: true
        };
      } else {
        this.registry[backendName] = backend;
        return {
          success: true,
          asyncInit: false
        };
      }
    } catch (err) {
      console.warn(`Initialization of backend ${backendName} failed`);
      console.warn(err.stack || err.message);
      return {
        success: false,
        asyncInit: false
      };
    }
  }

  removeBackend(backendName) {
    if (!(backendName in this.registryFactory)) {
      throw new Error(`${backendName} backend not found in registry`);
    }

    if (this.backendName === backendName && this.pendingBackendInit != null) {
      // There is a pending promise of the backend we want to remove. Make it
      // obsolete.
      this.pendingBackendInitId++;
    }

    if (backendName in this.registry) {
      this.disposeRegisteredKernels(backendName);
      this.registry[backendName].dispose();
      delete this.registry[backendName];
    }

    delete this.registryFactory[backendName]; // Unset the backend if it is active.

    if (this.backendName === backendName) {
      this.pendingBackendInit = null;
      this.backendName = null;
      this.backendInstance = null;
    }
  }

  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0) {
      throw new Error('No backend found in registry.');
    }

    return Object.keys(this.registryFactory).sort((a, b) => {
      // Highest priority comes first.
      return this.registryFactory[b].priority - this.registryFactory[a].priority;
    });
  }

  initializeBackendsAndReturnBest() {
    const sortedBackends = this.getSortedBackends();

    for (let i = 0; i < sortedBackends.length; i++) {
      const backendName = sortedBackends[i];
      const {
        success,
        asyncInit
      } = this.initializeBackend(backendName);

      if (asyncInit || success) {
        return {
          name: backendName,
          asyncInit
        };
      }
    }

    throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);
  }

  moveData(backend, dataId) {
    const info = this.state.tensorInfo.get(dataId);
    const srcBackend = info.backend;
    const values = this.readSync(dataId);
    const refCount = srcBackend.refCount(dataId); // Delete the tensor from the old backend and move it to the new
    // backend.

    srcBackend.disposeData(dataId, true);
    info.backend = backend;
    backend.move(dataId, values, info.shape, info.dtype, refCount);

    if (this.shouldCheckForMemLeaks()) {
      // Track the number of moves during a kernel execution to correctly
      // detect memory leaks.
      this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
    }
  }

  tidy(nameOrFn, fn) {
    let name = null;

    if (fn == null) {
      // Called with only 1 argument.
      if (typeof nameOrFn !== 'function') {
        throw new Error('Please provide a function to tidy()');
      }

      fn = nameOrFn;
    } else {
      // Called with 2 arguments.
      if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {
        throw new Error('When calling with two arguments, the first argument ' + 'to tidy() must be a string');
      }

      if (typeof fn !== 'function') {
        throw new Error('When calling with two arguments, the 2nd argument ' + 'to tidy() must be a function');
      }

      name = nameOrFn; // TODO(nsthorat,smilkov): Do operation logging and performance
      // profiling.
    }

    let result;
    return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {
      result = fn();

      if (result instanceof Promise) {
        console.error('Cannot return a Promise inside of tidy.');
      }

      return result;
    });
  }

  scopedRun(start, end, f) {
    start();

    try {
      const res = f();
      end();
      return res;
    } catch (ex) {
      end();
      throw ex;
    }
  }

  nextTensorId() {
    return Engine.nextTensorId++;
  }

  nextVariableId() {
    return Engine.nextVariableId++;
  }
  /**
   * This method is called instead of the public-facing tensor.clone() when
   * saving a tensor for backwards pass. It makes sure to add the clone
   * operation to the tape regardless of being called inside a kernel
   * execution.
   */


  clone(x) {
    const y = ENGINE.runKernel(_kernel_names.Identity, {
      x
    });
    const inputs = {
      x
    };

    const grad = dy => ({
      x: () => {
        const dtype = 'float32';
        const gradInputs = {
          x: dy
        };
        const attrs = {
          dtype
        };
        return ENGINE.runKernel(_kernel_names.Cast, gradInputs, // tslint:disable-next-line: no-unnecessary-type-assertion
        attrs);
      }
    });

    const saved = [];
    this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});
    return y;
  }
  /**
   * Execute a kernel with the given name and return the output tensor.
   *
   * @param kernelName The name of the kernel to execute.
   * @param inputs A map of input names to tensors.
   * @param attrs A map of attribute names to their values. An attribute is a
   *     primitive (non-tensor) input to the kernel.
   * @param inputsToSave A list of tensors, inputs to save for the backprop
   *     computation.
   * @param outputsToSave A list of booleans, specifying which output to save
   *     for the backprop computation. These are booleans since the output
   * tensors are not visible to the user.
   */


  runKernel(kernelName, inputs, attrs) {
    if (this.backendName == null) {
      // backend has not been initialized yet (backend initialization is lazy
      // can be deferred until an op/ kernel is run).
      // The below getter has side effects that will try to initialize the
      // backend and set properties like this.backendName
      // tslint:disable-next-line: no-unused-expression
      this.backend;
    }

    const hasKernel = (0, _kernel_registry.getKernel)(kernelName, this.backendName) != null;

    if (!hasKernel) {
      throw new Error(`Kernel '${kernelName}' not registered for backend '${this.backendName}'`);
    }

    return this.runKernelFunc({
      kernelName,
      inputs,
      attrs
    });
  }

  shouldCheckForMemLeaks() {
    return this.ENV.getBool('IS_TEST');
  }

  checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {
    const numDataIdsAfter = this.backend.numDataIds(); // Count the number of data ids associated with the result of the kernel.

    let numOutputDataIds = 0;
    outInfos.forEach(info => {
      // Complex numbers allocate 3 data ids, one for 'real', one for
      // 'imaginary', and one for the container that holds the former two.
      numOutputDataIds += info.dtype === 'complex64' ? 3 : 1;
    }); // Account for the number of moves during kernel execution. A "data move"
    // can happen in the middle of a kernel execution, placing a new (key,value)
    // pair in the data storage. Since data moves have net zero effect (we
    // always remove the data from the old backend), we have to cancel them out
    // when detecting memory leaks.

    const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];
    const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;

    if (dataIdsLeaked > 0) {
      throw new Error(`Backend '${this.backendName}' has an internal memory leak ` + `(${dataIdsLeaked} data ids) after running '${kernelName}'`);
    }
  }
  /**
   * Internal helper method to execute a kernel Func
   *
   * Use `runKernel` to execute kernels from outside of engine.
   */


  runKernelFunc(kernelParams) {
    let outputs;
    let saved = [];
    const isTapeOn = this.isTapeOn();
    const startingBytecount = this.state.numBytes;
    const startingNumTensors = this.state.numTensors;

    if (this.shouldCheckForMemLeaks()) {
      this.state.numDataMovesStack.push(0);
    }

    let kernelFunc;

    if (this.backendName == null) {
      // backend has not been initialized yet (backend initialization is lazy
      // can be deferred until an op/ kernel is run).
      // The below getter has side effects that will try to initialize the
      // backend and set properties like this.backendName
      // tslint:disable-next-line: no-unused-expression
      this.backend;
    }

    let out;
    const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ? kernelParams.kernelName : this.state.activeScope != null ? this.state.activeScope.name : ''; // Create the kernelFunc from either a registered kernel OR passed in
    // forward/backward functions (used by custom grad). In this context a
    // kernelFunc wraps a kernel implementation with some bookkeeping.

    if (isRegisteredKernelInvocation(kernelParams)) {
      const {
        kernelName,
        inputs,
        attrs
      } = kernelParams;

      if (this.backendName == null) {
        // backend has not been initialized yet (backend initialization is lazy
        // can be deferred until an op/ kernel is run).
        // The below getter has side effects that will try to initialize the
        // backend and set properties like this.backendName
        // tslint:disable-next-line: no-unused-expression
        this.backend;
      }

      const kernel = (0, _kernel_registry.getKernel)(kernelName, this.backendName);
      util.assert(kernel != null, () => `Cannot find registered kernel '${kernelName}' for backend '${this.backendName}'`);

      kernelFunc = () => {
        const numDataIdsBefore = this.backend.numDataIds();
        out = kernel.kernelFunc({
          inputs,
          attrs,
          backend: this.backend
        });
        const outInfos = Array.isArray(out) ? out : [out];

        if (this.shouldCheckForMemLeaks()) {
          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);
        }

        const outTensors = outInfos.map(outInfo => {
          // todo (yassogba) remove this option (Tensor) when node backend
          // methods have been modularized and they all return tensorInfo.
          // TensorInfos do not have a rank attribute.
          if (outInfo.rank != null) {
            return outInfo;
          }

          const {
            dataId,
            shape,
            dtype
          } = outInfo;
          return this.makeTensorFromDataId(dataId, shape, dtype);
        }); // Save any required inputs and outputs.
        // Do not save unless we are recording to the tape. Otherwise it would
        // cause a mem leak since there would be no backprop for these tensors
        // (which would otherwise dispose them).

        if (isTapeOn) {
          const tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);
          saved = this.saveTensorsForBackwardMode(tensorsToSave);
        }

        return outTensors;
      };
    } else {
      const {
        forwardFunc
      } = kernelParams; // Running a customGrad op.

      const saveFunc = tensors => {
        // Do not save unless we are recording to the tape. Otherwise it would
        // cause a mem leak since we would never run backprop, which disposes
        // the kept tensors.
        if (!isTapeOn) {
          return;
        }

        saved = tensors.map(tensor => this.keep(this.clone(tensor)));
      };

      kernelFunc = () => {
        const numDataIdsBefore = this.backend.numDataIds();
        out = this.tidy(() => forwardFunc(this.backend, saveFunc));
        const outs = Array.isArray(out) ? out : [out];

        if (this.shouldCheckForMemLeaks()) {
          // Scope name is used to print a more helpful error message if needed.
          this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);
        }

        return outs;
      };
    } //
    // Run the kernelFunc. Optionally profiling it.
    //


    const {
      inputs,
      attrs
    } = kernelParams;
    const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ? null : kernelParams.backwardsFunc;
    let kernelProfile;
    this.scopedRun( // Stop recording to a tape when running a kernel.
    () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
      if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {
        outputs = kernelFunc();
      } else {
        kernelProfile = this.profiler.profileKernel(kernelOrScopeName, inputs, () => kernelFunc());

        if (this.ENV.getBool('DEBUG')) {
          this.profiler.logKernelProfile(kernelProfile);
        }

        outputs = kernelProfile.outputs;
      }
    });

    if (isTapeOn) {
      this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);
    }

    if (this.state.profiling) {
      this.state.activeProfile.kernels.push({
        name: kernelOrScopeName,
        bytesAdded: this.state.numBytes - startingBytecount,
        totalBytesSnapshot: this.state.numBytes,
        tensorsAdded: this.state.numTensors - startingNumTensors,
        totalTensorsSnapshot: this.state.numTensors,
        inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),
        outputShapes: outputs.map(item => item.shape),
        kernelTimeMs: kernelProfile.timeMs,
        extraInfo: kernelProfile.extraInfo
      });
    }

    return Array.isArray(out) ? outputs : outputs[0];
  }
  /**
   * Saves tensors used in forward mode for use in backward mode.
   *
   * @param tensors the list of tensors to save.
   */


  saveTensorsForBackwardMode(tensors) {
    const saved = tensors.map(tensor => this.keep(this.clone(tensor)));
    return saved;
  }
  /**
   * Returns a list of tensors to save for a given gradient calculation.
   *
   * @param kernelName name of kernel to look up gradient for.
   * @param inputs a map of input tensors.
   * @param outputs an array of output tensors from forward mode of kernel.
   */


  getTensorsForGradient(kernelName, inputs, outputs) {
    const gradConfig = (0, _kernel_registry.getGradient)(kernelName);

    if (gradConfig != null) {
      const inputsToSave = gradConfig.inputsToSave || [];
      const outputsToSave = gradConfig.outputsToSave || []; // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs
      // specified in inputsToSave will be saved.

      let inputTensorsToSave;

      if (gradConfig.saveAllInputs) {
        util.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');
        inputTensorsToSave = Object.keys(inputs).map(key => inputs[key]);
      } else {
        inputTensorsToSave = inputsToSave.map(inputName => inputs[inputName]);
      }

      const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);
      return inputTensorsToSave.concat(outputTensorsToSave);
    } // We return an empty list rather than throw an error because the kernel we
    // are looking up may not actually be relevant to backproping through the
    // overall function
    //
    // See 'does not error if irrelevant (pruned) ops are missing grads' test
    // in gradients_test.ts for an example.


    return [];
  }
  /**
   * Internal method used by public APIs for tensor creation. Makes a new
   * tensor with the provided shape, dtype and values. It always
   * creates a new data id and writes the values to the underlying backend.
   */


  makeTensor(values, shape, dtype, backend) {
    if (values == null) {
      throw new Error('Values passed to engine.makeTensor() are null');
    }

    dtype = dtype || 'float32';
    backend = backend || this.backend;
    let backendVals = values;

    if (dtype === 'string' && util.isString(values[0])) {
      backendVals = values.map(d => util.encodeString(d));
    }

    const dataId = backend.write(backendVals, shape, dtype);
    const t = new _tensor.Tensor(shape, dtype, dataId, this.nextTensorId());
    this.trackTensor(t, backend); // Count bytes for string tensors.

    if (dtype === 'string') {
      const info = this.state.tensorInfo.get(dataId);
      const newBytes = (0, util.bytesFromStringArray)(backendVals);
      this.state.numBytes += newBytes - info.bytes;
      info.bytes = newBytes;
    }

    return t;
  }
  /**
   * Internal method used by backends. Makes a new tensor
   * that is a wrapper around an existing data id. It doesn't create
   * a new data id, only increments the ref count used in memory tracking.
   */


  makeTensorFromDataId(dataId, shape, dtype, backend) {
    dtype = dtype || 'float32';
    const t = new _tensor.Tensor(shape, dtype, dataId, this.nextTensorId());
    this.trackTensor(t, backend);
    return t;
  }

  makeVariable(initialValue, trainable = true, name, dtype) {
    name = name || this.nextVariableId().toString();

    if (dtype != null && dtype !== initialValue.dtype) {
      initialValue = initialValue.cast(dtype);
    }

    const v = new _tensor.Variable(initialValue, trainable, name, this.nextTensorId());

    if (this.state.registeredVariables[v.name] != null) {
      throw new Error(`Variable with name ${v.name} was already registered`);
    }

    this.state.registeredVariables[v.name] = v;
    this.incRef(v, this.backend);
    return v;
  }

  trackTensor(a, backend) {
    this.state.numTensors++;

    if (a.dtype === 'string') {
      this.state.numStringTensors++;
    } // Bytes for complex numbers are counted by their components. Bytes for
    // string tensors are counted when writing values.


    let bytes = 0;

    if (a.dtype !== 'complex64' && a.dtype !== 'string') {
      bytes = a.size * util.bytesPerElement(a.dtype);
    }

    this.state.numBytes += bytes;

    if (!this.state.tensorInfo.has(a.dataId)) {
      this.state.numDataBuffers++;
      this.state.tensorInfo.set(a.dataId, {
        backend: backend || this.backend,
        dtype: a.dtype,
        shape: a.shape,
        bytes
      });
    }

    if (!(a instanceof _tensor.Variable)) {
      this.track(a);
    }
  } // Track the tensor by dataId and increase the refCount for the dataId in the
  // backend.
  // TODO(pyu10055): This is currently used by makeVariable method, to increase
  // refCount on the backend for the dataId. It can potentially be replaced with
  // Identity op indead of calling backend directly.


  incRef(a, backend) {
    this.trackTensor(a, backend);
    this.backend.incRef(a.dataId);
  }

  removeDataId(dataId, backend) {
    if (this.state.tensorInfo.has(dataId) && this.state.tensorInfo.get(dataId).backend === backend) {
      this.state.tensorInfo.delete(dataId);
      this.state.numDataBuffers--;
    }
  }

  disposeTensor(a) {
    if (!this.state.tensorInfo.has(a.dataId)) {
      return;
    }

    const info = this.state.tensorInfo.get(a.dataId);
    this.state.numTensors--;

    if (a.dtype === 'string') {
      this.state.numStringTensors--;
      this.state.numBytes -= info.bytes;
    } // Don't count bytes for complex numbers as they are counted by their
    // components.


    if (a.dtype !== 'complex64' && a.dtype !== 'string') {
      const bytes = a.size * util.bytesPerElement(a.dtype);
      this.state.numBytes -= bytes;
    } // Remove the reference to dataId if backend dispose the data successfully


    if (info.backend.disposeData(a.dataId)) {
      this.removeDataId(a.dataId, info.backend);
    } // TODO(nsthorat): Construct an error and save the stack trace for
    // debugging when in debug mode. Creating a stack trace is too expensive
    // to do unconditionally.

  }

  disposeVariables() {
    for (const varName in this.state.registeredVariables) {
      const v = this.state.registeredVariables[varName];
      this.disposeVariable(v);
    }
  }

  disposeVariable(v) {
    this.disposeTensor(v);

    if (this.state.registeredVariables[v.name] != null) {
      delete this.state.registeredVariables[v.name];
    }
  }

  memory() {
    const info = this.backend.memory();
    info.numTensors = this.state.numTensors;
    info.numDataBuffers = this.state.numDataBuffers;
    info.numBytes = this.state.numBytes;

    if (this.state.numStringTensors > 0) {
      info.unreliable = true;

      if (info.reasons == null) {
        info.reasons = [];
      }

      info.reasons.push('Memory usage by string tensors is approximate ' + '(2 bytes per character)');
    }

    return info;
  }

  async profile(query) {
    this.state.profiling = true;
    const startBytes = this.state.numBytes;
    const startNumTensors = this.state.numTensors;
    this.state.activeProfile.kernels = [];
    this.state.activeProfile.result = await query();
    this.state.profiling = false;
    this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));
    this.state.activeProfile.newBytes = this.state.numBytes - startBytes;
    this.state.activeProfile.newTensors = this.state.numTensors - startNumTensors;

    for (const kernel of this.state.activeProfile.kernels) {
      kernel.kernelTimeMs = await kernel.kernelTimeMs;
      kernel.extraInfo = await kernel.extraInfo;
    }

    return this.state.activeProfile;
  }

  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }

  addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {
    const tapeNode = {
      id: this.state.nextTapeNodeId++,
      kernelName,
      inputs,
      outputs,
      saved
    };
    const gradConfig = (0, _kernel_registry.getGradient)(kernelName);

    if (gradConfig != null) {
      gradientsFunc = gradConfig.gradFunc;
    }

    if (gradientsFunc != null) {
      tapeNode.gradient = dys => {
        // TODO(smilkov): To optimize back-prop, pass dys that are not used in
        // the backprop graph to the user as null instead of zeros
        dys = dys.map((dy, i) => {
          if (dy == null) {
            const output = outputs[i];
            const vals = util.makeZerosTypedArray(output.size, output.dtype);
            return this.makeTensor(vals, output.shape, output.dtype);
          }

          return dy;
        }); // Grad functions of ops with single outputs expect a dy, while ops
        // with multiple outputs expect dys (array of dy).

        return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);
      };
    }

    this.state.activeTape.push(tapeNode);
  }

  keep(result) {
    result.kept = true;
    return result;
  }

  startTape() {
    if (this.state.gradientDepth === 0) {
      this.state.activeTape = [];
    }

    this.state.gradientDepth++;
  }

  endTape() {
    this.state.gradientDepth--;
  }
  /**
   * Start a scope. Use this with endScope() to achieve the same functionality
   * as scope() without the need for a function closure.
   */


  startScope(name) {
    const scopeInfo = {
      track: [],
      name: 'unnamed scope',
      id: this.state.nextScopeId++
    };

    if (name) {
      scopeInfo.name = name;
    }

    this.state.scopeStack.push(scopeInfo);
    this.state.activeScope = scopeInfo;
  }
  /**
   * End a scope. Use this with startScope() to achieve the same functionality
   * as scope() without the need for a function closure.
   */


  endScope(result) {
    const tensorsToTrackInParent = (0, _tensor_util.getTensorsInContainer)(result);
    const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id)); // Dispose the arrays tracked in this scope.

    for (let i = 0; i < this.state.activeScope.track.length; i++) {
      const tensor = this.state.activeScope.track[i];

      if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {
        tensor.dispose();
      }
    }

    const oldScope = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1]; // Track the current result in the parent scope.

    tensorsToTrackInParent.forEach(tensor => {
      // Only track the tensor if was allocated in the inner scope and is not
      // globally kept.
      if (!tensor.kept && tensor.scopeId === oldScope.id) {
        this.track(tensor);
      }
    });
  }
  /**
   * Returns gradients of `f` with respect to each of the `xs`. The gradients
   * returned are of the same length as `xs`, but some might be null if `f`
   * was not a function of that `x`. It also takes optional dy to multiply the
   * gradient, which defaults to `1`.
   */


  gradients(f, xs, dy, allowNoGradients = false) {
    util.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');

    if (dy != null && dy.dtype !== 'float32') {
      throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);
    }

    const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));
    util.assert(y instanceof _tensor.Tensor, () => 'The result y returned by f() must be a tensor.'); // Filter out the nodes that don't connect x => y.

    const filteredTape = (0, _tape.getFilteredNodesXToY)(this.state.activeTape, xs, y);

    if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {
      throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' + 'that the f you passed encloses all operations that lead from x ' + 'to y.');
    }

    return this.tidy('backward', () => {
      const accumulatedGradientMap = {};
      accumulatedGradientMap[y.id] = dy == null ? ones(y.shape) : dy; // Backprop gradients through the filtered nodes.

      (0, _tape.backpropagateGradients)(accumulatedGradientMap, filteredTape, // Pass the tidy function to avoid circular dep with `tape.ts`.
      f => this.tidy(f), // Pass an add function to avoide a circular dep with `tape.ts`.
      add);
      const grads = xs.map(x => accumulatedGradientMap[x.id]);

      if (this.state.gradientDepth === 0) {
        // This means that we are not computing higher-order gradients
        // and can clean up the tape.
        this.state.activeTape.forEach(node => {
          for (const tensor of node.saved) {
            tensor.dispose();
          }
        });
        this.state.activeTape = null;
      }

      return {
        value: y,
        grads
      };
    });
  }

  customGrad(f) {
    util.assert(util.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');
    return (...inputs) => {
      util.assert(inputs.every(t => t instanceof _tensor.Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' + 'tensors');
      let res;
      const inputMap = {};
      inputs.forEach((input, i) => {
        inputMap[i] = input;
      });

      const forwardFunc = (_, save) => {
        res = f(...[...inputs, save]);
        util.assert(res.value instanceof _tensor.Tensor, () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.value` is a tensor');
        util.assert(util.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function.');
        return res.value;
      };

      const backwardsFunc = (dy, saved) => {
        const gradRes = res.gradFunc(dy, saved);
        const grads = Array.isArray(gradRes) ? gradRes : [gradRes];
        util.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'the same number of tensors as inputs passed to f(...).');
        util.assert(grads.every(t => t instanceof _tensor.Tensor), () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'a list of only tensors.');
        const gradMap = {};
        grads.forEach((grad, i) => {
          gradMap[i] = () => grad;
        });
        return gradMap;
      };

      return this.runKernelFunc({
        forwardFunc,
        backwardsFunc,
        inputs: inputMap
      });
    };
  }

  readSync(dataId) {
    // Route the read to the correct backend.
    const info = this.state.tensorInfo.get(dataId);
    return info.backend.readSync(dataId);
  }

  read(dataId) {
    // Route the read to the correct backend.
    const info = this.state.tensorInfo.get(dataId);
    return info.backend.read(dataId);
  }

  async time(query) {
    const start = (0, util.now)();
    const timingInfo = await this.backend.time(query);
    timingInfo.wallMs = (0, util.now)() - start;
    return timingInfo;
  }
  /**
   * Tracks a Tensor in the current scope to be automatically cleaned up
   * when the current scope ends, and returns the value.
   *
   * @param result The Tensor to track in the current scope.
   */


  track(result) {
    if (this.state.activeScope != null) {
      result.scopeId = this.state.activeScope.id;
      this.state.activeScope.track.push(result);
    }

    return result;
  }

  get registeredVariables() {
    return this.state.registeredVariables;
  }
  /**
   * Resets the engine state. Removes all backends but does not remove
   * registered backend factories.
   */


  reset() {
    // Make any pending promise obsolete.
    this.pendingBackendInitId++;
    this.state.dispose();
    this.ENV.reset();
    this.state = new EngineState();

    for (const backendName in this.registry) {
      this.disposeRegisteredKernels(backendName);
      this.registry[backendName].dispose();
      delete this.registry[backendName];
    }

    this.backendName = null;
    this.backendInstance = null;
    this.pendingBackendInit = null;
  }

}

exports.Engine = Engine;
Engine.nextTensorId = 0;
Engine.nextVariableId = 0;

function ones(shape) {
  const values = (0, util.makeOnesTypedArray)((0, util.sizeFromShape)(shape), 'float32');
  return ENGINE.makeTensor(values, shape, 'float32');
}

function getOrMakeEngine() {
  const ns = (0, _global_util.getGlobalNamespace)();

  if (ns._tfengine == null) {
    const environment = new _environment.Environment(ns);
    ns._tfengine = new Engine(environment);
  }

  (0, _environment.setEnvironmentGlobal)(ns._tfengine.ENV); // Tell the current tensor interface that the global engine is responsible
  // for tracking.

  (0, _tensor.setTensorTracker)(() => ns._tfengine);
  return ns._tfengine;
}

const ENGINE = getOrMakeEngine();
/**
 * A implementation of the add op for use within engine and tape.
 *
 * This allows us to avoid a circular dependency between add.ts and engine.
 * It is exported to be available in tape tests.
 */

exports.ENGINE = ENGINE;

function add(a, b) {
  // We duplicate Add here to avoid a circular dependency with add.ts.
  const inputs = {
    a,
    b
  };
  return ENGINE.runKernel(_kernel_names.Add, inputs);
}
},{"./backends/backend":"Sk1f","./environment":"vpgN","./global_util":"TJmh","./kernel_names":"rJl6","./kernel_registry":"PlaY","./profiler":"g3XT","./tape":"s88o","./tensor":"eFW4","./tensor_util":"wtFc","./util":"XXxQ"}],"g3Z1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isMobile = isMobile;
exports.isBrowser = isBrowser;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line:no-any
function _isNavigatorDefined() {
  return typeof navigator !== 'undefined' && navigator != null;
}

function isMobile(nav) {
  if (nav || _isNavigatorDefined()) {
    if (!nav) {
      nav = navigator;
    }

    if (nav.product === 'ReactNative') {
      return true;
    } // tslint:disable-next-line:no-any


    const a = nav.userAgent || nav.vendor || window.opera; // tslint:disable-next-line:max-line-length

    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || // tslint:disable-next-line:max-line-length
    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4));
  }

  return false;
}

function isBrowser() {
  return typeof window !== 'undefined' && window.document != null || typeof WorkerGlobalScope !== 'undefined';
}
},{}],"lELk":[function(require,module,exports) {
var process = require("process");
"use strict";

require("./engine");

var device_util = _interopRequireWildcard(require("./device_util"));

var _environment = require("./environment");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ENV = (0, _environment.env)();
/**
 * This file contains environment-related flag registrations.
 */

/** Whether to enable debug mode. */

ENV.registerFlag('DEBUG', () => false, debugValue => {
  if (debugValue) {
    console.warn('Debugging mode is ON. The output of every math call will ' + 'be downloaded to CPU and checked for NaNs. ' + 'This significantly impacts performance.');
  }
});
/** Whether we are in a browser (as versus, say, node.js) environment. */

ENV.registerFlag('IS_BROWSER', () => device_util.isBrowser());
/** Whether we are in a browser (as versus, say, node.js) environment. */

ENV.registerFlag('IS_NODE', () => typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.node !== 'undefined');
/** Whether this browser is Chrome. */

ENV.registerFlag('IS_CHROME', () => typeof navigator !== 'undefined' && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
/**
 * True when the environment is "production" where we disable safety checks
 * to gain performance.
 */

ENV.registerFlag('PROD', () => false);
/**
 * Whether to do sanity checks when inferring a shape from user-provided
 * values, used when creating a new tensor.
 */

ENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));
/** Whether deprecation warnings are enabled. */

ENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);
/** True if running unit tests. */

ENV.registerFlag('IS_TEST', () => false);
/** Whether to check computation result for errors. */

ENV.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => true);
/** Whether the backend needs to wrap input to imageBitmap. */

ENV.registerFlag('WRAP_TO_IMAGEBITMAP', () => false);
},{"./engine":"phT7","./device_util":"g3Z1","./environment":"vpgN","process":"UloM"}],"y4X4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inferShape = inferShape;
exports.convertToTensor = convertToTensor;
exports.convertToTensorArray = convertToTensorArray;

var _engine = require("./engine");

var _environment = require("./environment");

var _tensor = require("./tensor");

var _util = require("./util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function inferShape(val, dtype) {
  let firstElem = val;

  if ((0, _util.isTypedArray)(val)) {
    return dtype === 'string' ? [] : [val.length];
  }

  if (!Array.isArray(val)) {
    return []; // Scalar.
  }

  const shape = [];

  while (Array.isArray(firstElem) || (0, _util.isTypedArray)(firstElem) && dtype !== 'string') {
    shape.push(firstElem.length);
    firstElem = firstElem[0];
  }

  if (Array.isArray(val) && (0, _environment.env)().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {
    deepAssertShapeConsistency(val, shape, []);
  }

  return shape;
}

function deepAssertShapeConsistency(val, shape, indices) {
  indices = indices || [];

  if (!Array.isArray(val) && !(0, _util.isTypedArray)(val)) {
    (0, _util.assert)(shape.length === 0, () => `Element arr[${indices.join('][')}] is a primitive, ` + `but should be an array/TypedArray of ${shape[0]} elements`);
    return;
  }

  (0, _util.assert)(shape.length > 0, () => `Element arr[${indices.join('][')}] should be a primitive, ` + `but is an array of ${val.length} elements`);
  (0, _util.assert)(val.length === shape[0], () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` + `elements, but has ${val.length} elements`);
  const subShape = shape.slice(1);

  for (let i = 0; i < val.length; ++i) {
    deepAssertShapeConsistency(val[i], subShape, indices.concat(i));
  }
}

function assertDtype(expectedDtype, actualDType, argName, functionName) {
  if (expectedDtype === 'string_or_numeric') {
    return;
  }

  if (expectedDtype == null) {
    throw new Error(`Expected dtype cannot be null.`);
  }

  if (expectedDtype !== 'numeric' && expectedDtype !== actualDType || expectedDtype === 'numeric' && actualDType === 'string') {
    throw new Error(`Argument '${argName}' passed to '${functionName}' must ` + `be ${expectedDtype} tensor, but got ${actualDType} tensor`);
  }
}

function convertToTensor(x, argName, functionName, parseAsDtype = 'numeric') {
  if (x instanceof _tensor.Tensor) {
    assertDtype(parseAsDtype, x.dtype, argName, functionName);
    return x;
  }

  let inferredDtype = (0, _util.inferDtype)(x); // If the user expects a bool/int/float, use that info to update the
  // inferredDtype when it is not a string.

  if (inferredDtype !== 'string' && ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {
    inferredDtype = parseAsDtype;
  }

  assertDtype(parseAsDtype, inferredDtype, argName, functionName);

  if (x == null || !(0, _util.isTypedArray)(x) && !Array.isArray(x) && typeof x !== 'number' && typeof x !== 'boolean' && typeof x !== 'string') {
    const type = x == null ? 'null' : x.constructor.name;
    throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` + `Tensor or TensorLike, but got '${type}'`);
  }

  const inferredShape = inferShape(x, inferredDtype);

  if (!(0, _util.isTypedArray)(x) && !Array.isArray(x)) {
    x = [x];
  }

  const skipTypedArray = true;
  const values = inferredDtype !== 'string' ? (0, _util.toTypedArray)(x, inferredDtype) : (0, _util.flatten)(x, [], skipTypedArray);
  return _engine.ENGINE.makeTensor(values, inferredShape, inferredDtype);
}

function convertToTensorArray(arg, argName, functionName, parseAsDtype = 'numeric') {
  if (!Array.isArray(arg)) {
    throw new Error(`Argument ${argName} passed to ${functionName} must be a ` + '`Tensor[]` or `TensorLike[]`');
  }

  const tensors = arg;
  return tensors.map((t, i) => convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));
}
},{"./engine":"phT7","./environment":"vpgN","./tensor":"eFW4","./util":"XXxQ"}],"uE86":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.op = op;
exports.OP_SCOPE_SUFFIX = void 0;

var _engine = require("../engine");

var _util = require("../util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OP_SCOPE_SUFFIX = '__op';
/**
 * Used for wrapping functions that perform math operations on
 * Tensors. The function will be wrapped in a named scope that cleans all
 * memory usage after the function is done.
 */

exports.OP_SCOPE_SUFFIX = OP_SCOPE_SUFFIX;

function op(f) {
  const keys = Object.keys(f);

  if (keys.length !== 1) {
    throw new Error(`Please provide an object with a single key ` + `(operation name) mapping to a function. Got an object with ` + `${keys.length} keys.`);
  }

  let opName = keys[0];
  const fn = f[opName]; // Strip the underscore from the end of the function name.

  if (opName.endsWith('_')) {
    opName = opName.substring(0, opName.length - 1);
  } // add an __op suffix to distinguish ops from kernels in tf.profile


  opName = opName + OP_SCOPE_SUFFIX; // tslint:disable-next-line:no-any

  const f2 = (...args) => {
    _engine.ENGINE.startScope(opName);

    try {
      const result = fn(...args);

      if ((0, _util.isPromise)(result)) {
        console.error('Cannot return a Promise inside of tidy.');
      }

      _engine.ENGINE.endScope(result);

      return result;
    } catch (ex) {
      _engine.ENGINE.endScope(null);

      throw ex;
    }
  };

  Object.defineProperty(f2, 'name', {
    value: opName,
    configurable: true
  }); // tslint:disable-next-line:no-any

  return f2;
}
},{"../engine":"phT7","../util":"XXxQ"}],"e4je":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.complex = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Converts two real numbers to a complex number.
 *
 * Given a tensor `real` representing the real part of a complex number, and a
 * tensor `imag` representing the imaginary part of a complex number, this
 * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],
 * where r represents the real part and i represents the imag part.
 *
 * The input tensors real and imag must have the same shape.
 *
 * ```js
 * const real = tf.tensor1d([2.25, 3.25]);
 * const imag = tf.tensor1d([4.75, 5.75]);
 * const complex = tf.complex(real, imag);
 *
 * complex.print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function complex_(real, imag) {
  const $real = (0, _tensor_util_env.convertToTensor)(real, 'real', 'complex');
  const $imag = (0, _tensor_util_env.convertToTensor)(imag, 'imag', 'complex');
  util.assertShapesMatch($real.shape, $imag.shape, `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` + `must match in call to tf.complex().`);
  const inputs = {
    real: $real,
    imag: $imag
  };
  return _engine.ENGINE.runKernel(_kernel_names.Complex, inputs);
}

const complex = (0, _operation.op)({
  complex_
});
exports.complex = complex;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"HKvD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeTensor = makeTensor;

var _engine = require("../engine");

var _util = require("../util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** This is shared code across all tensor creation methods. */
function makeTensor(values, shape, inferredShape, dtype) {
  if (dtype == null) {
    dtype = (0, _util.inferDtype)(values);
  }

  if (dtype === 'complex64') {
    throw new Error(`Cannot construct a complex64 tensor directly. ` + `Please use tf.complex(real, imag).`);
  }

  if (!(0, _util.isTypedArray)(values) && !Array.isArray(values) && typeof values !== 'number' && typeof values !== 'boolean' && typeof values !== 'string') {
    throw new Error('values passed to tensor(values) must be a number/boolean/string or ' + 'an array of numbers/booleans/strings, or a TypedArray');
  }

  if (shape != null) {
    (0, _util.assertNonNegativeIntegerDimensions)(shape);
    const providedSize = (0, _util.sizeFromShape)(shape);
    const inferredSize = (0, _util.sizeFromShape)(inferredShape);
    (0, _util.assert)(providedSize === inferredSize, () => `Based on the provided shape, [${shape}], the tensor should have ` + `${providedSize} values but has ${inferredSize}`);

    for (let i = 0; i < inferredShape.length; ++i) {
      const inferred = inferredShape[i];
      const flatDimsDontMatch = i === inferredShape.length - 1 ? inferred !== (0, _util.sizeFromShape)(shape.slice(i)) : true;
      (0, _util.assert)(inferredShape[i] === shape[i] || !flatDimsDontMatch, () => `Error creating a new Tensor. Inferred shape ` + `(${inferredShape}) does not match the provided ` + `shape (${shape}). `);
    }
  }

  if (!(0, _util.isTypedArray)(values) && !Array.isArray(values)) {
    values = [values];
  }

  shape = shape || inferredShape;
  values = dtype !== 'string' ? (0, _util.toTypedArray)(values, dtype) : (0, _util.flatten)(values, [], true);
  return _engine.ENGINE.makeTensor(values, shape, dtype);
}
},{"../engine":"phT7","../util":"XXxQ"}],"woAd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor = tensor;

var _tensor_util_env = require("../tensor_util_env");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with the provided values, shape and dtype.
 *
 * ```js
 * // Pass an array of values to create a vector.
 * tf.tensor([1, 2, 3, 4]).print();
 * ```
 *
 * ```js
 * // Pass a nested array of values to make a matrix or a higher
 * // dimensional tensor.
 * tf.tensor([[1, 2], [3, 4]]).print();
 * ```
 *
 * ```js
 * // Pass a flat array and specify a shape yourself.
 * tf.tensor([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`. If the values are strings,
 *     they will be encoded as utf-8 and kept as `Uint8Array[]`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor(values, shape, dtype) {
  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);
  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"y4X4","./tensor_ops_util":"HKvD"}],"tjMC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DTYPE_VALUE_SIZE_MAP = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/* Type definitions for exporting and importing of models. */

/**
 * A map from Tensor dtype to number of bytes per element of the Tensor.
 */
const DTYPE_VALUE_SIZE_MAP = {
  'float32': 4,
  'float16': 2,
  'int32': 4,
  'uint16': 2,
  'uint8': 1,
  'bool': 1,
  'complex64': 8
};
exports.DTYPE_VALUE_SIZE_MAP = DTYPE_VALUE_SIZE_MAP;
},{}],"JlXx":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"LOck":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"ImJm":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"PlI0":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"JlXx","ieee754":"LOck","isarray":"ImJm","buffer":"PlI0"}],"kOer":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodeWeights = encodeWeights;
exports.decodeWeights = decodeWeights;
exports.concatenateTypedArrays = concatenateTypedArrays;
exports.stringByteLength = stringByteLength;
exports.arrayBufferToBase64String = arrayBufferToBase64String;
exports.base64StringToArrayBuffer = base64StringToArrayBuffer;
exports.concatenateArrayBuffers = concatenateArrayBuffers;
exports.basename = basename;
exports.getModelJSONForModelArtifacts = getModelJSONForModelArtifacts;
exports.getModelArtifactsForJSON = getModelArtifactsForJSON;
exports.getModelArtifactsInfoForJSON = getModelArtifactsInfoForJSON;
exports.getFloat16Decoder = getFloat16Decoder;

var _complex = require("../ops/complex");

var _tensor = require("../ops/tensor");

var _util = require("../util");

var _types = require("./types");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** Number of bytes reserved for the length of the string. (32bit integer). */
const NUM_BYTES_STRING_LENGTH = 4;
/**
 * Encode a map from names to weight values as an ArrayBuffer, along with an
 * `Array` of `WeightsManifestEntry` as specification of the encoded weights.
 *
 * This function does not perform sharding.
 *
 * This function is the reverse of `decodeWeights`.
 *
 * @param tensors A map ("dict") from names to tensors.
 * @param group Group to which the weights belong (optional).
 * @returns A `Promise` of
 *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s
 *     concatenated.
 *   - An `Array` of `WeightManifestEntry`s, carrying information including
 *     tensor names, `dtype`s and shapes.
 * @throws Error: on unsupported tensor `dtype`.
 */

async function encodeWeights(tensors, group) {
  // TODO(adarob, cais): Support quantization.
  const specs = [];
  const dataPromises = [];
  const names = Array.isArray(tensors) ? tensors.map(tensor => tensor.name) : Object.keys(tensors);

  for (let i = 0; i < names.length; ++i) {
    const name = names[i];
    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];

    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' && t.dtype !== 'string' && t.dtype !== 'complex64') {
      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);
    }

    const spec = {
      name,
      shape: t.shape,
      dtype: t.dtype
    };

    if (t.dtype === 'string') {
      const utf8bytes = new Promise(async resolve => {
        const vals = await t.bytes();
        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) + NUM_BYTES_STRING_LENGTH * vals.length;
        const bytes = new Uint8Array(totalNumBytes);
        let offset = 0;

        for (let i = 0; i < vals.length; i++) {
          const val = vals[i];
          const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);
          bytes.set(bytesOfLength, offset);
          offset += NUM_BYTES_STRING_LENGTH;
          bytes.set(val, offset);
          offset += val.length;
        }

        resolve(bytes);
      });
      dataPromises.push(utf8bytes);
    } else {
      dataPromises.push(t.data());
    }

    if (group != null) {
      spec.group = group;
    }

    specs.push(spec);
  }

  const tensorValues = await Promise.all(dataPromises);
  return {
    data: concatenateTypedArrays(tensorValues),
    specs
  };
}
/**
 * Decode flat ArrayBuffer as weights.
 *
 * This function does not handle sharding.
 *
 * This function is the reverse of `encodeWeights`.
 *
 * @param buffer A flat ArrayBuffer carrying the binary values of the tensors
 *   concatenated in the order specified in `specs`.
 * @param specs Specifications of the names, dtypes and shapes of the tensors
 *   whose value are encoded by `buffer`.
 * @return A map from tensor name to tensor value, with the names corresponding
 *   to names in `specs`.
 * @throws Error, if any of the tensors has unsupported dtype.
 */


function decodeWeights(buffer, specs) {
  // TODO(adarob, cais): Support quantization.
  const out = {};
  let float16Decode;
  let offset = 0;

  for (const spec of specs) {
    const name = spec.name;
    const dtype = spec.dtype;
    const shape = spec.shape;
    const size = (0, _util.sizeFromShape)(shape);
    let values;

    if ('quantization' in spec) {
      const quantization = spec.quantization;

      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {
        if (!('min' in quantization && 'scale' in quantization)) {
          throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` + `doesn't have corresponding metadata min and scale.`);
        }
      } else if (quantization.dtype === 'float16') {
        if (dtype !== 'float32') {
          throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` + `which only supports weights of type float32 not ${dtype}.`);
        }
      } else {
        throw new Error(`Weight ${spec.name} has unknown ` + `quantization dtype ${quantization.dtype}. ` + `Supported quantization dtypes are: ` + `'uint8', 'uint16', and 'float16'.`);
      }

      const quantizationSizeFactor = _types.DTYPE_VALUE_SIZE_MAP[quantization.dtype];
      const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);
      const quantizedArray = quantization.dtype === 'uint8' ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);

      if (dtype === 'float32') {
        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {
          values = new Float32Array(quantizedArray.length);

          for (let i = 0; i < quantizedArray.length; i++) {
            const v = quantizedArray[i];
            values[i] = v * quantization.scale + quantization.min;
          }
        } else if (quantization.dtype === 'float16') {
          if (float16Decode === undefined) {
            float16Decode = getFloat16Decoder();
          }

          values = float16Decode(quantizedArray);
        } else {
          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type float32.`);
        }
      } else if (dtype === 'int32') {
        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {
          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type int32.`);
        }

        values = new Int32Array(quantizedArray.length);

        for (let i = 0; i < quantizedArray.length; i++) {
          const v = quantizedArray[i];
          values[i] = Math.round(v * quantization.scale + quantization.min);
        }
      } else {
        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
      }

      offset += size * quantizationSizeFactor;
    } else if (dtype === 'string') {
      const size = (0, _util.sizeFromShape)(spec.shape);
      values = [];

      for (let i = 0; i < size; i++) {
        const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];
        offset += NUM_BYTES_STRING_LENGTH;
        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));
        values.push(bytes);
        offset += byteLength;
      }
    } else {
      const dtypeFactor = _types.DTYPE_VALUE_SIZE_MAP[dtype];
      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);

      if (dtype === 'float32') {
        values = new Float32Array(byteBuffer);
      } else if (dtype === 'int32') {
        values = new Int32Array(byteBuffer);
      } else if (dtype === 'bool') {
        values = new Uint8Array(byteBuffer);
      } else if (dtype === 'complex64') {
        values = new Float32Array(byteBuffer);
        const real = new Float32Array(values.length / 2);
        const image = new Float32Array(values.length / 2);

        for (let i = 0; i < real.length; i++) {
          real[i] = values[i * 2];
          image[i] = values[i * 2 + 1];
        }

        const realTensor = (0, _tensor.tensor)(real, shape, 'float32');
        const imageTensor = (0, _tensor.tensor)(image, shape, 'float32');
        out[name] = (0, _complex.complex)(realTensor, imageTensor);
        realTensor.dispose();
        imageTensor.dispose();
      } else {
        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
      }

      offset += size * dtypeFactor;
    }

    if (dtype !== 'complex64') {
      out[name] = (0, _tensor.tensor)(values, shape, dtype);
    }
  }

  return out;
}
/**
 * Concatenate TypedArrays into an ArrayBuffer.
 */


function concatenateTypedArrays(xs) {
  // TODO(adarob, cais): Support quantization.
  if (xs === null) {
    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);
  }

  let totalByteLength = 0; // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'
  // can have a different byte length from that of the `TypedArray` itself,
  // for example, when the `TypedArray` is created from an offset in an
  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match
  // the `TypedArray` in byte length. If an element of `xs` does not show
  // this property, a new `TypedArray` that satisfy this property will be
  // constructed and pushed into `normalizedXs`.

  const normalizedXs = [];
  xs.forEach(x => {
    totalByteLength += x.byteLength; // tslint:disable:no-any

    normalizedXs.push(x.byteLength === x.buffer.byteLength ? x : new x.constructor(x));

    if (!(x instanceof Float32Array || x instanceof Int32Array || x instanceof Uint8Array)) {
      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);
    } // tslint:enable:no-any

  });
  const y = new Uint8Array(totalByteLength);
  let offset = 0;
  normalizedXs.forEach(x => {
    y.set(new Uint8Array(x.buffer), offset);
    offset += x.byteLength;
  });
  return y.buffer;
} // Use Buffer on Node.js instead of Blob/atob/btoa


const useNodeBuffer = typeof Buffer !== 'undefined' && (typeof Blob === 'undefined' || typeof atob === 'undefined' || typeof btoa === 'undefined');
/**
 * Calculate the byte length of a JavaScript string.
 *
 * Note that a JavaScript string can contain wide characters, therefore the
 * length of the string is not necessarily equal to the byte length.
 *
 * @param str Input string.
 * @returns Byte length.
 */

function stringByteLength(str) {
  if (useNodeBuffer) {
    return Buffer.byteLength(str);
  }

  return new Blob([str]).size;
}
/**
 * Encode an ArrayBuffer as a base64 encoded string.
 *
 * @param buffer `ArrayBuffer` to be converted.
 * @returns A string that base64-encodes `buffer`.
 */


function arrayBufferToBase64String(buffer) {
  if (useNodeBuffer) {
    return Buffer.from(buffer).toString('base64');
  }

  const buf = new Uint8Array(buffer);
  let s = '';

  for (let i = 0, l = buf.length; i < l; i++) {
    s += String.fromCharCode(buf[i]);
  }

  return btoa(s);
}
/**
 * Decode a base64 string as an ArrayBuffer.
 *
 * @param str Base64 string.
 * @returns Decoded `ArrayBuffer`.
 */


function base64StringToArrayBuffer(str) {
  if (useNodeBuffer) {
    const buf = Buffer.from(str, 'base64');
    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
  }

  const s = atob(str);
  const buffer = new Uint8Array(s.length);

  for (let i = 0; i < s.length; ++i) {
    buffer.set([s.charCodeAt(i)], i);
  }

  return buffer.buffer;
}
/**
 * Concatenate a number of ArrayBuffers into one.
 *
 * @param buffers A number of array buffers to concatenate.
 * @returns Result of concatenating `buffers` in order.
 */


function concatenateArrayBuffers(buffers) {
  if (buffers.length === 1) {
    return buffers[0];
  }

  let totalByteLength = 0;
  buffers.forEach(buffer => {
    totalByteLength += buffer.byteLength;
  });
  const temp = new Uint8Array(totalByteLength);
  let offset = 0;
  buffers.forEach(buffer => {
    temp.set(new Uint8Array(buffer), offset);
    offset += buffer.byteLength;
  });
  return temp.buffer;
}
/**
 * Get the basename of a path.
 *
 * Behaves in a way analogous to Linux's basename command.
 *
 * @param path
 */


function basename(path) {
  const SEPARATOR = '/';
  path = path.trim();

  while (path.endsWith(SEPARATOR)) {
    path = path.slice(0, path.length - 1);
  }

  const items = path.split(SEPARATOR);
  return items[items.length - 1];
}
/**
 * Create `ModelJSON` from `ModelArtifacts`.
 *
 * @param artifacts Model artifacts, describing the model and its weights.
 * @param manifest Weight manifest, describing where the weights of the
 *     `ModelArtifacts` are stored, and some metadata about them.
 * @returns Object representing the `model.json` file describing the model
 *     artifacts and weights
 */


function getModelJSONForModelArtifacts(artifacts, manifest) {
  const result = {
    modelTopology: artifacts.modelTopology,
    format: artifacts.format,
    generatedBy: artifacts.generatedBy,
    convertedBy: artifacts.convertedBy,
    weightsManifest: manifest
  };

  if (artifacts.signature != null) {
    result.signature = artifacts.signature;
  }

  if (artifacts.userDefinedMetadata != null) {
    result.userDefinedMetadata = artifacts.userDefinedMetadata;
  }

  if (artifacts.modelInitializer != null) {
    result.modelInitializer = artifacts.modelInitializer;
  }

  if (artifacts.trainingConfig != null) {
    result.trainingConfig = artifacts.trainingConfig;
  }

  return result;
}
/**
 * Create `ModelArtifacts` from a JSON file.
 *
 * @param modelJSON Object containing the parsed JSON of `model.json`
 * @param loadWeights Function that takes the JSON file's weights manifest,
 *     reads weights from the listed path(s), and returns a Promise of the
 *     weight manifest entries along with the weights data.
 * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.
 */


async function getModelArtifactsForJSON(modelJSON, loadWeights) {
  const modelArtifacts = {
    modelTopology: modelJSON.modelTopology,
    format: modelJSON.format,
    generatedBy: modelJSON.generatedBy,
    convertedBy: modelJSON.convertedBy
  };

  if (modelJSON.trainingConfig != null) {
    modelArtifacts.trainingConfig = modelJSON.trainingConfig;
  }

  if (modelJSON.weightsManifest != null) {
    const [weightSpecs, weightData] = await loadWeights(modelJSON.weightsManifest);
    modelArtifacts.weightSpecs = weightSpecs;
    modelArtifacts.weightData = weightData;
  }

  if (modelJSON.signature != null) {
    modelArtifacts.signature = modelJSON.signature;
  }

  if (modelJSON.userDefinedMetadata != null) {
    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;
  }

  if (modelJSON.modelInitializer != null) {
    modelArtifacts.modelInitializer = modelJSON.modelInitializer;
  }

  return modelArtifacts;
}
/**
 * Populate ModelArtifactsInfo fields for a model with JSON topology.
 * @param modelArtifacts
 * @returns A ModelArtifactsInfo object.
 */


function getModelArtifactsInfoForJSON(modelArtifacts) {
  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
    throw new Error('Expected JSON model topology, received ArrayBuffer.');
  }

  return {
    dateSaved: new Date(),
    modelTopologyType: 'JSON',
    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),
    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),
    weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength
  };
}
/**
 * Computes mantisa table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 2048 mantissa lookup values.
 */


function computeFloat16MantisaTable() {
  const convertMantissa = i => {
    let m = i << 13;
    let e = 0;

    while ((m & 0x00800000) === 0) {
      e -= 0x00800000;
      m <<= 1;
    }

    m &= ~0x00800000;
    e += 0x38800000;
    return m | e;
  };

  const mantisaTable = new Uint32Array(2048);
  mantisaTable[0] = 0;

  for (let i = 1; i < 1024; i++) {
    mantisaTable[i] = convertMantissa(i);
  }

  for (let i = 1024; i < 2048; i++) {
    mantisaTable[i] = 0x38000000 + (i - 1024 << 13);
  }

  return mantisaTable;
}
/**
 * Computes exponent table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 64 exponent lookup values.
 */


function computeFloat16ExponentTable() {
  const exponentTable = new Uint32Array(64);
  exponentTable[0] = 0;
  exponentTable[31] = 0x47800000;
  exponentTable[32] = 0x80000000;
  exponentTable[63] = 0xc7800000;

  for (let i = 1; i < 31; i++) {
    exponentTable[i] = i << 23;
  }

  for (let i = 33; i < 63; i++) {
    exponentTable[i] = 0x80000000 + (i - 32 << 23);
  }

  return exponentTable;
}
/**
 * Computes offset table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 6d offset values.
 */


function computeFloat16OffsetTable() {
  const offsetTable = new Uint32Array(64);

  for (let i = 0; i < 64; i++) {
    offsetTable[i] = 1024;
  }

  offsetTable[0] = offsetTable[32] = 0;
  return offsetTable;
}
/**
 * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values
 * to a Float32Array.
 *
 * @returns Function (buffer: Uint16Array) => Float32Array which decodes
 *          the Uint16Array of Float16 bytes to a Float32Array.
 */


function getFloat16Decoder() {
  // Algorithm is based off of
  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
  // Cache lookup tables
  const mantisaTable = computeFloat16MantisaTable();
  const exponentTable = computeFloat16ExponentTable();
  const offsetTable = computeFloat16OffsetTable();
  return quantizedArray => {
    const buffer = new ArrayBuffer(4 * quantizedArray.length);
    const bufferUint32View = new Uint32Array(buffer);

    for (let index = 0; index < quantizedArray.length; index++) {
      const float16Bits = quantizedArray[index];
      const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] + exponentTable[float16Bits >> 10];
      bufferUint32View[index] = float32Bits;
    }

    return new Float32Array(buffer);
  };
}
},{"../ops/complex":"e4je","../ops/tensor":"woAd","../util":"XXxQ","./types":"tjMC","buffer":"PlI0"}],"XmHK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLoadHandlers = exports.getSaveHandlers = exports.registerLoadRouter = exports.registerSaveRouter = exports.IORouterRegistry = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class IORouterRegistry {
  constructor() {
    this.saveRouters = [];
    this.loadRouters = [];
  }

  static getInstance() {
    if (IORouterRegistry.instance == null) {
      IORouterRegistry.instance = new IORouterRegistry();
    }

    return IORouterRegistry.instance;
  }
  /**
   * Register a save-handler router.
   *
   * @param saveRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `save` method defined or `null`.
   */


  static registerSaveRouter(saveRouter) {
    IORouterRegistry.getInstance().saveRouters.push(saveRouter);
  }
  /**
   * Register a load-handler router.
   *
   * @param loadRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `load` method defined or `null`.
   */


  static registerLoadRouter(loadRouter) {
    IORouterRegistry.getInstance().loadRouters.push(loadRouter);
  }
  /**
   * Look up IOHandler for saving, given a URL-like string.
   *
   * @param url
   * @returns If only one match is found, an instance of IOHandler with the
   * `save` method defined. If no match is found, `null`.
   * @throws Error, if more than one match is found.
   */


  static getSaveHandlers(url) {
    return IORouterRegistry.getHandlers(url, 'save');
  }
  /**
   * Look up IOHandler for loading, given a URL-like string.
   *
   * @param url
   * @param loadOptions Optional, custom load options.
   * @returns All valid handlers for `url`, given the currently registered
   *   handler routers.
   */


  static getLoadHandlers(url, loadOptions) {
    return IORouterRegistry.getHandlers(url, 'load', loadOptions);
  }

  static getHandlers(url, handlerType, loadOptions) {
    const validHandlers = [];
    const routers = handlerType === 'load' ? IORouterRegistry.getInstance().loadRouters : IORouterRegistry.getInstance().saveRouters;
    routers.forEach(router => {
      const handler = router(url, loadOptions);

      if (handler !== null) {
        validHandlers.push(handler);
      }
    });
    return validHandlers;
  }

}

exports.IORouterRegistry = IORouterRegistry;

const registerSaveRouter = loudRouter => IORouterRegistry.registerSaveRouter(loudRouter);

exports.registerSaveRouter = registerSaveRouter;

const registerLoadRouter = loudRouter => IORouterRegistry.registerLoadRouter(loudRouter);

exports.registerLoadRouter = registerLoadRouter;

const getSaveHandlers = url => IORouterRegistry.getSaveHandlers(url);

exports.getSaveHandlers = getSaveHandlers;

const getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);

exports.getLoadHandlers = getLoadHandlers;
},{}],"XHfa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteDatabase = deleteDatabase;
exports.browserIndexedDB = browserIndexedDB;
exports.BrowserIndexedDBManager = exports.indexedDBRouter = exports.BrowserIndexedDB = void 0;

require("../flags");

var _environment = require("../environment");

var _io_utils = require("./io_utils");

var _router_registry = require("./router_registry");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DATABASE_NAME = 'tensorflowjs';
const DATABASE_VERSION = 1; // Model data and ModelArtifactsInfo (metadata) are stored in two separate
// stores for efficient access of the list of stored models and their metadata.
// 1. The object store for model data: topology, weights and weight manifests.

const MODEL_STORE_NAME = 'models_store'; // 2. The object store for ModelArtifactsInfo, including meta-information such
//    as the type of topology (JSON vs binary), byte size of the topology, byte
//    size of the weights, etc.

const INFO_STORE_NAME = 'model_info_store';
/**
 * Delete the entire database for tensorflow.js, including the models store.
 */

async function deleteDatabase() {
  const idbFactory = getIndexedDBFactory();
  return new Promise((resolve, reject) => {
    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);

    deleteRequest.onsuccess = () => resolve();

    deleteRequest.onerror = error => reject(error);
  });
}

function getIndexedDBFactory() {
  if (!(0, _environment.env)().getBool('IS_BROWSER')) {
    // TODO(cais): Add more info about what IOHandler subtypes are available.
    //   Maybe point to a doc page on the web and/or automatically determine
    //   the available IOHandlers and print them in the error message.
    throw new Error('Failed to obtain IndexedDB factory because the current environment' + 'is not a web browser.');
  } // tslint:disable-next-line:no-any


  const theWindow = typeof window === 'undefined' ? self : window;
  const factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;

  if (factory == null) {
    throw new Error('The current browser does not appear to support IndexedDB.');
  }

  return factory;
}

function setUpDatabase(openRequest) {
  const db = openRequest.result;
  db.createObjectStore(MODEL_STORE_NAME, {
    keyPath: 'modelPath'
  });
  db.createObjectStore(INFO_STORE_NAME, {
    keyPath: 'modelPath'
  });
}
/**
 * IOHandler subclass: Browser IndexedDB.
 *
 * See the doc string of `browserIndexedDB` for more details.
 */


class BrowserIndexedDB {
  constructor(modelPath) {
    this.indexedDB = getIndexedDBFactory();

    if (modelPath == null || !modelPath) {
      throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');
    }

    this.modelPath = modelPath;
  }

  async save(modelArtifacts) {
    // TODO(cais): Support saving GraphDef models.
    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');
    }

    return this.databaseAction(this.modelPath, modelArtifacts);
  }

  async load() {
    return this.databaseAction(this.modelPath);
  }
  /**
   * Perform database action to put model artifacts into or read model artifacts
   * from IndexedDB object store.
   *
   * Whether the action is put or get depends on whether `modelArtifacts` is
   * specified. If it is specified, the action will be put; otherwise the action
   * will be get.
   *
   * @param modelPath A unique string path for the model.
   * @param modelArtifacts If specified, it will be the model artifacts to be
   *   stored in IndexedDB.
   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
   *   of `ModelArtifacts`, if the action is get.
   */


  databaseAction(modelPath, modelArtifacts) {
    return new Promise((resolve, reject) => {
      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);

      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);

      openRequest.onsuccess = () => {
        const db = openRequest.result;

        if (modelArtifacts == null) {
          // Read model out from object store.
          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');
          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
          const getRequest = modelStore.get(this.modelPath);

          getRequest.onsuccess = () => {
            if (getRequest.result == null) {
              db.close();
              return reject(new Error(`Cannot find model with path '${this.modelPath}' ` + `in IndexedDB.`));
            } else {
              resolve(getRequest.result.modelArtifacts);
            }
          };

          getRequest.onerror = error => {
            db.close();
            return reject(getRequest.error);
          };

          modelTx.oncomplete = () => db.close();
        } else {
          // Put model into object store.
          const modelArtifactsInfo = (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts); // First, put ModelArtifactsInfo into info store.

          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');
          let infoStore = infoTx.objectStore(INFO_STORE_NAME);
          const putInfoRequest = infoStore.put({
            modelPath: this.modelPath,
            modelArtifactsInfo
          });
          let modelTx;

          putInfoRequest.onsuccess = () => {
            // Second, put model data into model store.
            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');
            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
            const putModelRequest = modelStore.put({
              modelPath: this.modelPath,
              modelArtifacts,
              modelArtifactsInfo
            });

            putModelRequest.onsuccess = () => resolve({
              modelArtifactsInfo
            });

            putModelRequest.onerror = error => {
              // If the put-model request fails, roll back the info entry as
              // well.
              infoStore = infoTx.objectStore(INFO_STORE_NAME);
              const deleteInfoRequest = infoStore.delete(this.modelPath);

              deleteInfoRequest.onsuccess = () => {
                db.close();
                return reject(putModelRequest.error);
              };

              deleteInfoRequest.onerror = error => {
                db.close();
                return reject(putModelRequest.error);
              };
            };
          };

          putInfoRequest.onerror = error => {
            db.close();
            return reject(putInfoRequest.error);
          };

          infoTx.oncomplete = () => {
            if (modelTx == null) {
              db.close();
            } else {
              modelTx.oncomplete = () => db.close();
            }
          };
        }
      };

      openRequest.onerror = error => reject(openRequest.error);
    });
  }

}

exports.BrowserIndexedDB = BrowserIndexedDB;
BrowserIndexedDB.URL_SCHEME = 'indexeddb://';

const indexedDBRouter = url => {
  if (!(0, _environment.env)().getBool('IS_BROWSER')) {
    return null;
  } else {
    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {
      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));
    } else {
      return null;
    }
  }
};

exports.indexedDBRouter = indexedDBRouter;

_router_registry.IORouterRegistry.registerSaveRouter(indexedDBRouter);

_router_registry.IORouterRegistry.registerLoadRouter(indexedDBRouter);
/**
 * Creates a browser IndexedDB IOHandler for saving and loading models.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save('indexeddb://MyModel'));
 * console.log(saveResult);
 * ```
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),
 *   which can be used with, e.g., `tf.Model.save`.
 */


function browserIndexedDB(modelPath) {
  return new BrowserIndexedDB(modelPath);
}

function maybeStripScheme(key) {
  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;
}

class BrowserIndexedDBManager {
  constructor() {
    this.indexedDB = getIndexedDBFactory();
  }

  async listModels() {
    return new Promise((resolve, reject) => {
      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);

      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);

      openRequest.onsuccess = () => {
        const db = openRequest.result;
        const tx = db.transaction(INFO_STORE_NAME, 'readonly');
        const store = tx.objectStore(INFO_STORE_NAME); // tslint:disable:max-line-length
        // Need to cast `store` as `any` here because TypeScript's DOM
        // library does not have the `getAll()` method even though the
        // method is supported in the latest version of most mainstream
        // browsers:
        // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll
        // tslint:enable:max-line-length
        // tslint:disable-next-line:no-any

        const getAllInfoRequest = store.getAll();

        getAllInfoRequest.onsuccess = () => {
          const out = {};

          for (const item of getAllInfoRequest.result) {
            out[item.modelPath] = item.modelArtifactsInfo;
          }

          resolve(out);
        };

        getAllInfoRequest.onerror = error => {
          db.close();
          return reject(getAllInfoRequest.error);
        };

        tx.oncomplete = () => db.close();
      };

      openRequest.onerror = error => reject(openRequest.error);
    });
  }

  async removeModel(path) {
    path = maybeStripScheme(path);
    return new Promise((resolve, reject) => {
      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);

      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);

      openRequest.onsuccess = () => {
        const db = openRequest.result;
        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');
        const infoStore = infoTx.objectStore(INFO_STORE_NAME);
        const getInfoRequest = infoStore.get(path);
        let modelTx;

        getInfoRequest.onsuccess = () => {
          if (getInfoRequest.result == null) {
            db.close();
            return reject(new Error(`Cannot find model with path '${path}' ` + `in IndexedDB.`));
          } else {
            // First, delete the entry in the info store.
            const deleteInfoRequest = infoStore.delete(path);

            const deleteModelData = () => {
              // Second, delete the entry in the model store.
              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');
              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
              const deleteModelRequest = modelStore.delete(path);

              deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);

              deleteModelRequest.onerror = error => reject(getInfoRequest.error);
            }; // Proceed with deleting model data regardless of whether deletion
            // of info data succeeds or not.


            deleteInfoRequest.onsuccess = deleteModelData;

            deleteInfoRequest.onerror = error => {
              deleteModelData();
              db.close();
              return reject(getInfoRequest.error);
            };
          }
        };

        getInfoRequest.onerror = error => {
          db.close();
          return reject(getInfoRequest.error);
        };

        infoTx.oncomplete = () => {
          if (modelTx == null) {
            db.close();
          } else {
            modelTx.oncomplete = () => db.close();
          }
        };
      };

      openRequest.onerror = error => reject(openRequest.error);
    });
  }

}

exports.BrowserIndexedDBManager = BrowserIndexedDBManager;
},{"../flags":"lELk","../environment":"vpgN","./io_utils":"kOer","./router_registry":"XmHK"}],"bqqF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.purgeLocalStorageArtifacts = purgeLocalStorageArtifacts;
exports.browserLocalStorage = browserLocalStorage;
exports.BrowserLocalStorageManager = exports.localStorageRouter = exports.BrowserLocalStorage = void 0;

require("../flags");

var _environment = require("../environment");

var _util = require("../util");

var _io_utils = require("./io_utils");

var _router_registry = require("./router_registry");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PATH_SEPARATOR = '/';
const PATH_PREFIX = 'tensorflowjs_models';
const INFO_SUFFIX = 'info';
const MODEL_TOPOLOGY_SUFFIX = 'model_topology';
const WEIGHT_SPECS_SUFFIX = 'weight_specs';
const WEIGHT_DATA_SUFFIX = 'weight_data';
const MODEL_METADATA_SUFFIX = 'model_metadata';
/**
 * Purge all tensorflow.js-saved model artifacts from local storage.
 *
 * @returns Paths of the models purged.
 */

function purgeLocalStorageArtifacts() {
  if (!(0, _environment.env)().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {
    throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' + 'unavailable in the current environment.');
  }

  const LS = window.localStorage;
  const purgedModelPaths = [];

  for (let i = 0; i < LS.length; ++i) {
    const key = LS.key(i);
    const prefix = PATH_PREFIX + PATH_SEPARATOR;

    if (key.startsWith(prefix) && key.length > prefix.length) {
      LS.removeItem(key);
      const modelName = getModelPathFromKey(key);

      if (purgedModelPaths.indexOf(modelName) === -1) {
        purgedModelPaths.push(modelName);
      }
    }
  }

  return purgedModelPaths;
}

function getModelKeys(path) {
  return {
    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),
    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),
    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),
    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),
    modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)
  };
}

function removeItems(keys) {
  for (const key of Object.values(keys)) {
    window.localStorage.removeItem(key);
  }
}
/**
 * Get model path from a local-storage key.
 *
 * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'
 *
 * @param key
 */


function getModelPathFromKey(key) {
  const items = key.split(PATH_SEPARATOR);

  if (items.length < 3) {
    throw new Error(`Invalid key format: ${key}`);
  }

  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);
}

function maybeStripScheme(key) {
  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;
}
/**
 * IOHandler subclass: Browser Local Storage.
 *
 * See the doc string to `browserLocalStorage` for more details.
 */


class BrowserLocalStorage {
  constructor(modelPath) {
    if (!(0, _environment.env)().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {
      // TODO(cais): Add more info about what IOHandler subtypes are
      // available.
      //   Maybe point to a doc page on the web and/or automatically determine
      //   the available IOHandlers and print them in the error message.
      throw new Error('The current environment does not support local storage.');
    }

    this.LS = window.localStorage;

    if (modelPath == null || !modelPath) {
      throw new Error('For local storage, modelPath must not be null, undefined or empty.');
    }

    this.modelPath = modelPath;
    this.keys = getModelKeys(this.modelPath);
  }
  /**
   * Save model artifacts to browser local storage.
   *
   * See the documentation to `browserLocalStorage` for details on the saved
   * artifacts.
   *
   * @param modelArtifacts The model artifacts to be stored.
   * @returns An instance of SaveResult.
   */


  async save(modelArtifacts) {
    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');
    } else {
      const topology = JSON.stringify(modelArtifacts.modelTopology);
      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);
      const modelArtifactsInfo = (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts);

      try {
        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));
        this.LS.setItem(this.keys.topology, topology);
        this.LS.setItem(this.keys.weightSpecs, weightSpecs);
        this.LS.setItem(this.keys.weightData, (0, _io_utils.arrayBufferToBase64String)(modelArtifacts.weightData)); // Note that JSON.stringify doesn't write out keys that have undefined
        // values, so for some keys, we set undefined instead of a null-ish
        // value.

        const metadata = {
          format: modelArtifacts.format,
          generatedBy: modelArtifacts.generatedBy,
          convertedBy: modelArtifacts.convertedBy,
          signature: modelArtifacts.signature != null ? modelArtifacts.signature : undefined,
          userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ? modelArtifacts.userDefinedMetadata : undefined,
          modelInitializer: modelArtifacts.modelInitializer != null ? modelArtifacts.modelInitializer : undefined,
          trainingConfig: modelArtifacts.trainingConfig != null ? modelArtifacts.trainingConfig : undefined
        };
        this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));
        return {
          modelArtifactsInfo
        };
      } catch (err) {
        // If saving failed, clean up all items saved so far.
        removeItems(this.keys);
        throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` + `size quota being exceeded is a possible cause of this failure: ` + `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` + `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` + `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);
      }
    }
  }
  /**
   * Load a model from local storage.
   *
   * See the documentation to `browserLocalStorage` for details on the saved
   * artifacts.
   *
   * @returns The loaded model (if loading succeeds).
   */


  async load() {
    const info = JSON.parse(this.LS.getItem(this.keys.info));

    if (info == null) {
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    }

    if (info.modelTopologyType !== 'JSON') {
      throw new Error('BrowserLocalStorage does not support loading non-JSON model ' + 'topology yet.');
    }

    const out = {}; // Load topology.

    const topology = JSON.parse(this.LS.getItem(this.keys.topology));

    if (topology == null) {
      throw new Error(`In local storage, the topology of model '${this.modelPath}' ` + `is missing.`);
    }

    out.modelTopology = topology; // Load weight specs.

    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));

    if (weightSpecs == null) {
      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` + `are missing.`);
    }

    out.weightSpecs = weightSpecs; // Load meta-data fields.

    const metadataString = this.LS.getItem(this.keys.modelMetadata);

    if (metadataString != null) {
      const metadata = JSON.parse(metadataString);
      out.format = metadata.format;
      out.generatedBy = metadata.generatedBy;
      out.convertedBy = metadata.convertedBy;

      if (metadata.signature != null) {
        out.signature = metadata.signature;
      }

      if (metadata.userDefinedMetadata != null) {
        out.userDefinedMetadata = metadata.userDefinedMetadata;
      }

      if (metadata.modelInitializer != null) {
        out.modelInitializer = metadata.modelInitializer;
      }

      if (metadata.trainingConfig != null) {
        out.trainingConfig = metadata.trainingConfig;
      }
    } // Load weight data.


    const weightDataBase64 = this.LS.getItem(this.keys.weightData);

    if (weightDataBase64 == null) {
      throw new Error(`In local storage, the binary weight values of model ` + `'${this.modelPath}' are missing.`);
    }

    out.weightData = (0, _io_utils.base64StringToArrayBuffer)(weightDataBase64);
    return out;
  }

}

exports.BrowserLocalStorage = BrowserLocalStorage;
BrowserLocalStorage.URL_SCHEME = 'localstorage://';

const localStorageRouter = url => {
  if (!(0, _environment.env)().getBool('IS_BROWSER')) {
    return null;
  } else {
    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {
      return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));
    } else {
      return null;
    }
  }
};

exports.localStorageRouter = localStorageRouter;

_router_registry.IORouterRegistry.registerSaveRouter(localStorageRouter);

_router_registry.IORouterRegistry.registerLoadRouter(localStorageRouter);
/**
 * Factory function for local storage IOHandler.
 *
 * This `IOHandler` supports both `save` and `load`.
 *
 * For each model's saved artifacts, four items are saved to local storage.
 *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the
 *     model, such as date saved, type of the topology, size in bytes, etc.
 *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-
 *     style models, this is a stringized JSON.
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the
 *     model, can be used to decode the saved binary weight values (see
 *     item below).
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary
 *     weight values, stored as a base64-encoded string.
 *
 * Saving may throw an `Error` if the total size of the artifacts exceed the
 * browser-specific quota.
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `IOHandler`, which can be used with, e.g.,
 *   `tf.Model.save`.
 */


function browserLocalStorage(modelPath) {
  return new BrowserLocalStorage(modelPath);
}

class BrowserLocalStorageManager {
  constructor() {
    (0, _util.assert)((0, _environment.env)().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');
    (0, _util.assert)(typeof window === 'undefined' || typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');
    this.LS = window.localStorage;
  }

  async listModels() {
    const out = {};
    const prefix = PATH_PREFIX + PATH_SEPARATOR;
    const suffix = PATH_SEPARATOR + INFO_SUFFIX;

    for (let i = 0; i < this.LS.length; ++i) {
      const key = this.LS.key(i);

      if (key.startsWith(prefix) && key.endsWith(suffix)) {
        const modelPath = getModelPathFromKey(key);
        out[modelPath] = JSON.parse(this.LS.getItem(key));
      }
    }

    return out;
  }

  async removeModel(path) {
    path = maybeStripScheme(path);
    const keys = getModelKeys(path);

    if (this.LS.getItem(keys.info) == null) {
      throw new Error(`Cannot find model at path '${path}'`);
    }

    const info = JSON.parse(this.LS.getItem(keys.info));
    removeItems(keys);
    return info;
  }

}

exports.BrowserLocalStorageManager = BrowserLocalStorageManager;
},{"../flags":"lELk","../environment":"vpgN","../util":"XXxQ","./io_utils":"kOer","./router_registry":"XmHK"}],"xu20":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.moveModel = moveModel;
exports.copyModel = copyModel;
exports.removeModel = removeModel;
exports.listModels = listModels;
exports.ModelStoreManagerRegistry = void 0;

var _util = require("../util");

var _router_registry = require("./router_registry");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Classes and functions for model management across multiple storage mediums.
 *
 * Supported client actions:
 * - Listing models on all registered storage mediums.
 * - Remove model by URL from any registered storage mediums, by using URL
 *   string.
 * - Moving or copying model from one path to another in the same medium or from
 *   one medium to another, by using URL strings.
 */
const URL_SCHEME_SUFFIX = '://';

class ModelStoreManagerRegistry {
  constructor() {
    this.managers = {};
  }

  static getInstance() {
    if (ModelStoreManagerRegistry.instance == null) {
      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();
    }

    return ModelStoreManagerRegistry.instance;
  }
  /**
   * Register a save-handler router.
   *
   * @param saveRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `save` method defined or `null`.
   */


  static registerManager(scheme, manager) {
    (0, _util.assert)(scheme != null, () => 'scheme must not be undefined or null.');

    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {
      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));
    }

    (0, _util.assert)(scheme.length > 0, () => 'scheme must not be an empty string.');
    const registry = ModelStoreManagerRegistry.getInstance();
    (0, _util.assert)(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);
    registry.managers[scheme] = manager;
  }

  static getManager(scheme) {
    const manager = this.getInstance().managers[scheme];

    if (manager == null) {
      throw new Error(`Cannot find model manager for scheme '${scheme}'`);
    }

    return manager;
  }

  static getSchemes() {
    return Object.keys(this.getInstance().managers);
  }

}
/**
 * Helper method for parsing a URL string into a scheme and a path.
 *
 * @param url E.g., 'localstorage://my-model'
 * @returns A dictionary with two fields: scheme and path.
 *   Scheme: e.g., 'localstorage' in the example above.
 *   Path: e.g., 'my-model' in the example above.
 */


exports.ModelStoreManagerRegistry = ModelStoreManagerRegistry;

function parseURL(url) {
  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {
    throw new Error(`The url string provided does not contain a scheme. ` + `Supported schemes are: ` + `${ModelStoreManagerRegistry.getSchemes().join(',')}`);
  }

  return {
    scheme: url.split(URL_SCHEME_SUFFIX)[0],
    path: url.split(URL_SCHEME_SUFFIX)[1]
  };
}

async function cloneModelInternal(sourceURL, destURL, deleteSource = false) {
  (0, _util.assert)(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);

  const loadHandlers = _router_registry.IORouterRegistry.getLoadHandlers(sourceURL);

  (0, _util.assert)(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);
  (0, _util.assert)(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` + `load handlers for source URL ${sourceURL}.`);
  const loadHandler = loadHandlers[0];

  const saveHandlers = _router_registry.IORouterRegistry.getSaveHandlers(destURL);

  (0, _util.assert)(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` + `URL ${destURL}.`);
  (0, _util.assert)(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` + `save handlers for destination URL ${destURL}.`);
  const saveHandler = saveHandlers[0];
  const sourceScheme = parseURL(sourceURL).scheme;
  const sourcePath = parseURL(sourceURL).path;
  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;
  const modelArtifacts = await loadHandler.load(); // If moving within the same storage medium, remove the old model as soon as
  // the loading is done. Without doing this, it is possible that the combined
  // size of the two models will cause the cloning to fail.

  if (deleteSource && sameMedium) {
    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);
  }

  const saveResult = await saveHandler.save(modelArtifacts); // If moving between mediums, the deletion is done after the save succeeds.
  // This guards against the case in which saving to the destination medium
  // fails.

  if (deleteSource && !sameMedium) {
    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);
  }

  return saveResult.modelArtifactsInfo;
}
/**
 * List all models stored in registered storage mediums.
 *
 * For a web browser environment, the registered mediums are Local Storage and
 * IndexedDB.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @returns A `Promise` of a dictionary mapping URLs of existing models to
 * their model artifacts info. URLs include medium-specific schemes, e.g.,
 *   'indexeddb://my/model/1'. Model artifacts info include type of the
 * model's topology, byte sizes of the topology, weights, etc.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


async function listModels() {
  const schemes = ModelStoreManagerRegistry.getSchemes();
  const out = {};

  for (const scheme of schemes) {
    const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();

    for (const path in schemeOut) {
      const url = scheme + URL_SCHEME_SUFFIX + path;
      out[url] = schemeOut[path];
    }
  }

  return out;
}
/**
 * Remove a model specified by URL from a reigstered storage medium.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @param url A URL to a stored model, with a scheme prefix, e.g.,
 *   'localstorage://my-model-1', 'indexeddb://my/model/2'.
 * @returns ModelArtifactsInfo of the deleted model (if and only if deletion
 *   is successful).
 * @throws Error if deletion fails, e.g., if no model exists at `path`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


async function removeModel(url) {
  const schemeAndPath = parseURL(url);
  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);
  return manager.removeModel(schemeAndPath.path);
}
/**
 * Copy a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Copying within a storage medium, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Copying between two storage mediums, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Copy the model, from Local Storage to IndexedDB.
 * await tf.io.copyModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove both models.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of copying.
 * @param destURL Destination URL of copying.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


async function copyModel(sourceURL, destURL) {
  const deleteSource = false;
  return cloneModelInternal(sourceURL, destURL, deleteSource);
}
/**
 * Move a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Moving within a storage medium, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Moving between two storage mediums, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Move the model, from Local Storage to IndexedDB.
 * await tf.io.moveModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove the moved model.
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of moving.
 * @param destURL Destination URL of moving.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


async function moveModel(sourceURL, destURL) {
  const deleteSource = true;
  return cloneModelInternal(sourceURL, destURL, deleteSource);
}
},{"../util":"XXxQ","./router_registry":"XmHK"}],"GYfU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PlatformBrowser = void 0;

require("../flags");

var _environment = require("../environment");

var _indexed_db = require("../io/indexed_db");

var _local_storage = require("../io/local_storage");

var _model_management = require("../io/model_management");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PlatformBrowser {
  fetch(path, init) {
    return fetch(path, init);
  }

  now() {
    return performance.now();
  }

  encode(text, encoding) {
    if (encoding !== 'utf-8' && encoding !== 'utf8') {
      throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);
    }

    if (this.textEncoder == null) {
      this.textEncoder = new TextEncoder();
    }

    return this.textEncoder.encode(text);
  }

  decode(bytes, encoding) {
    return new TextDecoder(encoding).decode(bytes);
  }

}

exports.PlatformBrowser = PlatformBrowser;

if ((0, _environment.env)().get('IS_BROWSER')) {
  (0, _environment.env)().setPlatform('browser', new PlatformBrowser()); // Register LocalStorage IOHandler

  try {
    _model_management.ModelStoreManagerRegistry.registerManager(_local_storage.BrowserLocalStorage.URL_SCHEME, new _local_storage.BrowserLocalStorageManager());
  } catch (err) {} // Register IndexedDB IOHandler


  try {
    _model_management.ModelStoreManagerRegistry.registerManager(_indexed_db.BrowserIndexedDB.URL_SCHEME, new _indexed_db.BrowserIndexedDBManager());
  } catch (err) {}
}
},{"../flags":"lELk","../environment":"vpgN","../io/indexed_db":"XHfa","../io/local_storage":"bqqF","../io/model_management":"xu20"}],"bJdJ":[function(require,module,exports) {

},{}],"kCxW":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetSystemFetch = resetSystemFetch;
exports.setSystemFetch = setSystemFetch;
exports.getSystemFetch = getSystemFetch;
exports.PlatformNode = exports.getNodeFetch = void 0;

var _environment = require("../environment");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// We are wrapping this within an object so it can be stubbed by Jasmine.
const getNodeFetch = {
  // tslint:disable-next-line:no-require-imports
  importFetch: () => require('node-fetch')
};
exports.getNodeFetch = getNodeFetch;
let systemFetch; // These getters and setters are for testing so we don't export a mutable
// variable.

function resetSystemFetch() {
  systemFetch = null;
}

function setSystemFetch(fetchFn) {
  systemFetch = fetchFn;
}

function getSystemFetch() {
  return systemFetch;
}

class PlatformNode {
  constructor() {
    // tslint:disable-next-line:no-require-imports
    this.util = require('util'); // According to the spec, the built-in encoder can do only UTF-8 encoding.
    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder

    this.textEncoder = new this.util.TextEncoder();
  }

  fetch(path, requestInits) {
    if ((0, _environment.env)().global.fetch != null) {
      return (0, _environment.env)().global.fetch(path, requestInits);
    }

    if (systemFetch == null) {
      systemFetch = getNodeFetch.importFetch();
    }

    return systemFetch(path, requestInits);
  }

  now() {
    const time = process.hrtime();
    return time[0] * 1000 + time[1] / 1000000;
  }

  encode(text, encoding) {
    if (encoding !== 'utf-8' && encoding !== 'utf8') {
      throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);
    }

    return this.textEncoder.encode(text);
  }

  decode(bytes, encoding) {
    if (bytes.length === 0) {
      return '';
    }

    return new this.util.TextDecoder(encoding).decode(bytes);
  }

}

exports.PlatformNode = PlatformNode;

if ((0, _environment.env)().get('IS_NODE')) {
  (0, _environment.env)().setPlatform('node', new PlatformNode());
}
},{"../environment":"vpgN","node-fetch":"bJdJ","util":"bJdJ","process":"UloM"}],"GfO2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buffer = buffer;

var _tensor = require("../tensor");

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.
 *
 * The values are stored in CPU as `TypedArray`. Fill the buffer using
 * `buffer.set()`, or by modifying directly `buffer.values`.
 *
 * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with
 * those values.
 *
 * ```js
 * // Create a buffer and set values at particular indices.
 * const buffer = tf.buffer([2, 2]);
 * buffer.set(3, 0, 0);
 * buffer.set(5, 1, 0);
 *
 * // Convert the buffer back to a tensor.
 * buffer.toTensor().print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The dtype of the buffer. Defaults to 'float32'.
 * @param values The values of the buffer as `TypedArray`. Defaults to
 * zeros.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function buffer(shape, dtype = 'float32', values) {
  dtype = dtype || 'float32';
  util.assertNonNegativeIntegerDimensions(shape);
  return new _tensor.TensorBuffer(shape, dtype, values);
}
},{"../tensor":"eFW4","../util":"XXxQ"}],"qnzc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cast = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Casts a `tf.Tensor` to a new dtype.
 *
 * ```js
 * const x = tf.tensor1d([1.5, 2.5, 3]);
 * tf.cast(x, 'int32').print();
 * ```
 * @param x The input tensor to be casted.
 * @param dtype The dtype to cast the input tensor to.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function cast_(x, dtype) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'cast'); // Sanity checks.

  if (!util.isValidDtype(dtype)) {
    throw new Error(`Failed to cast to unknown dtype ${dtype}`);
  }

  if (dtype === 'string' && $x.dtype !== 'string' || dtype !== 'string' && $x.dtype === 'string') {
    throw new Error('Only strings can be casted to strings');
  }

  const inputs = {
    x: $x
  };
  const attrs = {
    dtype
  };
  return _engine.ENGINE.runKernel(_kernel_names.Cast, inputs, attrs);
}

const cast = (0, _operation.op)({
  cast_
});
exports.cast = cast;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"Ot88":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clone = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a new tensor with the same values and shape as the specified
 * tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 *
 * x.clone().print();
 * ```
 *
 * @param x The tensor to clone.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function clone_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'clone', 'string_or_numeric');
  const inputs = {
    x: $x
  }; // Note this op is called tf.identity in python. Hence the kernel name used
  // here.

  return _engine.ENGINE.runKernel(_kernel_names.Identity, inputs);
}

const clone = (0, _operation.op)({
  clone_
});
exports.clone = clone;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"avTA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.print = print;

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Prints information about the `tf.Tensor` including its data.
 *
 * ```js
 * const verbose = true;
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);
 * ```
 * @param x The tensor to be printed.
 * @param verbose Whether to print verbose information about the ` Tensor`,
 * including dtype and size.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function print(x, verbose = false) {
  console.log(x.toString(verbose));
}
},{}],"viUI":[function(require,module,exports) {
"use strict";

var _engine = require("./engine");

require("./flags");

require("./platforms/platform_browser");

require("./platforms/platform_node");

var _buffer = require("./ops/buffer");

var _cast = require("./ops/cast");

var _clone = require("./ops/clone");

var _print = require("./ops/print");

var _tensor = require("./tensor");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Required side effectful code for tfjs-core
// Set up Engine and ENV
(0, _engine.getOrMakeEngine)(); // Register backend-agnostic flags.

const opHandler = {
  buffer: _buffer.buffer,
  cast: _cast.cast,
  clone: _clone.clone,
  print: _print.print
};
(0, _tensor.setOpHandler)(opHandler);
},{"./engine":"phT7","./flags":"lELk","./platforms/platform_browser":"GYfU","./platforms/platform_node":"kCxW","./ops/buffer":"GfO2","./ops/cast":"qnzc","./ops/clone":"Ot88","./ops/print":"avTA","./tensor":"eFW4"}],"zFW7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.browserDownloads = browserDownloads;
exports.browserFiles = browserFiles;
exports.browserDownloadsRouter = exports.BrowserDownloads = void 0;

require("../flags");

var _environment = require("../environment");

var _io_utils = require("./io_utils");

var _router_registry = require("./router_registry");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * IOHandlers related to files, such as browser-triggered file downloads,
 * user-selected files in browser.
 */
const DEFAULT_FILE_NAME_PREFIX = 'model';
const DEFAULT_JSON_EXTENSION_NAME = '.json';
const DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';

function defer(f) {
  return new Promise(resolve => setTimeout(resolve)).then(f);
}

class BrowserDownloads {
  constructor(fileNamePrefix) {
    if (!(0, _environment.env)().getBool('IS_BROWSER')) {
      // TODO(cais): Provide info on what IOHandlers are available under the
      //   current environment.
      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');
    }

    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {
      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);
    }

    if (fileNamePrefix == null || fileNamePrefix.length === 0) {
      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;
    }

    this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;
    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;
  }

  async save(modelArtifacts) {
    if (typeof document === 'undefined') {
      throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');
    }

    const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {
      type: 'application/octet-stream'
    }));

    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
      throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');
    } else {
      const weightsManifest = [{
        paths: ['./' + this.weightDataFileName],
        weights: modelArtifacts.weightSpecs
      }];
      const modelJSON = (0, _io_utils.getModelJSONForModelArtifacts)(modelArtifacts, weightsManifest);
      const modelJsonURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelJSON)], {
        type: 'application/json'
      })); // If anchor elements are not provided, create them without attaching them
      // to parents, so that the downloaded file names can be controlled.

      const jsonAnchor = this.modelJsonAnchor == null ? document.createElement('a') : this.modelJsonAnchor;
      jsonAnchor.download = this.modelJsonFileName;
      jsonAnchor.href = modelJsonURL; // Trigger downloads by evoking a click event on the download anchors.
      // When multiple downloads are started synchronously, Firefox will only
      // save the last one.

      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));

      if (modelArtifacts.weightData != null) {
        const weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;
        weightDataAnchor.download = this.weightDataFileName;
        weightDataAnchor.href = weightsURL;
        await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));
      }

      return {
        modelArtifactsInfo: (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts)
      };
    }
  }

}

exports.BrowserDownloads = BrowserDownloads;
BrowserDownloads.URL_SCHEME = 'downloads://';

class BrowserFiles {
  constructor(files) {
    if (files == null || files.length < 1) {
      throw new Error(`When calling browserFiles, at least 1 file is required, ` + `but received ${files}`);
    }

    this.jsonFile = files[0];
    this.weightsFiles = files.slice(1);
  }

  async load() {
    return new Promise((resolve, reject) => {
      const jsonReader = new FileReader();

      jsonReader.onload = event => {
        // tslint:disable-next-line:no-any
        const modelJSON = JSON.parse(event.target.result);
        const modelTopology = modelJSON.modelTopology;

        if (modelTopology == null) {
          reject(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
          return;
        }

        const weightsManifest = modelJSON.weightsManifest;

        if (weightsManifest == null) {
          reject(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
          return;
        }

        if (this.weightsFiles.length === 0) {
          resolve({
            modelTopology
          });
          return;
        }

        const modelArtifactsPromise = (0, _io_utils.getModelArtifactsForJSON)(modelJSON, weightsManifest => this.loadWeights(weightsManifest));
        resolve(modelArtifactsPromise);
      };

      jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` + `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` + `Keras-style tf.Model artifacts only.`);

      jsonReader.readAsText(this.jsonFile);
    });
  }

  loadWeights(weightsManifest) {
    const weightSpecs = [];
    const paths = [];

    for (const entry of weightsManifest) {
      weightSpecs.push(...entry.weights);
      paths.push(...entry.paths);
    }

    const pathToFile = this.checkManifestAndWeightFiles(weightsManifest);
    const promises = paths.map(path => this.loadWeightsFile(path, pathToFile[path]));
    return Promise.all(promises).then(buffers => [weightSpecs, (0, _io_utils.concatenateArrayBuffers)(buffers)]);
  }

  loadWeightsFile(path, file) {
    return new Promise((resolve, reject) => {
      const weightFileReader = new FileReader();

      weightFileReader.onload = event => {
        // tslint:disable-next-line:no-any
        const weightData = event.target.result;
        resolve(weightData);
      };

      weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);

      weightFileReader.readAsArrayBuffer(file);
    });
  }
  /**
   * Check the compatibility between weights manifest and weight files.
   */


  checkManifestAndWeightFiles(manifest) {
    const basenames = [];
    const fileNames = this.weightsFiles.map(file => (0, _io_utils.basename)(file.name));
    const pathToFile = {};

    for (const group of manifest) {
      group.paths.forEach(path => {
        const pathBasename = (0, _io_utils.basename)(path);

        if (basenames.indexOf(pathBasename) !== -1) {
          throw new Error(`Duplicate file basename found in weights manifest: ` + `'${pathBasename}'`);
        }

        basenames.push(pathBasename);

        if (fileNames.indexOf(pathBasename) === -1) {
          throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);
        } else {
          pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];
        }
      });
    }

    if (basenames.length !== this.weightsFiles.length) {
      throw new Error(`Mismatch in the number of files in weights manifest ` + `(${basenames.length}) and the number of weight files provided ` + `(${this.weightsFiles.length}).`);
    }

    return pathToFile;
  }

}

const browserDownloadsRouter = url => {
  if (!(0, _environment.env)().getBool('IS_BROWSER')) {
    return null;
  } else {
    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {
      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));
    } else {
      return null;
    }
  }
};

exports.browserDownloadsRouter = browserDownloadsRouter;

_router_registry.IORouterRegistry.registerSaveRouter(browserDownloadsRouter);
/**
 * Creates an IOHandler that triggers file downloads from the browser.
 *
 * The returned `IOHandler` instance can be used as model exporting methods such
 * as `tf.Model.save` and supports only saving.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * const saveResult = await model.save('downloads://mymodel');
 * // This will trigger downloading of two files:
 * //   'mymodel.json' and 'mymodel.weights.bin'.
 * console.log(saveResult);
 * ```
 *
 * @param fileNamePrefix Prefix name of the files to be downloaded. For use with
 *   `tf.Model`, `fileNamePrefix` should follow either of the following two
 *   formats:
 *   1. `null` or `undefined`, in which case the default file
 *      names will be used:
 *      - 'model.json' for the JSON file containing the model topology and
 *        weights manifest.
 *      - 'model.weights.bin' for the binary file containing the binary weight
 *        values.
 *   2. A single string or an Array of a single string, as the file name prefix.
 *      For example, if `'foo'` is provided, the downloaded JSON
 *      file and binary weights file will be named 'foo.json' and
 *      'foo.weights.bin', respectively.
 * @param config Additional configuration for triggering downloads.
 * @returns An instance of `BrowserDownloads` `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


function browserDownloads(fileNamePrefix = 'model') {
  return new BrowserDownloads(fileNamePrefix);
}
/**
 * Creates an IOHandler that loads model artifacts from user-selected files.
 *
 * This method can be used for loading from files such as user-selected files
 * in the browser.
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * // Note: This code snippet won't run properly without the actual file input
 * //   elements in the HTML DOM.
 *
 * // Suppose there are two HTML file input (`<input type="file" ...>`)
 * // elements.
 * const uploadJSONInput = document.getElementById('upload-json');
 * const uploadWeightsInput = document.getElementById('upload-weights');
 * const model = await tf.loadLayersModel(tf.io.browserFiles(
 *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));
 * ```
 *
 * @param files `File`s to load from. Currently, this function supports only
 *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for
 *   which an `Array` of `File`s is expected (in that order):
 *   - A JSON file containing the model topology and weight manifest.
 *   - Optionally, One or more binary files containing the binary weights.
 *     These files must have names that match the paths in the `weightsManifest`
 *     contained by the aforementioned JSON file, or errors will be thrown
 *     during loading. These weights files have the same format as the ones
 *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`
 *     Python PIP package. If no weights files are provided, only the model
 *     topology will be loaded from the JSON file above.
 * @returns An instance of `Files` `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


function browserFiles(files) {
  return new BrowserFiles(files);
}
},{"../flags":"lELk","../environment":"vpgN","./io_utils":"kOer","./router_registry":"XmHK"}],"tiHi":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.monitorPromisesProgress = monitorPromisesProgress;

var _util = require("../util");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Monitor Promise.all progress, fire onProgress callback function.
 *
 * @param promises Promise list going to be monitored
 * @param onProgress Callback function. Fired when a promise resolved.
 * @param startFraction Optional fraction start. Default to 0.
 * @param endFraction Optional fraction end. Default to 1.
 */
function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {
  checkPromises(promises);
  startFraction = startFraction == null ? 0 : startFraction;
  endFraction = endFraction == null ? 1 : endFraction;
  checkFraction(startFraction, endFraction);
  let resolvedPromise = 0;

  const registerMonitor = promise => {
    promise.then(value => {
      const fraction = startFraction + ++resolvedPromise / promises.length * (endFraction - startFraction); // pass fraction as parameter to callback function.

      onProgress(fraction);
      return value;
    });
    return promise;
  };

  function checkPromises(promises) {
    (0, _util.assert)(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');
  }

  function checkFraction(startFraction, endFraction) {
    (0, _util.assert)(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got startFraction ${startFraction}`);
    (0, _util.assert)(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got endFraction ${endFraction}`);
    (0, _util.assert)(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` + `got startFraction ${startFraction} and endFraction ` + `${endFraction}`);
  }

  return Promise.all(promises.map(registerMonitor));
}
},{"../util":"XXxQ"}],"wDWD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadWeightsAsArrayBuffer = loadWeightsAsArrayBuffer;
exports.loadWeights = loadWeights;
exports.weightsLoaderFactory = weightsLoaderFactory;

var _environment = require("../environment");

var util = _interopRequireWildcard(require("../util"));

var _io_utils = require("./io_utils");

var _progress = require("./progress");

var _types = require("./types");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reads binary weights data from a number of URLs.
 *
 * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.
 * @param requestOptions RequestInit (options) for the HTTP requests.
 * @param fetchFunc Optional overriding value for the `window.fetch` function.
 * @param onProgress Optional, progress callback function, fired periodically
 *   before the load is completed.
 * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same
 *   length as `fetchURLs`.
 */
async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {
  if (loadOptions == null) {
    loadOptions = {};
  }

  const fetchFunc = loadOptions.fetchFunc == null ? (0, _environment.env)().platform.fetch : loadOptions.fetchFunc; // Create the requests for all of the weights in parallel.

  const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, {
    isBinary: true
  }));
  const fetchStartFraction = 0;
  const fetchEndFraction = 0.5;
  const responses = loadOptions.onProgress == null ? await Promise.all(requests) : await (0, _progress.monitorPromisesProgress)(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);
  const bufferPromises = responses.map(response => response.arrayBuffer());
  const bufferStartFraction = 0.5;
  const bufferEndFraction = 1;
  const buffers = loadOptions.onProgress == null ? await Promise.all(bufferPromises) : await (0, _progress.monitorPromisesProgress)(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);
  return buffers;
}
/**
 * Reads a weights manifest JSON configuration, fetches the weights and
 * returns them as `Tensor`s.
 *
 * @param manifest The weights manifest JSON.
 * @param filePathPrefix The path prefix for filenames given in the manifest.
 *     Defaults to the empty string.
 * @param weightNames The names of the weights to be fetched.
 */


async function loadWeights(manifest, filePathPrefix = '', weightNames, requestInit) {
  // TODO(nsthorat): Groups are currently fetched atomically. If you need a
  // single weight from a group, the whole group will be fetched. At a future
  // date, we should support fetching only the individual shards within a
  // group that are needed to reconstruct the requested weight.
  // TODO(cais): Use `decodeWeights` for implementation.
  const fetchWeights = fetchUrls => loadWeightsAsArrayBuffer(fetchUrls, {
    requestInit
  });

  const loadWeights = weightsLoaderFactory(fetchWeights);
  return loadWeights(manifest, filePathPrefix, weightNames);
}
/**
 * Creates a function, which reads a weights manifest JSON configuration,
 * fetches the weight files using the specified function and returns them as
 * `Tensor`s.
 *
 * ```js
 * // example for creating a nodejs weight loader, which reads the weight files
 * // from disk using fs.readFileSync
 *
 * import * as fs from 'fs'
 *
 * const fetchWeightsFromDisk = (filePaths: string[]) =>
 *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)
 *
 * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)
 *
 * const manifest = JSON.parse(
 *   fs.readFileSync('./my_model-weights_manifest').toString()
 * )
 * const weightMap = await loadWeights(manifest, './')
 * ```
 * @param fetchWeightsFunction The function used for fetching the weight files.
 * @returns Weight loading function.
 */


function weightsLoaderFactory(fetchWeightsFunction) {
  return async (manifest, filePathPrefix = '', weightNames) => {
    // Collect all the groups, weights, and their relative offsets to be
    // fetched.
    const groupIndicesToFetchMap = manifest.map(() => false);
    const groupWeightsToFetch = {};
    const weightsFound = weightNames != null ? weightNames.map(() => false) : [];
    const allManifestWeightNames = [];
    manifest.forEach((manifestGroupConfig, groupIndex) => {
      let groupOffset = 0;
      manifestGroupConfig.weights.forEach(weightsEntry => {
        const rawDtype = 'quantization' in weightsEntry ? weightsEntry.quantization.dtype : weightsEntry.dtype;
        const weightsBytes = _types.DTYPE_VALUE_SIZE_MAP[rawDtype] * util.sizeFromShape(weightsEntry.shape);

        const enqueueWeightsForFetchingFn = () => {
          groupIndicesToFetchMap[groupIndex] = true;

          if (groupWeightsToFetch[groupIndex] == null) {
            groupWeightsToFetch[groupIndex] = [];
          }

          groupWeightsToFetch[groupIndex].push({
            manifestEntry: weightsEntry,
            groupOffset,
            sizeBytes: weightsBytes
          });
        };

        if (weightNames != null) {
          weightNames.forEach((weightName, weightIndex) => {
            if (weightName === weightsEntry.name) {
              enqueueWeightsForFetchingFn();
              weightsFound[weightIndex] = true;
            }
          });
        } else {
          enqueueWeightsForFetchingFn();
        }

        allManifestWeightNames.push(weightsEntry.name);
        groupOffset += weightsBytes;
      });
    });

    if (!weightsFound.every(found => found)) {
      const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);
      throw new Error(`Could not find weights in manifest with names: ` + `${weightsNotFound.join(', ')}. \n` + `Manifest JSON has weights with names: ` + `${allManifestWeightNames.join(', ')}.`);
    } // Convert the one-hot boolean groupId => shouldFetch map to a list of group
    // IDs.


    const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {
      if (shouldFetch) {
        accumulator.push(i);
      }

      return accumulator;
    }, []);
    const fetchUrls = [];
    groupIndicesToFetch.forEach(i => {
      manifest[i].paths.forEach(filepath => {
        const fetchUrl = filePathPrefix + (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;
        fetchUrls.push(fetchUrl);
      });
    });
    const buffers = await fetchWeightsFunction(fetchUrls);
    const weightsTensorMap = {};
    let bufferIndexOffset = 0;
    groupIndicesToFetch.forEach(i => {
      const numBuffers = manifest[i].paths.length;
      let groupBytes = 0;

      for (let i = 0; i < numBuffers; i++) {
        groupBytes += buffers[bufferIndexOffset + i].byteLength;
      } // Create a buffer for the whole group.


      const groupBuffer = new ArrayBuffer(groupBytes);
      const groupByteBuffer = new Uint8Array(groupBuffer);
      let groupBufferOffset = 0;

      for (let i = 0; i < numBuffers; i++) {
        const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);
        groupByteBuffer.set(buffer, groupBufferOffset);
        groupBufferOffset += buffer.byteLength;
      }

      const weightsEntries = groupWeightsToFetch[i];
      weightsEntries.forEach(weightsEntry => {
        const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);
        const nameToTensorMap = (0, _io_utils.decodeWeights)(byteBuffer, [weightsEntry.manifestEntry]);

        for (const name in nameToTensorMap) {
          weightsTensorMap[name] = nameToTensorMap[name];
        }
      });
      bufferIndexOffset += numBuffers;
    });
    return weightsTensorMap;
  };
}
},{"../environment":"vpgN","../util":"XXxQ","./io_utils":"kOer","./progress":"tiHi","./types":"tjMC"}],"GLCC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseUrl = parseUrl;
exports.isHTTPScheme = isHTTPScheme;
exports.http = http;
exports.browserHTTPRequest = browserHTTPRequest;
exports.httpRouter = exports.HTTPRequest = void 0;

var _environment = require("../environment");

var _util = require("../util");

var _io_utils = require("./io_utils");

var _router_registry = require("./router_registry");

var _weights_loader = require("./weights_loader");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * IOHandler implementations based on HTTP requests in the web browser.
 *
 * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 */
const OCTET_STREAM_MIME_TYPE = 'application/octet-stream';
const JSON_TYPE = 'application/json';

class HTTPRequest {
  constructor(path, loadOptions) {
    this.DEFAULT_METHOD = 'POST';

    if (loadOptions == null) {
      loadOptions = {};
    }

    this.weightPathPrefix = loadOptions.weightPathPrefix;
    this.onProgress = loadOptions.onProgress;
    this.weightUrlConverter = loadOptions.weightUrlConverter;

    if (loadOptions.fetchFunc != null) {
      (0, _util.assert)(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' + '`fetch` (see ' + 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');
      this.fetch = loadOptions.fetchFunc;
    } else {
      this.fetch = (0, _environment.env)().platform.fetch;
    }

    (0, _util.assert)(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' + 'empty.');

    if (Array.isArray(path)) {
      (0, _util.assert)(path.length === 2, () => 'URL paths for http must have a length of 2, ' + `(actual length is ${path.length}).`);
    }

    this.path = path;

    if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) {
      throw new Error('requestInit is expected to have no pre-existing body, but has one.');
    }

    this.requestInit = loadOptions.requestInit || {};
  }

  async save(modelArtifacts) {
    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
      throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' + 'in binary formats yet.');
    }

    const init = Object.assign({
      method: this.DEFAULT_METHOD
    }, this.requestInit);
    init.body = new FormData();
    const weightsManifest = [{
      paths: ['./model.weights.bin'],
      weights: modelArtifacts.weightSpecs
    }];
    const modelTopologyAndWeightManifest = (0, _io_utils.getModelJSONForModelArtifacts)(modelArtifacts, weightsManifest);
    init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {
      type: JSON_TYPE
    }), 'model.json');

    if (modelArtifacts.weightData != null) {
      init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], {
        type: OCTET_STREAM_MIME_TYPE
      }), 'model.weights.bin');
    }

    const response = await this.fetch(this.path, init);

    if (response.ok) {
      return {
        modelArtifactsInfo: (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts),
        responses: [response]
      };
    } else {
      throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` + `${response.status}.`);
    }
  }
  /**
   * Load model artifacts via HTTP request(s).
   *
   * See the documentation to `tf.io.http` for details on the saved
   * artifacts.
   *
   * @returns The loaded model artifacts (if loading succeeds).
   */


  async load() {
    const modelConfigRequest = await this.fetch(this.path, this.requestInit);

    if (!modelConfigRequest.ok) {
      throw new Error(`Request to ${this.path} failed with status code ` + `${modelConfigRequest.status}. Please verify this URL points to ` + `the model JSON of the model to load.`);
    }

    let modelJSON;

    try {
      modelJSON = await modelConfigRequest.json();
    } catch (e) {
      let message = `Failed to parse model JSON of response from ${this.path}.`; // TODO(nsthorat): Remove this after some time when we're comfortable that
      // .pb files are mostly gone.

      if (this.path.endsWith('.pb')) {
        message += ' Your path contains a .pb file extension. ' + 'Support for .pb models have been removed in TensorFlow.js 1.0 ' + 'in favor of .json models. You can re-convert your Python ' + 'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' + 'or you can convert your.pb models with the \'pb2json\'' + 'NPM script in the tensorflow/tfjs-converter repository.';
      } else {
        message += ' Please make sure the server is serving valid ' + 'JSON for this request.';
      }

      throw new Error(message);
    } // We do not allow both modelTopology and weightsManifest to be missing.


    const modelTopology = modelJSON.modelTopology;
    const weightsManifest = modelJSON.weightsManifest;

    if (modelTopology == null && weightsManifest == null) {
      throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` + `topology or manifest for weights.`);
    }

    return (0, _io_utils.getModelArtifactsForJSON)(modelJSON, weightsManifest => this.loadWeights(weightsManifest));
  }

  async loadWeights(weightsManifest) {
    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;
    const [prefix, suffix] = parseUrl(weightPath);
    const pathPrefix = this.weightPathPrefix || prefix;
    const weightSpecs = [];

    for (const entry of weightsManifest) {
      weightSpecs.push(...entry.weights);
    }

    const fetchURLs = [];
    const urlPromises = [];

    for (const weightsGroup of weightsManifest) {
      for (const path of weightsGroup.paths) {
        if (this.weightUrlConverter != null) {
          urlPromises.push(this.weightUrlConverter(path));
        } else {
          fetchURLs.push(pathPrefix + path + suffix);
        }
      }
    }

    if (this.weightUrlConverter) {
      fetchURLs.push(...(await Promise.all(urlPromises)));
    }

    const buffers = await (0, _weights_loader.loadWeightsAsArrayBuffer)(fetchURLs, {
      requestInit: this.requestInit,
      fetchFunc: this.fetch,
      onProgress: this.onProgress
    });
    return [weightSpecs, (0, _io_utils.concatenateArrayBuffers)(buffers)];
  }

}

exports.HTTPRequest = HTTPRequest;
HTTPRequest.URL_SCHEME_REGEX = /^https?:\/\//;
/**
 * Extract the prefix and suffix of the url, where the prefix is the path before
 * the last file, and suffix is the search params after the last file.
 * ```
 * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'
 * [prefix, suffix] = parseUrl(url)
 * // prefix = 'http://tfhub.dev/model/1/'
 * // suffix = '?tfjs-format=file'
 * ```
 * @param url the model url to be parsed.
 */

function parseUrl(url) {
  const lastSlash = url.lastIndexOf('/');
  const lastSearchParam = url.lastIndexOf('?');
  const prefix = url.substring(0, lastSlash);
  const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';
  return [prefix + '/', suffix];
}

function isHTTPScheme(url) {
  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;
}

const httpRouter = (url, loadOptions) => {
  if (typeof fetch === 'undefined' && (loadOptions == null || loadOptions.fetchFunc == null)) {
    // `http` uses `fetch` or `node-fetch`, if one wants to use it in
    // an environment that is not the browser or node they have to setup a
    // global fetch polyfill.
    return null;
  } else {
    let isHTTP = true;

    if (Array.isArray(url)) {
      isHTTP = url.every(urlItem => isHTTPScheme(urlItem));
    } else {
      isHTTP = isHTTPScheme(url);
    }

    if (isHTTP) {
      return http(url, loadOptions);
    }
  }

  return null;
};

exports.httpRouter = httpRouter;

_router_registry.IORouterRegistry.registerSaveRouter(httpRouter);

_router_registry.IORouterRegistry.registerLoadRouter(httpRouter);
/**
 * Creates an IOHandler subtype that sends model artifacts to HTTP server.
 *
 * An HTTP request of the `multipart/form-data` mime type will be sent to the
 * `path` URL. The form data includes artifacts that represent the topology
 * and/or weights of the model. In the case of Keras-style `tf.Model`, two
 * blobs (files) exist in form-data:
 *   - A JSON file consisting of `modelTopology` and `weightsManifest`.
 *   - A binary weights file consisting of the concatenated weight values.
 * These files are in the same format as the one generated by
 * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).
 *
 * The following code snippet exemplifies the client-side code that uses this
 * function:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save(tf.io.http(
 *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));
 * console.log(saveResult);
 * ```
 *
 * If the default `POST` method is to be used, without any custom parameters
 * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:
 *
 * ```js
 * const saveResult = await model.save('http://model-server:5000/upload');
 * ```
 *
 * The following GitHub Gist
 * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864
 * implements a server based on [flask](https://github.com/pallets/flask) that
 * can receive the request. Upon receiving the model artifacts via the requst,
 * this particular server reconsistutes instances of [Keras
 * Models](https://keras.io/models/model/) in memory.
 *
 *
 * @param path A URL path to the model.
 *   Can be an absolute HTTP path (e.g.,
 *   'http://localhost:8000/model-upload)') or a relative path (e.g.,
 *   './model-upload').
 * @param requestInit Request configurations to be used when sending
 *    HTTP request to server using `fetch`. It can contain fields such as
 *    `method`, `credentials`, `headers`, `mode`, etc. See
 *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
 *    for more information. `requestInit` must not have a body, because the
 * body will be set by TensorFlow.js. File blobs representing the model
 * topology (filename: 'model.json') and the weights of the model (filename:
 * 'model.weights.bin') will be appended to the body. If `requestInit` has a
 * `body`, an Error will be thrown.
 * @param loadOptions Optional configuration for the loading. It includes the
 *   following fields:
 *   - weightPathPrefix Optional, this specifies the path prefix for weight
 *     files, by default this is calculated from the path param.
 *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,
 *     the `fetch` from node-fetch can be used here.
 *   - onProgress Optional, progress callback function, fired periodically
 *     before the load is completed.
 * @returns An instance of `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */


function http(path, loadOptions) {
  return new HTTPRequest(path, loadOptions);
}
/**
 * Deprecated. Use `tf.io.http`.
 * @param path
 * @param loadOptions
 */


function browserHTTPRequest(path, loadOptions) {
  return http(path, loadOptions);
}
},{"../environment":"vpgN","../util":"XXxQ","./io_utils":"kOer","./router_registry":"XmHK","./weights_loader":"wDWD"}],"U2v3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromMemory = fromMemory;
exports.withSaveHandler = withSaveHandler;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PassthroughLoader {
  constructor(modelArtifacts) {
    this.modelArtifacts = modelArtifacts;
  }

  async load() {
    return this.modelArtifacts;
  }

}

class PassthroughSaver {
  constructor(saveHandler) {
    this.saveHandler = saveHandler;
  }

  async save(modelArtifacts) {
    return this.saveHandler(modelArtifacts);
  }

}
/**
 * Creates an IOHandler that loads model artifacts from memory.
 *
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * const model = await tf.loadLayersModel(tf.io.fromMemory(
 *     modelTopology, weightSpecs, weightData));
 * ```
 *
 * @param modelArtifacts a object containing model topology (i.e., parsed from
 *   the JSON format).
 * @param weightSpecs An array of `WeightsManifestEntry` objects describing the
 *   names, shapes, types, and quantization of the weight data.
 * @param weightData A single `ArrayBuffer` containing the weight data,
 *   concatenated in the order described by the weightSpecs.
 * @param trainingConfig Model training configuration. Optional.
 *
 * @returns A passthrough `IOHandler` that simply loads the provided data.
 */


function fromMemory(modelArtifacts, weightSpecs, weightData, trainingConfig) {
  if (arguments.length === 1) {
    const isModelArtifacts = modelArtifacts.modelTopology != null || modelArtifacts.weightSpecs != null;

    if (isModelArtifacts) {
      return new PassthroughLoader(modelArtifacts);
    } else {
      // Legacy support: with only modelTopology.
      // TODO(cais): Remove this deprecated API.
      console.warn('Please call tf.io.fromMemory() with only one argument. ' + 'The argument should be of type ModelArtifacts. ' + 'The multi-argument signature of tf.io.fromMemory() has been ' + 'deprecated and will be removed in a future release.');
      return new PassthroughLoader({
        modelTopology: modelArtifacts
      });
    }
  } else {
    // Legacy support.
    // TODO(cais): Remove this deprecated API.
    console.warn('Please call tf.io.fromMemory() with only one argument. ' + 'The argument should be of type ModelArtifacts. ' + 'The multi-argument signature of tf.io.fromMemory() has been ' + 'deprecated and will be removed in a future release.');
    return new PassthroughLoader({
      modelTopology: modelArtifacts,
      weightSpecs,
      weightData,
      trainingConfig
    });
  }
}
/**
 * Creates an IOHandler that passes saved model artifacts to a callback.
 *
 * ```js
 * function handleSave(artifacts) {
 *   // ... do something with the artifacts ...
 *   return {modelArtifactsInfo: {...}, ...};
 * }
 *
 * const saveResult = model.save(tf.io.withSaveHandler(handleSave));
 * ```
 *
 * @param saveHandler A function that accepts a `ModelArtifacts` and returns a
 *     `SaveResult`.
 */


function withSaveHandler(saveHandler) {
  return new PassthroughSaver(saveHandler);
}
},{}],"wh56":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "browserFiles", {
  enumerable: true,
  get: function () {
    return _browser_files.browserFiles;
  }
});
Object.defineProperty(exports, "browserHTTPRequest", {
  enumerable: true,
  get: function () {
    return _http.browserHTTPRequest;
  }
});
Object.defineProperty(exports, "http", {
  enumerable: true,
  get: function () {
    return _http.http;
  }
});
Object.defineProperty(exports, "isHTTPScheme", {
  enumerable: true,
  get: function () {
    return _http.isHTTPScheme;
  }
});
Object.defineProperty(exports, "concatenateArrayBuffers", {
  enumerable: true,
  get: function () {
    return _io_utils.concatenateArrayBuffers;
  }
});
Object.defineProperty(exports, "decodeWeights", {
  enumerable: true,
  get: function () {
    return _io_utils.decodeWeights;
  }
});
Object.defineProperty(exports, "encodeWeights", {
  enumerable: true,
  get: function () {
    return _io_utils.encodeWeights;
  }
});
Object.defineProperty(exports, "getModelArtifactsForJSON", {
  enumerable: true,
  get: function () {
    return _io_utils.getModelArtifactsForJSON;
  }
});
Object.defineProperty(exports, "getModelArtifactsInfoForJSON", {
  enumerable: true,
  get: function () {
    return _io_utils.getModelArtifactsInfoForJSON;
  }
});
Object.defineProperty(exports, "fromMemory", {
  enumerable: true,
  get: function () {
    return _passthrough.fromMemory;
  }
});
Object.defineProperty(exports, "withSaveHandler", {
  enumerable: true,
  get: function () {
    return _passthrough.withSaveHandler;
  }
});
Object.defineProperty(exports, "getLoadHandlers", {
  enumerable: true,
  get: function () {
    return _router_registry.getLoadHandlers;
  }
});
Object.defineProperty(exports, "getSaveHandlers", {
  enumerable: true,
  get: function () {
    return _router_registry.getSaveHandlers;
  }
});
Object.defineProperty(exports, "registerLoadRouter", {
  enumerable: true,
  get: function () {
    return _router_registry.registerLoadRouter;
  }
});
Object.defineProperty(exports, "registerSaveRouter", {
  enumerable: true,
  get: function () {
    return _router_registry.registerSaveRouter;
  }
});
Object.defineProperty(exports, "loadWeights", {
  enumerable: true,
  get: function () {
    return _weights_loader.loadWeights;
  }
});
Object.defineProperty(exports, "weightsLoaderFactory", {
  enumerable: true,
  get: function () {
    return _weights_loader.weightsLoaderFactory;
  }
});
Object.defineProperty(exports, "copyModel", {
  enumerable: true,
  get: function () {
    return _model_management.copyModel;
  }
});
Object.defineProperty(exports, "listModels", {
  enumerable: true,
  get: function () {
    return _model_management.listModels;
  }
});
Object.defineProperty(exports, "moveModel", {
  enumerable: true,
  get: function () {
    return _model_management.moveModel;
  }
});
Object.defineProperty(exports, "removeModel", {
  enumerable: true,
  get: function () {
    return _model_management.removeModel;
  }
});

require("./indexed_db");

require("./local_storage");

var _browser_files = require("./browser_files");

var _http = require("./http");

var _io_utils = require("./io_utils");

var _passthrough = require("./passthrough");

var _router_registry = require("./router_registry");

var _weights_loader = require("./weights_loader");

var _model_management = require("./model_management");
},{"./indexed_db":"XHfa","./local_storage":"bqqF","./browser_files":"zFW7","./http":"GLCC","./io_utils":"kOer","./passthrough":"U2v3","./router_registry":"XmHK","./weights_loader":"wDWD","./model_management":"xu20"}],"zVDr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matMul = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the dot product of two matrices, A * B. These must be matrices.
 *
 * ```js
 * const a = tf.tensor2d([1, 2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.matMul(b).print();  // or tf.matMul(a, b)
 * ```
 * @param a First matrix in dot product operation.
 * @param b Second matrix in dot product operation.
 * @param transposeA If true, `a` is transposed before multiplication.
 * @param transposeB If true, `b` is transposed before multiplication.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function matMul_(a, b, transposeA = false, transposeB = false) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'matMul');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'matMul');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  const inputs = {
    a: $a,
    b: $b
  };
  const attrs = {
    transposeA,
    transposeB
  };
  return _engine.ENGINE.runKernel(_kernel_names.BatchMatMul, inputs, attrs);
}

const matMul = (0, _operation.op)({
  matMul_
});
exports.matMul = matMul;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./operation":"uE86"}],"HpS0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.oneHot = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take
 * value `onValue` (defaults to 1), while all other locations take value
 * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank
 * `R+1` with the last axis of size `depth`.
 *
 * ```js
 * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();
 * ```
 *
 * @param indices `tf.Tensor` of indices with dtype `int32`.
 * @param depth The depth of the one hot dimension.
 * @param onValue A number used to fill in the output when the index matches
 * the location.
 * @param offValue A number used to fill in the output when the index does
 *     not match the location.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function oneHot_(indices, depth, onValue = 1, offValue = 0) {
  if (depth < 2) {
    throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);
  }

  const $indices = (0, _tensor_util_env.convertToTensor)(indices, 'indices', 'oneHot', 'int32');
  const inputs = {
    indices: $indices
  };
  const attrs = {
    depth,
    onValue,
    offValue
  };
  return _engine.ENGINE.runKernel(_kernel_names.OneHot, inputs, attrs);
}

const oneHot = (0, _operation.op)({
  oneHot_
});
exports.oneHot = oneHot;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"JmRY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transpose = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.
 *
 * The returned `tf.Tensor`'s dimension `i` will correspond to the input
 * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,
 * where `n` is the rank of the input `tf.Tensor`. Hence by default, this
 * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);
 *
 * a.transpose().print();  // or tf.transpose(a)
 * ```
 *
 * @param x The tensor to transpose.
 * @param perm The permutation of the dimensions of a.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function transpose_(x, perm) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'transpose');

  if (perm == null) {
    perm = $x.shape.map((s, i) => i).reverse();
  }

  util.assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` + `must match length of perm ${perm}.`);
  perm.forEach(axis => {
    util.assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` + ` but got ${perm}`);
  });

  if ($x.rank <= 1) {
    return $x.clone();
  }

  const inputs = {
    x: $x
  };
  const attrs = {
    perm
  };
  return _engine.ENGINE.runKernel(_kernel_names.Transpose, inputs, attrs);
}

const transpose = (0, _operation.op)({
  transpose_
});
exports.transpose = transpose;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"VdwK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.confusionMatrix_ = confusionMatrix_;
exports.confusionMatrix = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _cast = require("./cast");

var _mat_mul = require("./mat_mul");

var _one_hot = require("./one_hot");

var _operation = require("./operation");

var _transpose = require("./transpose");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the confusion matrix from true labels and predicted labels.
 *
 * ```js
 * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');
 * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');
 * const numClasses = 3;
 * const out = tf.math.confusionMatrix(labels, predictions, numClasses);
 * out.print();
 * // Expected output matrix:
 * // [[2, 0, 0],
 * //  [0, 1, 1],
 * //  [0, 0, 1]]
 * ```
 *
 * @param labels The target labels, assumed to be 0-based integers
 *   for the classes. The shape is `[numExamples]`, where
 *   `numExamples` is the number of examples included.
 * @param predictions The predicted classes, assumed to be
 *   0-based integers for the classes. Must have the same shape as `labels`.
 * @param numClasses Number of all classes, as an integer.
 *   Its value must be larger than the largest element in `labels` and
 *   `predictions`.
 * @returns The confusion matrix as a int32-type 2D tensor. The value at
 *   row `r` and column `c` is the number of times examples of actual class
 *   `r` were predicted as class `c`.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
function confusionMatrix_(labels, predictions, numClasses) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'confusionMatrix');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'confusionMatrix');
  util.assert(numClasses == null || numClasses > 0 && Number.isInteger(numClasses), () => `If provided, numClasses must be a positive integer, ` + `but got ${numClasses}`);
  util.assert($labels.rank === 1, () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);
  util.assert($predictions.rank === 1, () => `Expected the rank of predictions to be 1, ` + `but got ${$predictions.rank}`);
  util.assert($labels.shape[0] === $predictions.shape[0], () => `Mismatch in the number of examples: ` + `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` + `Labels and predictions should have the same number of elements.`);
  util.assert(numClasses > 0 && Number.isInteger(numClasses), () => `numClasses is required to be a positive integer, but got ` + `${numClasses}`); // TODO(cais): In the future, if oneHot supports tensors inputs for
  //   `numClasses`, `confusionMatrix` can make `numClasses` optional.

  const oneHotLabels = (0, _one_hot.oneHot)((0, _cast.cast)($labels, 'int32'), numClasses);
  const oneHotPredictions = (0, _one_hot.oneHot)((0, _cast.cast)($predictions, 'int32'), numClasses);
  const oneHotLabelsT = (0, _transpose.transpose)(oneHotLabels);
  const product = (0, _mat_mul.matMul)(oneHotLabelsT, oneHotPredictions);
  return (0, _cast.cast)(product, 'int32');
}

const confusionMatrix = (0, _operation.op)({
  confusionMatrix_
});
exports.confusionMatrix = confusionMatrix;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./cast":"qnzc","./mat_mul":"zVDr","./one_hot":"HpS0","./operation":"uE86","./transpose":"JmRY"}],"EwBN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "confusionMatrix", {
  enumerable: true,
  get: function () {
    return _confusion_matrix.confusionMatrix;
  }
});

var _confusion_matrix = require("./ops/confusion_matrix");
},{"./ops/confusion_matrix":"VdwK"}],"gE0c":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor3d = tensor3d;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor3d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided,  it is inferred from
 *     `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor3d(values, shape, dtype) {
  (0, _util.assertNonNull)(values);

  if (shape != null && shape.length !== 3) {
    throw new Error('tensor3d() requires shape to have three numbers');
  }

  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);

  if (inferredShape.length !== 3 && inferredShape.length !== 1) {
    throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');
  }

  if (inferredShape.length === 1 && shape == null) {
    throw new Error('tensor3d() requires shape to be provided when `values` ' + 'are a flat array');
  }

  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./tensor_ops_util":"HKvD"}],"Wqnn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromPixelsAsync = fromPixelsAsync;
exports.toPixels = toPixels;
exports.fromPixels = void 0;

var _engine = require("../engine");

var _environment = require("../environment");

var _kernel_names = require("../kernel_names");

var _kernel_registry = require("../kernel_registry");

var _tensor = require("../tensor");

var _tensor_util_env = require("../tensor_util_env");

var _cast = require("./cast");

var _operation = require("./operation");

var _tensor3d = require("./tensor3d");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let fromPixels2DContext;
/**
 * Creates a `tf.Tensor` from an image.
 *
 * ```js
 * const image = new ImageData(1, 1);
 * image.data[0] = 100;
 * image.data[1] = 150;
 * image.data[2] = 200;
 * image.data[3] = 255;
 *
 * tf.browser.fromPixels(image).print();
 * ```
 *
 * @param pixels The input image to construct the tensor from. The
 * supported image types are all 4-channel. You can also pass in an image
 * object with following attributes:
 * `{data: Uint8Array; width: number; height: number}`
 * @param numChannels The number of channels of the output tensor. A
 * numChannels value less than 4 allows you to ignore channels. Defaults to
 * 3 (ignores alpha channel of input image).
 *
 * @returns A Tensor3D with the shape `[height, width, numChannels]`.
 *
 * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}
 */

function fromPixels_(pixels, numChannels = 3) {
  // Sanity checks.
  if (numChannels > 4) {
    throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');
  }

  if (pixels == null) {
    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');
  }

  let isPixelData = false;
  let isImageData = false;
  let isVideo = false;
  let isImage = false;
  let isCanvasLike = false;
  let isImageBitmap = false;

  if (pixels.data instanceof Uint8Array) {
    isPixelData = true;
  } else if (typeof ImageData !== 'undefined' && pixels instanceof ImageData) {
    isImageData = true;
  } else if (typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement) {
    isVideo = true;
  } else if (typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement) {
    isImage = true; // tslint:disable-next-line: no-any
  } else if (pixels.getContext != null) {
    isCanvasLike = true;
  } else if (typeof ImageBitmap !== 'undefined' && pixels instanceof ImageBitmap) {
    isImageBitmap = true;
  } else {
    throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' + `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` + `in browser, or OffscreenCanvas, ImageData in webworker` + ` or {data: Uint32Array, width: number, height: number}, ` + `but was ${pixels.constructor.name}`);
  }

  if (isVideo) {
    const HAVE_CURRENT_DATA_READY_STATE = 2;

    if (isVideo && pixels.readyState < HAVE_CURRENT_DATA_READY_STATE) {
      throw new Error('The video element has not loaded data yet. Please wait for ' + '`loadeddata` event on the <video> element.');
    }
  } // If the current backend has 'FromPixels' registered, it has a more
  // efficient way of handling pixel uploads, so we call that.


  const kernel = (0, _kernel_registry.getKernel)(_kernel_names.FromPixels, _engine.ENGINE.backendName);

  if (kernel != null) {
    const inputs = {
      pixels
    };
    const attrs = {
      numChannels
    };
    return _engine.ENGINE.runKernel(_kernel_names.FromPixels, inputs, attrs);
  }

  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];
  let vals;

  if (isCanvasLike) {
    vals = // tslint:disable-next-line:no-any
    pixels.getContext('2d').getImageData(0, 0, width, height).data;
  } else if (isImageData || isPixelData) {
    vals = pixels.data;
  } else if (isImage || isVideo || isImageBitmap) {
    if (fromPixels2DContext == null) {
      fromPixels2DContext = document.createElement('canvas').getContext('2d');
    }

    fromPixels2DContext.canvas.width = width;
    fromPixels2DContext.canvas.height = height;
    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);
    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;
  }

  let values;

  if (numChannels === 4) {
    values = new Int32Array(vals);
  } else {
    const numPixels = width * height;
    values = new Int32Array(numPixels * numChannels);

    for (let i = 0; i < numPixels; i++) {
      for (let channel = 0; channel < numChannels; ++channel) {
        values[i * numChannels + channel] = vals[i * 4 + channel];
      }
    }
  }

  const outShape = [height, width, numChannels];
  return (0, _tensor3d.tensor3d)(values, outShape, 'int32');
} // Helper functions for |fromPixelsAsync| to check whether the input can
// be wrapped into imageBitmap.


function isPixelData(pixels) {
  return pixels != null && pixels.data instanceof Uint8Array;
}

function isImageBitmapFullySupported() {
  return typeof window !== 'undefined' && typeof ImageBitmap !== 'undefined' && window.hasOwnProperty('createImageBitmap');
}

function isNonEmptyPixels(pixels) {
  return pixels != null && pixels.width !== 0 && pixels.height !== 0;
}

function canWrapPixelsToImageBitmap(pixels) {
  return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) && isNonEmptyPixels(pixels) && !isPixelData(pixels);
}
/**
 * Creates a `tf.Tensor` from an image in async way.
 *
 * ```js
 * const image = new ImageData(1, 1);
 * image.data[0] = 100;
 * image.data[1] = 150;
 * image.data[2] = 200;
 * image.data[3] = 255;
 *
 * (await tf.browser.fromPixelsAsync(image)).print();
 * ```
 * This API is the async version of fromPixels. The API will first
 * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to
 * imageBitmap if the flag is set to true.
 *
 * @param pixels The input image to construct the tensor from. The
 * supported image types are all 4-channel. You can also pass in an image
 * object with following attributes:
 * `{data: Uint8Array; width: number; height: number}`
 * @param numChannels The number of channels of the output tensor. A
 * numChannels value less than 4 allows you to ignore channels. Defaults to
 * 3 (ignores alpha channel of input image).
 *
 * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}
 */


async function fromPixelsAsync(pixels, numChannels = 3) {
  let inputs = null; // Check whether the backend needs to wrap |pixels| to imageBitmap and
  // whether |pixels| can be wrapped to imageBitmap.

  if ((0, _environment.env)().getBool('WRAP_TO_IMAGEBITMAP') && canWrapPixelsToImageBitmap(pixels)) {
    // Force the imageBitmap creation to not do any premultiply alpha
    // ops.
    let imageBitmap;

    try {
      // wrap in try-catch block, because createImageBitmap may not work
      // properly in some browsers, e.g.
      // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594
      // tslint:disable-next-line: no-any
      imageBitmap = await createImageBitmap(pixels, {
        premultiplyAlpha: 'none'
      });
    } catch (e) {
      imageBitmap = null;
    } // createImageBitmap will clip the source size.
    // In some cases, the input will have larger size than its content.
    // E.g. new Image(10, 10) but with 1 x 1 content. Using
    // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which
    // is not correct. We should avoid wrapping such resouce to
    // imageBitmap.


    if (imageBitmap != null && imageBitmap.width === pixels.width && imageBitmap.height === pixels.height) {
      inputs = imageBitmap;
    } else {
      inputs = pixels;
    }
  } else {
    inputs = pixels;
  }

  return fromPixels_(inputs, numChannels);
}
/**
 * Draws a `tf.Tensor` of pixel values to a byte array or optionally a
 * canvas.
 *
 * When the dtype of the input is 'float32', we assume values in the range
 * [0-1]. Otherwise, when input is 'int32', we assume values in the range
 * [0-255].
 *
 * Returns a promise that resolves when the canvas has been drawn to.
 *
 * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor
 * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If
 * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws
 * grayscale. When depth of 3, we draw with the first three components of
 * the depth dimension corresponding to r, g, b and alpha = 1. When depth of
 * 4, all four components of the depth dimension correspond to r, g, b, a.
 * @param canvas The canvas to draw to.
 *
 * @doc {heading: 'Browser', namespace: 'browser'}
 */


async function toPixels(img, canvas) {
  let $img = (0, _tensor_util_env.convertToTensor)(img, 'img', 'toPixels');

  if (!(img instanceof _tensor.Tensor)) {
    // Assume int32 if user passed a native array.
    const originalImgTensor = $img;
    $img = (0, _cast.cast)(originalImgTensor, 'int32');
    originalImgTensor.dispose();
  }

  if ($img.rank !== 2 && $img.rank !== 3) {
    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);
  }

  const [height, width] = $img.shape.slice(0, 2);
  const depth = $img.rank === 2 ? 1 : $img.shape[2];

  if (depth > 4 || depth === 2) {
    throw new Error(`toPixels only supports depth of size ` + `1, 3 or 4 but got ${depth}`);
  }

  if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {
    throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` + ` Please use float32 or int32 tensors.`);
  }

  const data = await $img.data();
  const multiplier = $img.dtype === 'float32' ? 255 : 1;
  const bytes = new Uint8ClampedArray(width * height * 4);

  for (let i = 0; i < height * width; ++i) {
    const rgba = [0, 0, 0, 255];

    for (let d = 0; d < depth; d++) {
      const value = data[i * depth + d];

      if ($img.dtype === 'float32') {
        if (value < 0 || value > 1) {
          throw new Error(`Tensor values for a float32 Tensor must be in the ` + `range [0 - 1] but encountered ${value}.`);
        }
      } else if ($img.dtype === 'int32') {
        if (value < 0 || value > 255) {
          throw new Error(`Tensor values for a int32 Tensor must be in the ` + `range [0 - 255] but encountered ${value}.`);
        }
      }

      if (depth === 1) {
        rgba[0] = value * multiplier;
        rgba[1] = value * multiplier;
        rgba[2] = value * multiplier;
      } else {
        rgba[d] = value * multiplier;
      }
    }

    const j = i * 4;
    bytes[j + 0] = Math.round(rgba[0]);
    bytes[j + 1] = Math.round(rgba[1]);
    bytes[j + 2] = Math.round(rgba[2]);
    bytes[j + 3] = Math.round(rgba[3]);
  }

  if (canvas != null) {
    canvas.width = width;
    canvas.height = height;
    const ctx = canvas.getContext('2d');
    const imageData = new ImageData(bytes, width, height);
    ctx.putImageData(imageData, 0, 0);
  }

  if ($img !== img) {
    $img.dispose();
  }

  return bytes;
}

const fromPixels = (0, _operation.op)({
  fromPixels_
});
exports.fromPixels = fromPixels;
},{"../engine":"phT7","../environment":"vpgN","../kernel_names":"rJl6","../kernel_registry":"PlaY","../tensor":"eFW4","../tensor_util_env":"y4X4","./cast":"qnzc","./operation":"uE86","./tensor3d":"gE0c"}],"JyCd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prepareAndValidate = prepareAndValidate;

var _util = require("../util");

/**
 * Validate gather nd inputs.
 *
 * @param tensor The tensor contains the source values.
 * @param indices The tensor contains the indices to slice the source.
 *
 * @returns [resultShape, numUpdates, sliceSize, strides]
 */
function prepareAndValidate(tensor, indices) {
  const tensorRank = tensor.shape.length;
  const indicesRank = indices.shape.length;

  if (tensorRank < 1) {
    throw new Error('tf.gatherND() expects the input to be rank 1 or higher,' + ` but the rank was ${tensorRank}.`);
  }

  if (indicesRank < 1) {
    throw new Error('tf.gatherND() expects the indices to be rank 1 or higher,' + ` but the rank was ${indicesRank}.`);
  }

  if (indices.dtype !== 'int32') {
    throw new Error('tf.gatherND() expects the indices to be int32 type,' + ` but the dtype was ${indices.dtype}.`);
  }

  if (indices.shape[indicesRank - 1] > tensorRank) {
    throw new Error('index innermost dimension length must be <= tensor rank; saw: ' + `${indices.shape[indicesRank - 1]} vs. ${tensorRank}`);
  }

  if ((0, _util.sizeFromShape)(tensor.shape) === 0) {
    throw new Error('Requested more than 0 entries, but input is empty.' + ` Input shape: ${tensor.shape}.`);
  }

  const indicesShape = indices.shape;
  const sliceRank = indicesShape[indicesShape.length - 1]; // The result shape is
  //   indices.shape[:-1] + params.shape[indices.shape[-1]:]

  let nResult = 1;

  for (let i = 0; i < indicesShape.length - 1; ++i) {
    nResult *= indicesShape[i];
  }

  const inputShape = tensor.shape;
  const resultShape = indicesShape.slice();
  resultShape.pop();
  let sliceSize = 1;

  for (let i = sliceRank; i < tensorRank; ++i) {
    sliceSize *= inputShape[i];
    resultShape.push(inputShape[i]);
  }

  const strides = [...(0, _util.computeStrides)(tensor.shape).map(stride => stride / sliceSize), 1].slice(0, sliceRank);
  return [resultShape, nResult, sliceSize, strides];
}
},{"../util":"XXxQ"}],"keWG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateUpdateShape = validateUpdateShape;
exports.validateInput = validateInput;
exports.calculateShapes = calculateShapes;

var _util = require("../util");

/**
 * Check whether updates.shape = indices.shape[:batchDim] +
 * shape[sliceDim:]
 *
 * @param x The input tensor.
 */
function validateUpdateShape(shape, indices, updates) {
  const sliceDim = indices.rank > 1 ? indices.shape[indices.rank - 1] : 1;
  const batchDim = indices.rank > 1 ? indices.rank - 1 : 1;
  const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' + `shape[sliceDim:], got updates.shape: ${updates.shape}` + `, indices.shape: ${indices.shape}, shape: ${shape}` + `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;

  if (updates.rank < batchDim) {
    throw new Error(shapeError + ` update.rank < ${batchDim}. `);
  }

  if (shape.length < sliceDim + (updates.rank - batchDim)) {
    throw new Error(shapeError + ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);
  }

  if (updates.rank !== batchDim + shape.length - sliceDim) {
    throw new Error(shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);
  }

  for (let d = 0; d < batchDim; ++d) {
    if (updates.shape[d] !== indices.shape[d]) {
      throw new Error(shapeError + ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${indices.shape[d]}).`);
    }
  }

  for (let d = 0; d < updates.rank - batchDim; ++d) {
    if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {
      throw new Error(shapeError + ` updates.shape[${d + batchDim}] (${updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${shape[d + batchDim]})`);
    }
  }
}
/**
 * Validate scatter nd inputs.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 */


function validateInput(updates, indices, shape) {
  if (indices.rank < 1) {
    throw new Error('tf.scatterND() expects the indices to be rank 1 or higher,' + ` but the rank was ${indices.rank}.`);
  }

  if (updates.rank < 1) {
    throw new Error('tf.scatterND() expects the updates to be rank 1 or higher,' + ` but the rank was ${updates.rank}.`);
  }

  if (indices.dtype !== 'int32') {
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${indices.dtype}`);
  }

  if (shape.length < 1) {
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${shape}`);
  }

  if (shape.length === 0) {
    if (indices.size === 0) {
      throw new Error(`Indices specified for empty output. indices shape: ${indices.shape}`);
    }

    if (updates.size === 0) {
      throw new Error(`Updates specified for empty output. updates shape: ${updates.shape}`);
    }
  }

  validateUpdateShape(shape, indices, updates);
}
/**
 * Calculate the shape information for the output.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 *
 * @returns ScatterShapeInfo
 */


function calculateShapes(updates, indices, shape) {
  // Calculate the number of dimensions in indices
  const indicesRank = indices.shape.length;
  const sliceRank = indicesRank > 1 ? indices.shape[indicesRank - 1] : 1; // Calculate the number of elements that make up each slice of our updated
  // tensor. This allows us to work with flattened tensors and copy over whole
  // slices at a time.

  const totalNd = shape.length;
  let sliceSize = 1;

  for (let i = sliceRank; i < totalNd; ++i) {
    sliceSize *= shape[i];
  }

  const safeSliceDim = sliceRank < 1 ? 1 : sliceRank;
  const numUpdates = (0, _util.sizeFromShape)(indices.shape) / safeSliceDim;
  const strides = [...(0, _util.computeStrides)(shape.slice(0, sliceRank)), 1];
  const outputSize = (0, _util.sizeFromShape)(shape);
  return {
    sliceRank,
    numUpdates,
    sliceSize,
    strides,
    outputSize
  };
}
},{"../util":"XXxQ"}],"PuAY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertParamsValid = assertParamsValid;
exports.maskToAxes = maskToAxes;
exports.computeOutShape = computeOutShape;
exports.stridesWithElidedDims = stridesWithElidedDims;
exports.getNormalizedAxes = getNormalizedAxes;
exports.startIndicesWithElidedDims = startIndicesWithElidedDims;
exports.stopIndicesWithElidedDims = stopIndicesWithElidedDims;
exports.stridesForAxis = stridesForAxis;
exports.startForAxis = startForAxis;
exports.stopForAxis = stopForAxis;
exports.isSliceContinous = isSliceContinous;
exports.computeFlatOffset = computeFlatOffset;
exports.parseSliceParams = parseSliceParams;
exports.sliceInfo = sliceInfo;

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function assertParamsValid(input, begin, size) {
  const inputRank = input.shape.length;
  util.assert(inputRank === begin.length, () => `Error in slice${inputRank}D: Length of begin ${begin} must ` + `match the rank of the array (${inputRank}).`);
  util.assert(inputRank === size.length, () => `Error in slice${inputRank}D: Length of size ${size} must ` + `match the rank of the array (${inputRank}).`);

  for (let i = 0; i < inputRank; ++i) {
    util.assert(begin[i] + size[i] <= input.shape[i], () => `Error in slice${inputRank}D: begin[${i}] + size[${i}] ` + `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${input.shape[i]})`);
  }
}
/** Converts a binary mask to an array of axes. Used in stridedSlice(). */


function maskToAxes(mask) {
  const axes = [];
  let axis = 0;

  while (mask > 0) {
    if (mask & 1) {
      axes.push(axis);
    }

    mask /= 2;
    axis++;
  }

  return axes;
}
/** Computes the output shape given the strided slice params. */


function computeOutShape(begin, end, strides) {
  const size = [];

  for (let axis = 0; axis < begin.length; axis++) {
    size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);
  }

  return size;
} // Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current stride value. Otherwise, insert.


function stridesWithElidedDims(strides, ellipsisInsertionIndex, numElidedAxes, inputShape) {
  const newStrides = [...strides];

  for (let i = newStrides.length; i < inputShape.length; i++) {
    newStrides.push(1);
  }

  for (let i = 0; i < numElidedAxes; i++) {
    if (i === 0) {
      newStrides[ellipsisInsertionIndex] = 1;
    } else {
      newStrides.splice(ellipsisInsertionIndex, 0
      /* num elements to delete */
      , 1
      /* element to add */
      );
      newStrides.pop();
    }
  }

  return newStrides;
}

function unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, normalizedAxis) {
  if (normalizedAxis <= ellipsisInsertionIndex) {
    return normalizedAxis;
  }

  return normalizedAxis - (numElidedAxes - 1);
}

function getElidedAxes(numElidedAxes, ellipsisInsertionIndex) {
  const elidedAxes = [];

  for (let i = 0; i < numElidedAxes; i++) {
    elidedAxes.push(ellipsisInsertionIndex + i);
  }

  return elidedAxes;
} // Normalize the start, end and strides.


function getNormalizedAxes(inputShape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask) {
  const inputRank = inputShape.length;
  let normalizedBegin = new Array(inputRank),
      normalizedEnd = new Array(inputRank),
      normalizedStrides = new Array(inputRank);

  if (ellipsisAxes.length && numInterpolatedAxes > 0) {
    const fullIndex = ellipsisAxes[0]; // The ellipsis applies to the masked index as well as any dimensions
    // that are interpolated.

    const numElidedAxes = numInterpolatedAxes + 1;
    normalizedBegin = startIndicesWithElidedDims(beginMask, fullIndex, numElidedAxes, begin, inputShape);
    normalizedEnd = stopIndicesWithElidedDims(endMask, fullIndex, numElidedAxes, end, inputShape);
    normalizedStrides = stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);
  } else {
    for (let axis = 0; axis < inputRank; axis++) {
      normalizedBegin[axis] = startForAxis(beginMask, begin, strides, inputShape, axis, ellipsisMask);
      normalizedEnd[axis] = stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);
      normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);
    }
  }

  return {
    begin: normalizedBegin,
    end: normalizedEnd,
    strides: normalizedStrides
  };
} // Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current start value. Otherwise, insert.


function startIndicesWithElidedDims(beginMask, ellipsisInsertionIndex, numElidedAxes, originalBegin, inputShape) {
  const newIndices = [...inputShape];
  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);

  for (let axis = 0; axis < newIndices.length; axis++) {
    if (elidedAxes.indexOf(axis) > -1) {
      newIndices[axis] = 0;
    } else {
      const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
      let originalValue = originalBegin[originalAxis];

      if (beginMask & 1 << originalAxis) {
        originalValue = 0;
      }

      newIndices[axis] = originalValue;
    }
  }

  return newIndices;
} // Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current stop value. Otherwise, insert.


function stopIndicesWithElidedDims(endMask, ellipsisInsertionIndex, numElidedAxes, originalEnd, inputShape) {
  const newIndices = [...inputShape];
  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);

  for (let axis = 0; axis < newIndices.length; axis++) {
    if (elidedAxes.indexOf(axis) > -1) {
      newIndices[axis] = Number.MAX_SAFE_INTEGER;
    } else {
      const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
      let originalValue = originalEnd[originalAxis];

      if (endMask & 1 << originalAxis) {
        originalValue = Number.MAX_SAFE_INTEGER;
      }

      newIndices[axis] = originalValue;
    }
  }

  for (let i = 0; i < newIndices.length; i++) {
    // Handle negative indices
    const axisSize = inputShape[i];

    if (newIndices[i] < 0) {
      newIndices[i] += axisSize;
    }

    newIndices[i] = util.clamp(0, newIndices[i], inputShape[i]);
  }

  return newIndices;
}

function stridesForAxis(strides, axis, ellipsisMask) {
  let stride = strides[axis];

  if (ellipsisMask & 1 << axis || stride == null) {
    stride = 1;
  }

  return stride;
}

function startForAxis(beginMask, startIndices, strides, inputShape, axis, ellipsisMask) {
  // Begin with the specified index
  let start = startIndices[axis];
  const stride = strides[axis] || 1; // Check the axis bit from right of masked axes, or the begin index is not set
  // for the axis.

  if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {
    if (stride > 0) {
      // Forward iteration - use the first element. These values will get
      // clamped below (Note: We could have set them to 0 and axis_size-1, but
      // use lowest() and max() to maintain symmetry with StopForAxis())
      start = Number.MIN_SAFE_INTEGER;
    } else {
      // Backward iteration - use the last element.
      start = Number.MAX_SAFE_INTEGER;
    }
  } // Handle negative indices


  const axisSize = inputShape[axis];

  if (start < 0) {
    start += axisSize;
  } // Clamping


  start = util.clamp(0, start, axisSize - 1);
  return start;
}

function stopForAxis(endMask, stopIndices, strides, inputShape, axis, ellipsisMask) {
  // Begin with the specified index
  let stop = stopIndices[axis];
  const stride = strides[axis] || 1; // Check the axis bit from right of masked axes, or if the stop index is not
  // set for this axis.

  if (endMask & 1 << axis || ellipsisMask & 1 << axis || stop == null) {
    if (stride > 0) {
      // Forward iteration - use the last element. These values will get
      // clamped below
      stop = Number.MAX_SAFE_INTEGER;
    } else {
      // Backward iteration - use the first element.
      stop = Number.MIN_SAFE_INTEGER;
    }
  } // Handle negative indices


  const axisSize = inputShape[axis];

  if (stop < 0) {
    stop += axisSize;
  } // Clamping
  // Because the end index points one past the last element, we need slightly
  // different clamping ranges depending on the direction.


  if (stride > 0) {
    // Forward iteration
    stop = util.clamp(0, stop, axisSize);
  } else {
    // Backward iteration
    stop = util.clamp(-1, stop, axisSize - 1);
  }

  return stop;
}
/**
 * Returns true if the slice occupies a continous set of elements in the
 * 'flat' space.
 */


function isSliceContinous(shape, begin, size) {
  // Index of the first axis that has size > 1.
  let firstNonOneAxis = size.length;

  for (let i = 0; i < size.length; i++) {
    if (size[i] > 1) {
      firstNonOneAxis = i;
      break;
    }
  }

  for (let i = firstNonOneAxis + 1; i < size.length; i++) {
    if (begin[i] > 0 || size[i] !== shape[i]) {
      return false;
    }
  }

  return true;
}

function computeFlatOffset(begin, strides) {
  let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;

  for (let i = 0; i < begin.length - 1; i++) {
    flatOffset += begin[i] * strides[i];
  }

  return flatOffset;
}

function parseSliceParams(x, begin, size) {
  // The following logic allows for more ergonomic calls.
  let begin_;
  const xRank = x.shape.length;

  if (typeof begin === 'number') {
    begin_ = [begin, ...new Array(xRank - 1).fill(0)];
  } else if (begin.length < xRank) {
    begin_ = begin.concat(new Array(xRank - begin.length).fill(0));
  } else {
    begin_ = begin.slice();
  }

  begin_.forEach(d => {
    util.assert(d !== -1, () => 'slice() does not support negative begin indexing.');
  });
  let size_;

  if (size == null) {
    size_ = new Array(xRank).fill(-1);
  } else if (typeof size === 'number') {
    size_ = [size, ...new Array(xRank - 1).fill(-1)];
  } else if (size.length < xRank) {
    size_ = size.concat(new Array(xRank - size.length).fill(-1));
  } else {
    size_ = size;
  }

  size_ = size_.map((d, i) => {
    if (d >= 0) {
      return d;
    } else {
      util.assert(d === -1, () => `Negative size values should be exactly -1 but got ` + `${d} for the slice() size at index ${i}.`);
      return x.shape[i] - begin_[i];
    }
  });
  return [begin_, size_];
}

function sliceInfo(xShape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {
  // make a copy because it may be modified further down.
  let $begin = begin.slice();
  let $end = end.slice();
  let $strides = strides;

  if (strides == null) {
    $strides = new Array($begin.length);
  }

  const ellipsisAxes = maskToAxes(ellipsisMask);

  if (ellipsisAxes.length > 1) {
    throw new Error('Multiple ellipses in slice is not allowed.');
  }

  if (ellipsisMask !== 0 && newAxisMask !== 0) {
    throw new Error('Using both ellipsisMask and newAxisMask is not yet supported.');
  }

  if (ellipsisMask !== 0 && shrinkAxisMask !== 0) {
    throw new Error('Using both ellipsisMask and shrinkAxisMask is not yet supported.');
  }

  const numInterpolatedAxes = xShape.length - $begin.length; // Expand the dims of x based on the newAxisMask.

  const expandAxes = maskToAxes(newAxisMask);
  const newShape = xShape.slice();
  expandAxes.forEach(axis => {
    $begin[axis] = 0;
    $end[axis] = 1;
    newShape.splice(axis, 0, 1);
  });
  const {
    begin: normalizedBegin,
    end: normalizedEnd,
    strides: normalizedStrides
  } = getNormalizedAxes(newShape, ellipsisAxes, numInterpolatedAxes, $begin, $end, $strides, beginMask, endMask, ellipsisMask);
  $begin = normalizedBegin;
  $end = normalizedEnd;
  $strides = normalizedStrides;
  const shrinkAxes = maskToAxes(shrinkAxisMask); // Adjust the ends based on the shrink mask.

  shrinkAxes.forEach(axis => {
    $end[axis] = $begin[axis] + 1;
    $strides[axis] = 1;
  }); // Figure out the output shape.

  const size = computeOutShape($begin, $end, $strides); // Remove the axes based on shrinkMask.

  const outShape = size.filter((_, axis) => shrinkAxes.indexOf(axis) === -1);
  const nonStrided = $strides.every(v => v === 1);
  return {
    nonStrided,
    $begin,
    $end,
    $strides,
    size,
    newShape,
    outShape
  };
}
},{"../util":"XXxQ"}],"aVHA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerClass = registerClass;
exports.SerializationMap = exports.Serializable = void 0;

var _util = require("./util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Serializable defines the serialization contract.
 *
 * TFJS requires serializable classes to return their className when asked
 * to avoid issues with minification.
 */
class Serializable {
  /**
   * Return the class name for this class to use in serialization contexts.
   *
   * Generally speaking this will be the same thing that constructor.name
   * would have returned.  However, the class name needs to be robust
   * against minification for serialization/deserialization to work properly.
   *
   * There's also places such as initializers.VarianceScaling, where
   * implementation details between different languages led to different
   * class hierarchies and a non-leaf node is used for serialization purposes.
   */
  getClassName() {
    return this.constructor.className;
  }
  /**
   * Creates an instance of T from a ConfigDict.
   *
   * This works for most descendants of serializable.  A few need to
   * provide special handling.
   * @param cls A Constructor for the class to instantiate.
   * @param config The Configuration for the object.
   */

  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config);
  }

}
/**
 * Maps string keys to class constructors.
 *
 * Used during (de)serialization from the cross-language JSON format, which
 * requires the class name in the serialization format matches the class
 * names as used in Python, should it exist.
 */


exports.Serializable = Serializable;

class SerializationMap {
  constructor() {
    this.classNameMap = {};
  }
  /**
   * Returns the singleton instance of the map.
   */


  static getMap() {
    if (SerializationMap.instance == null) {
      SerializationMap.instance = new SerializationMap();
    }

    return SerializationMap.instance;
  }
  /**
   * Registers the class as serializable.
   */


  static register(cls) {
    SerializationMap.getMap().classNameMap[cls.className] = [cls, cls.fromConfig];
  }

}
/**
 * Register a class with the serialization map of TensorFlow.js.
 *
 * This is often used for registering custom Layers, so they can be
 * serialized and deserialized.
 *
 * Example:
 *
 * ```js
 * class MyCustomLayer extends tf.layers.Layer {
 *   static className = 'MyCustomLayer';
 *
 *   constructor(config) {
 *     super(config);
 *   }
 * }
 * tf.serialization.registerClass(MyCustomLayer);
 * ```
 *
 * @param cls The class to be registered. It must have a public static member
 *   called `className` defined and the value must be a non-empty string.
 *
 * @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true}
 */


exports.SerializationMap = SerializationMap;

function registerClass(cls) {
  (0, _util.assert)(cls.className != null, () => `Class being registered does not have the static className ` + `property defined.`);
  (0, _util.assert)(typeof cls.className === 'string', () => `className is required to be a string, but got type ` + typeof cls.className);
  (0, _util.assert)(cls.className.length > 0, () => `Class being registered has an empty-string as its className, ` + `which is disallowed.`);
  SerializationMap.register(cls);
}
},{"./util":"XXxQ"}],"cFdt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expectArraysClose = expectArraysClose;
exports.testEpsilon = testEpsilon;
exports.expectPromiseToFail = expectPromiseToFail;
exports.expectArraysEqual = expectArraysEqual;
exports.expectNumbersClose = expectNumbersClose;
exports.expectValuesInRange = expectValuesInRange;
exports.expectArrayBuffersEqual = expectArrayBuffersEqual;
exports.encodeStrings = encodeStrings;
exports.TEST_EPSILON_FLOAT16 = void 0;

var _engine = require("./engine");

var _tensor_util_env = require("./tensor_util_env");

var _util = require("./util");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TEST_EPSILON_FLOAT32 = 1e-3;
const TEST_EPSILON_FLOAT16 = 1e-1;
exports.TEST_EPSILON_FLOAT16 = TEST_EPSILON_FLOAT16;

function expectArraysClose(actual, expected, epsilon) {
  if (epsilon == null) {
    epsilon = testEpsilon();
  }

  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon));
}

function testEpsilon() {
  return _engine.ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;
}

function expectArraysPredicate(actual, expected, predicate) {
  let checkClassType = true;

  if ((0, _util.isTypedArray)(actual) || (0, _util.isTypedArray)(expected)) {
    checkClassType = false;
  }

  if ((0, _util.isTypedArray)(actual) && (0, _util.isTypedArray)(expected)) {
    checkClassType = true;
  }

  if (checkClassType) {
    const aType = actual.constructor.name;
    const bType = expected.constructor.name;

    if (aType !== bType) {
      throw new Error(`Arrays are of different type. Actual: ${aType}. ` + `Expected: ${bType}`);
    }
  }

  if (Array.isArray(actual) && Array.isArray(expected)) {
    const actualShape = (0, _tensor_util_env.inferShape)(actual);
    const expectedShape = (0, _tensor_util_env.inferShape)(expected);

    if (!(0, _util.arraysEqual)(actualShape, expectedShape)) {
      throw new Error(`Arrays have different shapes. ` + `Actual: [${actualShape}]. Expected: [${expectedShape}]`);
    }
  }

  const actualFlat = (0, _util.isTypedArray)(actual) ? actual : (0, _util.flatten)(actual);
  const expectedFlat = (0, _util.isTypedArray)(expected) ? expected : (0, _util.flatten)(expected);

  if (actualFlat.length !== expectedFlat.length) {
    throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` + `expected: ${expectedFlat.length}.\n` + `Actual:   ${actualFlat}.\n` + `Expected: ${expectedFlat}.`);
  }

  for (let i = 0; i < expectedFlat.length; ++i) {
    const a = actualFlat[i];
    const e = expectedFlat[i];

    if (!predicate(a, e)) {
      throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\n` + `Actual:   ${actualFlat}.\n` + `Expected: ${expectedFlat}.`);
    }
  }
}

function expectPromiseToFail(fn, done) {
  fn().then(() => done.fail(), () => done());
}

function expectArraysEqual(actual, expected) {
  const exp = typeof expected === 'string' || typeof expected === 'number' || typeof expected === 'boolean' ? [expected] : expected;

  if ((0, _util.isString)(actual) || (0, _util.isString)(actual[0]) || (0, _util.isString)(expected) || (0, _util.isString)(expected[0])) {
    // tslint:disable-next-line: triple-equals
    return expectArraysPredicate(actual, exp, (a, b) => a == b);
  }

  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));
}

function expectNumbersClose(a, e, epsilon) {
  if (epsilon == null) {
    epsilon = testEpsilon();
  }

  if (!areClose(a, e, epsilon)) {
    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);
  }
}

function areClose(a, e, epsilon) {
  if (!isFinite(a) && !isFinite(e)) {
    return true;
  }

  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {
    return false;
  }

  return true;
}

function expectValuesInRange(actual, low, high) {
  for (let i = 0; i < actual.length; i++) {
    if (actual[i] < low || actual[i] > high) {
      throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);
    }
  }
}

function expectArrayBuffersEqual(actual, expected) {
  // Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in
  // a Float32Array solves this issue.
  expect(new Float32Array(actual)).toEqual(new Float32Array(expected));
}
/** Encodes strings into utf-8 bytes. */


function encodeStrings(a) {
  for (let i = 0; i < a.length; i++) {
    const val = a[i];

    if (Array.isArray(val)) {
      encodeStrings(val);
    } else {
      a[i] = (0, _util.encodeString)(val);
    }
  }

  return a;
}
},{"./engine":"phT7","./tensor_util_env":"y4X4","./util":"XXxQ"}],"KPnh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;

/** @license See the LICENSE file. */
// This code is auto-generated, do not modify this file!
const version = '3.8.0';
exports.version = version;
},{}],"TsQp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enableProdMode = enableProdMode;
exports.enableDebugMode = enableDebugMode;
exports.disableDeprecationWarnings = disableDeprecationWarnings;
exports.deprecationWarn = deprecationWarn;
exports.disposeVariables = disposeVariables;
exports.engine = engine;
exports.memory = memory;
exports.profile = profile;
exports.tidy = tidy;
exports.dispose = dispose;
exports.keep = keep;
exports.time = time;
exports.setBackend = setBackend;
exports.ready = ready;
exports.getBackend = getBackend;
exports.removeBackend = removeBackend;
exports.findBackend = findBackend;
exports.findBackendFactory = findBackendFactory;
exports.registerBackend = registerBackend;
exports.backend = backend;
exports.setPlatform = setPlatform;

var _engine = require("./engine");

var _environment = require("./environment");

var _tensor = require("./tensor");

var _tensor_util = require("./tensor_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Enables production mode which disables correctness checks in favor of
 * performance.
 *
 * @doc {heading: 'Environment'}
 */
function enableProdMode() {
  (0, _environment.env)().set('PROD', true);
}
/**
 * Enables debug mode which will log information about all executed kernels:
 * the elapsed time of the kernel execution, as well as the rank, shape, and
 * size of the output tensor.
 *
 * Debug mode will significantly slow down your application as it will
 * download the result of every operation to the CPU. This should not be used in
 * production. Debug mode does not affect the timing information of the kernel
 * execution as we do not measure download time in the kernel execution time.
 *
 * See also: `tf.profile`, `tf.memory`.
 *
 * @doc {heading: 'Environment'}
 */


function enableDebugMode() {
  (0, _environment.env)().set('DEBUG', true);
}
/** Globally disables deprecation warnings */


function disableDeprecationWarnings() {
  (0, _environment.env)().set('DEPRECATION_WARNINGS_ENABLED', false);
  console.warn(`TensorFlow.js deprecation warnings have been disabled.`);
}
/** Warn users about deprecated functionality. */


function deprecationWarn(msg) {
  if ((0, _environment.env)().getBool('DEPRECATION_WARNINGS_ENABLED')) {
    console.warn(msg + ' You can disable deprecation warnings with ' + 'tf.disableDeprecationWarnings().');
  }
}

(0, _tensor.setDeprecationWarningFn)(deprecationWarn);
/**
 * Dispose all variables kept in backend engine.
 *
 * @doc {heading: 'Environment'}
 */

function disposeVariables() {
  _engine.ENGINE.disposeVariables();
}
/**
 * It returns the global engine that keeps track of all tensors and backends.
 *
 * @doc {heading: 'Environment'}
 */


function engine() {
  return _engine.ENGINE;
}
/**
 * Returns memory info at the current time in the program. The result is an
 * object with the following properties:
 *
 * - `numBytes`: Number of bytes allocated (undisposed) at this time.
 * - `numTensors`: Number of unique tensors allocated.
 * - `numDataBuffers`: Number of unique data buffers allocated
 *   (undisposed) at this time, which is ≤ the number of tensors
 *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same
 *   data buffer with `a`).
 * - `unreliable`: True if the memory usage is unreliable. See `reasons` when
 *    `unreliable` is true.
 * - `reasons`: `string[]`, reasons why the memory is unreliable, present if
 *    `unreliable` is true.
 *
 * WebGL Properties:
 * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at
 *     this time.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */


function memory() {
  return _engine.ENGINE.memory();
}
/**
 * Executes the provided function `f()` and returns a promise that resolves
 * with information about the function's memory use:
 * - `newBytes`: the number of new bytes allocated
 * - `newTensors`: the number of new tensors created
 * - `peakBytes`: the peak number of bytes allocated
 * - `kernels`: an array of objects for each kernel involved that reports
 * their input and output shapes, number of bytes used, and number of new
 * tensors created.
 * - `kernelNames`: an array of unique strings with just the names of the
 * kernels in the `kernels` array.
 *
 * ```js
 * const profile = await tf.profile(() => {
 *   const x = tf.tensor1d([1, 2, 3]);
 *   let x2 = x.square();
 *   x2.dispose();
 *   x2 = x.square();
 *   x2.dispose();
 *   return x;
 * });
 *
 * console.log(`newBytes: ${profile.newBytes}`);
 * console.log(`newTensors: ${profile.newTensors}`);
 * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>
 * k.totalBytesSnapshot)}`);
 * ```
 *
 *
 * @doc {heading: 'Performance', subheading: 'Profile'}
 */


function profile(f) {
  return _engine.ENGINE.profile(f);
}
/**
 * Executes the provided function `fn` and after it is executed, cleans up all
 * intermediate tensors allocated by `fn` except those returned by `fn`.
 * `fn` must not return a Promise (async functions not allowed). The returned
 * result can be a complex object.
 *
 * Using this method helps avoid memory leaks. In general, wrap calls to
 * operations in `tf.tidy` for automatic memory cleanup.
 *
 * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to
 * dispose variables, please use `tf.disposeVariables` or call dispose()
 * directly on variables.
 *
 * ```js
 * // y = 2 ^ 2 + 1
 * const y = tf.tidy(() => {
 *   // a, b, and one will be cleaned up when the tidy ends.
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *   const b = a.square();
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * y.print();
 * ```
 *
 * @param nameOrFn The name of the closure, or the function to execute.
 *     If a name is provided, the 2nd argument should be the function.
 *     If debug mode is on, the timing and the memory usage of the function
 *     will be tracked and displayed on the console using the provided name.
 * @param fn The function to execute.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */


function tidy(nameOrFn, fn) {
  return _engine.ENGINE.tidy(nameOrFn, fn);
}
/**
 * Disposes any `tf.Tensor`s found within the provided object.
 *
 * @param container an object that may be a `tf.Tensor` or may directly
 *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If
 *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing
 *     happens. In general it is safe to pass any object here, except that
 *     `Promise`s are not supported.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */


function dispose(container) {
  const tensors = (0, _tensor_util.getTensorsInContainer)(container);
  tensors.forEach(tensor => tensor.dispose());
}
/**
 * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed
 * automatically.
 *
 * ```js
 * let b;
 * const y = tf.tidy(() => {
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *
 *   // b will not be cleaned up by the tidy. a and one will be cleaned up
 *   // when the tidy ends.
 *   b = tf.keep(a.square());
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * console.log('y:');
 * y.print();
 * console.log('b:');
 * b.print();
 * ```
 *
 * @param result The tensor to keep from being disposed.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */


function keep(result) {
  return _engine.ENGINE.keep(result);
}
/**
 * Executes `f()` and returns a promise that resolves with timing
 * information.
 *
 * The result is an object with the following properties:
 *
 * - `wallMs`: Wall execution time.
 * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the
 * WebGL backend and the query timer extension is not available, this will
 * return an error object.
 * - On `WebGL` The following additional properties exist:
 *   - `uploadWaitMs`: CPU blocking time on texture uploads.
 *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).
 *
 * ```js
 * const x = tf.randomNormal([20, 20]);
 * const time = await tf.time(() => x.matMul(x));
 *
 * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);
 * ```
 *
 * @param f The function to execute and time.
 *
 * @doc {heading: 'Performance', subheading: 'Timing'}
 */


function time(f) {
  return _engine.ENGINE.time(f);
}
/**
 * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and
 * executing operations on those tensors. Returns a promise that resolves
 * to a boolean if the backend initialization was successful.
 *
 * Note this disposes the current backend, if any, as well as any tensors
 * associated with it. A new backend is initialized, even if it is of the
 * same type as the previous one.
 *
 * @param backendName The name of the backend. Currently supports
 *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js
 *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).
 *
 * @doc {heading: 'Backends'}
 */


function setBackend(backendName) {
  return _engine.ENGINE.setBackend(backendName);
}
/**
 * Returns a promise that resolves when the currently selected backend (or the
 * highest priority one) has initialized. Await this promise when you are using
 * a backend that has async initialization.
 *
 * @doc {heading: 'Backends'}
 */


function ready() {
  return _engine.ENGINE.ready();
}
/**
 * Returns the current backend name (cpu, webgl, etc). The backend is
 * responsible for creating tensors and executing operations on those tensors.
 *
 * @doc {heading: 'Backends'}
 */


function getBackend() {
  return _engine.ENGINE.backendName;
}
/**
 * Removes a backend and the registered factory.
 *
 * @doc {heading: 'Backends'}
 */


function removeBackend(name) {
  _engine.ENGINE.removeBackend(name);
}
/**
 * Finds the backend registered under the provided name. Returns null if the
 * name is not in the registry, or the registration hasn't finished yet.
 */


function findBackend(name) {
  return _engine.ENGINE.findBackend(name);
}
/**
 * Finds the backend factory registered under the provided name. Returns a
 * function that produces a new backend when called. Returns null if the name
 * is not in the registry.
 */


function findBackendFactory(name) {
  return _engine.ENGINE.findBackendFactory(name);
}
/**
 * Registers a global backend. The registration should happen when importing
 * a module file (e.g. when importing `backend_webgl.ts`), and is used for
 * modular builds (e.g. custom tfjs bundle with only webgl support).
 *
 * @param factory The backend factory function. When called, it should
 * return a backend instance, or a promise of an instance.
 * @param priority The priority of the backend (higher = more important).
 *     In case multiple backends are registered, the priority is used to find
 *     the best backend. Defaults to 1.
 * @return False if there is already a registered backend under this name, true
 *     if not.
 *
 * @doc {heading: 'Backends'}
 */


function registerBackend(name, factory, priority = 1) {
  return _engine.ENGINE.registerBackend(name, factory, priority);
}
/**
 * Gets the current backend. If no backends have been initialized, this will
 * attempt to initialize the best backend. Will throw an error if the highest
 * priority backend has async initialization, in which case, you should call
 * 'await tf.ready()' before running other code.
 *
 * @doc {heading: 'Backends'}
 */


function backend() {
  return _engine.ENGINE.backend;
}
/**
 * Sets the global platform.
 *
 * @param platformName The name of this platform.
 * @param platform A platform implementation.
 */


function setPlatform(platformName, platform) {
  (0, _environment.env)().setPlatform(platformName, platform);
}
},{"./engine":"phT7","./environment":"vpgN","./tensor":"eFW4","./tensor_util":"wtFc"}],"N73o":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.add = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 *
 * ```js
 * // Broadcast add a with b.
 * const a = tf.scalar(5);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 * @param a The first `tf.Tensor` to add.
 * @param b The second `tf.Tensor` to add. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function add_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'add');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'add');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.Add, inputs);
}

const add = (0, _operation.op)({
  add_
});
exports.add = add;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./operation":"uE86"}],"OIz3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floorDiv = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 * The result is rounded with floor function.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.floorDiv(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.floorDiv(b).print();  // or tf.floorDiv(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function floorDiv_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'floorDiv');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'floorDiv');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.FloorDiv, inputs);
}

const floorDiv = (0, _operation.op)({
  floorDiv_
});
exports.floorDiv = floorDiv;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./operation":"uE86"}],"S2L5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.div = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _floorDiv = require("./floorDiv");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function div_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'div');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'div');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);

  if ($a.dtype === 'int32' && $b.dtype === 'int32') {
    return (0, _floorDiv.floorDiv)($a, $b);
  }

  const inputs = {
    a: $a,
    b: $b
  };
  const attrs = {}; // tslint:disable-next-line: no-unnecessary-type-assertion

  return _engine.ENGINE.runKernel(_kernel_names.RealDiv, inputs, attrs);
}

const div = (0, _operation.op)({
  div_
});
exports.div = div;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./floorDiv":"OIz3","./operation":"uE86"}],"tBJ4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mul = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.
 *
 * We also expose `tf.mulStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([2, 3, 4, 5]);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 *
 * ```js
 * // Broadcast mul a with b.
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.scalar(5);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 * @param a The first tensor to multiply.
 * @param b The second tensor to multiply. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function mul_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'mul');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'mul');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.Multiply, inputs);
}

const mul = (0, _operation.op)({
  mul_
});
exports.mul = mul;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./operation":"uE86"}],"U9d5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.abs = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes absolute value element-wise: `abs(x)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.abs().print();  // or tf.abs(x)
 * ```
 * @param x The input `tf.Tensor`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function abs_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'abs');

  if ($x.dtype === 'complex64') {
    const inputs = {
      x: $x
    };
    return _engine.ENGINE.runKernel(_kernel_names.ComplexAbs, inputs);
  } else {
    const inputs = {
      x: $x
    };
    return _engine.ENGINE.runKernel(_kernel_names.Abs, inputs);
  }
}

const abs = (0, _operation.op)({
  abs_
});
exports.abs = abs;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"hDnd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.acos().print();  // or tf.acos(x)
 * ```
 * @param x The input tensor.
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function acos_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'acos');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Acos, inputs);
}

const acos = (0, _operation.op)({
  acos_
});
exports.acos = acos;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"zTvf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acosh = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:
 * `acosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([10, 1, 3, 5.7]);
 *
 * x.acosh().print();  // or tf.acosh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function acosh_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'acosh');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Acosh, inputs);
}

const acosh = (0, _operation.op)({
  acosh_
});
exports.acosh = acosh;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"rS0T":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addN = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 *
 * tf.addN([a, b, c]).print();
 * ```
 * @param tensors A list of tensors with the same shape and dtype.
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function addN_(tensors) {
  util.assert(Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');
  util.assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` + `${tensors.length}`);
  const $tensors = tensors.map((t, i) => (0, _tensor_util_env.convertToTensor)(t, `tensors${i}`, 'addN'));
  const firstTensor = $tensors[0];
  $tensors.forEach(t => {
    if (t.dtype !== firstTensor.dtype) {
      throw new Error('All tensors passed to tf.addN() must have the same dtype');
    }
  });
  $tensors.forEach(t => {
    if (!util.arraysEqual(t.shape, firstTensor.shape)) {
      throw new Error('All tensors passed to tf.addN() must have the same shape');
    }
  });
  const inputs = $tensors;
  return _engine.ENGINE.runKernel(_kernel_names.AddN, inputs);
}

const addN = (0, _operation.op)({
  addN_
});
exports.addN = addN;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"zHmK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.all = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the logical and of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.all().print();  // or tf.all(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.all(axis).print();  // or tf.all(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function all_(x, axis = null, keepDims = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'all', 'bool');
  const inputs = {
    x: $x
  };
  const attrs = {
    axis,
    keepDims
  };
  return _engine.ENGINE.runKernel(_kernel_names.All, inputs, attrs);
}

const all = (0, _operation.op)({
  all_
});
exports.all = all;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"XocL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.any = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the logical or of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.any().print();  // or tf.any(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.any(axis).print();  // or tf.any(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function any_(x, axis = null, keepDims = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'any', 'bool');
  const inputs = {
    x: $x
  };
  const attrs = {
    axis,
    keepDims
  };
  return _engine.ENGINE.runKernel(_kernel_names.Any, inputs, attrs);
} // tslint:disable-next-line:variable-name


const any = (0, _operation.op)({
  any_
});
exports.any = any;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"dv7u":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argMax = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the indices of the maximum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMax().print();  // or tf.argMax(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMax(axis).print();  // or tf.argMax(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function argMax_(x, axis = 0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'argMax');
  const inputs = {
    x: $x
  };
  const attrs = {
    axis
  };
  return _engine.ENGINE.runKernel(_kernel_names.ArgMax, inputs, attrs);
}

const argMax = (0, _operation.op)({
  argMax_
});
exports.argMax = argMax;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"y2ST":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argMin = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the indices of the minimum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMin().print();  // or tf.argMin(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMin(axis).print();  // or tf.argMin(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function argMin_(x, axis = 0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'argMin');
  const inputs = {
    x: $x
  };
  const attrs = {
    axis
  };
  return _engine.ENGINE.runKernel(_kernel_names.ArgMin, inputs, attrs);
}

const argMin = (0, _operation.op)({
  argMin_
});
exports.argMin = argMin;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"kcJ4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asin = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asin().print();  // or tf.asin(x)
 * ```
 * @param x The input tensor.
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function asin_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'asin');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Asin, inputs);
}

const asin = (0, _operation.op)({
  asin_
});
exports.asin = asin;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"mK5f":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asinh = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:
 * `asinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asinh().print();  // or tf.asinh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function asinh_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'asinh');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Asinh, inputs);
}

const asinh = (0, _operation.op)({
  asinh_
});
exports.asinh = asinh;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"Qawb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atan = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.atan().print();  // or tf.atan(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function atan_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'atan');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Atan, inputs);
}

const atan = (0, _operation.op)({
  atan_
});
exports.atan = atan;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"lkDZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atan2 = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);
 * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);
 *
 * tf.atan2(a, b).print()
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function atan2_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'atan2');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'atan2');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.Atan2, inputs);
}

const atan2 = (0, _operation.op)({
  atan2_
});
exports.atan2 = atan2;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./operation":"uE86"}],"c4nq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atanh = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:
 * `atanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.atanh().print();  // or tf.atanh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function atanh_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'atanh');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Atanh, inputs);
}

const atanh = (0, _operation.op)({
  atanh_
});
exports.atanh = atanh;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"PhWH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeDilation2DInfo = computeDilation2DInfo;
exports.computePool2DInfo = computePool2DInfo;
exports.computePool3DInfo = computePool3DInfo;
exports.computeConv2DInfo = computeConv2DInfo;
exports.computeConv3DInfo = computeConv3DInfo;
exports.computeDefaultPad = computeDefaultPad;
exports.tupleValuesAreOne = tupleValuesAreOne;
exports.eitherStridesOrDilationsAreOne = eitherStridesOrDilationsAreOne;
exports.convertConv2DDataFormat = convertConv2DDataFormat;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 *
 * @param inputShape Input tensor shape is of the following dimensions:
 *     `[batch, height, width, inChannels]`.
 * @param filterShape The filter shape is of the following dimensions:
 *     `[filterHeight, filterWidth, depth]`.
 * @param strides The strides of the sliding window for each dimension of the
 *     input tensor: `[strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat The data format of the input and output data.
 *     Defaults to 'NHWC'.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.
 *     Defaults to `[1, 1]`. If `dilations` is a single number, then
 *     `dilationHeight == dilationWidth`.
 */
function computeDilation2DInfo(inputShape, filterShape, strides, pad, dataFormat = 'NHWC', dilations) {
  // `computerConv2DInfo` require filterShape to be in the dimension of:
  // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have
  // outDepth, it should have the same depth as the input.
  // Input shape: [batch, height, width, inChannels]
  const inputChannels = inputShape[3];
  const $filterShape = [...filterShape, inputChannels];
  const $dataFormat = convertConv2DDataFormat(dataFormat);
  return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null
  /* roundingMode */
  , null
  /* depthWise */
  , $dataFormat);
}

function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'channelsLast') {
  const [filterHeight, filterWidth] = parseTupleParam(filterSize);
  let filterShape;

  if (dataFormat === 'channelsLast') {
    filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];
  } else if (dataFormat === 'channelsFirst') {
    filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];
  } else {
    throw new Error(`Unknown dataFormat ${dataFormat}`);
  }

  return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);
}
/**
 * Computes the information for a forward pass of a pooling3D operation.
 */


function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'NDHWC') {
  const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);
  let filterShape;
  let $dataFormat;

  if (dataFormat === 'NDHWC') {
    $dataFormat = 'channelsLast';
    filterShape = [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];
  } else if (dataFormat === 'NCDHW') {
    $dataFormat = 'channelsFirst';
    filterShape = [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];
  } else {
    throw new Error(`Unknown dataFormat ${dataFormat}`);
  }

  return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);
}
/**
 * Computes the information for a forward pass of a convolution/pooling
 * operation.
 */


function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise = false, dataFormat = 'channelsLast') {
  let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];

  if (dataFormat === 'channelsLast') {
    [batchSize, inHeight, inWidth, inChannels] = inShape;
  } else if (dataFormat === 'channelsFirst') {
    [batchSize, inChannels, inHeight, inWidth] = inShape;
  } else {
    throw new Error(`Unknown dataFormat ${dataFormat}`);
  }

  const [filterHeight, filterWidth,, filterChannels] = filterShape;
  const [strideHeight, strideWidth] = parseTupleParam(strides);
  const [dilationHeight, dilationWidth] = parseTupleParam(dilations);
  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
  const {
    padInfo,
    outHeight,
    outWidth
  } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);
  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
  let outShape;

  if (dataFormat === 'channelsFirst') {
    outShape = [batchSize, outChannels, outHeight, outWidth];
  } else if (dataFormat === 'channelsLast') {
    outShape = [batchSize, outHeight, outWidth, outChannels];
  }

  return {
    batchSize,
    dataFormat,
    inHeight,
    inWidth,
    inChannels,
    outHeight,
    outWidth,
    outChannels,
    padInfo,
    strideHeight,
    strideWidth,
    filterHeight,
    filterWidth,
    effectiveFilterHeight,
    effectiveFilterWidth,
    dilationHeight,
    dilationWidth,
    inShape,
    outShape,
    filterShape
  };
}
/**
 * Computes the information for a forward pass of a 3D convolution/pooling
 * operation.
 */


function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise = false, dataFormat = 'channelsLast', roundingMode) {
  let [batchSize, inDepth, inHeight, inWidth, inChannels] = [-1, -1, -1, -1, -1];

  if (dataFormat === 'channelsLast') {
    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;
  } else if (dataFormat === 'channelsFirst') {
    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;
  } else {
    throw new Error(`Unknown dataFormat ${dataFormat}`);
  }

  const [filterDepth, filterHeight, filterWidth,, filterChannels] = filterShape;
  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);
  const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);
  const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);
  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
  const {
    padInfo,
    outDepth,
    outHeight,
    outWidth
  } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);
  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
  let outShape;

  if (dataFormat === 'channelsFirst') {
    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];
  } else if (dataFormat === 'channelsLast') {
    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];
  }

  return {
    batchSize,
    dataFormat,
    inDepth,
    inHeight,
    inWidth,
    inChannels,
    outDepth,
    outHeight,
    outWidth,
    outChannels,
    padInfo,
    strideDepth,
    strideHeight,
    strideWidth,
    filterDepth,
    filterHeight,
    filterWidth,
    effectiveFilterDepth,
    effectiveFilterHeight,
    effectiveFilterWidth,
    dilationDepth,
    dilationHeight,
    dilationWidth,
    inShape,
    outShape,
    filterShape
  };
}

function computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {
  if (zeroPad == null) {
    zeroPad = computeDefaultPad(inShape, fieldSize, stride);
  }

  const inputRows = inShape[0];
  const inputCols = inShape[1];
  const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
  const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
  return [outputRows, outputCols];
}

function computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {
  if (zeroPad == null) {
    zeroPad = computeDefaultPad(inShape, fieldSize, stride);
  }

  const inputDepth = inShape[0];
  const inputRows = inShape[1];
  const inputCols = inShape[2];
  const outputDepths = round((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
  const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
  const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
  return [outputDepths, outputRows, outputCols, outChannels];
}

function computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {
  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);
  return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);
}

function parseTupleParam(param) {
  if (typeof param === 'number') {
    return [param, param, param];
  }

  if (param.length === 2) {
    return [param[0], param[1], 1];
  }

  return param;
}

function parse3TupleParam(param) {
  return typeof param === 'number' ? [param, param, param] : param;
}
/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d
 * Atrous convolution is equivalent to standard convolution with upsampled
 * filters with effective_filter_height =
 * filter_height + (filter_height - 1) * (dilation - 1)
 * and effective_filter_width =
 * filter_width + (filter_width - 1) * (dilation - 1),
 * produced by inserting dilation - 1 zeros along consecutive elements across
 * the filters' spatial dimensions.
 * When there is a dilation, this converts a filter dimension to the
 * effective filter dimension, so it can be used in a standard convolution.
 */


function getEffectiveFilterSize(filterSize, dilation) {
  if (dilation <= 1) {
    return filterSize;
  }

  return filterSize + (filterSize - 1) * (dilation - 1);
}

function getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {
  let padInfo;
  let outHeight;
  let outWidth;

  if (typeof pad === 'number') {
    const padType = pad === 0 ? 'VALID' : 'NUMBER';
    padInfo = {
      top: pad,
      bottom: pad,
      left: pad,
      right: pad,
      type: padType
    };
    const outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);
    outHeight = outShape[0];
    outWidth = outShape[1];
  } else if (pad === 'same') {
    outHeight = Math.ceil(inHeight / strideHeight);
    outWidth = Math.ceil(inWidth / strideWidth);
    const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);
    const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);
    const top = Math.floor(padAlongHeight / 2);
    const bottom = padAlongHeight - top;
    const left = Math.floor(padAlongWidth / 2);
    const right = padAlongWidth - left;
    padInfo = {
      top,
      bottom,
      left,
      right,
      type: 'SAME'
    };
  } else if (pad === 'valid') {
    padInfo = {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      type: 'VALID'
    };
    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
  } else if (typeof pad === 'object') {
    const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];
    const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];
    const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];
    const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];
    const padType = top === 0 && bottom === 0 && left === 0 && right === 0 ? 'VALID' : 'EXPLICIT';
    padInfo = {
      top,
      bottom,
      left,
      right,
      type: padType
    };
    outHeight = round((inHeight - filterHeight + top + bottom) / strideHeight + 1, roundingMode);
    outWidth = round((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);
  } else {
    throw Error(`Unknown padding parameter: ${pad}`);
  }

  return {
    padInfo,
    outHeight,
    outWidth
  };
}

function get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {
  let padInfo;
  let outDepth;
  let outHeight;
  let outWidth;

  if (typeof pad === 'number') {
    const padType = pad === 0 ? 'VALID' : 'NUMBER';
    padInfo = {
      top: pad,
      bottom: pad,
      left: pad,
      right: pad,
      front: pad,
      back: pad,
      type: padType
    };
    const outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad, roundingMode);
    outDepth = outShape[0];
    outHeight = outShape[1];
    outWidth = outShape[2];
  } else if (pad === 'same') {
    outDepth = Math.ceil(inDepth / strideDepth);
    outHeight = Math.ceil(inHeight / strideHeight);
    outWidth = Math.ceil(inWidth / strideWidth);
    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;
    const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;
    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;
    const front = Math.floor(padAlongDepth / 2);
    const back = padAlongDepth - front;
    const top = Math.floor(padAlongHeight / 2);
    const bottom = padAlongHeight - top;
    const left = Math.floor(padAlongWidth / 2);
    const right = padAlongWidth - left;
    padInfo = {
      top,
      bottom,
      left,
      right,
      front,
      back,
      type: 'SAME'
    };
  } else if (pad === 'valid') {
    padInfo = {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      front: 0,
      back: 0,
      type: 'VALID'
    };
    outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);
    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
  } else {
    throw Error(`Unknown padding parameter: ${pad}`);
  }

  return {
    padInfo,
    outDepth,
    outHeight,
    outWidth
  };
}
/**
 * Rounds a value depending on the rounding mode
 * @param value
 * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */


function round(value, roundingMode) {
  if (!roundingMode) {
    return Math.trunc(value);
  }

  switch (roundingMode) {
    case 'round':
      // used for Caffe Conv
      return Math.round(value);

    case 'ceil':
      // used for Caffe Pool
      return Math.ceil(value);

    case 'floor':
      return Math.floor(value);

    default:
      throw new Error(`Unknown roundingMode ${roundingMode}`);
  }
}

function tupleValuesAreOne(param) {
  const [dimA, dimB, dimC] = parseTupleParam(param);
  return dimA === 1 && dimB === 1 && dimC === 1;
}

function eitherStridesOrDilationsAreOne(strides, dilations) {
  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);
}
/**
 * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to
 *    'channelsLast'|'channelsFirst'
 * @param dataFormat in 'NHWC'|'NCHW' mode
 * @return dataFormat in 'channelsLast'|'channelsFirst' mode
 * @throws unknown dataFormat
 */


function convertConv2DDataFormat(dataFormat) {
  if (dataFormat === 'NHWC') {
    return 'channelsLast';
  } else if (dataFormat === 'NCHW') {
    return 'channelsFirst';
  } else {
    throw new Error(`Unknown dataFormat ${dataFormat}`);
  }
}
},{}],"F0cm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reshape = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reshapes a `tf.Tensor` to a given shape.
 *
 * Given an input tensor, returns a new tensor with the same values as the
 * input tensor with shape `shape`.
 *
 * If one component of shape is the special value -1, the size of that
 * dimension is computed so that the total size remains constant. In
 * particular, a shape of [-1] flattens into 1-D. At most one component of
 * shape can be -1.
 *
 * If shape is 1-D or higher, then the operation returns a tensor with shape
 * shape filled with the values of tensor. In this case, the number of
 * elements implied by shape must be the same as the number of elements in
 * tensor.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.reshape([2, 2]).print();
 * ```
 *
 * @param x The input tensor to be reshaped.
 * @param shape An array of integers defining the output tensor shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function reshape_(x, shape) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reshape', 'string_or_numeric');
  const inputs = {
    x: $x
  };
  const attrs = {
    shape
  };
  return _engine.ENGINE.runKernel(_kernel_names.Reshape, inputs, attrs);
}

const reshape = (0, _operation.op)({
  reshape_
});
exports.reshape = reshape;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"LNDu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.avgPool = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _cast = require("./cast");

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the 2D average pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function avgPool_(x, filterSize, strides, pad, dimRoundingMode) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'avgPool', 'float32');
  const dilations = 1;
  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in avgPool: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const inputs = {
    x: x4D
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  let res = _engine.ENGINE.runKernel(_kernel_names.AvgPool, inputs, attrs);

  res = (0, _cast.cast)(res, $x.dtype);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const avgPool = (0, _operation.op)({
  avgPool_
});
exports.avgPool = avgPool;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./cast":"qnzc","./conv_util":"PhWH","./operation":"uE86","./reshape":"F0cm"}],"gUgG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.avgPool3d = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _cast = require("./cast");

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the 3D average pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.avgPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function avgPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat = 'NDHWC') {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'avgPool3d', 'float32');
  let x5D = $x;
  let reshapedTo5D = false;

  if ($x.rank === 4) {
    reshapedTo5D = true;
    x5D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
  }

  util.assert(x5D.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
  util.assert(dataFormat === 'NDHWC', () => `Error in avgPool3d: Only NDHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in avgPool3d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const inputs = {
    x: x5D
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    dimRoundingMode,
    dataFormat
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  let res = _engine.ENGINE.runKernel(_kernel_names.AvgPool3D, inputs, attrs);

  res = (0, _cast.cast)(res, x5D.dtype);

  if (reshapedTo5D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
  }

  return res;
}

const avgPool3d = (0, _operation.op)({
  avgPool3d_
});
exports.avgPool3d = avgPool3d;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./cast":"qnzc","./operation":"uE86","./reshape":"F0cm"}],"V5Ij":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _clone = require("./clone");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Concatenates a list of `tf.Tensor`s along a given axis.
 *
 * The tensors ranks and types must match, and their sizes must match in all
 * dimensions except `axis`.
 *
 * Also available are stricter rank-specific methods that assert that
 * `tensors` are of the given rank:
 *   - `tf.concat1d`
 *   - `tf.concat2d`
 *   - `tf.concat3d`
 *   - `tf.concat4d`
 *
 * Except `tf.concat1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * a.concat(b).print();  // or a.concat(b)
 * ```
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.concat([a, b, c]).print();
 * ```
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [10, 20]]);
 * const b = tf.tensor2d([[3, 4], [30, 40]]);
 * const axis = 1;
 * tf.concat([a, b], axis).print();
 * ```
 * @param tensors A list of tensors to concatenate.
 * @param axis The axis to concate along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function concat_(tensors, axis = 0) {
  (0, _util.assert)(tensors.length >= 1, () => 'Pass at least one tensor to concat');
  const $tensors = (0, _tensor_util_env.convertToTensorArray)(tensors, 'tensors', 'concat', 'string_or_numeric');

  if ($tensors[0].dtype === 'complex64') {
    $tensors.forEach(tensor => {
      if (tensor.dtype !== 'complex64') {
        throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${tensor.dtype}. `);
      }
    });
  }

  if ($tensors.length === 1) {
    return (0, _clone.clone)($tensors[0]);
  }

  const inputs = $tensors;
  const attr = {
    axis
  };
  return _engine.ENGINE.runKernel(_kernel_names.Concat, inputs, attr);
}

const concat = (0, _operation.op)({
  concat_
});
exports.concat = concat;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./clone":"Ot88","./operation":"uE86"}],"DbGB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sigmoid = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes sigmoid element-wise, `1 / (1 + exp(-x))`
 *
 * ```js
 * const x = tf.tensor1d([0, -1, 2, -3]);
 *
 * x.sigmoid().print();  // or tf.sigmoid(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sigmoid_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'sigmoid');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Sigmoid, inputs);
}

const sigmoid = (0, _operation.op)({
  sigmoid_
});
exports.sigmoid = sigmoid;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"wIos":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`
 * and is of size `size`.
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `x` is of the given rank:
 *   - `tf.slice1d`
 *   - `tf.slice2d`
 *   - `tf.slice3d`
 *   - `tf.slice4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.slice([1], [2]).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * x.slice([1, 0], [1, 2]).print();
 * ```
 * @param x The input `tf.Tensor` to slice from.
 * @param begin The coordinates to start the slice from. The length can be
 *     less than the rank of x - the rest of the axes will have implicit 0 as
 *     start. Can also be a single number, in which case it specifies the
 *     first axis.
 * @param size The size of the slice. The length can be less than the rank of
 *     x - the rest of the axes will have implicit -1. A value of -1 requests
 *     the rest of the dimensions in the axis. Can also be a single number,
 *     in which case it specifies the size of the first axis.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function slice_(x, begin, size) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'slice', 'string_or_numeric');

  if ($x.rank === 0) {
    throw new Error('Slicing scalar is not possible');
  }

  const inputs = {
    x: $x
  };
  const attrs = {
    begin,
    size
  };
  return _engine.ENGINE.runKernel(_kernel_names.Slice, inputs, attrs);
}

const slice = (0, _operation.op)({
  slice_
});
exports.slice = slice;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"djih":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tanh = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, 70]);
 *
 * x.tanh().print();  // or tf.tanh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function tanh_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'tanh');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Tanh, inputs);
}

const tanh = (0, _operation.op)({
  tanh_
});
exports.tanh = tanh;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"IrGh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.basicLSTMCell = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _add = require("./add");

var _concat = require("./concat");

var _mat_mul = require("./mat_mul");

var _mul = require("./mul");

var _operation = require("./operation");

var _sigmoid = require("./sigmoid");

var _slice = require("./slice");

var _tanh = require("./tanh");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the next state and output of a BasicLSTMCell.
 *
 * Returns `[newC, newH]`.
 *
 * Derived from tf.contrib.rnn.BasicLSTMCell.
 *
 * @param forgetBias Forget bias for the cell.
 * @param lstmKernel The weights for the cell.
 * @param lstmBias The bias for the cell.
 * @param data The input to the cell.
 * @param c Previous cell state.
 * @param h Previous cell output.
 *
 * @doc {heading: 'Operations', subheading: 'RNN'}
 */
function basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {
  const $forgetBias = (0, _tensor_util_env.convertToTensor)(forgetBias, 'forgetBias', 'basicLSTMCell');
  const $lstmKernel = (0, _tensor_util_env.convertToTensor)(lstmKernel, 'lstmKernel', 'basicLSTMCell');
  const $lstmBias = (0, _tensor_util_env.convertToTensor)(lstmBias, 'lstmBias', 'basicLSTMCell');
  const $data = (0, _tensor_util_env.convertToTensor)(data, 'data', 'basicLSTMCell');
  const $c = (0, _tensor_util_env.convertToTensor)(c, 'c', 'basicLSTMCell');
  const $h = (0, _tensor_util_env.convertToTensor)(h, 'h', 'basicLSTMCell');
  const combined = (0, _concat.concat)([$data, $h], 1);
  const weighted = (0, _mat_mul.matMul)(combined, $lstmKernel);
  const res = (0, _add.add)(weighted, $lstmBias); // i = input_gate, j = new_input, f = forget_gate, o = output_gate

  const batchSize = res.shape[0];
  const sliceCols = res.shape[1] / 4;
  const sliceSize = [batchSize, sliceCols];
  const i = (0, _slice.slice)(res, [0, 0], sliceSize);
  const j = (0, _slice.slice)(res, [0, sliceCols], sliceSize);
  const f = (0, _slice.slice)(res, [0, sliceCols * 2], sliceSize);
  const o = (0, _slice.slice)(res, [0, sliceCols * 3], sliceSize);
  const newC = (0, _add.add)((0, _mul.mul)((0, _sigmoid.sigmoid)(i), (0, _tanh.tanh)(j)), (0, _mul.mul)($c, (0, _sigmoid.sigmoid)((0, _add.add)($forgetBias, f))));
  const newH = (0, _mul.mul)((0, _tanh.tanh)(newC), (0, _sigmoid.sigmoid)(o));
  return [newC, newH];
}

const basicLSTMCell = (0, _operation.op)({
  basicLSTMCell_
});
exports.basicLSTMCell = basicLSTMCell;
},{"../tensor_util_env":"y4X4","./add":"N73o","./concat":"V5Ij","./mat_mul":"zVDr","./mul":"tBJ4","./operation":"uE86","./sigmoid":"DbGB","./slice":"wIos","./tanh":"djih"}],"vEiD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchToSpaceND = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * This operation reshapes the "batch" dimension 0 into `M + 1` dimensions of
 * shape `blockShape + [batch]`, interleaves these blocks back into the grid
 * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with
 * the same rank as the input. The spatial dimensions of this intermediate
 * result are then optionally cropped according to `crops` to produce the
 * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise
 * description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);
 * const blockShape = [2, 2];
 * const crops = [[0, 0], [0, 0]];
 *
 * x.batchToSpaceND(blockShape, crops).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.
 * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input
 * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required
 * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,
 * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,
 * x.shape[N-1]]`
 *
 * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /
 * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`
 * according to `crops` to produce the output of shape: `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],
 * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -
 * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function batchToSpaceND_(x, blockShape, crops) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'batchToSpaceND');
  const prod = blockShape.reduce((a, b) => a * b);
  util.assert($x.rank >= 1 + blockShape.length, () => `input rank is ${$x.rank} but should be > than blockShape.length ${blockShape.length}`);
  util.assert(crops.length === blockShape.length, () => `crops.length is ${crops.length} but should be equal to blockShape.length  ${blockShape.length}`);
  util.assert($x.shape[0] % prod === 0, () => `input tensor batch is ${$x.shape[0]} but is not divisible by the product of ` + `the elements of blockShape ${blockShape.join(' * ')} === ${prod}`);
  const inputs = {
    x: $x
  };
  const attrs = {
    blockShape,
    crops
  };
  return _engine.ENGINE.runKernel(_kernel_names.BatchToSpaceND, inputs, attrs);
}

const batchToSpaceND = (0, _operation.op)({
  batchToSpaceND_
});
exports.batchToSpaceND = batchToSpaceND;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"voqZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.xAs4D = xAs4D;

var _reshape = require("./reshape");

function xAs4D(x) {
  let x4D;

  if (x.rank === 0 || x.rank === 1) {
    x4D = (0, _reshape.reshape)(x, [1, 1, 1, x.size]);
  } else if (x.rank === 2) {
    x4D = (0, _reshape.reshape)(x, [1, 1, x.shape[0], x.shape[1]]);
  } else if (x.rank === 3) {
    x4D = (0, _reshape.reshape)(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
  } else {
    x4D = x;
  }

  return x4D;
}
},{"./reshape":"F0cm"}],"gYII":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchNorm = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _batchnorm_util = require("./batchnorm_util");

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Batch normalization.
 *
 * As described in
 * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).
 *
 * Mean, variance, scale, and offset can be of two shapes:
 *   - The same shape as the input.
 *   - In the common case, the depth dimension is the last dimension of x, so
 *     the values would be an `tf.Tensor1D` of shape [depth].
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that parameters passed are of given rank
 *   - `tf.batchNorm2d`
 *   - `tf.batchNorm3d`
 *   - `tf.batchNorm4d`
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function batchNorm_(x, mean, variance, offset, scale, varianceEpsilon) {
  if (varianceEpsilon == null) {
    varianceEpsilon = 0.001;
  }

  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'batchNorm');
  const $mean = (0, _tensor_util_env.convertToTensor)(mean, 'mean', 'batchNorm');
  const $variance = (0, _tensor_util_env.convertToTensor)(variance, 'variance', 'batchNorm');
  let $scale;

  if (scale != null) {
    $scale = (0, _tensor_util_env.convertToTensor)(scale, 'scale', 'batchNorm');
  }

  let $offset;

  if (offset != null) {
    $offset = (0, _tensor_util_env.convertToTensor)(offset, 'offset', 'batchNorm');
  }

  util.assert($mean.rank === $variance.rank, () => 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');
  util.assert($offset == null || $mean.rank === $offset.rank, () => 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');
  util.assert($scale == null || $mean.rank === $scale.rank, () => 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');
  const x4D = (0, _batchnorm_util.xAs4D)($x);
  const inputs = {
    x: x4D,
    scale: $scale,
    offset: $offset,
    mean: $mean,
    variance: $variance
  };
  const attrs = {
    varianceEpsilon
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const res = _engine.ENGINE.runKernel(_kernel_names.FusedBatchNorm, inputs, attrs);

  return (0, _reshape.reshape)(res, $x.shape);
}

const batchNorm = (0, _operation.op)({
  batchNorm_
});
exports.batchNorm = batchNorm;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./batchnorm_util":"voqZ","./operation":"uE86","./reshape":"F0cm"}],"PwSx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchNorm2d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _batchnorm = require("./batchnorm");

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Batch normalization, strictly for 2D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */
function batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'batchNorm');
  const $mean = (0, _tensor_util_env.convertToTensor)(mean, 'mean', 'batchNorm');
  const $variance = (0, _tensor_util_env.convertToTensor)(variance, 'variance', 'batchNorm');
  let $scale;

  if (scale != null) {
    $scale = (0, _tensor_util_env.convertToTensor)(scale, 'scale', 'batchNorm');
  }

  let $offset;

  if (offset != null) {
    $offset = (0, _tensor_util_env.convertToTensor)(offset, 'offset', 'batchNorm');
  }

  util.assert($x.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ` + `${$x.rank}.`);
  util.assert($mean.rank === 2 || $mean.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` + `got rank ${$mean.rank}.`);
  util.assert($variance.rank === 2 || $variance.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` + `but got rank ${$variance.rank}.`);

  if ($scale != null) {
    util.assert($scale.rank === 2 || $scale.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` + `but got rank ${$scale.rank}.`);
  }

  if ($offset != null) {
    util.assert($offset.rank === 2 || $offset.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` + `but got rank ${$offset.rank}.`);
  }

  return (0, _batchnorm.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}

const batchNorm2d = (0, _operation.op)({
  batchNorm2d_
});
exports.batchNorm2d = batchNorm2d;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./batchnorm":"gYII","./operation":"uE86"}],"zSL9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchNorm3d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _batchnorm = require("./batchnorm");

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Batch normalization, strictly for 3D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */
function batchNorm3d_(x, mean, variance, offset, scale, varianceEpsilon) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'batchNorm');
  const $mean = (0, _tensor_util_env.convertToTensor)(mean, 'mean', 'batchNorm');
  const $variance = (0, _tensor_util_env.convertToTensor)(variance, 'variance', 'batchNorm');
  let $scale;

  if (scale != null) {
    $scale = (0, _tensor_util_env.convertToTensor)(scale, 'scale', 'batchNorm');
  }

  let $offset;

  if (offset != null) {
    $offset = (0, _tensor_util_env.convertToTensor)(offset, 'offset', 'batchNorm');
  }

  util.assert($x.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ` + `${$x.rank}.`);
  util.assert($mean.rank === 3 || $mean.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but ` + `got rank ${$mean.rank}.`);
  util.assert($variance.rank === 3 || $variance.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 ` + `but got rank ${$variance.rank}.`);

  if ($scale != null) {
    util.assert($scale.rank === 3 || $scale.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 ` + `but got rank ${$scale.rank}.`);
  }

  if ($offset != null) {
    util.assert($offset.rank === 3 || $offset.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 ` + `but got rank ${$offset.rank}.`);
  }

  return (0, _batchnorm.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}

const batchNorm3d = (0, _operation.op)({
  batchNorm3d_
});
exports.batchNorm3d = batchNorm3d;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./batchnorm":"gYII","./operation":"uE86"}],"PGAU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchNorm4d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _batchnorm = require("./batchnorm");

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Batch normalization, strictly for 4D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */
function batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'batchNorm');
  const $mean = (0, _tensor_util_env.convertToTensor)(mean, 'mean', 'batchNorm');
  const $variance = (0, _tensor_util_env.convertToTensor)(variance, 'variance', 'batchNorm');
  let $scale;

  if (scale != null) {
    $scale = (0, _tensor_util_env.convertToTensor)(scale, 'scale', 'batchNorm');
  }

  let $offset;

  if (offset != null) {
    $offset = (0, _tensor_util_env.convertToTensor)(offset, 'offset', 'batchNorm');
  }

  util.assert($x.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ` + `${$x.rank}.`);
  util.assert($mean.rank === 4 || $mean.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but ` + `got rank ${$mean.rank}.`);
  util.assert($variance.rank === 4 || $variance.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 ` + `but got rank ${$variance.rank}.`);

  if ($scale != null) {
    util.assert($scale.rank === 4 || $scale.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 ` + `but got rank ${$scale.rank}.`);
  }

  if ($offset != null) {
    util.assert($offset.rank === 4 || $offset.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 ` + `but got rank ${$offset.rank}.`);
  }

  return (0, _batchnorm.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}

const batchNorm4d = (0, _operation.op)({
  batchNorm4d_
});
exports.batchNorm4d = batchNorm4d;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./batchnorm":"gYII","./operation":"uE86"}],"rYQ1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bincount = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Outputs a vector with length `size` and the same dtype as `weights`.
 *
 * If `weights` are empty, then index `i` stores the number of times the value
 * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the
 * sum of the value in `weights` at each index where the corresponding value in
 * `x` is `i`.
 *
 * Values in `x` outside of the range [0, size) are ignored.
 *
 * @param x The input int tensor, rank 1.
 * @param weights The weights tensor, must have the same shape as x, or a
 *     length-0 Tensor, in which case it acts as all weights equal to 1.
 * @param size Non-negative integer.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function bincount_(x, weights, size) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'bincount');
  const $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'bincount');
  util.assert($x.dtype === 'int32', () => `Error in bincount: input ` + `dtype must be int32, but got ${$x.dtype}`);
  util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);
  util.assert($weights.size === $x.size || $weights.size === 0, () => `Error in bincount: weights must have the same size as input or` + `0-length, but got input shape: ${$x.shape}, weights shape: ` + `${$weights.shape}.`);
  const inputs = {
    x: $x,
    weights: $weights
  };
  const attrs = {
    size
  };
  return _engine.ENGINE.runKernel(_kernel_names.Bincount, inputs, attrs);
}

const bincount = (0, _operation.op)({
  bincount_
});
exports.bincount = bincount;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"ZDfb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.broadcastTo = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _clone = require("./clone");

var _operation = require("./operation");

var _reshape = require("./reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Broadcast an array to a compatible shape NumPy-style.
 *
 * The tensor's shape is compared to the broadcast shape from end to beginning.
 * Ones are prepended to the tensor's shape until is has the same length as
 * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is
 * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then
 * the input tensor is tiled N times along that axis (using tf.tile).
 *
 * @param input The tensor that is to be broadcasted.
 * @param shape The input is to be broadcast to this shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function broadcastTo_(x, shape) {
  let input = (0, _tensor_util_env.convertToTensor)(x, 'broadcastTo', 'x');
  const xShape = input.shape;

  if (shape.some(d => !(d > 0) || d % 1 !== 0)) {
    throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);
  }

  if (shape.length < input.rank) {
    throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${input.rank}.`);
  }

  if (shape.length > input.rank) {
    const newShape = input.shape.slice();

    while (newShape.length < shape.length) {
      newShape.unshift(1);
    }

    input = (0, _reshape.reshape)(input, newShape);
  }

  const inputShape = input.shape;
  const reps = Array.from(shape);

  for (let i = shape.length - 1; i >= 0; i--) {
    if (inputShape[i] === shape[i]) {
      reps[i] = 1;
    } else if (input.shape[i] !== 1) {
      throw new Error(`broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);
    }
  }

  const axes = reps.map((n, i) => n > 1 ? i : -1).filter(i => i >= 0);

  if (axes.length === 0) {
    return (0, _clone.clone)(input);
  } // TODO call broadcastTo kernel directly once backends implement broadcstTo


  const inputs = {
    x: input
  };
  const attrs = {
    reps
  };
  return _engine.ENGINE.runKernel(_kernel_names.Tile, inputs, attrs);
}

const broadcastTo = (0, _operation.op)({
  broadcastTo_
});
exports.broadcastTo = broadcastTo;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./clone":"Ot88","./operation":"uE86","./reshape":"F0cm"}],"VBn4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ceil = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.ceil().print();  // or tf.ceil(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function ceil_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'ceil');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Ceil, inputs);
}

const ceil = (0, _operation.op)({
  ceil_
});
exports.ceil = ceil;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"OIQo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clipByValue = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)
 * ```
 * @param x The input tensor.
 * @param clipValueMin Lower-bound of range to be clipped to.
 * @param clipValueMax Upper-bound of range to be clipped to.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function clipByValue_(x, clipValueMin, clipValueMax) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'clipByValue');
  util.assert(clipValueMin <= clipValueMax, () => `Error in clip: min (${clipValueMin}) must be ` + `less than or equal to max (${clipValueMax}).`);
  const inputs = {
    x: $x
  };
  const attrs = {
    clipValueMin,
    clipValueMax
  };
  return _engine.ENGINE.runKernel(_kernel_names.ClipByValue, inputs, attrs);
}

const clipByValue = (0, _operation.op)({
  clipByValue_
});
exports.clipByValue = clipByValue;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"SY4F":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat1d = void 0;

var _concat = require("./concat");

var _operation = require("./operation");

/**
 * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(3) = |r1, g1, b1|
 * B: shape(2) = |r2, g2|
 * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @return The concatenated array.
 */
function concat1d_(tensors) {
  return (0, _concat.concat)(tensors, 0
  /* axis */
  );
}

const concat1d = (0, _operation.op)({
  concat1d_
});
exports.concat1d = concat1d;
},{"./concat":"V5Ij","./operation":"uE86"}],"rep6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat2d = void 0;

var _concat = require("./concat");

var _operation = require("./operation");

/**
 * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *
 * B: shape(2, 3) = | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * C = tf.concat2d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *                  | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * if axis = 1:
 * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |
 *                   | r2, g2, b2, r4, g4, b4 |
 *
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concatenate along.
 * @return The concatenated array.
 */
function concat2d_(tensors, axis) {
  return (0, _concat.concat)(tensors, axis);
}

const concat2d = (0, _operation.op)({
  concat2d_
});
exports.concat2d = concat2d;
},{"./concat":"V5Ij","./operation":"uE86"}],"La3N":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat3d = void 0;

var _concat = require("./concat");

var _operation = require("./operation");

/**
 * Concatenates a list of `tf.Tensor3D`s along an axis.
 * See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *
 * B: shape(2, 1, 3) = | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * C = tf.concat3d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *                     | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * if axis = 1:
 * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |
 *                     | r2, g2, b2, r4, g4, b4 |
 *
 * if axis = 2:
 * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |
 *                      | r2, g2, b2, r4, g4, b4 |
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */
function concat3d_(tensors, axis) {
  return (0, _concat.concat)(tensors, axis);
}

const concat3d = (0, _operation.op)({
  concat3d_
});
exports.concat3d = concat3d;
},{"./concat":"V5Ij","./operation":"uE86"}],"UYxl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat4d = void 0;

var _concat = require("./concat");

var _operation = require("./operation");

/**
 * Concatenates a list of `tf.Tensor4D`s along an axis.
 * See `concat` for details.
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */
function concat4d_(tensors, axis) {
  return (0, _concat.concat)(tensors, axis);
}

const concat4d = (0, _operation.op)({
  concat4d_
});
exports.concat4d = concat4d;
},{"./concat":"V5Ij","./operation":"uE86"}],"CVMs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2d = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes a 2D convolution over the input x.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'conv2d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'conv2d');
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);
  util.assert($filter.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in conv2d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];
  util.assert(inDepth === $filter.shape[2], () => `Error in conv2d: depth of input (${inDepth}) must match ` + `input depth for filter ${$filter.shape[2]}.`);
  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
  const inputs = {
    x: x4D,
    filter: $filter
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const res = _engine.ENGINE.runKernel(_kernel_names.Conv2D, inputs, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const conv2d = (0, _operation.op)({
  conv2d_
});
exports.conv2d = conv2d;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./conv_util":"PhWH","./operation":"uE86","./reshape":"F0cm"}],"RZoo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv1d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _conv2d = require("./conv2d");

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Computes a 1D convolution over the input x.
 *
 * @param x The input tensor, of rank 3 or rank 2, of shape
 *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.
 * @param filter The filter, rank 3, of shape
 *     `[filterWidth, inDepth, outDepth]`.
 * @param stride The number of entries by which the filter is moved right at
 *     each step.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat An optional string from "NWC", "NCW". Defaults to "NWC",
 *     the data is stored in the order of [batch, in_width, in_channels]. Only
 *     "NWC" is currently supported.
 * @param dilation The dilation rate in which we sample input values in
 *     atrous convolution. Defaults to `1`. If it is greater than 1, then
 *     stride must be `1`.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv1d_(x, filter, stride, pad, dataFormat = 'NWC', dilation = 1, dimRoundingMode) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'conv1d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'conv1d');
  let x3D = $x;
  let reshapedTo3D = false;

  if ($x.rank === 2) {
    reshapedTo3D = true;
    x3D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1]]);
  }

  util.assert(x3D.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);
  util.assert($filter.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ` + `${$filter.rank}.`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in conv1d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  util.assert(x3D.shape[2] === $filter.shape[1], () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match ` + `input depth for filter ${$filter.shape[1]}.`);
  util.assert(conv_util.eitherStridesOrDilationsAreOne(stride, dilation), () => 'Error in conv1D: Either stride or dilation must be 1. ' + `Got stride ${stride} and dilation '${dilation}'`);
  util.assert(dataFormat === 'NWC', () => `Error in conv1d: got dataFormat of ${dataFormat} but only NWC is currently supported.`);
  const filter4D = (0, _reshape.reshape)($filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);
  const input4D = (0, _reshape.reshape)(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);
  const strides = [1, stride];
  const dilations = [1, dilation];
  const conv2dDataFormat = 'NHWC';
  const res = (0, _conv2d.conv2d)(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);

  if (reshapedTo3D) {
    return (0, _reshape.reshape)(res, [res.shape[2], res.shape[3]]);
  }

  return (0, _reshape.reshape)(res, [res.shape[0], res.shape[2], res.shape[3]]);
}

const conv1d = (0, _operation.op)({
  conv1d_
});
exports.conv1d = conv1d;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./conv2d":"CVMs","./conv_util":"PhWH","./operation":"uE86","./reshape":"F0cm"}],"sf3S":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2DBackpropInput = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the derivative of the input of a 2D convolution.
 *
 * @param xShape The shape of the input: [batch, height, width, inDepth].
 * If length of 3, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 4 or rank 3 of shape
 *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function conv2DBackpropInput_(xShape, dy, filter, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {
  util.assert(xShape.length === dy.rank, () => `Length of inShape ` + `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
  let xShape4D = xShape;
  let dy4D = dy;
  let reshapedTo4D = false;

  if (dy.rank === 3) {
    reshapedTo4D = true;
    dy4D = (0, _reshape.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
    xShape4D = [1, xShape[0], xShape[1], xShape[2]];
  }

  util.assert(xShape4D.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ` + `${xShape4D.length}.`);
  util.assert(dy4D.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got ` + `rank ${dy4D.rank}`);
  util.assert(filter.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got ` + `rank ${filter.rank}`);
  const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];
  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];
  util.assert(inDepth === filter.shape[2], () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` + `match input depth for filter ${filter.shape[2]}.`);
  util.assert(outDepth === filter.shape[3], () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` + `match output depth for filter ${filter.shape[3]}.`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in conv2dDerInput: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const inputs = {
    dy: dy4D,
    filter
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dimRoundingMode,
    inputShape: xShape4D
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const res = _engine.ENGINE.runKernel(_kernel_names.Conv2DBackpropInput, inputs, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const conv2DBackpropInput = (0, _operation.op)({
  conv2DBackpropInput_
});
exports.conv2DBackpropInput = conv2DBackpropInput;
},{"../engine":"phT7","../kernel_names":"rJl6","../util":"XXxQ","./operation":"uE86","./reshape":"F0cm"}],"v80f":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2dTranspose = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _conv2d_backprop_input = require("./conv2d_backprop_input");

var _operation = require("./operation");

/**
 * Computes the transposed 2D convolution of an image, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 4 or rank 3, of shape
 *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 4 or rank 3:
 *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.
 * @param strides The strides of the original convolution:
 *     `[strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv2dTranspose_(x, filter, outputShape, strides, pad, dimRoundingMode) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'conv2dTranspose');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'conv2dTranspose');
  return (0, _conv2d_backprop_input.conv2DBackpropInput)(outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);
}

const conv2dTranspose = (0, _operation.op)({
  conv2dTranspose_
});
exports.conv2dTranspose = conv2dTranspose;
},{"../tensor_util_env":"y4X4","./conv2d_backprop_input":"sf3S","./operation":"uE86"}],"uOsG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv3d = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _conv_util = require("./conv_util");

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes a 3D convolution over the input x.
 *
 * @param x The input tensor, of rank 5 or rank 4, of shape
 *     `[batch, depth, height, width, channels]`. If rank 4,
 * batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.
 *      inChannels must match between input and filter.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat: An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationDepth, dilationHeight,
 *     dilationWidth]` in which we sample input values across the height
 *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.
 *     If `dilations` is a single number, then
 *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater
 *     than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv3d_(x, filter, strides, pad, dataFormat = 'NDHWC', dilations = [1, 1, 1]) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'conv3d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'conv3d');
  let x5D = $x;
  let reshapedTo5D = false;

  if ($x.rank === 4) {
    reshapedTo5D = true;
    x5D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
  }

  util.assert(x5D.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);
  util.assert($filter.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ` + `${$filter.rank}.`);
  util.assert(x5D.shape[4] === $filter.shape[3], () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` + `input depth for filter ${$filter.shape[3]}.`);
  util.assert((0, _conv_util.eitherStridesOrDilationsAreOne)(strides, dilations), () => 'Error in conv3D: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
  util.assert(dataFormat === 'NDHWC', () => `Error in conv3d: got dataFormat of ${dataFormat} but only NDHWC is currently supported.`);
  const inputs = {
    x: x5D,
    filter: $filter
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dilations
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const res = _engine.ENGINE.runKernel(_kernel_names.Conv3D, inputs, attrs);

  if (reshapedTo5D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
  }

  return res;
}

const conv3d = (0, _operation.op)({
  conv3d_
});
exports.conv3d = conv3d;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./conv_util":"PhWH","./operation":"uE86","./reshape":"F0cm"}],"uMVO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv3DBackpropInput = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the derivative of the input of a 3D convolution.
 *
 * @param xShape The shape of the input: [batch, depth, height, width,
 * in_channels]. If length of 4, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 5 or rank 4 of shape
 *   `[batch, outDepth, outHeight, outWidth, in_channels]`.
 * If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 */
function conv3DBackpropInput_(xShape, dy, filter, strides, pad) {
  util.assert(xShape.length === dy.rank, () => `Length of inShape ` + `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
  let xShape5D = xShape;
  let dy5D = dy;
  let reshapedTo5D = false;

  if (dy.rank === 4) {
    reshapedTo5D = true;
    dy5D = (0, _reshape.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);
    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];
  }

  const inDepth = xShape5D[4];
  const outDepth = dy5D.shape[4];
  util.assert(xShape5D.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ` + `${xShape5D.length}.`);
  util.assert(dy5D.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got ` + `rank ${dy5D.rank}`);
  util.assert(filter.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got ` + `rank ${filter.rank}`);
  util.assert(inDepth === filter.shape[3], () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` + `match input depth for filter ${filter.shape[3]}.`);
  util.assert(outDepth === filter.shape[4], () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` + `match output depth for filter ${filter.shape[4]}.`);
  const inputs = {
    dy: dy5D,
    filter
  };
  const attrs = {
    pad,
    strides,
    inputShape: xShape5D
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const res = _engine.ENGINE.runKernel(_kernel_names.Conv3DBackpropInputV2, inputs, attrs);

  if (reshapedTo5D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
  }

  return res;
}

const conv3DBackpropInput = (0, _operation.op)({
  conv3DBackpropInput_
});
exports.conv3DBackpropInput = conv3DBackpropInput;
},{"../engine":"phT7","../kernel_names":"rJl6","../util":"XXxQ","./operation":"uE86","./reshape":"F0cm"}],"ndAv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv3dTranspose = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _conv3d_backprop_input = require("./conv3d_backprop_input");

var _operation = require("./operation");

/**
 * Computes the transposed 3D convolution of a volume, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 5 or rank 4, of shape
 *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 5 or rank 4:
 *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is
 *    assumed.
 * @param strides The strides of the original convolution:
 *     `[strideDepth, strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv3dTranspose_(x, filter, outputShape, strides, pad) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'conv3dTranspose');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'conv3dTranspose');
  return (0, _conv3d_backprop_input.conv3DBackpropInput)(outputShape, $x, $filter, strides, pad);
}

const conv3dTranspose = (0, _operation.op)({
  conv3dTranspose_
});
exports.conv3dTranspose = conv3dTranspose;
},{"../tensor_util_env":"y4X4","./conv3d_backprop_input":"uMVO","./operation":"uE86"}],"gHiU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cos = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.cos().print();  // or tf.cos(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function cos_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'cos');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Cos, inputs);
}

const cos = (0, _operation.op)({
  cos_
});
exports.cos = cos;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"dWiz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cosh = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.cosh().print();  // or tf.cosh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function cosh_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'cosh');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Cosh, inputs);
}

const cosh = (0, _operation.op)({
  cosh_
});
exports.cosh = cosh;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"s2nI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cumsum = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the cumulative sum of a `tf.Tensor` along `axis`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4]);
 * x.cumsum().print();
 * ```
 * ```js
 * const x = tf.tensor([[1, 2], [3, 4]]);
 * x.cumsum().print();
 * ```
 *
 * @param x The input tensor to be summed.
 * @param axis The axis along which to sum. Optional. Defaults to 0.
 * @param exclusive Whether to perform exclusive cumulative sum. Optional.
 *     Defaults to false. If set to true then the sum of each tensor entry
 *     does not include its own value, but only the values previous to it
 *     along the specified axis.
 * @param reverse Whether to sum in the opposite direction. Optional.
 *     Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Scan'}
 */
function cumsum_(x, axis = 0, exclusive = false, reverse = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'cumsum');
  const inputs = {
    x: $x
  };
  const attrs = {
    axis,
    exclusive,
    reverse
  };
  return _engine.ENGINE.runKernel(_kernel_names.Cumsum, inputs, attrs);
}

const cumsum = (0, _operation.op)({
  cumsum_
});
exports.cumsum = cumsum;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"IzLf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.denseBincount = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Outputs a vector with length `size` and the same dtype as `weights`.
 *
 * If `weights` are empty, then index `i` stores the number of times the value
 * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the
 * sum of the value in `weights` at each index where the corresponding value in
 * `x` is `i`.
 *
 * Values in `x` outside of the range [0, size) are ignored.
 *
 * @param x The input int tensor, rank 1 or rank 2.
 * @param weights The weights tensor, must have the same shape as x, or a
 *     length-0 Tensor, in which case it acts as all weights equal to 1.
 * @param size Non-negative integer.
 * @param binaryOutput Optional. Whether the kernel should count the appearance
 *     or number of occurrences. Defaults to False.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function denseBincount_(x, weights, size, binaryOutput = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'denseBincount');
  const $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'denseBincount');
  util.assert($x.dtype === 'int32', () => `Error in denseBincount: input ` + `dtype must be int32, but got ${$x.dtype}`);
  util.assert($x.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got ` + `rank ${$x.rank}.`);
  util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);
  util.assert($weights.size === $x.size || $weights.size === 0, () => `Error in denseBincount: weights must have the same shape as x or ` + `0-length, but got x shape: ${$x.shape}, weights shape: ` + `${$weights.shape}.`);
  const inputs = {
    x: $x,
    weights: $weights
  };
  const attrs = {
    size,
    binaryOutput
  };
  return _engine.ENGINE.runKernel(_kernel_names.DenseBincount, inputs, attrs);
}

const denseBincount = (0, _operation.op)({
  denseBincount_
});
exports.denseBincount = denseBincount;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"o3IO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthToSpace = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Rearranges data from depth into blocks of spatial data. More specifically,
 * this op outputs a copy of the input tensor where values from the `depth`
 * dimension are moved in spatial blocks to the `height` and `width` dimensions.
 * The attr `blockSize` indicates the input block size and how the data is
 * moved.
 *
 *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged
 * into non-overlapping blocks of size `blockSize x blockSize`
 *
 *  - The width the output tensor is `inputWidth * blockSize`, whereas the
 * height is `inputHeight * blockSize`
 *
 *  - The Y, X coordinates within each block of the output image are determined
 * by the high order component of the input channel index
 *
 *  - The depth of the input tensor must be divisible by `blockSize *
 * blockSize`
 *
 * The `dataFormat` attr specifies the layout of the input and output tensors
 * with the following options: "NHWC": [ `batch, height, width, channels` ]
 * "NCHW": [ `batch, channels, height, width` ]
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);
 * const blockSize = 2;
 * const dataFormat = "NHWC";
 *
 * tf.depthToSpace(x, blockSize, dataFormat).print();
 * ```
 *
 * @param x The input tensor of rank 4
 * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to "NHWC"
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function depthToSpace_(x, blockSize, dataFormat = 'NHWC') {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'depthToSpace');
  const inputHeight = dataFormat === 'NHWC' ? $x.shape[1] : $x.shape[2];
  const inputWidth = dataFormat === 'NHWC' ? $x.shape[2] : $x.shape[3];
  const inputDepth = dataFormat === 'NHWC' ? $x.shape[3] : $x.shape[1];
  util.assert(inputHeight * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${inputHeight} and ${blockSize}  for depthToSpace with input shape
    ${$x.shape}`);
  util.assert(inputWidth * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${inputWidth} and ${blockSize} for depthToSpace with input shape
        ${$x.shape}`);
  util.assert(inputDepth % (blockSize * blockSize) === 0, () => `Dimension size must be evenly divisible by ${blockSize * blockSize} but is ${inputDepth} for depthToSpace with input shape ${$x.shape}`);
  const inputs = {
    x: $x
  };
  const attrs = {
    blockSize,
    dataFormat
  };
  return _engine.ENGINE.runKernel(_kernel_names.DepthToSpace, inputs, attrs);
}

const depthToSpace = (0, _operation.op)({
  depthToSpace_
});
exports.depthToSpace = depthToSpace;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"HEHz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthwiseConv2d = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Depthwise 2D convolution.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function depthwiseConv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'depthwiseConv2d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'depthwiseConv2d');
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);
  util.assert($filter.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);
  util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in depthwiseConv2d: number of input channels ` + `(${x4D.shape[3]}) must match the inChannels dimension in ` + `filter ${$filter.shape[2]}.`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const inputs = {
    x: x4D,
    filter: $filter
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const res = _engine.ENGINE.runKernel(_kernel_names.DepthwiseConv2dNative, inputs, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const depthwiseConv2d = (0, _operation.op)({
  depthwiseConv2d_
});
exports.depthwiseConv2d = depthwiseConv2d;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86","./reshape":"F0cm"}],"Qz11":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diag = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns a diagonal tensor with a given diagonal values.
 *
 * Given a diagonal, this operation returns a tensor with the diagonal and
 * everything else padded with zeros.
 *
 * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor
 * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * tf.diag(x).print()
 * ```
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])
 *
 * tf.diag(x).print()
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function diag_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'diag');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Diag, inputs);
}

const diag = (0, _operation.op)({
  diag_
});
exports.diag = diag;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"XEeh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dilation2d = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the grayscale dilation over the input `x`.
 *
 * @param x The input tensor, rank 3 or rank 4 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filter The filter tensor, rank 3, of shape
 *     `[filterHeight, filterWidth, depth]`.
 * @param strides The strides of the sliding window for each dimension of the
 *     input tensor: `[strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat Specify the data format of the input and output data.
 *      Defaults to 'NHWC'. Only 'NHWC' is currently supported. With the
 *      default format "NHWC", the data is stored in the order of: [batch,
 *      height, width, channels].
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     for atrous morphological dilation. Defaults to `[1, 1]`. If `dilations`
 *     is a single number, then `dilationHeight == dilationWidth`. If it is
 *     greater than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function dilation2d_(x, filter, strides, pad, dilations = [1, 1], dataFormat = 'NHWC') {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'dilation2d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'dilation2d');
  util.assert($x.rank === 3 || $x.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ` + `${$x.rank}.`);
  util.assert($filter.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ` + `${$filter.rank}.`);
  util.assert(dataFormat === 'NHWC', () => `Error in dilation2d: Only NHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    reshapedTo4D = true;
  }

  const inputs = {
    x: x4D,
    filter: $filter
  };
  const attrs = {
    strides,
    pad,
    dilations
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const res = _engine.ENGINE.runKernel(_kernel_names.Dilation2D, inputs, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const dilation2d = (0, _operation.op)({
  dilation2d_
});
exports.dilation2d = dilation2d;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86","./reshape":"F0cm"}],"fD2T":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBroadcastDims = getBroadcastDims;
exports.getReductionAxes = getReductionAxes;
exports.assertAndGetBroadcastShape = assertAndGetBroadcastShape;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the dimensions in the input shape that are broadcasted to
 * produce the provided output shape.
 *
 * The returned dimensions are 0-indexed and sorted. An example:
 * inShape = [4, 1, 3]
 * outShape = [5, 4, 3, 3]
 * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.
 */
function getBroadcastDims(inShape, outShape) {
  const inRank = inShape.length;
  const dims = [];

  for (let i = 0; i < inRank; i++) {
    const dim = inRank - 1 - i;
    const a = inShape[dim] || 1;
    const b = outShape[outShape.length - 1 - i] || 1;

    if (b > 1 && a === 1) {
      dims.unshift(dim);
    }
  }

  return dims;
}
/**
 * Returns the axes in the output space that should be reduced to produce
 * the input space.
 */


function getReductionAxes(inShape, outShape) {
  const result = [];

  for (let i = 0; i < outShape.length; i++) {
    const inDim = inShape[inShape.length - i - 1];
    const outAxis = outShape.length - i - 1;
    const outDim = outShape[outAxis];

    if (inDim == null || inDim === 1 && outDim > 1) {
      result.unshift(outAxis);
    }
  }

  return result;
}

function assertAndGetBroadcastShape(shapeA, shapeB) {
  const result = [];
  const l = Math.max(shapeA.length, shapeB.length);

  for (let i = 0; i < l; i++) {
    let a = shapeA[shapeA.length - i - 1];

    if (a == null) {
      a = 1;
    }

    let b = shapeB[shapeB.length - i - 1];

    if (b == null) {
      b = 1;
    }

    if (a === 1) {
      result.unshift(b);
    } else if (b === 1) {
      result.unshift(a);
    } else if (a !== b) {
      const errMsg = `Operands could not be broadcast together with shapes ` + `${shapeA} and ${shapeB}.`;
      throw Error(errMsg);
    } else {
      result.unshift(a);
    }
  }

  return result;
}
},{}],"haNF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equal = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of (a == b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.equal(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function equal_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'equal', 'string_or_numeric');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'equal', 'string_or_numeric');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.Equal, inputs);
}

const equal = (0, _operation.op)({
  equal_
});
exports.equal = equal;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./broadcast_util":"fD2T","./operation":"uE86"}],"TsgC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.where = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_to = require("./broadcast_to");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the elements, either `a` or `b` depending on the `condition`.
 *
 * If the condition is true, select from `a`, otherwise select from `b`.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const a = tf.tensor1d([1 , 2, 3]);
 * const b = tf.tensor1d([-1, -2, -3]);
 *
 * a.where(cond, b).print();
 * ```
 *
 * @param condition The input condition. Must be of dtype bool.
 * @param a If `condition` is rank 1, `a` may have a higher rank but
 *     its first dimension must match the size of `condition`.
 * @param b A tensor with the same dtype as `a` and with shape that is
 *     compatible with `a`.
 * @return A tensor with same dtype as `a` and `b`, and shape that is
 *     broadcastable from `a` and `b`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function where_(condition, a, b) {
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'where');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'where');
  const $condition = (0, _tensor_util_env.convertToTensor)(condition, 'condition', 'where', 'bool'); // TODO: move this logic to forward function when the broadcastTo op is
  // implemented in WASM.
  // Find the broadcastable shape for $condition, $a, and $b.

  const broadcastShape = (0, _broadcast_util.assertAndGetBroadcastShape)((0, _broadcast_util.assertAndGetBroadcastShape)($condition.shape, $a.shape), $b.shape);
  const $broadcastedCondition = (0, _broadcast_to.broadcastTo)($condition, broadcastShape);
  const $broadcastedA = (0, _broadcast_to.broadcastTo)($a, broadcastShape);
  const $broadcastedB = (0, _broadcast_to.broadcastTo)($b, broadcastShape);
  const inputs = {
    condition: $broadcastedCondition,
    t: $broadcastedA,
    e: $broadcastedB
  };
  return _engine.ENGINE.runKernel(_kernel_names.Select, inputs);
}

const where = (0, _operation.op)({
  where_
});
exports.where = where;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./broadcast_to":"ZDfb","./broadcast_util":"fD2T","./operation":"uE86"}],"qY0o":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zerosLike = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.zerosLike(x).print();
 * ```
 *
 * @param x The tensor of required shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function zerosLike_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'zerosLike');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.ZerosLike, inputs);
}

const zerosLike = (0, _operation.op)({
  zerosLike_
});
exports.zerosLike = zerosLike;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"VrTr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divNoNan = void 0;

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _div = require("./div");

var _equal = require("./equal");

var _operation = require("./operation");

var _where = require("./where");

var _zeros_like = require("./zeros_like");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0
 * if denominator is 0.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 * const c = tf.tensor1d([0, 0, 0, 0]);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 * const c = tf.scalar(0);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function divNoNan_(a, b) {
  // TODO: Make this into its own kernel.
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'div');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'div');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  const divResult = (0, _div.div)($a, $b);
  const zeros = (0, _zeros_like.zerosLike)(divResult);
  const bEqualsZero = (0, _equal.equal)($b, zeros);
  return (0, _where.where)(bEqualsZero, zeros, divResult);
}

const divNoNan = (0, _operation.op)({
  divNoNan_
});
exports.divNoNan = divNoNan;
},{"../tensor_util":"wtFc","../tensor_util_env":"y4X4","./div":"S2L5","./equal":"haNF","./operation":"uE86","./where":"TsgC","./zeros_like":"qY0o"}],"M98r":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dot = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _mat_mul = require("./mat_mul");

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor2d([[1, 2], [3, 4]]);
 * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
 *
 * a.dot(b).print();  // or tf.dot(a, b)
 * b.dot(a).print();
 * b.dot(c).print();
 * ```
 * @param t1 The first tensor in the dot operation.
 * @param t2 The second tensor in the dot operation.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function dot_(t1, t2) {
  const $t1 = (0, _tensor_util_env.convertToTensor)(t1, 't1', 'dot');
  const $t2 = (0, _tensor_util_env.convertToTensor)(t2, 't2', 'dot');
  util.assert(($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` + `${$t1.rank} and ${$t2.rank}.`);
  const t1Inner = $t1.rank === 1 ? $t1.size : $t1.shape[1];
  const t2Inner = $t2.rank === 1 ? $t2.size : $t2.shape[0];
  util.assert(t1Inner === t2Inner, () => `Error in dot: inner dimensions of inputs must match, but got ` + `${t1Inner} and ${t2Inner}.`);

  if ($t1.rank === 1 && $t2.rank === 1) {
    const t12D = (0, _reshape.reshape)($t1, [1, -1]);
    const t22D = (0, _reshape.reshape)($t2, [-1, 1]);
    const t1t2 = (0, _mat_mul.matMul)(t12D, t22D);
    return (0, _reshape.reshape)(t1t2, []);
  } else if ($t1.rank === 1 && $t2.rank === 2) {
    const t12D = (0, _reshape.reshape)($t1, [1, -1]);
    const t22D = (0, _reshape.reshape)($t2, [$t2.shape[0], $t2.shape[1]]);
    const t1t2 = (0, _mat_mul.matMul)(t12D, t22D);
    return (0, _reshape.reshape)(t1t2, [t1t2.size]);
  } else if ($t1.rank === 2 && $t2.rank === 1) {
    const t22D = (0, _reshape.reshape)($t2, [-1, 1]);
    const t1t2 = (0, _mat_mul.matMul)($t1, t22D);
    return (0, _reshape.reshape)(t1t2, [t1t2.size]);
  } else {
    const t22D = (0, _reshape.reshape)($t2, [$t2.shape[0], $t2.shape[1]]);
    const t1t2 = (0, _mat_mul.matMul)($t1, t22D);
    return t1t2;
  }
}

const dot = (0, _operation.op)({
  dot_
});
exports.dot = dot;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./mat_mul":"zVDr","./operation":"uE86","./reshape":"F0cm"}],"aqvb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.einsum_ = einsum_;
exports.einsum = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Tensor contraction over specified indices and outer product.
 *
 * `einsum` allows defining Tensors by defining their element-wise computation.
 * This computation is based on
 * [Einstein summation](https://en.wikipedia.org/wiki/Einstein_notation).
 *
 * Some special cases include:
 *
 * Matrix multiplication:
 * ```js
 * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
 * const y = tf.tensor2d([[0, 1], [2, 3], [4, 5]]);
 * x.print();
 * y.print();
 * tf.einsum('ij,jk->ik', x, y).print();
 * ```
 *
 * Dot product:
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 * const y = tf.tensor1d([0, 1, 2]);
 * x.print();
 * y.print();
 * tf.einsum('i,i->', x, y).print();
 * ```
 *
 * Batch dot product:
 * ```js
 * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
 * const y = tf.tensor2d([[0, 1, 2], [3, 4, 5]]);
 * x.print();
 * y.print();
 * tf.einsum('bi,bi->b', x, y).print();
 * ```
 *
 * Outer prouduct:
 * ```js
 * const x = tf.tensor1d([1, 3, 5]);
 * const y = tf.tensor1d([2, 4, 6]);
 * x.print();
 * y.print();
 * tf.einsum('i,j->ij', x, y).print();
 * ```
 *
 * Matrix transpose:
 * ```js
 * const x = tf.tensor2d([[1, 2], [3, 4]]);
 * x.print();
 * tf.einsum('ij->ji', x).print();
 * ```
 *
 * Batch matrix transpose:
 * ```js
 * const x = tf.tensor3d([[[1, 2], [3, 4]], [[-1, -2], [-3, -4]]]);
 * x.print();
 * tf.einsum('bij->bji', x).print();
 * ```
 *
 * Limitations:
 *
 * This implementation of einsum has the following limitations:
 *
 * - Does not support >2 input tensors.
 * - Does not support duplicate axes for any given input tensor. E.g., equation
 *   'ii->' is not suppoted.
 * - The `...` notation is not supported.
 *
 * @param equation a string describing the contraction, in the same format as
 * [numpy.einsum](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html).
 * @param tensors the input(s) to contract (each one a Tensor), whose shapes
 *     should be consistent with equation.
 * @returns The output tensor.
 *
 * @doc {heading: 'Tensors', subheading: 'Matrices'}
 */
function einsum_(equation, ...tensors) {
  const $tensors = tensors.map((t, i) => (0, _tensor_util_env.convertToTensor)(t, `tensors${i}`, 'einsum'));
  const attrs = {
    equation
  };
  return _engine.ENGINE.runKernel(_kernel_names.Einsum, $tensors, attrs);
}

const einsum = (0, _operation.op)({
  einsum_
});
exports.einsum = einsum;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"qSof":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.elu = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes exponential linear element-wise: `x > 0 ? e ^ x - 1 : 0`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 1, -3, 2]);
 *
 * x.elu().print();  // or tf.elu(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function elu_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'elu');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Elu, inputs);
}

const elu = (0, _operation.op)({
  elu_
});
exports.elu = elu;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"Ng3O":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.erf = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _cast = require("./cast");

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes gause error function of the input `tf.Tensor` element-wise:
 * `erf(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.erf().print(); // or tf.erf(x);
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function erf_(x) {
  let $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'erf');
  util.assert($x.dtype === 'int32' || $x.dtype === 'float32', () => 'Input dtype must be `int32` or `float32`.');

  if ($x.dtype === 'int32') {
    $x = (0, _cast.cast)($x, 'float32');
  }

  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Erf, inputs);
}

const erf = (0, _operation.op)({
  erf_
});
exports.erf = erf;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./cast":"qnzc","./operation":"uE86"}],"xcz4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exp = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.exp().print();  // or tf.exp(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function exp_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'exp');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Exp, inputs);
}

const exp = (0, _operation.op)({
  exp_
});
exports.exp = exp;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"WqhD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expandDims = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension
 * into the tensor's shape.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const axis = 1;
 * x.expandDims(axis).print();
 * ```
 *
 * @param x The input tensor whose dimensions to be expanded.
 * @param axis The dimension index at which to insert shape of `1`. Defaults
 *     to 0 (the first dimension).
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function expandDims_(x, axis = 0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'expandDims', 'string_or_numeric');
  util.assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');
  const inputs = {
    input: $x
  };
  const attrs = {
    dim: axis
  };
  return _engine.ENGINE.runKernel(_kernel_names.ExpandDims, inputs, attrs);
}

const expandDims = (0, _operation.op)({
  expandDims_
});
exports.expandDims = expandDims;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"NE5u":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expm1 = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes exponential of the input `tf.Tensor` minus one element-wise.
 * `e ^ x - 1`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.expm1().print();  // or tf.expm1(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function expm1_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'expm1');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Expm1, inputs);
}

const expm1 = (0, _operation.op)({
  expm1_
});
exports.expm1 = expm1;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"DlNu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tile = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Construct a tensor by repeating it the number of times given by reps.
 *
 * This operation creates a new tensor by replicating `input` `reps`
 * times. The output tensor's i'th dimension has `input.shape[i] *
 * reps[i]` elements, and the values of `input` are replicated
 * `reps[i]` times along the i'th dimension. For example, tiling
 * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 *
 * a.tile([2]).print();    // or a.tile([2])
 * ```
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.tile([1, 2]).print();  // or a.tile([1, 2])
 * ```
 * @param x The tensor to tile.
 * @param reps Determines the number of replications per dimension.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function tile_(x, reps) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'tile', 'string_or_numeric');
  util.assert($x.rank === reps.length, () => `Error in transpose: rank of input ${$x.rank} ` + `must match length of reps ${reps}.`);
  const inputs = {
    x: $x
  };
  const attrs = {
    reps
  };
  return _engine.ENGINE.runKernel(_kernel_names.Tile, inputs, attrs);
}

const tile = (0, _operation.op)({
  tile_
});
exports.tile = tile;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"MP6S":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eye = void 0;

var _buffer = require("./buffer");

var _expand_dims = require("./expand_dims");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _tile = require("./tile");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Create an identity matrix.
 *
 * @param numRows Number of rows.
 * @param numColumns Number of columns. Defaults to `numRows`.
 * @param batchShape If provided, will add the batch shape to the beginning
 *   of the shape of the returned `tf.Tensor` by repeating the identity
 *   matrix.
 * @param dtype Data type.
 * @returns Identity matrix of the specified size and data type, possibly
 *   with batch repetition if `batchShape` is specified.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function eye_(numRows, numColumns, batchShape, dtype = 'float32') {
  if (numColumns == null) {
    numColumns = numRows;
  }

  const buff = (0, _buffer.buffer)([numRows, numColumns], dtype);
  const n = numRows <= numColumns ? numRows : numColumns;

  for (let i = 0; i < n; ++i) {
    buff.set(1, i, i);
  }

  const out = (0, _reshape.reshape)(buff.toTensor(), [numRows, numColumns]);

  if (batchShape == null) {
    return out;
  } else {
    if (batchShape.length === 1) {
      return (0, _tile.tile)((0, _expand_dims.expandDims)(out, 0), [batchShape[0], 1, 1]);
    } else if (batchShape.length === 2) {
      // tslint:disable-next-line:no-unnecessary-type-assertion
      return (0, _tile.tile)((0, _expand_dims.expandDims)((0, _expand_dims.expandDims)(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);
    } else if (batchShape.length === 3) {
      // tslint:disable-next-line:no-unnecessary-type-assertion
      return (0, _tile.tile)((0, _expand_dims.expandDims)((0, _expand_dims.expandDims)((0, _expand_dims.expandDims)(out, 0), 0), 0), [batchShape[0], batchShape[1], batchShape[2], 1, 1]);
    } else {
      throw new Error(`eye() currently supports only 1D and 2D ` + // tslint:disable-next-line:no-any
      `batchShapes, but received ${batchShape.length}D.`);
    }
  }
}

const eye = (0, _operation.op)({
  eye_
});
exports.eye = eye;
},{"./buffer":"GfO2","./expand_dims":"WqhD","./operation":"uE86","./reshape":"F0cm","./tile":"DlNu"}],"gaCw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fill = fill;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` filled with a scalar value.
 *
 * ```js
 * tf.fill([2, 2], 4).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param value The scalar value to fill the tensor with.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 * 'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function fill(shape, value, dtype) {
  const attrs = {
    shape,
    value,
    dtype
  };
  return _engine.ENGINE.runKernel(_kernel_names.Fill, {}, attrs);
}
},{"../engine":"phT7","../kernel_names":"rJl6"}],"EeTS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floor = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.floor().print();  // or tf.floor(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function floor_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'floor');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Floor, inputs);
}

const floor = (0, _operation.op)({
  floor_
});
exports.floor = floor;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"TfxI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gather = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Gather slices from tensor `x`'s axis `axis` according to `indices`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const indices = tf.tensor1d([1, 3, 3], 'int32');
 *
 * x.gather(indices).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const indices = tf.tensor1d([1, 1, 0], 'int32');
 *
 * x.gather(indices).print();
 * ```
 * @param x The input tensor whose slices to be gathered.
 * @param indices The indices of the values to extract.
 * @param axis The axis over which to select values. Defaults to 0.
 * @param batchDims Optional. The number of batch dimensions. It must be less
 *     than or equal to rank(indices). Defaults to 0.
 *     The output tensor will have shape of
 *     `x.shape[:axis] + indices.shape[batchDims:] + x.shape[axis + 1:]`
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function gather_(x, indices, axis = 0, batchDims = 0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'gather');
  const $indices = (0, _tensor_util_env.convertToTensor)(indices, 'indices', 'gather', 'int32');
  const inputs = {
    x: $x,
    indices: $indices
  };
  const attrs = {
    axis,
    batchDims
  };
  return _engine.ENGINE.runKernel(_kernel_names.GatherV2, inputs, attrs);
}

const gather = (0, _operation.op)({
  gather_
});
exports.gather = gather;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"WT29":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.greater = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of (a > b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greater(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function greater_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'greater', 'string_or_numeric');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'greater', 'string_or_numeric');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.Greater, inputs);
}

const greater = (0, _operation.op)({
  greater_
});
exports.greater = greater;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./broadcast_util":"fD2T","./operation":"uE86"}],"a6nY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.greaterEqual = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of (a >= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greaterEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function greaterEqual_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'greaterEqual', 'string_or_numeric');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'greaterEqual', 'string_or_numeric');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.GreaterEqual, inputs);
}

const greaterEqual = (0, _operation.op)({
  greaterEqual_
});
exports.greaterEqual = greaterEqual;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./broadcast_util":"fD2T","./operation":"uE86"}],"eG10":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.imag = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the imaginary part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the imaginary part of each element in input considered as a complex number.
 * If input is real, a tensor of all zeros is returned.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.imag(x).print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function imag_(input) {
  const $input = (0, _tensor_util_env.convertToTensor)(input, 'input', 'imag');
  const inputs = {
    input: $input
  };
  return _engine.ENGINE.runKernel(_kernel_names.Imag, inputs);
}

const imag = (0, _operation.op)({
  imag_
});
exports.imag = imag;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"uXDy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFinite = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns which elements of x are finite.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isFinite().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function isFinite_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'isFinite');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.IsFinite, inputs);
}

const isFinite = (0, _operation.op)({
  isFinite_
});
exports.isFinite = isFinite;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"d2YA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isInf = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns which elements of x are Infinity or -Infinity.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isInf().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function isInf_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'isInf');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.IsInf, inputs);
}

const isInf = (0, _operation.op)({
  isInf_
});
exports.isInf = isInf;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"cHRr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNaN = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * RReturns which elements of x are NaN.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isNaN().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function isNaN_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'isNaN');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.IsNan, inputs);
}

const isNaN = (0, _operation.op)({
  isNaN_
});
exports.isNaN = isNaN;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"RYa8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.leakyRelu = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes leaky rectified linear element-wise.
 *
 * See
 * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](
 *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)
 * ```
 * @param x The input tensor.
 * @param alpha The scaling factor for negative values, defaults to 0.2.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function leakyRelu_(x, alpha = 0.2) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'leakyRelu');
  const inputs = {
    x: $x
  };
  const attrs = {
    alpha
  };
  return _engine.ENGINE.runKernel(_kernel_names.LeakyRelu, inputs, attrs);
}

const leakyRelu = (0, _operation.op)({
  leakyRelu_
});
exports.leakyRelu = leakyRelu;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"onA7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.less = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of (a < b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.less(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function less_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'less', 'string_or_numeric');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'less', 'string_or_numeric');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.Less, inputs);
}

const less = (0, _operation.op)({
  less_
});
exports.less = less;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./broadcast_util":"fD2T","./operation":"uE86"}],"vnhI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lessEqual = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of (a <= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.lessEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function lessEqual_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'lessEqual', 'string_or_numeric');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'lessEqual', 'string_or_numeric');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.LessEqual, inputs);
}

const lessEqual = (0, _operation.op)({
  lessEqual_
});
exports.lessEqual = lessEqual;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./broadcast_util":"fD2T","./operation":"uE86"}],"Eb8v":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linspace = linspace;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Return an evenly spaced sequence of numbers over the given interval.
 *
 * ```js
 * tf.linspace(0, 9, 10).print();
 * ```
 * @param start The start value of the sequence.
 * @param stop The end value of the sequence.
 * @param num The number of values to generate.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function linspace(start, stop, num) {
  if (num <= 0) {
    throw new Error('The number of values should be positive.');
  }

  const attrs = {
    start,
    stop,
    num
  };
  return _engine.ENGINE.runKernel(_kernel_names.LinSpace, {}, attrs);
}
},{"../engine":"phT7","../kernel_names":"rJl6"}],"uT9U":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.localResponseNormalization = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Normalizes the activation of a local neighborhood across or within
 * channels.
 *
 * @param x The input tensor. The 4-D input tensor is treated as a 3-D array
 *     of 1D vectors (along the last dimension), and each vector is
 *     normalized independently.
 * @param depthRadius The number of adjacent channels in the 1D normalization
 *     window.
 * @param bias A constant bias term for the basis.
 * @param alpha A scale factor, usually positive.
 * @param beta An exponent.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function localResponseNormalization_(x, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'localResponseNormalization');
  util.assert($x.rank === 4 || $x.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${$x.rank}.`);
  util.assert(util.isInt(depthRadius), () => `Error in localResponseNormalization: depthRadius must be an ` + `integer but got depthRadius ${depthRadius}.`);
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  const inputs = {
    x: x4D
  };
  const attrs = {
    depthRadius,
    bias,
    alpha,
    beta
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const res = _engine.ENGINE.runKernel(_kernel_names.LRN, inputs, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  } else {
    return res;
  }
}

const localResponseNormalization = (0, _operation.op)({
  localResponseNormalization_
});
exports.localResponseNormalization = localResponseNormalization;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86","./reshape":"F0cm"}],"f3PH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E]);
 *
 * x.log().print();  // or tf.log(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function log_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'log');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Log, inputs);
}

const log = (0, _operation.op)({
  log_
});
exports.log = log;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"ODmc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log1p = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes natural logarithm of the input `tf.Tensor` plus one
 * element-wise: `ln(1 + x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E - 1]);
 *
 * x.log1p().print();  // or tf.log1p(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function log1p_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'log1p');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Log1p, inputs);
}

const log1p = (0, _operation.op)({
  log1p_
});
exports.log1p = log1p;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"VR5t":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customGrad = customGrad;
exports.variableGrads = variableGrads;
exports.valueAndGrad = valueAndGrad;
exports.valueAndGrads = valueAndGrads;
exports.grad = grad;
exports.grads = grads;

var _engine = require("./engine");

var _tensor = require("./tensor");

var _tensor_util_env = require("./tensor_util_env");

var util = _interopRequireWildcard(require("./util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the
 * gradient of `f(x)` with respect to `x`.
 *
 * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to
 * `x` is computed instead. `f(x)` must take a single tensor `x` and return a
 * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.grad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * g(x).print();
 * ```
 *
 * ```js
 * // f(x) = x ^ 3
 * const f = x => x.pow(tf.scalar(3, 'int32'));
 * // f'(x) = 3x ^ 2
 * const g = tf.grad(f);
 * // f''(x) = 6x
 * const gg = tf.grad(g);
 *
 * const x = tf.tensor1d([2, 3]);
 * gg(x).print();
 * ```
 *
 * @param f The function f(x), to compute gradient for.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function grad(f) {
  util.assert(util.isFunction(f), () => 'The f passed in grad(f) must be a function');
  return (x, dy) => {
    // x can be of any dtype, thus null as the last argument.
    const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'tf.grad', 'string_or_numeric');
    const $dy = dy != null ? (0, _tensor_util_env.convertToTensor)(dy, 'dy', 'tf.grad') : null;
    return _engine.ENGINE.tidy(() => {
      const {
        value,
        grads
      } = _engine.ENGINE.gradients(() => f($x), [$x], $dy);

      if ($dy != null) {
        util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' + 'returned by f(x)');
      }

      checkGrads(grads);
      return grads[0];
    });
  };
}
/**
 * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,
 * which gives an array of gradients of `f()` with respect to each input
 * [`x1`,`x2`,...].
 *
 * If `dy` is passed when calling `g()`, the gradient of
 * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.
 * The provided `f` must take one or more tensors and return a single tensor
 * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df / da = b, df / db = a
 * const g = tf.grads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const [da, db] = g([a, b]);
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 *
 * @param f The function `f(x1, x2,...)` to compute gradients for.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */


function grads(f) {
  util.assert(util.isFunction(f), () => 'The f passed in grads(f) must be a function');
  return (args, dy) => {
    util.assert(Array.isArray(args), () => 'The args passed in grads(f)(args) must be an array ' + 'of `Tensor`s or `TensorLike`s'); // args can be of any dtype, thus null as the last argument.

    const $args = (0, _tensor_util_env.convertToTensorArray)(args, 'args', 'tf.grads', 'string_or_numeric');
    const $dy = dy != null ? (0, _tensor_util_env.convertToTensor)(dy, 'dy', 'tf.grads') : null;
    return _engine.ENGINE.tidy(() => {
      const {
        value,
        grads
      } = _engine.ENGINE.gradients(() => f(...$args), $args, $dy);

      if ($dy != null) {
        util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');
      }

      checkGrads(grads);
      return grads;
    });
  };
}
/**
 * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.valueAndGrad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * const {value, grad} = g(x);
 *
 * console.log('value');
 * value.print();
 * console.log('grad');
 * grad.print();
 * ```
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */


function valueAndGrad(f) {
  util.assert(util.isFunction(f), () => 'The f passed in valueAndGrad(f) must be a function');
  return (x, dy) => {
    util.assert(x instanceof _tensor.Tensor, () => 'The x passed in valueAndGrad(f)(x) must be a tensor');
    util.assert(dy == null || dy instanceof _tensor.Tensor, () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');

    const {
      grads,
      value
    } = _engine.ENGINE.gradients(() => f(x), [x], dy);

    checkGrads(grads);
    return {
      grad: grads[0],
      value
    };
  };
}
/**
 * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df/da = b, df/db = a
 * const g = tf.valueAndGrads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const {value, grads} = g([a, b]);
 *
 * const [da, db] = grads;
 *
 * console.log('value');
 * value.print();
 *
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */


function valueAndGrads(f) {
  util.assert(util.isFunction(f), () => 'The f passed in valueAndGrads(f) must be a function');
  return (args, dy) => {
    util.assert(Array.isArray(args) && args.every(arg => arg instanceof _tensor.Tensor), () => 'The args passed in valueAndGrads(f)(args) must be array of ' + 'tensors');
    util.assert(dy == null || dy instanceof _tensor.Tensor, () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');

    const res = _engine.ENGINE.gradients(() => f(...args), args, dy);

    if (dy != null) {
      util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');
    }

    checkGrads(res.grads);
    return res;
  };
}
/**
 * Computes and returns the gradient of f(x) with respect to the list of
 * trainable variables provided by `varList`. If no list is provided, it
 * defaults to all trainable variables.
 *
 * ```js
 * const a = tf.variable(tf.tensor1d([3, 4]));
 * const b = tf.variable(tf.tensor1d([5, 6]));
 * const x = tf.tensor1d([1, 2]);
 *
 * // f(a, b) = a * x ^ 2 + b * x
 * const f = () => a.mul(x.square()).add(b.mul(x)).sum();
 * // df/da = x ^ 2, df/db = x
 * const {value, grads} = tf.variableGrads(f);
 *
 * Object.keys(grads).forEach(varName => grads[varName].print());
 * ```
 *
 * @param f The function to execute. f() should return a scalar.
 * @param varList The list of variables to compute the gradients with respect
 *     to. Defaults to all trainable variables.
 * @returns An object with the following keys and values:
 *   - `value`: The value of the function `f`.
 *   - `grads`: A map from the names of the variables to the gradients.
 *     If the `varList` argument is provided explicitly and contains a subset of
 *     non-trainable variables, this map in the return value will contain keys
 *     that map the names of the non-trainable variables to `null`.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */


function variableGrads(f, varList) {
  util.assert(util.isFunction(f), () => 'The f passed in variableGrads(f) must be a function');
  util.assert(varList == null || Array.isArray(varList) && varList.every(v => v instanceof _tensor.Variable), () => 'The varList passed in variableGrads(f, varList) must be an array ' + 'of variables');
  const specifiedVarList = varList != null;

  if (!specifiedVarList) {
    // Get all of the trainable variables.
    varList = [];

    for (const varName in _engine.ENGINE.registeredVariables) {
      varList.push(_engine.ENGINE.registeredVariables[varName]);
    }
  }

  const specifiedNonTrainable = specifiedVarList ? varList.filter(variable => !variable.trainable) : null; // Prune non-trainable variables.

  const originalVarCount = varList.length;
  varList = varList.filter(variable => variable.trainable);
  util.assert(varList.length > 0, () => `variableGrads() expects at least one of the input variables to ` + `be trainable, but none of the ${originalVarCount} variables is ` + `trainable.`);
  const allowNoGradients = true;

  const {
    value,
    grads
  } = _engine.ENGINE.gradients(f, varList, null, allowNoGradients);

  util.assert(grads.some(g => g != null), () => 'Cannot find a connection between any variable and the result of ' + 'the loss function y=f(x). Please make sure the operations that ' + 'use variables are inside the function f passed to minimize().');
  util.assert(value.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it ` + `returned a rank-${value.rank} tensor`);
  const namedGrads = {};
  varList.forEach((v, i) => {
    if (grads[i] != null) {
      namedGrads[v.name] = grads[i];
    }
  });

  if (specifiedNonTrainable != null) {
    // If varList is explicitly provided and contains non-trainable values,
    // add them to the returned gradients with `null` values.
    specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);
  }

  return {
    value,
    grads: namedGrads
  };
}
/**
 * Overrides the gradient computation of a function `f`.
 *
 * Takes a function
 * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`
 * and returns another function `g(...inputs)` which takes the same inputs as
 * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients
 * with respect to each input of `f` are computed using `f().gradFunc`.
 *
 * The `save` function passsed to `f` should be used for saving tensors needed
 * in the gradient. And the `saved` passed to the `gradFunc` is a
 * `NamedTensorMap`, which contains those saved tensor.
 *
 * ```js
 * const customOp = tf.customGrad((x, save) => {
 *   // Save x to make sure it's available later for the gradient.
 *   save([x]);
 *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);
 *   return {
 *     value: x.square(),
 *     // Note `saved.x` which points to the `x` we saved earlier.
 *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]
 *   };
 * });
 *
 * const x = tf.tensor1d([-1, -2, 3]);
 * const dx = tf.grad(x => customOp(x));
 *
 * console.log(`f(x):`);
 * customOp(x).print();
 * console.log(`f'(x):`);
 * dx(x).print();
 * ```
 *
 * @param f The function to evaluate in forward mode, which should return
 *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`
 *     returns the custom gradients of `f` with respect to its inputs.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */


function customGrad(f) {
  return _engine.ENGINE.customGrad(f);
}

function checkGrads(grads) {
  const numNullGradients = grads.filter(g => g == null).length;

  if (numNullGradients > 0) {
    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
  }
}
},{"./engine":"phT7","./tensor":"eFW4","./tensor_util_env":"y4X4","./util":"XXxQ"}],"i2LN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.neg = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes `-1 * x` element-wise.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);
 *
 * x.neg().print();  // or tf.neg(x)
 * ```
 *
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function neg_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'neg');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Neg, inputs);
}

const neg = (0, _operation.op)({
  neg_
});
exports.neg = neg;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"TLV5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.softplus = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.softplus().print();  // or tf.softplus(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function softplus_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'softplus');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Softplus, inputs);
}

const softplus = (0, _operation.op)({
  softplus_
});
exports.softplus = softplus;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"h4az":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logSigmoid = void 0;

var _gradients = require("../gradients");

var _tensor_util_env = require("../tensor_util_env");

var _mul = require("./mul");

var _neg = require("./neg");

var _operation = require("./operation");

var _sigmoid = require("./sigmoid");

var _softplus = require("./softplus");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes log sigmoid of the input `tf.Tensor` element-wise:
 * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.logSigmoid().print();  // or tf.logSigmoid(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function logSigmoid_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'logSigmoid'); // Use a custom gradient to maintain previous implementation.
  // There is no LogSigmoid kernel in TF so we can't use engine.runKernel
  // directly

  const customOp = (0, _gradients.customGrad)(x => {
    // TODO(yassogba) we can remove the chained softplus call here only
    // after backends have modualrized softplus at which point we can call
    // engine runKernel(..., Sotfplus, ...) directly.
    const value = (0, _neg.neg)((0, _softplus.softplus)((0, _neg.neg)(x)));

    const gradFunc = dy => {
      const derX = (0, _mul.mul)(dy, (0, _sigmoid.sigmoid)((0, _neg.neg)(x)));
      return derX;
    };

    return {
      value,
      gradFunc
    };
  });
  return customOp($x);
}

const logSigmoid = (0, _operation.op)({
  logSigmoid_
});
exports.logSigmoid = logSigmoid;
},{"../gradients":"VR5t","../tensor_util_env":"y4X4","./mul":"tBJ4","./neg":"i2LN","./operation":"uE86","./sigmoid":"DbGB","./softplus":"TLV5"}],"KIVY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.max = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the maximum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.max().print();  // or tf.max(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.max(axis).print();  // or tf.max(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function max_(x, axis = null, keepDims = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'max');
  const inputs = {
    x: $x
  };
  const attrs = {
    reductionIndices: axis,
    keepDims
  };
  return _engine.ENGINE.runKernel(_kernel_names.Max, inputs, attrs);
}

const max = (0, _operation.op)({
  max_
});
exports.max = max;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"SgzI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sub = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 *
 * ```js
 * // Broadcast subtract a with b.
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.scalar(5);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 * @param a The first `tf.Tensor` to subtract from.
 * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function sub_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'sub');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'sub');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.Sub, inputs);
}

const sub = (0, _operation.op)({
  sub_
});
exports.sub = sub;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./operation":"uE86"}],"kc8w":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sum = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _cast = require("./cast");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the sum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If axes has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.sum().print();  // or tf.sum(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.sum(axis).print();  // or tf.sum(x, axis)
 * ```
 *
 * @param x The input tensor to compute the sum over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function sum_(x, axis = null, keepDims = false) {
  let $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'sum');

  if ($x.dtype === 'bool') {
    $x = (0, _cast.cast)($x, 'int32');
  }

  const inputs = {
    x: $x
  };
  const attrs = {
    axis,
    keepDims
  };
  return _engine.ENGINE.runKernel(_kernel_names.Sum, inputs, attrs);
}

const sum = (0, _operation.op)({
  sum_
});
exports.sum = sum;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./cast":"qnzc","./operation":"uE86"}],"rVC8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logSoftmax = void 0;

var _gradients = require("../gradients");

var _tensor_util_env = require("../tensor_util_env");

var _cast = require("./cast");

var _exp = require("./exp");

var _log = require("./log");

var _max = require("./max");

var _mul = require("./mul");

var _operation = require("./operation");

var _sub = require("./sub");

var _sum = require("./sum");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the log softmax.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param axis The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function logSoftmax_(logits, axis = -1) {
  const $logits = (0, _tensor_util_env.convertToTensor)(logits, 'logits', 'logSoftmax');

  if (axis === -1) {
    axis = $logits.rank - 1;
  }

  if (axis !== $logits.rank - 1) {
    throw Error('Log Softmax along a non-last dimension is not yet supported. ' + `Logits was rank ${$logits.rank} and axis was ${axis}`);
  } // const forward: ForwardFunc<Tensor> = (backend, save) => {
  //   const keepDims = true;
  //   const xMax = max(logits, axis, true);
  //   const shifted = sub(logits, xMax);
  //   const value =
  //       sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis,
  //       keepDims)));
  //   save([value]);
  //   return value;
  // };
  // Use a custom gradient for numerical stability.


  const customOp = (0, _gradients.customGrad)((logits, save) => {
    const keepDims = true;
    const xMax = (0, _max.max)(logits, axis, true);
    const shifted = (0, _sub.sub)(logits, xMax);
    const value = (0, _sub.sub)((0, _cast.cast)(shifted, 'float32'), (0, _log.log)((0, _sum.sum)((0, _exp.exp)(shifted), axis, keepDims)));
    save([value]);

    const gradFunc = (dy, saved) => {
      const [value] = saved;
      const keepDims = true;
      const softmax = (0, _exp.exp)(value);
      return (0, _sub.sub)(dy, (0, _mul.mul)((0, _sum.sum)(dy, axis, keepDims), softmax));
    };

    return {
      value,
      gradFunc
    };
  });
  return customOp($logits); // TODO Use Engine.runKernel when CPU/WebGL/WASM backends implement this.
  // const inputs: LogSoftmaxInputs = {logits: $logits};
  // const attrs: LogSoftmaxAttrs = {axis};
  // return ENGINE.runKernel(
  //            LogSoftmax, inputs as {} as NamedTensorMap,
  //            attrs as {} as NamedAttrMap);
}

const logSoftmax = (0, _operation.op)({
  logSoftmax_
});
exports.logSoftmax = logSoftmax;
},{"../gradients":"VR5t","../tensor_util_env":"y4X4","./cast":"qnzc","./exp":"xcz4","./log":"f3PH","./max":"KIVY","./mul":"tBJ4","./operation":"uE86","./sub":"SgzI","./sum":"kc8w"}],"mPwf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.axesAreInnerMostDims = axesAreInnerMostDims;
exports.combineLocations = combineLocations;
exports.computeOutAndReduceShapes = computeOutAndReduceShapes;
exports.expandShapeToKeepDim = expandShapeToKeepDim;
exports.assertAxesAreInnerMostDims = assertAxesAreInnerMostDims;
exports.getAxesPermutation = getAxesPermutation;
exports.getUndoAxesPermutation = getUndoAxesPermutation;
exports.getInnerMostAxes = getInnerMostAxes;

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns true if the axis specifies the inner most dimensions of the
 * array.
 */
function axesAreInnerMostDims(axes, rank) {
  for (let i = 0; i < axes.length; ++i) {
    if (axes[axes.length - i - 1] !== rank - 1 - i) {
      return false;
    }
  }

  return true;
}

function combineLocations(outputLoc, reduceLoc, axes) {
  const rank = outputLoc.length + reduceLoc.length;
  const loc = [];
  let outIdx = 0;
  let reduceIdx = 0;

  for (let dim = 0; dim < rank; dim++) {
    if (axes.indexOf(dim) === -1) {
      loc.push(outputLoc[outIdx++]);
    } else {
      loc.push(reduceLoc[reduceIdx++]);
    }
  }

  return loc;
}

function computeOutAndReduceShapes(aShape, axes) {
  const outShape = [];
  const rank = aShape.length;

  for (let dim = 0; dim < rank; dim++) {
    if (axes.indexOf(dim) === -1) {
      outShape.push(aShape[dim]);
    }
  }

  const reduceShape = axes.map(dim => aShape[dim]);
  return [outShape, reduceShape];
}

function expandShapeToKeepDim(shape, axes) {
  const reduceSubShape = axes.map(x => 1);
  return combineLocations(shape, reduceSubShape, axes);
}

function assertAxesAreInnerMostDims(msg, axes, rank) {
  util.assert(axesAreInnerMostDims(axes, rank), () => `${msg} supports only inner-most axes for now. ` + `Got axes ${axes} and rank-${rank} input.`);
}
/**
 * Returns the axes permutation to be used with `tf.transpose`, if such
 * permutation is necessary. Otherwise it returns null. This method is used by
 * operations that operate only on inner-most axes.
 */


function getAxesPermutation(axes, rank) {
  if (axesAreInnerMostDims(axes, rank)) {
    return null;
  }

  const result = [];

  for (let i = 0; i < rank; ++i) {
    if (axes.indexOf(i) === -1) {
      result.push(i);
    }
  }

  axes.forEach(axis => result.push(axis));
  return result;
}
/** Returns the axes permutation that undoes the original permutation. */


function getUndoAxesPermutation(axes) {
  return axes.map((axis, i) => [i, axis]).sort((a, b) => a[1] - b[1]).map(x => x[0]);
}

function getInnerMostAxes(numAxes, rank) {
  const res = [];

  for (let i = rank - numAxes; i < rank; ++i) {
    res.push(i);
  }

  return res;
}
},{"../util":"XXxQ"}],"te98":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logSumExp = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _add = require("./add");

var _axis_util = require("./axis_util");

var _exp = require("./exp");

var _log = require("./log");

var _max = require("./max");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _sub = require("./sub");

var _sum = require("./sum");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the log(sum(exp(elements across the reduction dimensions)).
 *
 * Reduces the input along the dimensions given in `axis`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.logSumExp().print();  // or tf.logSumExp(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)
 * ```
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. If null (the default),
 *     reduces all dimensions.
 * @param keepDims If true, retains reduced dimensions with length
 *     of 1. Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function logSumExp_(x, axis = null, keepDims = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'logSumExp');
  const axes = (0, _util.parseAxisParam)(axis, $x.shape);
  const xMax = (0, _max.max)($x, axes, true
  /* keepDims */
  );
  const a = (0, _sub.sub)($x, xMax);
  const b = (0, _exp.exp)(a);
  const c = (0, _sum.sum)(b, axes);
  const d = (0, _log.log)(c);
  const res = (0, _add.add)((0, _reshape.reshape)(xMax, d.shape), d);

  if (keepDims) {
    const newShape = (0, _axis_util.expandShapeToKeepDim)(res.shape, axes);
    return (0, _reshape.reshape)(res, newShape);
  }

  return res;
}

const logSumExp = (0, _operation.op)({
  logSumExp_
});
exports.logSumExp = logSumExp;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./add":"N73o","./axis_util":"mPwf","./exp":"xcz4","./log":"f3PH","./max":"KIVY","./operation":"uE86","./reshape":"F0cm","./sub":"SgzI","./sum":"kc8w"}],"sHir":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logicalAnd = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of `a AND b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalAnd(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalAnd_(a, b) {
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'logicalAnd', 'bool');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'logicalAnd', 'bool');
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.LogicalAnd, inputs);
}

const logicalAnd = (0, _operation.op)({
  logicalAnd_
});
exports.logicalAnd = logicalAnd;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./broadcast_util":"fD2T","./operation":"uE86"}],"jt3a":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logicalNot = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of `NOT x` element-wise.
 *
 * ```js
 * const a = tf.tensor1d([false, true], 'bool');
 *
 * a.logicalNot().print();
 * ```
 *
 * @param x The input tensor. Must be of dtype 'bool'.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalNot_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'logicalNot', 'bool');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.LogicalNot, inputs);
}

const logicalNot = (0, _operation.op)({
  logicalNot_
});
exports.logicalNot = logicalNot;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"cBH6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logicalOr = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of `a OR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalOr(b).print();
 * ```
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalOr_(a, b) {
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'logicalOr', 'bool');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'logicalOr', 'bool');
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.LogicalOr, inputs);
}

const logicalOr = (0, _operation.op)({
  logicalOr_
});
exports.logicalOr = logicalOr;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./broadcast_util":"fD2T","./operation":"uE86"}],"RGME":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logicalXor = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _logical_and = require("./logical_and");

var _logical_not = require("./logical_not");

var _logical_or = require("./logical_or");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalXor(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalXor_(a, b) {
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'logicalXor', 'bool');
  const $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'logicalXor', 'bool');
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape); // x ^ y = (x | y) & ~(x & y)

  return (0, _logical_and.logicalAnd)((0, _logical_or.logicalOr)(a, b), (0, _logical_not.logicalNot)((0, _logical_and.logicalAnd)(a, b)));
}

const logicalXor = (0, _operation.op)({
  logicalXor_
});
exports.logicalXor = logicalXor;
},{"../tensor_util_env":"y4X4","./broadcast_util":"fD2T","./logical_and":"sHir","./logical_not":"jt3a","./logical_or":"cBH6","./operation":"uE86"}],"g3Dm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPool = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the 2D max pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function maxPool_(x, filterSize, strides, pad, dimRoundingMode) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'maxPool');
  const dilations = 1;
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);
  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in maxPool: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const inputs = {
    x: x4D
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const res = _engine.ENGINE.runKernel(_kernel_names.MaxPool, inputs, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const maxPool = (0, _operation.op)({
  maxPool_
});
exports.maxPool = maxPool;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./conv_util":"PhWH","./operation":"uE86","./reshape":"F0cm"}],"Z3LC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPool3d = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the 3D max pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.maxPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function maxPool3d_(x, filterSize = [1, 1, 1], strides, pad, dimRoundingMode, dataFormat = 'NDHWC') {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'maxPool3d');
  let x5D = $x;
  let reshapedTo5D = false;

  if ($x.rank === 4) {
    reshapedTo5D = true;
    x5D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
  }

  util.assert(x5D.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
  util.assert(dataFormat === 'NDHWC', () => `Error in maxPool3d: Only NDHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in maxPool3d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const inputs = {
    x: x5D
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    dimRoundingMode,
    dataFormat
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const res = _engine.ENGINE.runKernel(_kernel_names.MaxPool3D, inputs, attrs);

  if (reshapedTo5D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
  }

  return res;
}

const maxPool3d = (0, _operation.op)({
  maxPool3d_
});
exports.maxPool3d = maxPool3d;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86","./reshape":"F0cm"}],"vORB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPoolWithArgmax = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the 2D max pooling of an image with Argmax index.
 * The indices in argmax are flattened, so that a maximum value at position `[b,
 * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if
 * include_batch_in_index is False; `((b * height + y) * width + x) * channels
 * +c` if include_batch_in_index is True.
 *
 * The indices returned are always in `[0, height) x [0, width)` before
 * flattening.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param includeBatchIndex Defaults to False. Whether to include batch
 *    dimension in flattened index of argmax.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function maxPoolWithArgmax_(x, filterSize, strides, pad, includeBatchInIndex = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'maxPoolWithArgmax');
  const inputs = {
    x: $x
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    includeBatchInIndex
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const result = _engine.ENGINE.runKernel(_kernel_names.MaxPoolWithArgmax, inputs, attrs);

  return {
    result: result[0],
    indexes: result[1]
  };
}

const maxPoolWithArgmax = (0, _operation.op)({
  maxPoolWithArgmax_
});
exports.maxPoolWithArgmax = maxPoolWithArgmax;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"E33m":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maximum = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _cast = require("./cast");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the max of a and b (`a > b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `tf.maximumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * ```js
 * // Broadcast maximum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function maximum_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'maximum');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'maximum');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);

  if ($a.dtype === 'bool') {
    $a = (0, _cast.cast)($a, 'int32');
    $b = (0, _cast.cast)($b, 'int32');
  }

  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.Maximum, inputs);
}

const maximum = (0, _operation.op)({
  maximum_
});
exports.maximum = maximum;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./broadcast_util":"fD2T","./cast":"qnzc","./operation":"uE86"}],"DIOh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mean = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the mean of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is
 * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with
 * a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.mean().print();  // or tf.mean(a)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.mean(axis).print();  // or tf.mean(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function mean_(x, axis = null, keepDims = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'mean');
  const inputs = {
    x: $x
  };
  const attrs = {
    axis,
    keepDims
  };
  return _engine.ENGINE.runKernel(_kernel_names.Mean, inputs, attrs);
}

const mean = (0, _operation.op)({
  mean_
});
exports.mean = mean;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"AsfN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zeros = zeros;

var _engine = require("../engine");

var _util = require("../util");

var _complex = require("./complex");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with all elements set to 0.
 *
 * ```js
 * tf.zeros([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Can
 *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function zeros(shape, dtype = 'float32') {
  if (dtype === 'complex64') {
    const real = zeros(shape, 'float32');
    const imag = zeros(shape, 'float32');
    return (0, _complex.complex)(real, imag);
  }

  const values = (0, _util.makeZerosTypedArray)((0, _util.sizeFromShape)(shape), dtype);
  return _engine.ENGINE.makeTensor(values, shape, dtype);
}
},{"../engine":"phT7","../util":"XXxQ","./complex":"e4je"}],"iY3A":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ones = ones;

var _engine = require("../engine");

var _util = require("../util");

var _complex = require("./complex");

var _zeros = require("./zeros");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with all elements set to 1.
 *
 * ```js
 * tf.ones([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 *     'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function ones(shape, dtype = 'float32') {
  if (dtype === 'complex64') {
    const real = ones(shape, 'float32');
    const imag = (0, _zeros.zeros)(shape, 'float32');
    return (0, _complex.complex)(real, imag);
  }

  const values = (0, _util.makeOnesTypedArray)((0, _util.sizeFromShape)(shape), dtype);
  return _engine.ENGINE.makeTensor(values, shape, dtype);
}
},{"../engine":"phT7","../util":"XXxQ","./complex":"e4je","./zeros":"AsfN"}],"OeUD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.meshgrid = meshgrid;

var _mat_mul = require("./mat_mul");

var _ones = require("./ones");

var _reshape = require("./reshape");

var _tensor = require("../tensor");

var _tensor_util_env = require("../tensor_util_env");

var _util_base = require("../util_base");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Broadcasts parameters for evaluation on an N-D grid.
 *
 * Given N one-dimensional coordinate arrays `*args`, returns a list `outputs`
 * of N-D coordinate arrays for evaluating expressions on an N-D grid.
 *
 * Notes:
 * `meshgrid` supports cartesian ('xy') and matrix ('ij') indexing conventions.
 * When the `indexing` argument is set to 'xy' (the default), the broadcasting
 * instructions for the first two dimensions are swapped.
 * Examples:
 * Calling `const [X, Y] = meshgrid(x, y)` with the tensors
 *
 * ```javascript
 * const x = [1, 2, 3];
 * const y = [4, 5, 6];
 * const [X, Y] = tf.meshgrid(x, y);
 * // X = [[1, 2, 3],
 * //      [1, 2, 3],
 * //      [1, 2, 3]]
 * // Y = [[4, 4, 4],
 * //      [5, 5, 5],
 * //      [6, 6, 6]]
 * ```
 *
 * @param x Tensor with rank geq 1.
 * @param y Tensor with rank geq 1.
 * @param indexing
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */
function meshgrid(x, y, {
  indexing = 'xy'
} = {}) {
  if (indexing !== 'xy' && indexing !== 'ij') {
    throw new TypeError(`${indexing} is not a valid third argument to meshgrid`);
  }

  if (x === undefined) {
    return [];
  }

  let $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'meshgrid', x instanceof _tensor.Tensor ? x.dtype : 'float32');

  if (y === undefined) {
    return [$x];
  }

  let $y = (0, _tensor_util_env.convertToTensor)(y, 'y', 'meshgrid', y instanceof _tensor.Tensor ? y.dtype : 'float32');
  const w = (0, _util_base.sizeFromShape)($x.shape);
  const h = (0, _util_base.sizeFromShape)($y.shape);

  if (indexing === 'xy') {
    $x = (0, _reshape.reshape)($x, [1, -1]);
    $y = (0, _reshape.reshape)($y, [-1, 1]);
    return [(0, _mat_mul.matMul)((0, _ones.ones)([h, 1], $x.dtype), $x), (0, _mat_mul.matMul)($y, (0, _ones.ones)([1, w], $y.dtype))];
  }

  $x = (0, _reshape.reshape)($x, [-1, 1]);
  $y = (0, _reshape.reshape)($y, [1, -1]);
  return [(0, _mat_mul.matMul)($x, (0, _ones.ones)([1, h], $x.dtype)), (0, _mat_mul.matMul)((0, _ones.ones)([w, 1], $y.dtype), $y)];
}
},{"./mat_mul":"zVDr","./ones":"iY3A","./reshape":"F0cm","../tensor":"eFW4","../tensor_util_env":"y4X4","../util_base":"uID4"}],"pkmC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.min = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the minimum value from the input.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axes`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axes` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.min().print();  // or tf.min(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.min(axis).print();  // or tf.min(x, axis)
 * ```
 *
 * @param x The input Tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function min_(x, axis = null, keepDims = false) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'min');
  const inputs = {
    x: $x
  };
  const attrs = {
    axis,
    keepDims
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  return _engine.ENGINE.runKernel(_kernel_names.Min, inputs, attrs);
}

const min = (0, _operation.op)({
  min_
});
exports.min = min;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"TKku":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minimum = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _cast = require("./cast");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the min of a and b (`a < b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `minimumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * ```js
 * // Broadcast minimum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function minimum_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'minimum');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'minimum');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);

  if ($a.dtype === 'bool') {
    $a = (0, _cast.cast)($a, 'int32');
    $b = (0, _cast.cast)($b, 'int32');
  }

  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.Minimum, inputs);
}

const minimum = (0, _operation.op)({
  minimum_
});
exports.minimum = minimum;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./broadcast_util":"fD2T","./cast":"qnzc","./operation":"uE86"}],"y7Tc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mirrorPad = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Pads a `tf.Tensor` using mirror padding.
 *
 * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.
 *
 * ```js
 * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);
 * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();
 * ```
 * @param x The tensor to pad.
 * @param paddings An array of length `R` (the rank of the tensor), where
 * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
 * specifying how much to pad along each dimension of the tensor.
 * In "reflect" mode, the padded regions do not include the borders,
 * while in "symmetric" mode the padded regions do include the borders.
 * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,
 * then the output is `[1, 2, 3, 2, 1]` in "reflect" mode, and
 * `[1, 2, 3, 3, 2]` in "symmetric" mode.
 * If `mode` is "reflect" then both `paddings[D, 0]` and `paddings[D, 1]`
 * must be no greater than `x.shape[D] - 1`. If mode is "symmetric"
 * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than
 * `x.shape[D]`
 * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`
 */

/** @doc {heading: 'Tensors', subheading: 'Transformations'} */
function mirrorPad_(x, paddings, mode) {
  util.assert(mode === 'reflect' || mode === 'symmetric', () => `Invalid mode. Mode must be either reflect or symmetric. ` + `Got ${mode}.`);
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'mirrorPad');

  if ($x.rank === 0) {
    throw new Error('mirrorPad(scalar) is not defined. ' + 'Pass non-scalar to mirrorPad');
  }

  util.assert(paddings.length === $x.rank, () => `Padding doesn't match input. Must be ${$x.rank}. ` + `Got ${paddings.length}.`);
  const shapeOffset = mode === 'reflect' ? 1 : 0;

  for (let i = 0; i < $x.rank; i++) {
    util.assert(paddings[i].length === 2, () => `Invalid number of paddings. Must be length of 2 each.`);
    util.assert(paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset && paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset, () => `Padding in dimension ${i} cannot be greater than or equal ` + `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` + `shape ${$x.shape}`);
  }

  const attrs = {
    paddings,
    mode
  };
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.MirrorPad, inputs, attrs);
}

const mirrorPad = (0, _operation.op)({
  mirrorPad_
});
exports.mirrorPad = mirrorPad;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"cyrT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mod = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the mod of a and b element-wise.
 * `floor(x / y) * y + mod(x, y) = x`
 * Supports broadcasting.
 *
 * We also expose `tf.modStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * ```js
 * // Broadcast a mod b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function mod_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'mod');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'mod');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.Mod, inputs);
}

const mod = (0, _operation.op)({
  mod_
});
exports.mod = mod;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./operation":"uE86"}],"KiGo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.square = void 0;

var _engine = require("../engine");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes square of `x` element-wise: `x ^ 2`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);
 *
 * x.square().print();  // or tf.square(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function square_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'square');
  const attrs = {};
  return _engine.ENGINE.runKernel('Square', {
    x: $x
  }, attrs);
}

const square = (0, _operation.op)({
  square_
});
exports.square = square;
},{"../engine":"phT7","../tensor_util_env":"y4X4","./operation":"uE86"}],"xfMn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.moments = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _axis_util = require("./axis_util");

var _cast = require("./cast");

var _mean = require("./mean");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _square = require("./square");

var _sub = require("./sub");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Calculates the mean and variance of `x`. The mean and variance are
 * calculated by aggregating the contents of `x` across `axes`. If `x` is
 * 1-D and `axes = [0]` this is just the mean and variance of a vector.
 *
 * @param x The input tensor.
 * @param axis The dimension(s) along with to compute mean and
 *     variance. By default it reduces all dimensions.
 * @param keepDims If true, the moments have the same dimensionality as the
 *     input.
 * @return An object with two keys: `mean` and `variance`.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function moments_(x, axis = null, keepDims = false) {
  x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'moments');
  const axes = (0, _util.parseAxisParam)(axis, x.shape);
  const xMean = (0, _mean.mean)(x, axes, keepDims);
  let keepDimsShape = xMean.shape;

  if (!keepDims) {
    keepDimsShape = (0, _axis_util.expandShapeToKeepDim)(xMean.shape, axes);
  }

  const devSquared = (0, _square.square)((0, _sub.sub)((0, _cast.cast)(x, 'float32'), (0, _reshape.reshape)(xMean, keepDimsShape)));
  const variance = (0, _mean.mean)(devSquared, axes, keepDims);
  return {
    mean: xMean,
    variance
  };
}

const moments = (0, _operation.op)({
  moments_
});
exports.moments = moments;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./axis_util":"mPwf","./cast":"qnzc","./mean":"DIOh","./operation":"uE86","./reshape":"F0cm","./square":"KiGo","./sub":"SgzI"}],"C2RS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiRNNCell = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * Computes the next states and outputs of a stack of LSTMCells.
 *
 * Each cell output is used as input to the next cell.
 *
 * Returns `[cellState, cellOutput]`.
 *
 * Derived from tf.contrib.rn.MultiRNNCell.
 *
 * @param lstmCells Array of LSTMCell functions.
 * @param data The input to the cell.
 * @param c Array of previous cell states.
 * @param h Array of previous cell outputs.
 *
 * @doc {heading: 'Operations', subheading: 'RNN'}
 */
function multiRNNCell_(lstmCells, data, c, h) {
  const $data = (0, _tensor_util_env.convertToTensor)(data, 'data', 'multiRNNCell');
  const $c = (0, _tensor_util_env.convertToTensorArray)(c, 'c', 'multiRNNCell');
  const $h = (0, _tensor_util_env.convertToTensorArray)(h, 'h', 'multiRNNCell');
  let input = $data;
  const newStates = [];

  for (let i = 0; i < lstmCells.length; i++) {
    const output = lstmCells[i](input, $c[i], $h[i]);
    newStates.push(output[0]);
    newStates.push(output[1]);
    input = output[1];
  }

  const newC = [];
  const newH = [];

  for (let i = 0; i < newStates.length; i += 2) {
    newC.push(newStates[i]);
    newH.push(newStates[i + 1]);
  }

  return [newC, newH];
}

const multiRNNCell = (0, _operation.op)({
  multiRNNCell_
});
exports.multiRNNCell = multiRNNCell;
},{"../tensor_util_env":"y4X4","./operation":"uE86"}],"moMD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multinomial = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

var _reshape = require("./reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with values drawn from a multinomial distribution.
 *
 * ```js
 * const probs = tf.tensor([.75, .25]);
 * tf.multinomial(probs, 3).print();
 * ```
 *
 * @param logits 1D array with unnormalized log-probabilities, or
 *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`
 *     parameter.
 * @param numSamples Number of samples to draw for each row slice.
 * @param seed The seed number.
 * @param normalized Whether the provided `logits` are normalized true
 *     probabilities (sum to 1). Defaults to false.
 * @return 1D array of shape `[numSamples]`, or 2D array of shape
 *     `[batchSize, numSamples]`, depending on the rank of the input.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function multinomial_(logits, numSamples, seed, normalized = false) {
  const $logits = (0, _tensor_util_env.convertToTensor)(logits, 'logits', 'multinomial');
  const numOutcomes = $logits.size;
  const origRank = $logits.rank;

  if (numOutcomes < 2) {
    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` + `${numOutcomes}.`);
  }

  if (origRank > 2) {
    throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);
  } // TODO(lina128): Investigate correct seed behavior. The code seems not allow
  // setting see to 0.


  seed = seed || Math.random(); // The kernel only accepts (and returns) rank 2 tensors.

  const logits2D = origRank === 1 ? (0, _reshape.reshape)($logits, [1, -1]) : $logits;
  const inputs = {
    logits: logits2D
  };
  const attrs = {
    numSamples,
    seed,
    normalized
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const res = _engine.ENGINE.runKernel(_kernel_names.Multinomial, inputs, attrs); // tslint:disable-next-line:no-unnecessary-type-assertion


  return origRank === 1 ? (0, _reshape.reshape)(res, [res.size]) : res;
}

const multinomial = (0, _operation.op)({
  multinomial_
});
exports.multinomial = multinomial;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86","./reshape":"F0cm"}],"TOzH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.notEqual = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the truth value of (a != b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([0, 2, 3]);
 *
 * a.notEqual(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function notEqual_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'notEqual', 'string_or_numeric');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'notEqual', 'string_or_numeric');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const inputs = {
    a: $a,
    b: $b
  };
  return _engine.ENGINE.runKernel(_kernel_names.NotEqual, inputs);
}

const notEqual = (0, _operation.op)({
  notEqual_
});
exports.notEqual = notEqual;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./broadcast_util":"fD2T","./operation":"uE86"}],"nMI9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onesLike = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.onesLike(x).print();
 * ```
 * @param x A tensor.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function onesLike_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'onesLike');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.OnesLike, inputs);
}

const onesLike = (0, _operation.op)({
  onesLike_
});
exports.onesLike = onesLike;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"mAdl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.outerProduct = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _mat_mul = require("./mat_mul");

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Computes the outer product of two vectors, `v1` and `v2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([3, 4, 5]);
 *
 * tf.outerProduct(a, b).print();
 * ```
 * @param v1 The first vector in the outer product operation.
 * @param v2 The second vector in the outer product operation.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function outerProduct_(v1, v2) {
  const $v1 = (0, _tensor_util_env.convertToTensor)(v1, 'v1', 'outerProduct');
  const $v2 = (0, _tensor_util_env.convertToTensor)(v2, 'v2', 'outerProduct');
  util.assert($v1.rank === 1 && $v2.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ` + `${$v1.rank} and ${$v2.rank}.`);
  const v12D = (0, _reshape.reshape)($v1, [-1, 1]);
  const v22D = (0, _reshape.reshape)($v2, [1, -1]);
  return (0, _mat_mul.matMul)(v12D, v22D);
}

const outerProduct = (0, _operation.op)({
  outerProduct_
});
exports.outerProduct = outerProduct;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./mat_mul":"zVDr","./operation":"uE86","./reshape":"F0cm"}],"y7nM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pad = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Pads a `tf.Tensor` with a given value and paddings.
 *
 * This operation implements `CONSTANT` mode. For `REFLECT` and `SYMMETRIC`,
 * refer to `tf.mirrorPad`
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `paddings` is of given length.
 *   - `tf.pad1d`
 *   - `tf.pad2d`
 *   - `tf.pad3d`
 *   - `tf.pad4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.pad([[1, 2]]).print();
 * ```
 * @param x The tensor to pad.
 * @param paddings An array of length `R` (the rank of the tensor), where
 * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
 * specifying how much to pad along each dimension of the tensor.
 * @param constantValue The pad value to use. Defaults to 0.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function pad_(x, paddings, constantValue = 0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'pad');

  if ($x.rank === 0) {
    throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');
  }

  const attrs = {
    paddings,
    constantValue
  };
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.PadV2, inputs, attrs);
}

const pad = (0, _operation.op)({
  pad_
});
exports.pad = pad;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"c4D8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pad1d = void 0;

var _util = require("../util");

var _operation = require("./operation");

var _pad = require("./pad");

/**
 * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.
 */
function pad1d_(x, paddings, constantValue = 0) {
  (0, _util.assert)(paddings.length === 2, () => 'Invalid number of paddings. Must be length of 2.');
  return (0, _pad.pad)(x, [paddings], constantValue);
}

const pad1d = (0, _operation.op)({
  pad1d_
});
exports.pad1d = pad1d;
},{"../util":"XXxQ","./operation":"uE86","./pad":"y7nM"}],"Zzwk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pad2d = void 0;

var _util = require("../util");

var _operation = require("./operation");

var _pad = require("./pad");

/**
 * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.
 */
function pad2d_(x, paddings, constantValue = 0) {
  (0, _util.assert)(paddings.length === 2 && paddings[0].length === 2 && paddings[1].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
  return (0, _pad.pad)(x, paddings, constantValue);
}

const pad2d = (0, _operation.op)({
  pad2d_
});
exports.pad2d = pad2d;
},{"../util":"XXxQ","./operation":"uE86","./pad":"y7nM"}],"DYJf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pad3d = void 0;

var _util = require("../util");

var _operation = require("./operation");

var _pad = require("./pad");

/**
 * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.
 */
function pad3d_(x, paddings, constantValue = 0) {
  (0, _util.assert)(paddings.length === 3 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
  return (0, _pad.pad)(x, paddings, constantValue);
}

const pad3d = (0, _operation.op)({
  pad3d_
});
exports.pad3d = pad3d;
},{"../util":"XXxQ","./operation":"uE86","./pad":"y7nM"}],"k9sb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pad4d = void 0;

var _util = require("../util");

var _operation = require("./operation");

var _pad = require("./pad");

/**
 * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.
 */
function pad4d_(x, paddings, constantValue = 0) {
  (0, _util.assert)(paddings.length === 4 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2 && paddings[3].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
  return (0, _pad.pad)(x, paddings, constantValue);
}

const pad4d = (0, _operation.op)({
  pad4d_
});
exports.pad4d = pad4d;
},{"../util":"XXxQ","./operation":"uE86","./pad":"y7nM"}],"ERrS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spaceToBatchND = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * This operation divides "spatial" dimensions `[1, ..., M]` of the input into
 * a grid of blocks of shape `blockShape`, and interleaves these blocks with
 * the "batch" dimension (0) such that in the output, the spatial
 * dimensions `[1, ..., M]` correspond to the position within the grid,
 * and the batch dimension combines both the position within a spatial block
 * and the original batch position. Prior to division into blocks,
 * the spatial dimensions of the input are optionally zero padded
 * according to `paddings`. See below for a precise description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);
 * const blockShape = [2, 2];
 * const paddings = [[0, 0], [0, 0]];
 *
 * x.spaceToBatchND(blockShape, paddings).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=
 *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad
 * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It
 * is required that
 * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input
 * according to `paddings` to produce `padded` of shape paddedShape.
 *
 * 2. Reshape `padded` to `reshapedPadded` of shape:
 * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`
 *
 * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`
 * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 *
 * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the
 * batch dimension, producing an output tensor of shape:
 * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function spaceToBatchND_(x, blockShape, paddings) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'spaceToBatchND');
  util.assert($x.rank >= 1 + blockShape.length, () => `input rank ${$x.rank} should be > than [blockShape] ${blockShape.length}`);
  util.assert(paddings.length === blockShape.length, () => `paddings.shape[0] ${paddings.length} must be equal to [blockShape] ${blockShape.length}`);
  util.assert($x.shape.reduce((a, b, i) => {
    if (i > 0 && i <= blockShape.length) {
      return a && (b + paddings[i - 1][0] + paddings[i - 1][1]) % blockShape[i - 1] === 0;
    }

    return a;
  }, true), () => `input spatial dimensions ${$x.shape.slice(1)} with paddings ${paddings.toString()} must be divisible by blockShapes ${blockShape.toString()}`);
  const inputs = {
    x: $x
  };
  const attrs = {
    blockShape,
    paddings
  };
  return _engine.ENGINE.runKernel(_kernel_names.SpaceToBatchND, inputs, attrs);
}

const spaceToBatchND = (0, _operation.op)({
  spaceToBatchND_
});
exports.spaceToBatchND = spaceToBatchND;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"Zp2S":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pool = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _avg_pool = require("./avg_pool");

var _batch_to_space_nd = require("./batch_to_space_nd");

var conv_util = _interopRequireWildcard(require("./conv_util"));

var _max_pool = require("./max_pool");

var _operation = require("./operation");

var _reshape = require("./reshape");

var _space_to_batch_nd = require("./space_to_batch_nd");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Performs an N-D pooling operation
 *
 * @param input The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param windowShape The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param poolingType The type of pooling, either 'max' or 'avg'.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function pool_(input, windowShape, poolingType, pad, dilations, strides) {
  if (dilations == null) {
    dilations = [1, 1];
  }

  if (strides == null) {
    strides = 1;
  }

  if (pad === 0) {
    pad = 'valid';
  }

  const $x = (0, _tensor_util_env.convertToTensor)(input, 'x', 'maxPool');
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in pool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
  const convInfo = conv_util.computePool2DInfo(x4D.shape, windowShape, strides, dilations, pad);
  const dilation = [convInfo.dilationHeight, convInfo.dilationWidth]; // The following implementation does batchToSpace(pool(spaceToBatch(x)))
  // whenever dilation > 1 since the TF kernels do not support dilation > 1.
  // tslint:disable-next-line:max-line-length
  // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037

  let basePadding;

  if (pad === 'same') {
    basePadding = withSpaceToBatchBasePaddings([convInfo.filterHeight, convInfo.filterWidth], dilation);
  } else {
    basePadding = [[0, 0], [0, 0]];
  }

  const isDilationOne = dilation[0] === 1 && dilation[1] === 1;
  const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings([convInfo.inHeight, convInfo.inWidth], dilation, basePadding);
  const convertedPad = isDilationOne ? pad : 'valid';
  const convertedX = isDilationOne ? x4D : (0, _space_to_batch_nd.spaceToBatchND)(x4D, dilation, adjustedPadding);
  const forwardOp = poolingType === 'avg' ? () => (0, _avg_pool.avgPool)(convertedX, windowShape, strides, convertedPad) : () => (0, _max_pool.maxPool)(convertedX, windowShape, strides, convertedPad);
  const y = forwardOp();
  const res = isDilationOne ? y : (0, _batch_to_space_nd.batchToSpaceND)(y, dilation, adjustedCrops);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
} // Helper function to compute crops and paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184


function requiredSpaceToBatchPaddings(inputShape, blockShape, basePadding) {
  const padStart = basePadding.map(b => b[0]);
  const origPadEnd = basePadding.map(b => b[1]);
  const fullInputShape = inputShape.concat(padStart, origPadEnd);
  const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);
  const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);
  const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);
  const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);
  return [paddings, crops];
} // Helper function to compute base paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524


function withSpaceToBatchBasePaddings(filterShape, dilation) {
  // Spatial dimensions of the filters and the upsampled filters in which we
  // introduce (rate - 1) zeros between consecutive filter values.
  const dilatedFilterShape = filterShape.map((s, i) => {
    return s + (s - 1) * (dilation[i] - 1);
  });
  const padExtraShape = dilatedFilterShape.map(s => s - 1); // When padding is odd, we pad more at end, following the same
  // convention as conv2d.

  const padExtraStart = padExtraShape.map(s => Math.floor(s / 2));
  const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);
  return padExtraShape.map((_, i) => {
    return [padExtraStart[i], padExtraEnd[i]];
  });
}

const pool = (0, _operation.op)({
  pool_
});
exports.pool = pool;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./avg_pool":"LNDu","./batch_to_space_nd":"vEiD","./conv_util":"PhWH","./max_pool":"g3Dm","./operation":"uE86","./reshape":"F0cm","./space_to_batch_nd":"ERrS"}],"o2Kl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pow = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the power of one `tf.Tensor` to another. Supports broadcasting.
 *
 * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for
 * corresponding elements in x and y. The result's dtype will be the upcasted
 * type of the `base` and `exp` dtypes.
 *
 * ```js
 * const a = tf.tensor([[2, 3], [4, 5]])
 * const b = tf.tensor([[1, 2], [3, 0]]).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 *
 * ```js
 * const a = tf.tensor([[1, 2], [3, 4]])
 * const b = tf.tensor(2).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 * We also expose `powStrict` which has the same signature as this op and
 * asserts that `base` and `exp` are the same shape (does not broadcast).
 *
 * @param base The base `tf.Tensor` to pow element-wise.
 * @param exp The exponent `tf.Tensor` to pow element-wise.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function pow_(base, exp) {
  let $base = (0, _tensor_util_env.convertToTensor)(base, 'base', 'pow');
  let $exp = (0, _tensor_util_env.convertToTensor)(exp, 'exp', 'pow');
  [$base, $exp] = (0, _tensor_util.makeTypesMatch)($base, $exp);
  const inputs = {
    a: $base,
    b: $exp
  };
  return _engine.ENGINE.runKernel(_kernel_names.Pow, inputs);
}

const pow = (0, _operation.op)({
  pow_
});
exports.pow = pow;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./operation":"uE86"}],"Xs9q":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prelu = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes leaky rectified linear element-wise with parametric alphas.
 *
 * `x < 0 ? alpha * x : f(x) = x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 * const alpha = tf.scalar(0.1);
 *
 * x.prelu(alpha).print();  // or tf.prelu(x, alpha)
 * ```
 * @param x The input tensor.
 * @param alpha Scaling factor for negative values.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function prelu_(x, alpha) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'prelu');
  const $alpha = (0, _tensor_util_env.convertToTensor)(alpha, 'alpha', 'prelu');
  const inputs = {
    x: $x,
    alpha: $alpha
  };
  return _engine.ENGINE.runKernel(_kernel_names.Prelu, inputs);
}

const prelu = (0, _operation.op)({
  prelu_
});
exports.prelu = prelu;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"V8As":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prod = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _cast = require("./cast");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the product of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.prod().print();  // or tf.prod(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.prod(axis).print();  // or tf.prod(x, axis)
 * ```
 *
 * @param x The input tensor to compute the product over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function prod_(x, axis = null, keepDims = false) {
  let $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'prod');

  if ($x.dtype === 'bool') {
    // bool is not an allowed type for the underlying kernel.
    $x = (0, _cast.cast)($x, 'int32');
  }

  const inputs = {
    x: $x
  };
  const attrs = {
    axis,
    keepDims
  };
  return _engine.ENGINE.runKernel(_kernel_names.Prod, inputs, attrs);
}

const prod = (0, _operation.op)({
  prod_
});
exports.prod = prod;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./cast":"qnzc","./operation":"uE86"}],"DOKZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rand = void 0;

var _engine = require("../engine");

var _util = require("../util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with values sampled from a random number generator
 * function defined by the user.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param randFunction A random number generator function which is called
 * for each element in the output tensor.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function rand_(shape, randFunction, dtype) {
  const size = (0, _util.sizeFromShape)(shape);
  let values = null;

  if (dtype == null || dtype === 'float32') {
    values = new Float32Array(size);
  } else if (dtype === 'int32') {
    values = new Int32Array(size);
  } else if (dtype === 'bool') {
    values = new Uint8Array(size);
  } else {
    throw new Error(`Unknown data type ${dtype}`);
  }

  for (let i = 0; i < size; i++) {
    values[i] = randFunction();
  }

  return _engine.ENGINE.makeTensor(values, shape, dtype);
}

const rand = (0, _operation.op)({
  rand_
});
exports.rand = rand;
},{"../engine":"phT7","../util":"XXxQ","./operation":"uE86"}],"SSZJ":[function(require,module,exports) {
var define;
// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -

// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



(function(global, module, define) {

function Alea(seed) {
  var me = this, mash = Mash();

  me.next = function() {
    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
    me.s0 = me.s1;
    me.s1 = me.s2;
    return me.s2 = t - (me.c = t | 0);
  };

  // Apply the seeding algorithm from Baagoe.
  me.c = 1;
  me.s0 = mash(' ');
  me.s1 = mash(' ');
  me.s2 = mash(' ');
  me.s0 -= mash(seed);
  if (me.s0 < 0) { me.s0 += 1; }
  me.s1 -= mash(seed);
  if (me.s1 < 0) { me.s1 += 1; }
  me.s2 -= mash(seed);
  if (me.s2 < 0) { me.s2 += 1; }
  mash = null;
}

function copy(f, t) {
  t.c = f.c;
  t.s0 = f.s0;
  t.s1 = f.s1;
  t.s2 = f.s2;
  return t;
}

function impl(seed, opts) {
  var xg = new Alea(seed),
      state = opts && opts.state,
      prng = xg.next;
  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }
  prng.double = function() {
    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
  };
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

function Mash() {
  var n = 0xefc8249d;

  var mash = function(data) {
    data = data.toString();
    for (var i = 0; i < data.length; i++) {
      n += data.charCodeAt(i);
      var h = 0.02519603282416938 * n;
      n = h >>> 0;
      h -= n;
      h *= n;
      n = h >>> 0;
      h -= n;
      n += h * 0x100000000; // 2^32
    }
    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
  };

  return mash;
}


if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.alea = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"C6rM":[function(require,module,exports) {
var define;
// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;

  // Set up generator function.
  me.next = function() {
    var t = me.x ^ (me.x << 11);
    me.x = me.y;
    me.y = me.z;
    me.z = me.w;
    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
  };

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor128 = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"kkTl":[function(require,module,exports) {
var define;
// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var t = (me.x ^ (me.x >>> 2));
    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
    return (me.d = (me.d + 362437 | 0)) +
       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
  };

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;
  me.v = 0;

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    if (k == strseed.length) {
      me.d = me.x << 10 ^ me.x >>> 4;
    }
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  t.v = f.v;
  t.d = f.d;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorwow = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"rUyN":[function(require,module,exports) {
var define;
// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    // Update xor generator.
    var X = me.x, i = me.i, t, v, w;
    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
    X[i] = v;
    me.i = (i + 1) & 7;
    return v;
  };

  function init(me, seed) {
    var j, w, X = [];

    if (seed === (seed | 0)) {
      // Seed state array using a 32-bit integer.
      w = X[0] = seed;
    } else {
      // Seed state using a string.
      seed = '' + seed;
      for (j = 0; j < seed.length; ++j) {
        X[j & 7] = (X[j & 7] << 15) ^
            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
      }
    }
    // Enforce an array length of 8, not all zeroes.
    while (X.length < 8) X.push(0);
    for (j = 0; j < 8 && X[j] === 0; ++j);
    if (j == 8) w = X[7] = -1; else w = X[j];

    me.x = X;
    me.i = 0;

    // Discard an initial 256 values.
    for (j = 256; j > 0; --j) {
      me.next();
    }
  }

  init(me, seed);
}

function copy(f, t) {
  t.x = f.x.slice();
  t.i = f.i;
  return t;
}

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.x) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorshift7 = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);


},{}],"nNkA":[function(require,module,exports) {
var define;
// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1004.3115v1.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    var w = me.w,
        X = me.X, i = me.i, t, v;
    // Update Weyl generator.
    me.w = w = (w + 0x61c88647) | 0;
    // Update xor generator.
    v = X[(i + 34) & 127];
    t = X[i = ((i + 1) & 127)];
    v ^= v << 13;
    t ^= t << 17;
    v ^= v >>> 15;
    t ^= t >>> 12;
    // Update Xor generator array state.
    v = X[i] = v ^ t;
    me.i = i;
    // Result is the combination.
    return (v + (w ^ (w >>> 16))) | 0;
  };

  function init(me, seed) {
    var t, v, i, j, w, X = [], limit = 128;
    if (seed === (seed | 0)) {
      // Numeric seeds initialize v, which is used to generates X.
      v = seed;
      seed = null;
    } else {
      // String seeds are mixed into v and X one character at a time.
      seed = seed + '\0';
      v = 0;
      limit = Math.max(limit, seed.length);
    }
    // Initialize circular array and weyl value.
    for (i = 0, j = -32; j < limit; ++j) {
      // Put the unicode characters into the array, and shuffle them.
      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
      // After 32 shuffles, take v as the starting w value.
      if (j === 0) w = v;
      v ^= v << 10;
      v ^= v >>> 15;
      v ^= v << 4;
      v ^= v >>> 13;
      if (j >= 0) {
        w = (w + 0x61c88647) | 0;     // Weyl.
        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
        i = (0 == t) ? i + 1 : 0;     // Count zeroes.
      }
    }
    // We have detected all zeroes; make the key nonzero.
    if (i >= 128) {
      X[(seed && seed.length || 0) & 127] = -1;
    }
    // Run the generator 512 times to further mix the state before using it.
    // Factoring this as a function slows the main generator, so it is just
    // unrolled here.  The weyl generator is not advanced while warming up.
    i = 127;
    for (j = 4 * 128; j > 0; --j) {
      v = X[(i + 34) & 127];
      t = X[i = ((i + 1) & 127)];
      v ^= v << 13;
      t ^= t << 17;
      v ^= v >>> 15;
      t ^= t >>> 12;
      X[i] = v ^ t;
    }
    // Storing state as object members is faster than using closure variables.
    me.w = w;
    me.X = X;
    me.i = i;
  }

  init(me, seed);
}

function copy(f, t) {
  t.i = f.i;
  t.w = f.w;
  t.X = f.X.slice();
  return t;
};

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.X) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor4096 = impl;
}

})(
  this,                                     // window object or global
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);

},{}],"gMhV":[function(require,module,exports) {
var define;
// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var b = me.b, c = me.c, d = me.d, a = me.a;
    b = (b << 25) ^ (b >>> 7) ^ c;
    c = (c - d) | 0;
    d = (d << 24) ^ (d >>> 8) ^ a;
    a = (a - b) | 0;
    me.b = b = (b << 20) ^ (b >>> 12) ^ c;
    me.c = c = (c - d) | 0;
    me.d = (d << 16) ^ (c >>> 16) ^ a;
    return me.a = (a - b) | 0;
  };

  /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */

  me.a = 0;
  me.b = 0;
  me.c = 2654435769 | 0;
  me.d = 1367130551;

  if (seed === Math.floor(seed)) {
    // Integer seed.
    me.a = (seed / 0x100000000) | 0;
    me.b = seed | 0;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 20; k++) {
    me.b ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.a = f.a;
  t.b = f.b;
  t.c = f.c;
  t.d = f.d;
  return t;
};

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.tychei = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"YOzy":[function(require,module,exports) {
var global = arguments[3];
var define;
/*
Copyright 2014 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

(function (pool, math) {
//
// The following constants are related to IEEE 754 limits.
//
var global = this,
    width = 256,        // each RC4 output is 0 <= x < 256
    chunks = 6,         // at least six RC4 outputs for each double
    digits = 52,        // there are 52 significant digits in a double
    rngname = 'random', // rngname: name for Math.random and Math.seedrandom
    startdenom = math.pow(width, chunks),
    significance = math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1,
    nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed, options, callback) {
  var key = [];
  options = (options == true) ? { entropy: true } : (options || {});

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    options.entropy ? [seed, tostring(pool)] :
    (seed == null) ? autoseed() : seed, 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.
  var prng = function() {
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  prng.int32 = function() { return arc4.g(4) | 0; }
  prng.quick = function() { return arc4.g(4) / 0x100000000; }
  prng.double = prng;

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Calling convention: what to return as a function of prng, seed, is_math.
  return (options.pass || callback ||
      function(prng, seed, is_math_call, state) {
        if (state) {
          // Load the arc4 state from the given state if it has an S array.
          if (state.S) { copy(state, arc4); }
          // Only provide the .state method if requested via options.state.
          prng.state = function() { return copy(arc4, {}); }
        }

        // If called as a method of Math (Math.seedrandom()), mutate
        // Math.random because that is how seedrandom.js has worked since v1.0.
        if (is_math_call) { math[rngname] = prng; return seed; }

        // Otherwise, it is a newer calling convention, so return the
        // prng directly.
        else return prng;
      })(
  prng,
  shortseed,
  'global' in options ? options.global : (this == math),
  options.state);
}
math['seed' + rngname] = seedrandom;

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability, the function call below automatically
    // discards an initial batch of values.  This is called RC4-drop[256].
    // See http://google.com/search?q=rsa+fluhrer+response&btnI
  })(width);
}

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f, t) {
  t.i = f.i;
  t.j = f.j;
  t.S = f.S.slice();
  return t;
};

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj), prop;
  if (depth && typ == 'object') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 'string' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed() {
  try {
    var out;
    if (nodecrypto && (out = nodecrypto.randomBytes)) {
      // The use of 'out' to remember randomBytes makes tight minified code.
      out = out(width);
    } else {
      out = new Uint8Array(width);
      (global.crypto || global.msCrypto).getRandomValues(out);
    }
    return tostring(out);
  } catch (e) {
    var browser = global.navigator,
        plugins = browser && browser.plugins;
    return [+new Date, global, plugins, global.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if ((typeof module) == 'object' && module.exports) {
  module.exports = seedrandom;
  // When in node.js, try using crypto package for autoseeding.
  try {
    nodecrypto = require('crypto');
  } catch (ex) {}
} else if ((typeof define) == 'function' && define.amd) {
  define(function() { return seedrandom; });
}

// End anonymous scope, and pass initial values.
})(
  [],     // pool: entropy pool starts empty
  Math    // math: package containing random, pow, and seedrandom
);

},{"crypto":"bJdJ"}],"xt2p":[function(require,module,exports) {
// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = require('./lib/alea');

// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = require('./lib/xor128');

// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = require('./lib/xorwow');

// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = require('./lib/xorshift7');

// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = require('./lib/xor4096');

// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = require('./lib/tychei');

// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = require('./seedrandom');

sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;

module.exports = sr;

},{"./lib/alea":"SSZJ","./lib/xor128":"C6rM","./lib/xorwow":"kkTl","./lib/xorshift7":"rUyN","./lib/xor4096":"nNkA","./lib/tychei":"gMhV","./seedrandom":"YOzy"}],"QLYL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jarqueBeraNormalityTest = jarqueBeraNormalityTest;
exports.expectArrayInMeanStdRange = expectArrayInMeanStdRange;
exports.UniformRandom = exports.RandGamma = exports.MPRandGauss = void 0;

var seedrandom = _interopRequireWildcard(require("seedrandom"));

var _test_util = require("../test_util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// https://en.wikipedia.org/wiki/Marsaglia_polar_method
class MPRandGauss {
  constructor(mean, stdDeviation, dtype, truncated, seed) {
    this.mean = mean;
    this.stdDev = stdDeviation;
    this.dtype = dtype;
    this.nextVal = NaN;
    this.truncated = truncated;

    if (this.truncated) {
      this.upper = this.mean + this.stdDev * 2;
      this.lower = this.mean - this.stdDev * 2;
    }

    const seedValue = seed ? seed : Math.random();
    this.random = seedrandom.alea(seedValue.toString());
  }
  /** Returns next sample from a Gaussian distribution. */


  nextValue() {
    if (!isNaN(this.nextVal)) {
      const value = this.nextVal;
      this.nextVal = NaN;
      return value;
    }

    let resultX, resultY;
    let isValid = false;

    while (!isValid) {
      let v1, v2, s;

      do {
        v1 = 2 * this.random() - 1;
        v2 = 2 * this.random() - 1;
        s = v1 * v1 + v2 * v2;
      } while (s >= 1 || s === 0);

      const mul = Math.sqrt(-2.0 * Math.log(s) / s);
      resultX = this.mean + this.stdDev * v1 * mul;
      resultY = this.mean + this.stdDev * v2 * mul;

      if (!this.truncated || this.isValidTruncated(resultX)) {
        isValid = true;
      }
    }

    if (!this.truncated || this.isValidTruncated(resultY)) {
      this.nextVal = this.convertValue(resultY);
    }

    return this.convertValue(resultX);
  }
  /** Handles proper rounding for non-floating-point numbers. */


  convertValue(value) {
    if (this.dtype == null || this.dtype === 'float32') {
      return value;
    }

    return Math.round(value);
  }
  /** Returns true if less than 2-standard-deviations from the mean. */


  isValidTruncated(value) {
    return value <= this.upper && value >= this.lower;
  }

} // Marsaglia, George, and Wai Wan Tsang. 2000. "A Simple Method for Generating
// Gamma Variables."


exports.MPRandGauss = MPRandGauss;

class RandGamma {
  constructor(alpha, beta, dtype, seed) {
    this.alpha = alpha;
    this.beta = 1 / beta; // convert rate to scale parameter

    this.dtype = dtype;
    const seedValue = seed ? seed : Math.random();
    this.randu = seedrandom.alea(seedValue.toString());
    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());

    if (alpha < 1) {
      this.d = alpha + 2 / 3;
    } else {
      this.d = alpha - 1 / 3;
    }

    this.c = 1 / Math.sqrt(9 * this.d);
  }
  /** Returns next sample from a gamma distribution. */


  nextValue() {
    let x2, v0, v1, x, u, v;

    while (true) {
      do {
        x = this.randn.nextValue();
        v = 1 + this.c * x;
      } while (v <= 0);

      v *= v * v;
      x2 = x * x;
      v0 = 1 - 0.331 * x2 * x2;
      v1 = 0.5 * x2 + this.d * (1 - v + Math.log(v));
      u = this.randu();

      if (u < v0 || Math.log(u) < v1) {
        break;
      }
    }

    v = 1 / this.beta * this.d * v;

    if (this.alpha < 1) {
      v *= Math.pow(this.randu(), 1 / this.alpha);
    }

    return this.convertValue(v);
  }
  /** Handles proper rounding for non-floating-point numbers. */


  convertValue(value) {
    if (this.dtype === 'float32') {
      return value;
    }

    return Math.round(value);
  }

}

exports.RandGamma = RandGamma;

class UniformRandom {
  constructor(min = 0, max = 1, dtype, seed) {
    /** Handles proper rounding for non floating point numbers. */
    this.canReturnFloat = () => this.dtype == null || this.dtype === 'float32';

    this.min = min;
    this.range = max - min;
    this.dtype = dtype;

    if (seed == null) {
      seed = Math.random();
    }

    if (typeof seed === 'number') {
      seed = seed.toString();
    }

    if (!this.canReturnFloat() && this.range <= 1) {
      throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);
    }

    this.random = seedrandom.alea(seed);
  }

  convertValue(value) {
    if (this.canReturnFloat()) {
      return value;
    }

    return Math.round(value);
  }

  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }

}

exports.UniformRandom = UniformRandom;

function jarqueBeraNormalityTest(values) {
  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test
  const n = values.length;
  const s = skewness(values);
  const k = kurtosis(values);
  const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2)); // JB test requires 2-degress of freedom from Chi-Square @ 0.95:
  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm

  const CHI_SQUARE_2DEG = 5.991;

  if (jb > CHI_SQUARE_2DEG) {
    throw new Error(`Invalid p-value for JB: ${jb}`);
  }
}

function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {
  if (epsilon == null) {
    epsilon = (0, _test_util.testEpsilon)();
  }

  const actualMean = mean(actual);
  (0, _test_util.expectNumbersClose)(actualMean, expectedMean, epsilon);
  (0, _test_util.expectNumbersClose)(standardDeviation(actual, actualMean), expectedStdDev, epsilon);
}

function mean(values) {
  let sum = 0;

  for (let i = 0; i < values.length; i++) {
    sum += values[i];
  }

  return sum / values.length;
}

function standardDeviation(values, mean) {
  let squareDiffSum = 0;

  for (let i = 0; i < values.length; i++) {
    const diff = values[i] - mean;
    squareDiffSum += diff * diff;
  }

  return Math.sqrt(squareDiffSum / values.length);
}

function kurtosis(values) {
  // https://en.wikipedia.org/wiki/Kurtosis
  const valuesMean = mean(values);
  const n = values.length;
  let sum2 = 0;
  let sum4 = 0;

  for (let i = 0; i < n; i++) {
    const v = values[i] - valuesMean;
    sum2 += Math.pow(v, 2);
    sum4 += Math.pow(v, 4);
  }

  return 1 / n * sum4 / Math.pow(1 / n * sum2, 2);
}

function skewness(values) {
  // https://en.wikipedia.org/wiki/Skewness
  const valuesMean = mean(values);
  const n = values.length;
  let sum2 = 0;
  let sum3 = 0;

  for (let i = 0; i < n; i++) {
    const v = values[i] - valuesMean;
    sum2 += Math.pow(v, 2);
    sum3 += Math.pow(v, 3);
  }

  return 1 / n * sum3 / Math.pow(1 / (n - 1) * sum2, 3 / 2);
}
},{"seedrandom":"xt2p","../test_util":"cFdt"}],"KZ1e":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomGamma = void 0;

var _buffer = require("./buffer");

var _operation = require("./operation");

var _rand_util = require("./rand_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with values sampled from a gamma distribution.
 *
 * ```js
 * tf.randomGamma([2, 2], 1).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param alpha The shape parameter of the gamma distribution.
 * @param beta The inverse scale parameter of the gamma distribution. Defaults
 *     to 1.
 * @param dtype The data type of the output. Defaults to float32.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function randomGamma_(shape, alpha, beta = 1, dtype = 'float32', seed) {
  if (beta == null) {
    beta = 1;
  }

  if (dtype == null) {
    dtype = 'float32';
  }

  if (dtype !== 'float32' && dtype !== 'int32') {
    throw new Error(`Unsupported data type ${dtype}`);
  }

  const rgamma = new _rand_util.RandGamma(alpha, beta, dtype, seed);
  const res = (0, _buffer.buffer)(shape, dtype);

  for (let i = 0; i < res.values.length; i++) {
    res.values[i] = rgamma.nextValue();
  }

  return res.toTensor();
}

const randomGamma = (0, _operation.op)({
  randomGamma_
});
exports.randomGamma = randomGamma;
},{"./buffer":"GfO2","./operation":"uE86","./rand_util":"QLYL"}],"aurk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomNormal = void 0;

var _buffer = require("./buffer");

var _operation = require("./operation");

var _rand_util = require("./rand_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with values sampled from a normal distribution.
 *
 * ```js
 * tf.randomNormal([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function randomNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
  if (dtype != null && dtype === 'bool') {
    throw new Error(`Unsupported data type ${dtype}`);
  }

  const randGauss = new _rand_util.MPRandGauss(mean, stdDev, dtype, false
  /* truncated */
  , seed);
  const res = (0, _buffer.buffer)(shape, dtype);

  for (let i = 0; i < res.values.length; i++) {
    res.values[i] = randGauss.nextValue();
  }

  return res.toTensor();
}

const randomNormal = (0, _operation.op)({
  randomNormal_
});
exports.randomNormal = randomNormal;
},{"./buffer":"GfO2","./operation":"uE86","./rand_util":"QLYL"}],"Imph":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomUniform = void 0;

var _buffer = require("./buffer");

var _operation = require("./operation");

var _rand_util = require("./rand_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with values sampled from a uniform distribution.
 *
 * The generated values follow a uniform distribution in the range [minval,
 * maxval). The lower bound minval is included in the range, while the upper
 * bound maxval is excluded.
 *
 * ```js
 * tf.randomUniform([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param minval The lower bound on the range of random values to generate.
 *   Defaults to 0.
 * @param maxval The upper bound on the range of random values to generate.
 *   Defaults to 1.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function randomUniform_(shape, minval = 0, maxval = 1, dtype = 'float32', seed) {
  const res = (0, _buffer.buffer)(shape, dtype);
  const random = new _rand_util.UniformRandom(minval, maxval, null, seed);

  for (let i = 0; i < res.values.length; i++) {
    res.values[i] = random.nextValue();
  }

  return res.toTensor();
}

const randomUniform = (0, _operation.op)({
  randomUniform_
});
exports.randomUniform = randomUniform;
},{"./buffer":"GfO2","./operation":"uE86","./rand_util":"QLYL"}],"FAHd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.range = range;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.
 *
 * The tensor is a is half-open interval meaning it includes start, but
 * excludes stop. Decrementing ranges and negative step values are also
 * supported.sv
 *
 *
 * ```js
 * tf.range(0, 9, 2).print();
 * ```
 *
 * @param start An integer start value
 * @param stop An integer stop value
 * @param step An integer increment (will default to 1 or -1)
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function range(start, stop, step = 1, dtype = 'float32') {
  if (step === 0) {
    throw new Error('Cannot have a step of zero');
  }

  const attrs = {
    start,
    stop,
    step,
    dtype
  };
  return _engine.ENGINE.runKernel(_kernel_names.Range, {}
  /* inputs */
  , attrs);
}
},{"../engine":"phT7","../kernel_names":"rJl6"}],"j99O":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.real = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the real part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the real part of each element in input considered as a complex number.
 *
 * If the input is real, it simply makes a clone.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.real(x).print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function real_(input) {
  const $input = (0, _tensor_util_env.convertToTensor)(input, 'input', 'real');
  const inputs = {
    input: $input
  };
  return _engine.ENGINE.runKernel(_kernel_names.Real, inputs);
}

const real = (0, _operation.op)({
  real_
});
exports.real = real;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"kFd0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reciprocal = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes reciprocal of x element-wise: `1 / x`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, 2]);
 *
 * x.reciprocal().print();  // or tf.reciprocal(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function reciprocal_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reciprocal');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Reciprocal, inputs);
}

const reciprocal = (0, _operation.op)({
  reciprocal_
});
exports.reciprocal = reciprocal;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"JbIg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.relu = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes rectified linear element-wise: `max(x, 0)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.relu().print();  // or tf.relu(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32'.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function relu_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'relu');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Relu, inputs);
}

const relu = (0, _operation.op)({
  relu_
});
exports.relu = relu;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"urTr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.relu6 = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 8]);
 *
 * x.relu6().print();  // or tf.relu6(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32'.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function relu6_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'relu6');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Relu6, inputs);
}

const relu6 = (0, _operation.op)({
  relu6_
});
exports.relu6 = relu6;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"JJIO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reverse = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reverses a `tf.Tensor` along a specified axis.
 *
 * Also available are stricter rank-specific methods that assert that `x` is
 * of the given rank:
 *   - `tf.reverse1d`
 *   - `tf.reverse2d`
 *   - `tf.reverse3d`
 *   - `tf.reverse4d`
 *
 * Except `tf.reverse1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.reverse().print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.reverse(axis).print();
 * ```
 * @param x The input tensor to be reversed.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function reverse_(x, axis) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reverse');
  const inputs = {
    x: $x
  };
  const attrs = {
    dims: axis
  };
  return _engine.ENGINE.runKernel(_kernel_names.Reverse, inputs, attrs);
}

const reverse = (0, _operation.op)({
  reverse_
});
exports.reverse = reverse;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"AODX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reverse1d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reverse = require("./reverse");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reverses a `tf.Tensor1D`.
 *
 * @param x The input tensor.
 */
function reverse1d_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reverse');
  util.assert($x.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);
  return (0, _reverse.reverse)($x, 0);
}

const reverse1d = (0, _operation.op)({
  reverse1d_
});
exports.reverse1d = reverse1d;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86","./reverse":"JJIO"}],"JN76":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reverse2d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reverse = require("./reverse");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reverses a `tf.Tensor2D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */
function reverse2d_(x, axis) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reverse');
  util.assert($x.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);
  return (0, _reverse.reverse)($x, axis);
}

const reverse2d = (0, _operation.op)({
  reverse2d_
});
exports.reverse2d = reverse2d;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86","./reverse":"JJIO"}],"hWz2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reverse3d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reverse = require("./reverse");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reverses a `tf.Tensor3D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */
function reverse3d_(x, axis) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reverse');
  util.assert($x.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);
  return (0, _reverse.reverse)($x, axis);
}

const reverse3d = (0, _operation.op)({
  reverse3d_
});
exports.reverse3d = reverse3d;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86","./reverse":"JJIO"}],"X21a":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reverse4d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reverse = require("./reverse");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Reverses a `tf.Tensor4D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */
function reverse4d_(x, axis) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'reverse');
  util.assert($x.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);
  return (0, _reverse.reverse)($x, axis);
}

const reverse4d = (0, _operation.op)({
  reverse4d_
});
exports.reverse4d = reverse4d;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86","./reverse":"JJIO"}],"NMXN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.round = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes round of input `tf.Tensor` element-wise: `round(x)`.
 * It implements banker's rounding.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.round().print();  // or tf.round(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function round_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'round');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Round, inputs);
}

const round = (0, _operation.op)({
  round_
});
exports.round = round;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"gHPL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rsqrt = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes reciprocal of square root of the input `tf.Tensor` element-wise:
 * `y = 1 / sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.rsqrt().print();  // or tf.rsqrt(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function rsqrt_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'rsqrt');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Rsqrt, inputs);
}

const rsqrt = (0, _operation.op)({
  rsqrt_
});
exports.rsqrt = rsqrt;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"TiGU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scalar = scalar;

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.scalar` as it makes the code more readable.
 *
 * ```js
 * tf.scalar(3.14).print();
 * ```
 *
 * @param value The value of the scalar.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function scalar(value, dtype) {
  if (((0, _util.isTypedArray)(value) && dtype !== 'string' || Array.isArray(value)) && dtype !== 'complex64') {
    throw new Error('Error creating a new Scalar: value must be a primitive ' + '(number|boolean|string)');
  }

  if (dtype === 'string' && (0, _util.isTypedArray)(value) && !(value instanceof Uint8Array)) {
    throw new Error('When making a scalar from encoded string, ' + 'the value must be `Uint8Array`.');
  }

  const shape = [];
  const inferredShape = [];
  return (0, _tensor_ops_util.makeTensor)(value, shape, inferredShape, dtype);
}
},{"../util":"XXxQ","./tensor_ops_util":"HKvD"}],"HaUr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selu = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes scaled exponential linear element-wise.
 *
 * `x < 0 ? scale * alpha * (exp(x) - 1) : x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.selu().print();  // or tf.selu(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function selu_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'selu');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Selu, inputs);
}

const selu = (0, _operation.op)({
  selu_
});
exports.selu = selu;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"PKLM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.separableConv2d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _conv2d = require("./conv2d");

var _depthwise_conv2d = require("./depthwise_conv2d");

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * 2-D convolution with separable filters.
 *
 * Performs a depthwise convolution that acts separately on channels followed
 * by a pointwise convolution that mixes channels. Note that this is
 * separability between dimensions [1, 2] and 3, not spatial separability
 * between dimensions 1 and 2.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is
 *     the filter used in the first step.
 * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape
 *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is
 *     the filter used in the second step.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation = [1, 1], dataFormat = 'NHWC') {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'separableConv2d');
  const $depthwiseFilter = (0, _tensor_util_env.convertToTensor)(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');
  const $pointwiseFilter = (0, _tensor_util_env.convertToTensor)(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  if (dataFormat === 'NCHW') {
    throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' + 'NHWC is supported');
  }

  util.assert(x4D.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);
  util.assert($depthwiseFilter.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but ` + `got rank ${$depthwiseFilter.rank}.`);
  util.assert($pointwiseFilter.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but ` + `got rank ${$depthwiseFilter.rank}.`);
  util.assert($pointwiseFilter.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter ` + ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);
  util.assert($pointwiseFilter.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise ` + `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);
  const inChannels = $depthwiseFilter.shape[2];
  const channelMultiplier = $depthwiseFilter.shape[3];
  util.assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, () => `Error in separableConv2d: the third dimension of pointwise filter ` + `must be ${inChannels * channelMultiplier}, ` + `but got ${$pointwiseFilter.shape[2]}.`);
  const depthwise = (0, _depthwise_conv2d.depthwiseConv2d)(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);
  const pointwiseStride = 1;
  const res = (0, _conv2d.conv2d)(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const separableConv2d = (0, _operation.op)({
  separableConv2d_
});
exports.separableConv2d = separableConv2d;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./conv2d":"CVMs","./depthwise_conv2d":"HEHz","./operation":"uE86","./reshape":"F0cm"}],"yk2k":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setdiff1dAsync = void 0;

var _tensor = require("../tensor");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the difference between two lists of numbers.
 *
 * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`
 * that represents all values that are in `x` but not in `y`. The returned
 * Tensor `out` is sorted in the same order that the numbers appear in `x`
 * (duplicates are preserved). This operation also returns a Tensor indices that
 * represents the position of each out element in `x`. In other words:
 *
 * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`
 *
 * ```js
 * const x = [1, 2, 3, 4, 5, 6];
 * const y = [1, 3, 5];
 *
 * const [out, indices] = await tf.setdiff1dAsync(x, y);
 * out.print(); // [2, 4, 6]
 * indices.print(); // [1, 3, 5]
 * ```
 *
 * @param x 1-D Tensor. Values to keep.
 * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the
 *     output.
 * @returns Promise of Tensor tuple [out, indices].
 *  out: Tensor with the same type as x.
 *  indices: A Tensor of type int32.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
async function setdiff1dAsync_(x, y) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'setdiff1d');
  const $y = (0, _tensor_util_env.convertToTensor)(y, 'y', 'setdiff1d');
  util.assert($x.dtype === $y.dtype, () => `x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);
  util.assert($x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);
  util.assert($y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);
  const xVals = await $x.data();
  const yVals = await $y.data();
  const ySet = new Set(yVals);
  let outputSize = 0;

  for (let i = 0; i < xVals.length; i++) {
    if (!ySet.has(xVals[i])) {
      outputSize++;
    }
  }

  const buffer = new _tensor.TensorBuffer([outputSize], $x.dtype);
  const indices = new _tensor.TensorBuffer([outputSize], 'int32');

  for (let i = 0, p = 0; i < xVals.length; i++) {
    if (!ySet.has(xVals[i])) {
      buffer.values[p] = xVals[i];
      indices.values[p] = i;
      p++;
    }
  }

  return [buffer.toTensor(), indices.toTensor()];
}

const setdiff1dAsync = setdiff1dAsync_;
exports.setdiff1dAsync = setdiff1dAsync;
},{"../tensor":"eFW4","../tensor_util_env":"y4X4","../util":"XXxQ"}],"CH4E":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sign = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns an element-wise indication of the sign of a number.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);
 *
 * x.sign().print();  // or tf.sign(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sign_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'sign');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Sign, inputs);
}

const sign = (0, _operation.op)({
  sign_
});
exports.sign = sign;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"zDLt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sin = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes sin of the input Tensor element-wise: `sin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.sin().print();  // or tf.sin(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sin_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'sin');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Sin, inputs);
}

const sin = (0, _operation.op)({
  sin_
});
exports.sin = sin;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"DmYY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinh = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.sinh().print();  // or tf.sinh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sinh_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'sinh');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Sinh, inputs);
}

const sinh = (0, _operation.op)({
  sinh_
});
exports.sinh = sinh;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"vSl0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice1d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _slice = require("./slice");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts a 1D slice from 1D array starting at coordinates `begin` and is
 * of length `size`. See `slice` for details.
 */
function slice1d_(x, begin, size) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'slice1d');
  util.assert($x.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${$x.rank} tensor`);
  return (0, _slice.slice)($x, [begin], [size]);
}

const slice1d = (0, _operation.op)({
  slice1d_
});
exports.slice1d = slice1d;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86","./slice":"wIos"}],"bSki":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice2d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _slice = require("./slice");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts a 2D slice from a 2D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */
function slice2d_(x, begin, size) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'slice2d');
  util.assert($x.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);
  return (0, _slice.slice)($x, begin, size);
}

const slice2d = (0, _operation.op)({
  slice2d_
});
exports.slice2d = slice2d;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86","./slice":"wIos"}],"c5n3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice3d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _slice = require("./slice");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts a 3D slice from a 3D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */
function slice3d_(x, begin, size) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'slice3d');
  util.assert($x.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${$x.rank} tensor`);
  return (0, _slice.slice)($x, begin, size);
}

const slice3d = (0, _operation.op)({
  slice3d_
});
exports.slice3d = slice3d;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86","./slice":"wIos"}],"EHN5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice4d = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _slice = require("./slice");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts a 4D slice from a 4D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */
function slice4d_(x, begin, size) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'slice4d');
  util.assert($x.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${$x.rank} tensor`);
  return (0, _slice.slice)($x, begin, size);
}

const slice4d = (0, _operation.op)({
  slice4d_
});
exports.slice4d = slice4d;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86","./slice":"wIos"}],"TVVR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.softmax = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the softmax normalized vector given the logits.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function softmax_(logits, dim = -1) {
  const $logits = (0, _tensor_util_env.convertToTensor)(logits, 'logits', 'softmax', 'float32');

  if (dim === -1) {
    dim = $logits.rank - 1;
  }

  if (dim !== $logits.rank - 1) {
    throw Error('Softmax along a non-last dimension is not yet supported. ' + `Logits was rank ${$logits.rank} and dim was ${dim}`);
  }

  const inputs = {
    logits: $logits
  };
  const attrs = {
    dim
  };
  return _engine.ENGINE.runKernel(_kernel_names.Softmax, inputs, attrs);
}

const softmax = (0, _operation.op)({
  softmax_
});
exports.softmax = softmax;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"lRSx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fft = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _util = require("../../util");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the inner-most
 * dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.fft().print();  // tf.spectral.fft(x).print();
 * ```
 * @param input The complex input to compute an fft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function fft_(input) {
  (0, _util.assert)(input.dtype === 'complex64', () => `The dtype for tf.spectral.fft() must be complex64 ` + `but got ${input.dtype}.`);
  const inputs = {
    input
  };
  return _engine.ENGINE.runKernel(_kernel_names.FFT, inputs);
}

const fft = (0, _operation.op)({
  fft_
});
exports.fft = fft;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../util":"XXxQ","../operation":"uE86"}],"G5kM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ifft = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _util = require("../../util");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Inverse fast Fourier transform.
 *
 * Computes the inverse 1-dimensional discrete Fourier transform over the
 * inner-most dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.ifft().print();  // tf.spectral.ifft(x).print();
 * ```
 * @param input The complex input to compute an ifft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function ifft_(input) {
  (0, _util.assert)(input.dtype === 'complex64', () => `The dtype for tf.spectral.ifft() must be complex64 ` + `but got ${input.dtype}.`);
  const inputs = {
    input
  };
  return _engine.ENGINE.runKernel(_kernel_names.IFFT, inputs);
}

const ifft = (0, _operation.op)({
  ifft_
});
exports.ifft = ifft;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../util":"XXxQ","../operation":"uE86"}],"Yh9k":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.irfft = void 0;

var _complex = require("../complex");

var _concat = require("../concat");

var _imag = require("../imag");

var _mul = require("../mul");

var _operation = require("../operation");

var _real = require("../real");

var _reshape = require("../reshape");

var _reverse = require("../reverse");

var _scalar = require("../scalar");

var _slice = require("../slice");

var _ifft = require("./ifft");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Inversed real value input fast Fourier transform.
 *
 * Computes the 1-dimensional inversed discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([0, 0, 0]);
 * const x = tf.complex(real, imag);
 *
 * x.irfft().print();
 * ```
 * @param input The real value input to compute an irfft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function irfft_(input) {
  const innerDimensionSize = input.shape[input.shape.length - 1];
  const batch = input.size / innerDimensionSize;
  let ret;

  if (innerDimensionSize <= 2) {
    const complexInput = (0, _reshape.reshape)(input, [batch, innerDimensionSize]);
    ret = (0, _ifft.ifft)(complexInput);
  } else {
    // The length of unique components of the DFT of a real-valued signal
    // is 2 * (input_len - 1)
    const outputShape = [batch, 2 * (innerDimensionSize - 1)];
    const realInput = (0, _reshape.reshape)((0, _real.real)(input), [batch, innerDimensionSize]);
    const imagInput = (0, _reshape.reshape)((0, _imag.imag)(input), [batch, innerDimensionSize]);
    const realConjugate = (0, _reverse.reverse)((0, _slice.slice)(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);
    const imagConjugate = (0, _mul.mul)((0, _reverse.reverse)((0, _slice.slice)(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1), (0, _scalar.scalar)(-1));
    const r = (0, _concat.concat)([realInput, realConjugate], 1);
    const i = (0, _concat.concat)([imagInput, imagConjugate], 1);
    const complexInput = (0, _reshape.reshape)((0, _complex.complex)(r, i), [outputShape[0], outputShape[1]]);
    ret = (0, _ifft.ifft)(complexInput);
  }

  ret = (0, _real.real)(ret); // reshape the result if the input is 3D tensor.

  if (input.rank === 3 && input.shape[0] !== 0) {
    const temp = ret;
    const batch = input.shape[0];
    ret = (0, _reshape.reshape)(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);
    temp.dispose();
  }

  return ret;
}

const irfft = (0, _operation.op)({
  irfft_
});
exports.irfft = irfft;
},{"../complex":"e4je","../concat":"V5Ij","../imag":"eG10","../mul":"tBJ4","../operation":"uE86","../real":"j99O","../reshape":"F0cm","../reverse":"JJIO","../scalar":"TiGU","../slice":"wIos","./ifft":"G5kM"}],"lgPf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.split = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Splits a `tf.Tensor` into sub tensors.
 *
 * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`
 * into `numOrSizeSplits` smaller tensors.
 * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.
 *
 * If `numOrSizeSplits` is a number array, splits `x` into
 * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the
 * same size as `x` except along dimension `axis` where the size is
 * `numOrSizeSplits[i]`.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);
 * const [a, b] = tf.split(x, 2, 1);
 * a.print();
 * b.print();
 *
 * const [c, d, e] = tf.split(x, [1, 2, 1], 1);
 * c.print();
 * d.print();
 * e.print();
 * ```
 *
 * @param x The input tensor to split.
 * @param numOrSizeSplits Either an integer indicating the number of
 * splits along the axis or an array of integers containing the sizes of
 * each output tensor along the axis. If a number then it must evenly divide
 * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.
 * Can contain one -1 indicating that dimension is to be inferred.
 * @param axis The dimension along which to split. Defaults to 0 (the first
 * dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function split_(x, numOrSizeSplits, axis = 0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'split');
  const inputs = {
    x: $x
  };
  const attr = {
    numOrSizeSplits,
    axis
  };
  return _engine.ENGINE.runKernel(_kernel_names.SplitV, inputs, attr);
}

const split = (0, _operation.op)({
  split_
});
exports.split = split;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"FMnE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rfft = void 0;

var _util = require("../../util");

var _complex = require("../complex");

var _concat = require("../concat");

var _imag = require("../imag");

var _operation = require("../operation");

var _real = require("../real");

var _reshape = require("../reshape");

var _slice = require("../slice");

var _split = require("../split");

var _zeros = require("../zeros");

var _zeros_like = require("../zeros_like");

var _fft = require("./fft");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Real value input fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 *
 * real.rfft().print();
 * ```
 * @param input The real value input to compute an rfft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function rfft_(input, fftLength) {
  (0, _util.assert)(input.dtype === 'float32', () => `The dtype for rfft() must be real value but got ${input.dtype}`);
  let innerDimensionSize = input.shape[input.shape.length - 1];
  const batch = input.size / innerDimensionSize;
  let adjustedInput;

  if (fftLength != null && fftLength < innerDimensionSize) {
    // Need to crop
    const begin = input.shape.map(v => 0);
    const size = input.shape.map(v => v);
    size[input.shape.length - 1] = fftLength;
    adjustedInput = (0, _slice.slice)(input, begin, size);
    innerDimensionSize = fftLength;
  } else if (fftLength != null && fftLength > innerDimensionSize) {
    // Need to pad with zeros
    const zerosShape = input.shape.map(v => v);
    zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;
    adjustedInput = (0, _concat.concat)([input, (0, _zeros.zeros)(zerosShape)], input.shape.length - 1);
    innerDimensionSize = fftLength;
  } else {
    adjustedInput = input;
  } // Complement the input with zero imaginary numbers.


  const zerosInput = (0, _zeros_like.zerosLike)(adjustedInput);
  const complexInput = (0, _reshape.reshape)((0, _complex.complex)(adjustedInput, zerosInput), [batch, innerDimensionSize]);
  const ret = (0, _fft.fft)(complexInput); // Exclude complex conjugations. These conjugations are put symmetrically.

  const half = Math.floor(innerDimensionSize / 2) + 1;
  const realValues = (0, _real.real)(ret);
  const imagValues = (0, _imag.imag)(ret);
  const realComplexConjugate = (0, _split.split)(realValues, [half, innerDimensionSize - half], realValues.shape.length - 1);
  const imagComplexConjugate = (0, _split.split)(imagValues, [half, innerDimensionSize - half], imagValues.shape.length - 1);
  const outputShape = adjustedInput.shape.slice();
  outputShape[adjustedInput.shape.length - 1] = half;
  return (0, _reshape.reshape)((0, _complex.complex)(realComplexConjugate[0], imagComplexConjugate[0]), outputShape);
}

const rfft = (0, _operation.op)({
  rfft_
});
exports.rfft = rfft;
},{"../../util":"XXxQ","../complex":"e4je","../concat":"V5Ij","../imag":"eG10","../operation":"uE86","../real":"j99O","../reshape":"F0cm","../slice":"wIos","../split":"lgPf","../zeros":"AsfN","../zeros_like":"qY0o","./fft":"lRSx"}],"brr7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sqrt = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.sqrt().print();  // or tf.sqrt(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sqrt_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'sqrt');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Sqrt, inputs);
}

const sqrt = (0, _operation.op)({
  sqrt_
});
exports.sqrt = sqrt;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"hbAV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squaredDifference = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns (a - b) * (a - b) element-wise.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * ```js
 * // Broadcast squared difference  a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function squaredDifference_(a, b) {
  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'squaredDifference');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'squaredDifference');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  (0, _broadcast_util.assertAndGetBroadcastShape)($a.shape, $b.shape);
  const inputs = {
    a: $a,
    b: $b
  };
  const attrs = {};
  return _engine.ENGINE.runKernel(_kernel_names.SquaredDifference, inputs, attrs);
}

const squaredDifference = (0, _operation.op)({
  squaredDifference_
});
exports.squaredDifference = squaredDifference;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util":"wtFc","../tensor_util_env":"y4X4","./broadcast_util":"fD2T","./operation":"uE86"}],"pxYL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squeeze = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _operation = require("./operation");

var _reshape = require("./reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Removes dimensions of size 1 from the shape of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);
 * x.squeeze().print();
 * ```
 *
 * @param x The input tensor to be squeezed.
 * @param axis An optional list of numbers. If specified, only
 *     squeezes the dimensions listed. The dimension index starts at 0. It
 * is an error to squeeze a dimension that is not 1.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function squeeze_(x, axis) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'squeeze');
  return (0, _reshape.reshape)($x, (0, _util.squeezeShape)($x.shape, axis).newShape);
}

const squeeze = (0, _operation.op)({
  squeeze_
});
exports.squeeze = squeeze;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86","./reshape":"F0cm"}],"Wzzr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stack = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.stack([a, b, c]).print();
 * ```
 *
 * @param tensors A list of tensor objects with the same shape and dtype.
 * @param axis The axis to stack along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function stack_(tensors, axis = 0) {
  const $tensors = (0, _tensor_util_env.convertToTensorArray)(tensors, 'tensors', 'stack', 'string_or_numeric');
  util.assert($tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');

  if ($tensors.length > 0) {
    util.assert(axis <= $tensors[0].rank, () => 'Axis must be <= rank of the tensor');
  }

  const inputs = $tensors;
  const attrs = {
    axis
  };
  return _engine.ENGINE.runKernel(_kernel_names.Pack, inputs, attrs);
}

const stack = (0, _operation.op)({
  stack_
});
exports.stack = stack;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"vRkD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.step = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`
 *
 * ```js
 * const x = tf.tensor1d([0, 2, -1, -3]);
 *
 * x.step(.5).print();  // or tf.step(x, .5)
 * ```
 * @param x The input tensor.
 * @param alpha The gradient when input is negative.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function step_(x, alpha = 0.0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'step');
  const inputs = {
    x: $x
  };
  const attrs = {
    alpha
  };
  return _engine.ENGINE.runKernel(_kernel_names.Step, inputs, attrs);
}

const step = (0, _operation.op)({
  step_
});
exports.step = step;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"quwm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stridedSlice = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts a strided slice of a tensor.
 *
 * Roughly speaking, this op extracts a slice of size (end-begin)/stride from
 * the given input tensor (x). Starting at the location specified by begin the
 * slice continues by adding stride to the index until all dimensions are not
 * less than end. Note that a stride can be negative, which causes a reverse
 * slice.
 *
 * ```js
 * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],
 *    [3, 2, 3]);
 * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]
 * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],
 *                                                     // [4, 4, 4]]]
 * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],
 *                                                     // [3, 3, 3]]]
 * ```
 *
 * @param x The tensor to stride slice.
 * @param begin The coordinates to start the slice from.
 * @param end: The coordinates to end the slice at.
 * @param strides: The size of the slice.
 * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param endMask: If the ith bit of endMask is set, end[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param shrinkAxisMask: a bitmask where bit i implies that
 * the ith specification should shrink the dimensionality. begin and end must
 * imply a slice of size 1 in the dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */
function stridedSlice_(x, begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'stridedSlice', 'string_or_numeric');
  const inputs = {
    x: $x
  };
  const attrs = {
    begin,
    end,
    strides,
    beginMask,
    endMask,
    ellipsisMask,
    newAxisMask,
    shrinkAxisMask
  };
  return _engine.ENGINE.runKernel(_kernel_names.StridedSlice, inputs, attrs);
}

const stridedSlice = (0, _operation.op)({
  stridedSlice_
});
exports.stridedSlice = stridedSlice;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"fQEZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tan = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.tan().print();  // or tf.tan(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function tan_(x) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'tan');
  const inputs = {
    x: $x
  };
  return _engine.ENGINE.runKernel(_kernel_names.Tan, inputs);
}

const tan = (0, _operation.op)({
  tan_
});
exports.tan = tan;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"vKgg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor1d = tensor1d;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor1d` as it makes the code more readable.
 *
 * ```js
 * tf.tensor1d([1, 2, 3]).print();
 * ```
 *
 * @param values The values of the tensor. Can be array of numbers,
 *     or a `TypedArray`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor1d(values, dtype) {
  (0, _util.assertNonNull)(values);
  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);

  if (inferredShape.length !== 1) {
    throw new Error('tensor1d() requires values to be a flat/TypedArray');
  }

  const shape = null;
  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./tensor_ops_util":"HKvD"}],"UEzj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor2d = tensor2d;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor2d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor2d([[1, 2], [3, 4]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided, it is inferred from
 *     `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor2d(values, shape, dtype) {
  (0, _util.assertNonNull)(values);

  if (shape != null && shape.length !== 2) {
    throw new Error('tensor2d() requires shape to have two numbers');
  }

  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);

  if (inferredShape.length !== 2 && inferredShape.length !== 1) {
    throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');
  }

  if (inferredShape.length === 1 && shape == null) {
    throw new Error('tensor2d() requires shape to be provided when `values` ' + 'are a flat/TypedArray');
  }

  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./tensor_ops_util":"HKvD"}],"CbDo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor4d = tensor4d;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor4d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor4d(values, shape, dtype) {
  (0, _util.assertNonNull)(values);

  if (shape != null && shape.length !== 4) {
    throw new Error('tensor4d() requires shape to have four numbers');
  }

  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);

  if (inferredShape.length !== 4 && inferredShape.length !== 1) {
    throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');
  }

  if (inferredShape.length === 1 && shape == null) {
    throw new Error('tensor4d() requires shape to be provided when `values` ' + 'are a flat array');
  }

  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./tensor_ops_util":"HKvD"}],"ViEa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor5d = tensor5d;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor5d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor5d([[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor5d(values, shape, dtype) {
  (0, _util.assertNonNull)(values);

  if (shape != null && shape.length !== 5) {
    throw new Error('tensor5d() requires shape to have five numbers');
  }

  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);

  if (inferredShape.length !== 5 && inferredShape.length !== 1) {
    throw new Error('tensor5d() requires values to be ' + 'number[][][][][] or flat/TypedArray');
  }

  if (inferredShape.length === 1 && shape == null) {
    throw new Error('tensor5d() requires shape to be provided when `values` ' + 'are a flat array');
  }

  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./tensor_ops_util":"HKvD"}],"j89l":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tensor6d = tensor6d;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor_ops_util = require("./tensor_ops_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor6d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor6d(values, shape, dtype) {
  (0, _util.assertNonNull)(values);

  if (shape != null && shape.length !== 6) {
    throw new Error('tensor6d() requires shape to have six numbers');
  }

  const inferredShape = (0, _tensor_util_env.inferShape)(values, dtype);

  if (inferredShape.length !== 6 && inferredShape.length !== 1) {
    throw new Error('tensor6d() requires values to be number[][][][][][] or ' + 'flat/TypedArray');
  }

  if (inferredShape.length === 1 && shape == null) {
    throw new Error('tensor6d() requires shape to be provided when `values` ' + 'are a flat array');
  }

  shape = shape || inferredShape;
  return (0, _tensor_ops_util.makeTensor)(values, shape, inferredShape, dtype);
}
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./tensor_ops_util":"HKvD"}],"Hv3o":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.topk = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Finds the values and indices of the `k` largest entries along the last
 * dimension.
 *
 * If the input is a vector (rank=1), finds the k largest entries in the vector
 * and outputs their values and indices as vectors. Thus values[j] is the j-th
 * largest entry in input, and its index is indices[j].
 * For higher rank inputs, computes the top k entries along the last dimension.
 *
 * If two elements are equal, the lower-index element appears first.
 *
 * ```js
 * const a = tf.tensor2d([[1, 5], [4, 3]]);
 * const {values, indices} = tf.topk(a);
 * values.print();
 * indices.print();
 * ```
 * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.
 * @param k Number of top elements to look for along the last dimension.
 * @param sorted If true, the resulting `k` elements will be sorted by the
 *     values in descending order.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
function topk_(x, k = 1, sorted = true) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'topk');

  if ($x.rank === 0) {
    throw new Error('topk() expects the input to be of rank 1 or higher');
  }

  const lastDim = $x.shape[$x.shape.length - 1];

  if (k < 0) {
    throw new Error(`'k' passed to topk() must be >= 0 but got ${k}`);
  }

  if (k > lastDim) {
    throw new Error(`'k' passed to topk() must be <= the last dimension (${lastDim}) ` + `but got ${k}`);
  }

  const inputs = {
    x: $x
  };
  const attrs = {
    k,
    sorted
  };

  const [values, indices] = _engine.ENGINE.runKernel(_kernel_names.TopK, inputs, attrs);

  return {
    values,
    indices
  };
}

const topk = (0, _operation.op)({
  topk_
});
exports.topk = topk;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"YHjl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.truncatedNormal = void 0;

var _buffer = require("./buffer");

var _operation = require("./operation");

var _rand_util = require("./rand_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a `tf.Tensor` with values sampled from a truncated normal
 * distribution.
 *
 * ```js
 * tf.truncatedNormal([2, 2]).print();
 * ```
 *
 * The generated values follow a normal distribution with specified mean and
 * standard deviation, except that values whose magnitude is more than 2
 * standard deviations from the mean are dropped and re-picked.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output tensor.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function truncatedNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
  if (dtype != null && dtype === 'bool') {
    throw new Error(`Unsupported data type $ { dtype }`);
  }

  const randGauss = new _rand_util.MPRandGauss(mean, stdDev, dtype, true
  /* truncated */
  , seed);
  const res = (0, _buffer.buffer)(shape, dtype);

  for (let i = 0; i < res.values.length; i++) {
    res.values[i] = randGauss.nextValue();
  }

  return res.toTensor();
}

const truncatedNormal = (0, _operation.op)({
  truncatedNormal_
});
exports.truncatedNormal = truncatedNormal;
},{"./buffer":"GfO2","./operation":"uE86","./rand_util":"QLYL"}],"LuF4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unique = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Finds unique elements along an axis of a tensor.
 *
 * It returns a tensor `values` containing all of the unique elements along the
 * `axis` of the given tensor `x` in the same order that they occur along the
 * `axis` in `x`; `x` does not need to be sorted. It also returns a tensor
 * `indices` the same size as the number of the elements in `x` along the `axis`
 * dimension. It contains the index in the unique output `values`.
 *
 * ```js
 * // A 1-D tensor
 * const a = tf.tensor1d([1, 1, 2, 4, 4, 4, 7, 8, 8]);
 * const {values, indices} = tf.unique(a);
 * values.print();   // [1, 2, 4, 7, 8,]
 * indices.print();  // [0, 0, 1, 2, 2, 2, 3, 4, 4]
 * ```
 *
 * ```js
 * // A 2-D tensor with axis=0
 * //
 * // 'a' is: [[1, 0, 0],
 * //          [1, 0, 0],
 * //          [2, 0, 0]]
 * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);
 * const {values, indices} = tf.unique(a, 0)
 * values.print();   // [[1, 0, 0],
 *                   //  [2, 0, 0]]
 * indices.print();  // [0, 0, 1]
 * ```
 *
 * ```js
 * // A 2-D tensor with axis=1
 * //
 * // 'a' is: [[1, 0, 0],
 * //          [1, 0, 0],
 * //          [2, 0, 0]]
 * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);
 * const {values, indices} = tf.unique(a, 1)
 * values.print();   // [[1, 0],
 *                   //  [1, 0],
 *                   //  [2, 0]]
 * indices.print();  // [0, 1, 1]
 * ```
 * @param x A tensor (int32, string, bool).
 * @param axis The axis of the tensor to find the unique elements.
 * @returns [uniqueElements, indices] (see above for details)
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
function unique_(x, axis = 0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'unique', 'string_or_numeric');
  (0, _util.assert)($x.rank > 0, () => 'The input tensor must be at least 1D');
  const inputs = {
    x: $x
  };
  const attrs = {
    axis
  };

  const [values, indices] = _engine.ENGINE.runKernel(_kernel_names.Unique, inputs, attrs);

  return {
    values,
    indices
  };
}

const unique = (0, _operation.op)({
  unique_
});
exports.unique = unique;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"oY1I":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unsortedSegmentSum = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the sum along segments of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');
 * const numSegments = 3;
 *
 * x.unsortedSegmentSum(segmentIds, numSegments).print()
 * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)
 * ```
 * @param x The `tf.Tensor` that will be summed along its segments.
 * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s
 * dimension along the `axis`.  Maps each element of `x` to a segment.
 * @param numSegments The number of distinct `segmentIds`.
 *
 * @doc {heading: 'Operations', subheading: 'Segment'}
 */
function unsortedSegmentSum_(x, segmentIds, numSegments) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'unsortedSegmentSum');
  const $segmentIds = (0, _tensor_util_env.convertToTensor)(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');
  (0, _util.assert)((0, _util.isInt)(numSegments), () => 'numSegments must be of dtype int');
  const inputs = {
    x: $x,
    segmentIds: $segmentIds
  };
  const attrs = {
    numSegments
  };
  return _engine.ENGINE.runKernel(_kernel_names.UnsortedSegmentSum, inputs, attrs);
}

const unsortedSegmentSum = (0, _operation.op)({
  unsortedSegmentSum_
});
exports.unsortedSegmentSum = unsortedSegmentSum;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"Smo9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unstack = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * tf.unstack(a).forEach(tensor => tensor.print());
 * ```
 *
 * @param x A tensor object.
 * @param axis The axis to unstack along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function unstack_(x, axis = 0) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'unstack', 'string_or_numeric');
  util.assert(axis >= -$x.shape.length && axis < $x.shape.length, () => `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);
  const inputs = {
    value: $x
  };
  const attrs = {
    axis
  };
  return _engine.ENGINE.runKernel(_kernel_names.Unpack, inputs, attrs);
}

const unstack = (0, _operation.op)({
  unstack_
});
exports.unstack = unstack;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","../util":"XXxQ","./operation":"uE86"}],"dH8d":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.variable = variable;

var _engine = require("../engine");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a new variable with the provided initial value.
 * ```js
 * const x = tf.variable(tf.tensor([1, 2, 3]));
 * x.assign(tf.tensor([4, 5, 6]));
 *
 * x.print();
 * ```
 *
 * @param initialValue Initial value for the tensor.
 * @param trainable If true, optimizers are allowed to update it.
 * @param name Name of the variable. Defaults to a unique id.
 * @param dtype If set, initialValue will be converted to the given type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function variable(initialValue, trainable = true, name, dtype) {
  return _engine.ENGINE.makeVariable(initialValue, trainable, name, dtype);
}
},{"../engine":"phT7"}],"ebhY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.whereImpl = whereImpl;

var _buffer = require("../ops/buffer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** An implementation of the Where kernel shared between cpu and webgl */
function whereImpl(condShape, condVals) {
  const indices = [];

  for (let i = 0; i < condVals.length; i++) {
    if (condVals[i]) {
      indices.push(i);
    }
  }

  const inBuffer = (0, _buffer.buffer)(condShape, 'int32');
  const out = (0, _buffer.buffer)([indices.length, condShape.length], 'int32');

  for (let i = 0; i < indices.length; i++) {
    const loc = inBuffer.indexToLoc(indices[i]);
    const offset = i * condShape.length;
    out.values.set(loc, offset);
  }

  return out.toTensor();
}
},{"../ops/buffer":"GfO2"}],"moUh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.whereAsync = void 0;

var _where_impl = require("../backends/where_impl");

var _tensor_util_env = require("../tensor_util_env");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns the coordinates of true elements of condition.
 *
 * The coordinates are returned in a 2-D tensor where the first dimension (rows)
 * represents the number of true elements, and the second dimension (columns)
 * represents the coordinates of the true elements. Keep in mind, the shape of
 * the output tensor can vary depending on how many true values there are in
 * input. Indices are output in row-major order. The resulting tensor has the
 * shape `[numTrueElems, condition.rank]`.
 *
 * This is analogous to calling the python `tf.where(cond)` without an x or y.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const result = await tf.whereAsync(cond);
 * result.print();
 * ```
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
async function whereAsync_(condition) {
  const $condition = (0, _tensor_util_env.convertToTensor)(condition, 'condition', 'whereAsync', 'bool');
  const vals = await $condition.data();
  const res = (0, _where_impl.whereImpl)($condition.shape, vals);

  if (condition !== $condition) {
    $condition.dispose();
  }

  return res;
}

const whereAsync = whereAsync_;
exports.whereAsync = whereAsync;
},{"../backends/where_impl":"ebhY","../tensor_util_env":"y4X4"}],"JMVl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.booleanMaskAsync = void 0;

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _gather = require("./gather");

var _reshape = require("./reshape");

var _squeeze = require("./squeeze");

var _where_async = require("./where_async");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Apply boolean mask to tensor.
 *
 * ```js
 * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);
 * const mask = tf.tensor1d([1, 0, 1], 'bool');
 * const result = await tf.booleanMaskAsync(tensor, mask);
 * result.print();
 * ```
 *
 * @param tensor N-D tensor.
 * @param mask K-D boolean tensor, K <= N and K must be known statically.
 * @param axis A 0-D int Tensor representing the axis in tensor to mask from.
 *     By default, axis is 0 which will mask from the first dimension.
 *     Otherwise K + axis <= N.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
async function booleanMaskAsync_(tensor, mask, axis) {
  const $tensor = (0, _tensor_util_env.convertToTensor)(tensor, 'tensor', 'boolMask');
  const $mask = (0, _tensor_util_env.convertToTensor)(mask, 'mask', 'boolMask', 'bool');
  const axisFrom = axis == null ? 0 : axis;
  const maskDim = $mask.rank;
  const tensorShape = $tensor.shape;
  util.assert(maskDim > 0, () => 'mask cannot be scalar');
  util.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, `mask's shape must match the first K dimensions of tensor's shape,`);
  let leadingSize = 1;

  for (let i = axisFrom; i < axisFrom + maskDim; i++) {
    leadingSize *= tensorShape[i];
  }

  const targetTensorShape = tensorShape.slice(0, axisFrom).concat([leadingSize], tensorShape.slice(axisFrom + maskDim));
  const reshapedTensor = (0, _reshape.reshape)($tensor, targetTensorShape);
  const reshapedMask = (0, _reshape.reshape)($mask, [-1]);
  const positivePositions = await (0, _where_async.whereAsync)(reshapedMask);
  const indices = (0, _squeeze.squeeze)(positivePositions, [1]);
  const res = (0, _gather.gather)(reshapedTensor, indices, axisFrom); // Ensure no memory leak.

  if (tensor !== $tensor) {
    $tensor.dispose();
  }

  if (mask !== $mask) {
    $mask.dispose();
  }

  indices.dispose();
  reshapedTensor.dispose();
  reshapedMask.dispose();
  positivePositions.dispose();
  return res;
}

const booleanMaskAsync = booleanMaskAsync_;
exports.booleanMaskAsync = booleanMaskAsync;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./gather":"TfxI","./reshape":"F0cm","./squeeze":"pxYL","./where_async":"moUh"}],"exuO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.norm = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _abs = require("./abs");

var axis_util = _interopRequireWildcard(require("./axis_util"));

var _max = require("./max");

var _min = require("./min");

var _operation = require("./operation");

var _pow = require("./pow");

var _reshape = require("./reshape");

var _scalar = require("./scalar");

var _sqrt = require("./sqrt");

var _square = require("./square");

var _sum = require("./sum");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the norm of scalar, vectors, and matrices.
 * This function can compute several different vector norms (the 1-norm, the
 * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)
 * and matrix norms (Frobenius, 1-norm, and inf-norm).
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.norm().print();  // or tf.norm(x)
 * ```
 *
 * @param x The input array.
 * @param ord Optional. Order of the norm. Supported norm types are
 * following:
 *
 *  | ord        | norm for matrices         | norm for vectors
 *  |------------|---------------------------|---------------------
 *  |'euclidean' |Frobenius norm             |2-norm
 *  |'fro'       |Frobenius norm	           |
 *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))
 *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))
 *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))
 *  |2           |                           |sum(abs(x)^2)^1/2*
 *
 * @param axis Optional. If axis is null (the default), the input is
 * considered a vector and a single vector norm is computed over the entire
 * set of values in the Tensor, i.e. norm(x, ord) is equivalent
 * to norm(x.reshape([-1]), ord). If axis is a integer, the input
 * is considered a batch of vectors, and axis determines the axis in x
 * over which to compute vector norms. If axis is a 2-tuple of integer it is
 * considered a batch of matrices and axis determines the axes in NDArray
 * over which to compute a matrix norm.
 * @param keepDims Optional. If true, the norm have the same dimensionality
 * as the input.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function norm_(x, ord = 'euclidean', axis = null, keepDims = false) {
  x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'norm');
  const norm = normImpl(x, ord, axis);
  let keepDimsShape = norm.shape;

  if (keepDims) {
    const axes = (0, _util.parseAxisParam)(axis, x.shape);
    keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);
  }

  return (0, _reshape.reshape)(norm, keepDimsShape);
}

function normImpl(x, p, axis = null) {
  if (x.rank === 0) {
    return (0, _abs.abs)(x);
  } // consider vector when no axis is specified


  if (x.rank !== 1 && axis === null) {
    return normImpl((0, _reshape.reshape)(x, [-1]), p, axis);
  } // vector


  if (x.rank === 1 || typeof axis === 'number' || Array.isArray(axis) && axis.length === 1) {
    if (p === 1) {
      return (0, _sum.sum)((0, _abs.abs)(x), axis);
    }

    if (p === Infinity) {
      return (0, _max.max)((0, _abs.abs)(x), axis);
    }

    if (p === -Infinity) {
      return (0, _min.min)((0, _abs.abs)(x), axis);
    }

    if (p === 'euclidean' || p === 2) {
      // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2
      return (0, _sqrt.sqrt)((0, _sum.sum)((0, _pow.pow)((0, _abs.abs)(x), (0, _scalar.scalar)(2, 'int32')), axis));
    }

    throw new Error(`Error in norm: invalid ord value: ${p}`);
  } // matrix (assumption axis[0] < axis[1])


  if (Array.isArray(axis) && axis.length === 2) {
    if (p === 1) {
      return (0, _max.max)((0, _sum.sum)((0, _abs.abs)(x), axis[0]), axis[1] - 1);
    }

    if (p === Infinity) {
      return (0, _max.max)((0, _sum.sum)((0, _abs.abs)(x), axis[1]), axis[0]);
    }

    if (p === -Infinity) {
      return (0, _min.min)((0, _sum.sum)((0, _abs.abs)(x), axis[1]), axis[0]);
    }

    if (p === 'fro' || p === 'euclidean') {
      // norm(x) = sqrt(sum(pow(x, 2)))
      return (0, _sqrt.sqrt)((0, _sum.sum)((0, _square.square)(x), axis));
    }

    throw new Error(`Error in norm: invalid ord value: ${p}`);
  }

  throw new Error(`Error in norm: invalid axis: ${axis}`);
}

const norm = (0, _operation.op)({
  norm_
});
exports.norm = norm;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./abs":"U9d5","./axis_util":"mPwf","./max":"KIVY","./min":"pkmC","./operation":"uE86","./pow":"o2Kl","./reshape":"F0cm","./scalar":"TiGU","./sqrt":"brr7","./square":"KiGo","./sum":"kc8w"}],"SiXR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.movingAverage = void 0;

var _tensor_util = require("../tensor_util");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _add = require("./add");

var _div = require("./div");

var _mul = require("./mul");

var _operation = require("./operation");

var _pow = require("./pow");

var _scalar = require("./scalar");

var _sub = require("./sub");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Compute the moving average of a variable.
 *
 * Without zeroDebias, the moving average operation is defined by:
 *   `v += delta`
 * where
 *   `delta = (1 - decay) * (x - v)`
 *
 * With zeroDebias (default), the `delta` term is scaled to debias the
 * effect of the (assumed) zero-initialization of `v`.
 *   `delta /= (1 - decay ^ step)`
 *
 * For more details on the zero-debiasing algorithm, see:
 *   https://arxiv.org/abs/1412.6980
 *
 * Note that this function is completely stateless and does not keep track of
 * step count. The step count needs to be maintained by the caller and passed
 * in as `step`.
 *
 * @param v The current moving average value.
 * @param x New input value, must have the same shape and dtype as `v`.
 * @param decay The decay factor. Typical values are 0.95 and 0.99.
 * @param step Step count.
 * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).
 * @returns The new moving average value.
 *
 * @doc {heading: 'Operations', subheading: 'Moving Average'}
 */
function movingAverage_(v, x, decay, step, zeroDebias = true) {
  const $v = (0, _tensor_util_env.convertToTensor)(v, 'v', 'movingAverage');
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'movingAverage');
  const $decay = (0, _tensor_util_env.convertToTensor)(decay, 'decay', 'movingAverage');
  (0, _tensor_util.assertTypesMatch)($v, $x);
  util.assert(util.arraysEqual($v.shape, $x.shape), () => 'Shape mismatch in v and x');
  const one = (0, _scalar.scalar)(1);
  const oneMinusDecay = (0, _sub.sub)(one, $decay);
  let update = (0, _mul.mul)((0, _sub.sub)($x, $v), oneMinusDecay);

  if (zeroDebias) {
    util.assert(step != null, () => 'When using zeroDebias: true, step is required.');
    const $step = (0, _tensor_util_env.convertToTensor)(step, 'step', 'movingAverage');
    update = (0, _div.div)(update, (0, _sub.sub)(one, (0, _pow.pow)($decay, $step)));
  }

  return (0, _add.add)($v, update);
}

const movingAverage = (0, _operation.op)({
  movingAverage_
});
exports.movingAverage = movingAverage;
},{"../tensor_util":"wtFc","../tensor_util_env":"y4X4","../util":"XXxQ","./add":"N73o","./div":"S2L5","./mul":"tBJ4","./operation":"uE86","./pow":"o2Kl","./scalar":"TiGU","./sub":"SgzI"}],"r4bT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scatterND = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

var scatter_nd_util = _interopRequireWildcard(require("./scatter_nd_util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a new tensor by applying sparse updates to individual
 * values or slices within a zero tensor of the given shape tensor according to
 * indices. This operator is the inverse of the `tf.gatherND` operator which
 * extracts values or slices from a given tensor.
 *
 * ```js
 * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');
 * const updates = tf.tensor1d([9, 10, 11, 12]);
 * const shape = [8];
 * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]
 * ```
 *
 * @param indices The tensor contains the indices into the output tensor.
 * @param updates The tensor contains the value for the indices.
 * @param shape: The shape of the output tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */
function scatterND_(indices, updates, shape) {
  const $indices = (0, _tensor_util_env.convertToTensor)(indices, 'indices', 'scatterND', 'int32');
  const $updates = (0, _tensor_util_env.convertToTensor)(updates, 'updates', 'scatterND');
  scatter_nd_util.validateInput($updates, $indices, shape);
  const inputs = {
    indices: $indices,
    updates: $updates
  };
  const attrs = {
    shape
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  return _engine.ENGINE.runKernel(_kernel_names.ScatterNd, inputs, attrs);
}

const scatterND = (0, _operation.op)({
  scatterND_
});
exports.scatterND = scatterND;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86","./scatter_nd_util":"keWG"}],"M5Dq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateInput = validateInput;

/**
 * Validate sparseToDense inputs.
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape number[]. Shape of the dense output tensor.
 * @param validateIndices boolean. indice validation is not supported, error
 * will be thrown if it is set.
 */
function validateInput(sparseIndices, sparseValues, outputShape, defaultValues) {
  if (sparseIndices.dtype !== 'int32') {
    throw new Error('tf.sparseToDense() expects the indices to be int32 type,' + ` but the dtype was ${sparseIndices.dtype}.`);
  }

  if (sparseIndices.rank > 2) {
    throw new Error('sparseIndices should be a scalar, vector, or matrix,' + ` but got shape ${sparseIndices.shape}.`);
  }

  const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;
  const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;

  if (outputShape.length !== numDims) {
    throw new Error('outputShape has incorrect number of elements:,' + ` ${outputShape.length}, should be: ${numDims}.`);
  }

  const numValues = sparseValues.size;

  if (!(sparseValues.rank === 0 || sparseValues.rank === 1 && numValues === numElems)) {
    throw new Error('sparseValues has incorrect shape ' + `${sparseValues.shape}, should be [] or [${numElems}]`);
  }

  if (sparseValues.dtype !== defaultValues.dtype) {
    throw new Error('sparseValues.dtype must match defaultValues.dtype');
  }
}
},{}],"s9K8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseToDense = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var sparse_to_dense = _interopRequireWildcard(require("../ops/sparse_to_dense_util"));

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Converts a sparse representation into a dense tensor.
 *
 * Builds an array dense with shape outputShape such that:
 *
 * // If sparseIndices is scalar
 * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)
 *
 * // If sparseIndices is a vector, then for each i
 * dense[sparseIndices[i]] = sparseValues[i]
 *
 * // If sparseIndices is an n by d matrix, then for each i in [0, n)
 * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]
 * All other values in dense are set to defaultValue. If sparseValues is a
 * scalar, all sparse indices are set to this single value.
 *
 * If indices are repeated the final value is summed over all values for those
 * indices.
 *
 * ```js
 * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');
 * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');
 * const shape = [8];
 * tf.sparseToDense(indices, values, shape).print();
 * ```
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape Shape of the dense output tensor. the type is inferred.
 * @param defaultValue Scalar. Value to set for indices not specified in
 * sparseIndices. Defaults to zero.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function sparseToDense_(sparseIndices, sparseValues, outputShape, defaultValue = 0) {
  const $sparseIndices = (0, _tensor_util_env.convertToTensor)(sparseIndices, 'sparseIndices', 'sparseToDense', 'int32');
  const $sparseValues = (0, _tensor_util_env.convertToTensor)(sparseValues, 'sparseValues', 'sparseToDense');
  const $defaultValue = (0, _tensor_util_env.convertToTensor)(defaultValue, 'defaultValue', 'sparseToDense', $sparseValues.dtype);
  sparse_to_dense.validateInput($sparseIndices, $sparseValues, outputShape, $defaultValue);
  const inputs = {
    sparseIndices: $sparseIndices,
    sparseValues: $sparseValues,
    defaultValue: $defaultValue
  };
  const attrs = {
    outputShape
  };
  return _engine.ENGINE.runKernel(_kernel_names.SparseToDense, inputs, attrs);
}

const sparseToDense = (0, _operation.op)({
  sparseToDense_
});
exports.sparseToDense = sparseToDense;
},{"../engine":"phT7","../kernel_names":"rJl6","../ops/sparse_to_dense_util":"M5Dq","../tensor_util_env":"y4X4","./operation":"uE86"}],"PYkI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gatherND = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _tensor_util_env = require("../tensor_util_env");

var _operation = require("./operation");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Gather slices from input tensor into a Tensor with shape specified by
 * `indices`.
 *
 * `indices` is an K-dimensional integer tensor, best thought of as a
 * (K-1)-dimensional tensor of indices into input, where each element defines a
 * slice of input:
 * output[\\(i_0, ..., i_{K-2}\\)] = input[indices[\\(i_0, ..., i_{K-2}\\)]]
 *
 * Whereas in `tf.gather`, `indices` defines slices into the first dimension of
 * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions
 * of input, where N = indices.shape[-1].
 *
 * The last dimension of indices can be at most the rank of input:
 * indices.shape[-1] <= input.rank
 *
 * The last dimension of `indices` corresponds to elements
 * (if indices.shape[-1] == input.rank) or slices
 * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of
 * input.
 * The output tensor has shape
 * indices.shape[:-1] + input.shape[indices.shape[-1]:]
 *
 * Note that on CPU, if an out of bound index is found, an error is returned. On
 * GPU, if an out of bound index is found, a 0 is stored in the corresponding
 * output value.
 *
 * ```js
 * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');
 * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);
 * tf.gatherND(input, indices).print() // [10, 11]
 * ```
 *
 * @param x The tensor from which to gather values.
 * @param indices Index tensor, must be of type int32.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */
function gatherND_(x, indices) {
  const $indices = (0, _tensor_util_env.convertToTensor)(indices, 'indices', 'gatherND', 'int32');
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'gatherND', 'string_or_numeric');
  const inputs = {
    params: $x,
    indices: $indices
  };
  return _engine.ENGINE.runKernel(_kernel_names.GatherNd, inputs);
}

const gatherND = (0, _operation.op)({
  gatherND_
});
exports.gatherND = gatherND;
},{"../engine":"phT7","../kernel_names":"rJl6","../tensor_util_env":"y4X4","./operation":"uE86"}],"tkiJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNoiseShape = getNoiseShape;

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Normalize noise shape based on provided tensor and noise shape.
 *
 * @param x Tensor.
 * @param noiseShape The shape for the randomly generated keep/drop flags, as
 *   an array of numbers. Optional.
 * @returns Normalized noise shape.
 */
function getNoiseShape(x, noiseShape) {
  if (noiseShape == null) {
    return x.shape.slice();
  }

  if (util.arraysEqual(x.shape, noiseShape)) {
    return noiseShape;
  }

  if (x.shape.length === noiseShape.length) {
    const newDimension = [];

    for (let i = 0; i < x.shape.length; i++) {
      if (noiseShape[i] == null && x.shape[i] != null) {
        newDimension.push(x.shape[i]);
      } else {
        newDimension.push(noiseShape[i]);
      }
    }

    return newDimension;
  }

  return noiseShape;
}
},{"../util":"XXxQ"}],"jb36":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dropout = void 0;

var _tensor = require("../tensor");

var _tensor_util_env = require("../tensor_util_env");

var util = _interopRequireWildcard(require("../util"));

var _add = require("./add");

var _div = require("./div");

var _dropout_util = require("./dropout_util");

var _floor = require("./floor");

var _mul = require("./mul");

var _operation = require("./operation");

var _random_uniform = require("./random_uniform");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes dropout.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 2, 1]);
 * const rate = 0.75;
 * const output = tf.dropout(x, rate);
 * output.print();
 * ```
 *
 * @param x A floating point Tensor or TensorLike.
 * @param rate A float in the range [0, 1). The probability that each element
 *   of x is discarded.
 * @param noiseShape An array of numbers of type int32, representing the
 * shape for randomly generated keep/drop flags. If the noiseShape has null
 * value, it will be automatically replaced with the x's relative dimension
 * size. Optional.
 * @param seed Used to create random seeds. Optional.
 * @returns A Tensor of the same shape of x.
 *
 * @doc {heading: 'Operations', subheading: 'Dropout'}
 */
function dropout_(x, rate, noiseShape, seed) {
  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'dropout');
  util.assert($x.dtype === 'float32', () => `x has to be a floating point tensor since it's going to be ` + `scaled, but got a ${$x.dtype} tensor instead.`);
  util.assert(rate >= 0 && rate < 1, () => `rate must be a float in the range [0, 1), but got ${rate}.`);

  if (rate === 0) {
    return x instanceof _tensor.Tensor ? $x.clone() : $x;
  }

  const $noiseShape = (0, _dropout_util.getNoiseShape)($x, noiseShape);
  const keepProb = 1 - rate;
  const multiplier = (0, _div.div)((0, _floor.floor)((0, _add.add)((0, _random_uniform.randomUniform)($noiseShape, 0, 1, 'float32', seed), keepProb)), keepProb);
  return (0, _mul.mul)($x, multiplier);
}

const dropout = (0, _operation.op)({
  dropout_
});
exports.dropout = dropout;
},{"../tensor":"eFW4","../tensor_util_env":"y4X4","../util":"XXxQ","./add":"N73o","./div":"S2L5","./dropout_util":"tkiJ","./floor":"EeTS","./mul":"tBJ4","./operation":"uE86","./random_uniform":"Imph"}],"Ubrm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enclosingPowerOfTwo = enclosingPowerOfTwo;
exports.cosineWindow = cosineWindow;

var _tensor1d = require("./tensor1d");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function enclosingPowerOfTwo(value) {
  // Return 2**N for integer N such that 2**N >= value.
  return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));
}

function cosineWindow(windowLength, a, b) {
  const even = 1 - windowLength % 2;
  const newValues = new Float32Array(windowLength);

  for (let i = 0; i < windowLength; ++i) {
    const cosArg = 2.0 * Math.PI * i / (windowLength + even - 1);
    newValues[i] = a - b * Math.cos(cosArg);
  }

  return (0, _tensor1d.tensor1d)(newValues, 'float32');
}
},{"./tensor1d":"vKgg"}],"oeUN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inTopKAsync = void 0;

var _tensor_util_env = require("../tensor_util_env");

var _util = require("../util");

var _tensor = require("./tensor");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns whether the targets are in the top K predictions.
 *
 * ```js
 * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);
 * const targets = tf.tensor1d([2, 0]);
 * const precision = await tf.inTopKAsync(predictions, targets);
 * precision.print();
 * ```
 * @param predictions 2-D or higher `tf.Tensor` with last dimension being
 *     at least `k`.
 * @param targets 1-D or higher `tf.Tensor`.
 * @param k Optional Number of top elements to look at for computing precision,
 *     default to 1.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
async function inTopKAsync_(predictions, targets, k = 1) {
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'inTopK');
  const $targets = (0, _tensor_util_env.convertToTensor)(targets, 'targets', 'inTopK');
  (0, _util.assert)($predictions.rank > 1, () => 'inTopK() expects the predictions to be of rank 2 or higher, ' + `but got ${$predictions.rank}`);
  (0, _util.assert)($predictions.rank - 1 === $targets.rank, () => `predictions rank should be 1 larger than ` + `targets rank, but got predictions rank ` + `${$predictions.rank} and targets rank ${$targets.rank}`);
  (0, _util.assertShapesMatch)($predictions.shape.slice(0, $predictions.shape.length - 1), $targets.shape, `predictions's shape should be align with the targets' shape, ` + 'except the last dimension.');
  const lastDim = $predictions.shape[$predictions.shape.length - 1];
  (0, _util.assert)(k > 0 && k <= lastDim, () => `'k' passed to inTopK() must be > 0 && <= the predictions last ` + `dimension (${lastDim}), but got ${k}`);
  const predictionsVals = await $predictions.data();
  const targetsVals = await $targets.data(); // Reshape predictionsVals into a 2d tensor [batch, lastDim]
  // and look up topK along lastDim.

  const [batch, size] = [predictionsVals.length / lastDim, lastDim];
  const precision = (0, _util.getTypedArrayFromDType)('bool', batch);

  for (let b = 0; b < batch; b++) {
    const offset = b * size;
    const vals = predictionsVals.subarray(offset, offset + size);
    const valAndInd = [];

    for (let i = 0; i < vals.length; i++) {
      valAndInd.push({
        value: vals[i],
        index: i
      });
    }

    valAndInd.sort((a, b) => b.value - a.value);
    precision[b] = 0;

    for (let i = 0; i < k; i++) {
      if (valAndInd[i].index === targetsVals[b]) {
        precision[b] = 1;
        break;
      }
    }
  }

  if (predictions !== $predictions) {
    $predictions.dispose();
  }

  if (targets !== $targets) {
    $targets.dispose();
  } // Output precision has the same shape as targets.


  return (0, _tensor.tensor)(precision, $targets.shape, 'bool');
}

const inTopKAsync = inTopKAsync_;
exports.inTopKAsync = inTopKAsync;
},{"../tensor_util_env":"y4X4","../util":"XXxQ","./tensor":"woAd"}],"LPa2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2DBackpropFilter = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var util = _interopRequireWildcard(require("../util"));

var _operation = require("./operation");

var _reshape = require("./reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the derivative of the filter of a 2D convolution.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.
 * @param dy The dy image, of rank 4 or rank 3, of shape
 *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.
 * @param filterShape The shape of the filter, length 4,
 *     [filterHeight, filterWidth, inDepth, outDepth].
 * @param strides The strides of the convolution: [strideHeight,
 * strideWidth].
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function conv2DBackpropFilter_(x, dy, filterShape, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {
  let x4D = x;

  if (x.rank === 3) {
    x4D = (0, _reshape.reshape)(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
  }

  let dy4D = dy;

  if (dy4D.rank === 3) {
    dy4D = (0, _reshape.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` + `${x4D.shape}.`);
  util.assert(dy4D.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` + `${dy4D.shape}.`);
  util.assert(filterShape.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` + `${filterShape}.`);
  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];
  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];
  util.assert(inDepth === filterShape[2], () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` + `match input depth in filter (${filterShape[2]}.`);
  util.assert(outDepth === filterShape[3], () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` + `match output depth for filter (${filterShape[3]}).`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in conv2dDerFilter: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const inputs = {
    x: x4D,
    dy: dy4D
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dimRoundingMode,
    filterShape
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  return _engine.ENGINE.runKernel(_kernel_names.Conv2DBackpropFilter, inputs, attrs);
}

const conv2DBackpropFilter = (0, _operation.op)({
  conv2DBackpropFilter_
});
exports.conv2DBackpropFilter = conv2DBackpropFilter;
},{"../engine":"phT7","../kernel_names":"rJl6","../util":"XXxQ","./operation":"uE86","./reshape":"F0cm"}],"Pva5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFusedDyActivation = getFusedDyActivation;
exports.getFusedBiasGradient = getFusedBiasGradient;
exports.applyActivation = applyActivation;
exports.shouldFuse = void 0;

var broadcast_util = _interopRequireWildcard(require("./broadcast_util"));

var _elu = require("./elu");

var _leaky_relu = require("./leaky_relu");

var _mul = require("./mul");

var _prelu = require("./prelu");

var _relu = require("./relu");

var _relu2 = require("./relu6");

var _reshape = require("./reshape");

var _sigmoid = require("./sigmoid");

var _step = require("./step");

var _sum = require("./sum");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Returns gradient for fused activation.
function getFusedDyActivation(dy, y, activation) {
  if (activation == null || activation === 'linear') {
    return dy;
  }

  if (activation === 'relu') {
    return (0, _mul.mul)(dy, (0, _step.step)(y));
  }

  throw new Error(`Cannot compute gradient for fused activation ${activation}.`);
} // Returns gradient for fused bias.


function getFusedBiasGradient(bias, dyActivation) {
  let res = dyActivation;
  const reduceAxes = broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);

  if (reduceAxes.length > 0) {
    res = (0, _sum.sum)(res, reduceAxes);
  }

  return (0, _reshape.reshape)(res, bias.shape);
}

function applyActivation(x, activation, preluActivationWeights, leakyreluAlpha) {
  if (activation === 'linear') {
    return x;
  } else if (activation === 'relu') {
    return (0, _relu.relu)(x);
  } else if (activation === 'elu') {
    return (0, _elu.elu)(x);
  } else if (activation === 'relu6') {
    return (0, _relu2.relu6)(x);
  } else if (activation === 'prelu') {
    return (0, _prelu.prelu)(x, preluActivationWeights);
  } else if (activation === 'leakyrelu') {
    return (0, _leaky_relu.leakyRelu)(x, leakyreluAlpha);
  } else if (activation === 'sigmoid') {
    return (0, _sigmoid.sigmoid)(x);
  }

  throw new Error(`Unknown fused activation ${activation}.`);
} // Whether we should call fused ops.


const shouldFuse = (gradientDepth, activation) => {
  const gradientMode = gradientDepth > 0;
  return !gradientMode || activation === 'linear';
};

exports.shouldFuse = shouldFuse;
},{"./broadcast_util":"fD2T","./elu":"qSof","./leaky_relu":"RYa8","./mul":"tBJ4","./prelu":"Xs9q","./relu":"JbIg","./relu6":"urTr","./reshape":"F0cm","./sigmoid":"DbGB","./step":"vRkD","./sum":"kc8w"}],"SiRR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2d = void 0;

var _engine = require("../../engine");

var _gradients = require("../../gradients");

var _kernel_names = require("../../kernel_names");

var _tensor_util = require("../../tensor_util");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _add = require("../add");

var broadcast_util = _interopRequireWildcard(require("../broadcast_util"));

var _conv2d = require("../conv2d");

var _conv2d_backprop_filter = require("../conv2d_backprop_filter");

var _conv2d_backprop_input = require("../conv2d_backprop_input");

var conv_util = _interopRequireWildcard(require("../conv_util"));

var _fused_util = require("../fused_util");

var _operation = require("../operation");

var _reshape = require("../reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes a 2D convolution over the input x, optionally fused with adding a
 * bias and applying an activation.
 *
 * ```js
 * const inputDepth = 2;
 * const inShape = [2, 2, 2, inputDepth];
 * const outputDepth = 2;
 * const fSize = 1;
 * const pad = 0;
 * const strides = 1;
 *
 * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
 * 16], inShape);
 * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,
 * outputDepth]);
 *
 * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',
 * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();
 * ```
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid` output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`) to be
 *     applied
 *      after biasAdd.
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`
 *     activation.
 */
function fusedConv2d_({
  x,
  filter,
  strides,
  pad,
  dataFormat = 'NHWC',
  dilations = [1, 1],
  dimRoundingMode,
  bias,
  activation = 'linear',
  preluActivationWeights,
  leakyreluAlpha
}) {
  activation = activation || 'linear';

  if ((0, _fused_util.shouldFuse)(_engine.ENGINE.state.gradientDepth, activation) === false) {
    let result = (0, _conv2d.conv2d)(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);

    if (bias != null) {
      result = (0, _add.add)(result, bias);
    }

    return (0, _fused_util.applyActivation)(result, activation, preluActivationWeights, leakyreluAlpha);
  }

  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'conv2d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'conv2d');
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ` + `${x4D.rank}.`);
  util.assert($filter.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in fused conv2d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in conv2d: depth of input (${x4D.shape[3]}) must match ` + `input depth for filter ${$filter.shape[2]}.`);
  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
  util.assert(dataFormat === 'NHWC', () => `Error in conv2d: got dataFormat of ${dataFormat} but only NHWC is currently supported.`);
  const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);
  let $bias;

  if (bias != null) {
    $bias = (0, _tensor_util_env.convertToTensor)(bias, 'bias', 'fused conv2d');
    [$bias] = (0, _tensor_util.makeTypesMatch)($bias, $x);
    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
  }

  let $preluActivationWeights;

  if (preluActivationWeights != null) {
    $preluActivationWeights = (0, _tensor_util_env.convertToTensor)(preluActivationWeights, 'prelu weights', 'fused conv2d');
  }

  const grad = (dy, saved) => {
    const [$filter, x4D, y, $bias] = saved;
    const dyActivation = (0, _fused_util.getFusedDyActivation)(dy, y, activation);
    util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of fused conv2D: ' + `dilation rates greater than 1 ` + `are not yet supported in gradients. Got dilations '${dilations}'`);
    const xDer = (0, _conv2d_backprop_input.conv2DBackpropInput)(x4D.shape, dyActivation, $filter, strides, pad);
    const filterDer = (0, _conv2d_backprop_filter.conv2DBackpropFilter)(x4D, dyActivation, $filter.shape, strides, pad);
    const der = [xDer, filterDer];

    if ($bias != null) {
      const biasDer = (0, _fused_util.getFusedBiasGradient)($bias, dyActivation);
      der.push(biasDer);
    }

    return der;
  };

  const inputs = {
    x: x4D,
    filter: $filter,
    bias: $bias,
    preluActivationWeights: $preluActivationWeights
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode,
    activation,
    leakyreluAlpha
  }; // Depending on the the params passed in we will have different number of
  // inputs and thus a a different number of elements in the gradient.

  if (bias == null) {
    const customOp = (0, _gradients.customGrad)((x4D, filter, save) => {
      let res = // tslint:disable-next-line: no-unnecessary-type-assertion
      _engine.ENGINE.runKernel(_kernel_names.FusedConv2D, inputs, attrs);

      save([filter, x4D, res]);

      if (reshapedTo4D) {
        // tslint:disable-next-line: no-unnecessary-type-assertion
        res = (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }

      return {
        value: res,
        gradFunc: grad
      };
    });
    return customOp(x4D, $filter);
  } else {
    const customOpWithBias = (0, _gradients.customGrad)((x4D, filter, bias, save) => {
      let res = _engine.ENGINE.runKernel(_kernel_names.FusedConv2D, inputs, attrs);

      save([filter, x4D, res, bias]);

      if (reshapedTo4D) {
        // tslint:disable-next-line: no-unnecessary-type-assertion
        res = (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }

      return {
        value: res,
        gradFunc: grad
      };
    });
    return customOpWithBias(x4D, $filter, $bias);
  }
}

const conv2d = (0, _operation.op)({
  fusedConv2d_
});
exports.conv2d = conv2d;
},{"../../engine":"phT7","../../gradients":"VR5t","../../kernel_names":"rJl6","../../tensor_util":"wtFc","../../tensor_util_env":"y4X4","../../util":"XXxQ","../add":"N73o","../broadcast_util":"fD2T","../conv2d":"CVMs","../conv2d_backprop_filter":"LPa2","../conv2d_backprop_input":"sf3S","../conv_util":"PhWH","../fused_util":"Pva5","../operation":"uE86","../reshape":"F0cm"}],"QLaB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthwiseConv2dNativeBackpropFilter = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _operation = require("./operation");

var _reshape = require("./reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNativeBackpropFilter_(x, dy, filterShape, strides, pad, dilations = [1, 1], dimRoundingMode) {
  let x4D = x;

  if (x.rank === 3) {
    x4D = (0, _reshape.reshape)(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
  }

  let dy4D = dy;

  if (dy4D.rank === 3) {
    dy4D = (0, _reshape.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
  }

  const inputs = {
    x: x4D,
    dy: dy4D
  };
  const attrs = {
    strides,
    pad,
    dimRoundingMode,
    dilations,
    filterShape
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  return _engine.ENGINE.runKernel(_kernel_names.DepthwiseConv2dNativeBackpropFilter, inputs, attrs);
}

const depthwiseConv2dNativeBackpropFilter = (0, _operation.op)({
  depthwiseConv2dNativeBackpropFilter_
});
exports.depthwiseConv2dNativeBackpropFilter = depthwiseConv2dNativeBackpropFilter;
},{"../engine":"phT7","../kernel_names":"rJl6","./operation":"uE86","./reshape":"F0cm"}],"vLIu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthwiseConv2dNativeBackpropInput = void 0;

var _engine = require("../engine");

var _kernel_names = require("../kernel_names");

var _operation = require("./operation");

var _reshape = require("./reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNativeBackpropInput_(xShape, dy, filter, strides, pad, dilations = [1, 1], dimRoundingMode) {
  let dy4D = dy;
  let reshapedTo4D = false;

  if (dy.rank === 3) {
    reshapedTo4D = true;
    dy4D = (0, _reshape.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
  }

  const inputs = {
    dy: dy4D,
    filter
  };
  const attrs = {
    strides,
    pad,
    dimRoundingMode,
    dilations,
    inputShape: xShape
  };

  const res = // tslint:disable-next-line: no-unnecessary-type-assertion
  _engine.ENGINE.runKernel(_kernel_names.DepthwiseConv2dNativeBackpropInput, inputs, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const depthwiseConv2dNativeBackpropInput = (0, _operation.op)({
  depthwiseConv2dNativeBackpropInput_
});
exports.depthwiseConv2dNativeBackpropInput = depthwiseConv2dNativeBackpropInput;
},{"../engine":"phT7","../kernel_names":"rJl6","./operation":"uE86","./reshape":"F0cm"}],"e8Po":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthwiseConv2d = void 0;

var _engine = require("../../engine");

var _gradients = require("../../gradients");

var _kernel_names = require("../../kernel_names");

var _tensor_util = require("../../tensor_util");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _add = require("../add");

var broadcast_util = _interopRequireWildcard(require("../broadcast_util"));

var conv_util = _interopRequireWildcard(require("../conv_util"));

var _depthwise_conv2d = require("../depthwise_conv2d");

var _depthwise_conv2d_native_backprop_filter = require("../depthwise_conv2d_native_backprop_filter");

var _depthwise_conv2d_native_backprop_input = require("../depthwise_conv2d_native_backprop_input");

var _fused_util = require("../fused_util");

var _operation = require("../operation");

var _reshape = require("../reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes depthwise 2D convolution, optionally fused with adding a
 * bias and applying an activation.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`).
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`
 *     activation.
 */
function fusedDepthwiseConv2d_({
  x,
  filter,
  strides,
  pad,
  dataFormat = 'NHWC',
  dilations = [1, 1],
  dimRoundingMode,
  bias,
  activation = 'linear',
  preluActivationWeights,
  leakyreluAlpha
}) {
  if ((0, _fused_util.shouldFuse)(_engine.ENGINE.state.gradientDepth, activation) === false) {
    let result = (0, _depthwise_conv2d.depthwiseConv2d)(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);

    if (bias != null) {
      result = (0, _add.add)(result, bias);
    }

    return (0, _fused_util.applyActivation)(result, activation, preluActivationWeights, leakyreluAlpha);
  }

  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'depthwiseConv2d');
  const $filter = (0, _tensor_util_env.convertToTensor)(filter, 'filter', 'depthwiseConv2d');
  let x4D = $x;
  let reshapedTo4D = false;

  if ($x.rank === 3) {
    reshapedTo4D = true;
    x4D = (0, _reshape.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
  }

  util.assert(x4D.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);
  util.assert($filter.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, ` + `but got rank ${$filter.rank}.`);
  util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in fused depthwiseConv2d: number of input channels ` + `(${x4D.shape[3]}) must match the inChannels dimension in ` + `filter ${$filter.shape[2]}.`);

  if (dilations == null) {
    dilations = [1, 1];
  }

  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in fused depthwiseConv2d: Either strides or dilations must ' + `be 1. Got strides ${strides} and dilations '${dilations}'`);

  if (dimRoundingMode != null) {
    util.assert(util.isInt(pad), () => `Error in fused depthwiseConv2d: pad must be an integer when ` + `using dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
  }

  const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true
  /* depthwise */
  );
  let $bias;

  if (bias != null) {
    $bias = (0, _tensor_util_env.convertToTensor)(bias, 'bias', 'fused conv2d');
    [$bias] = (0, _tensor_util.makeTypesMatch)($bias, $x);
    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
  }

  let $preluActivationWeights;

  if (preluActivationWeights != null) {
    $preluActivationWeights = (0, _tensor_util_env.convertToTensor)(preluActivationWeights, 'prelu weights', 'fused depthwiseConv2d');
  }

  const grad = (dy, saved) => {
    util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of fused depthwiseConv2d: dilation rates ' + `greater than 1 are not yet supported. Got dilations ` + `'${dilations}'`);
    const [$filter, x4D, y, bias] = saved;
    const dyActivation = (0, _fused_util.getFusedDyActivation)(dy, y, activation);
    const xDer = (0, _depthwise_conv2d_native_backprop_input.depthwiseConv2dNativeBackpropInput)(x4D.shape, dyActivation, $filter, strides, pad, dilations, dimRoundingMode);
    const filterDer = (0, _depthwise_conv2d_native_backprop_filter.depthwiseConv2dNativeBackpropFilter)(x4D, dyActivation, $filter.shape, strides, pad, dilations, dimRoundingMode);

    if (bias != null) {
      const biasDer = (0, _fused_util.getFusedBiasGradient)($bias, dyActivation);
      return [xDer, filterDer, biasDer];
    }

    return [xDer, filterDer];
  };

  const inputs = {
    x: x4D,
    filter: $filter,
    bias: $bias,
    preluActivationWeights: $preluActivationWeights
  };
  const attrs = {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode,
    activation,
    leakyreluAlpha
  }; // Depending on the the params passed in we will have different number of
  // inputs and thus a a different number of elements in the gradient.

  if (bias == null) {
    const customOp = (0, _gradients.customGrad)((x4D, filter, save) => {
      // tslint:disable-next-line: no-unnecessary-type-assertion
      let res = _engine.ENGINE.runKernel(_kernel_names.FusedDepthwiseConv2D, inputs, attrs);

      save([filter, x4D, res]);

      if (reshapedTo4D) {
        // tslint:disable-next-line: no-unnecessary-type-assertion
        res = (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }

      return {
        value: res,
        gradFunc: grad
      };
    });
    return customOp(x4D, $filter);
  } else {
    const customOpWithBias = (0, _gradients.customGrad)((x4D, filter, bias, save) => {
      // tslint:disable-next-line: no-unnecessary-type-assertion
      let res = _engine.ENGINE.runKernel(_kernel_names.FusedDepthwiseConv2D, inputs, attrs);

      save([filter, x4D, res, bias]);

      if (reshapedTo4D) {
        // tslint:disable-next-line: no-unnecessary-type-assertion
        res = (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }

      return {
        value: res,
        gradFunc: grad
      };
    });
    return customOpWithBias(x4D, $filter, $bias);
  }
}

const depthwiseConv2d = (0, _operation.op)({
  fusedDepthwiseConv2d_
});
exports.depthwiseConv2d = depthwiseConv2d;
},{"../../engine":"phT7","../../gradients":"VR5t","../../kernel_names":"rJl6","../../tensor_util":"wtFc","../../tensor_util_env":"y4X4","../../util":"XXxQ","../add":"N73o","../broadcast_util":"fD2T","../conv_util":"PhWH","../depthwise_conv2d":"HEHz","../depthwise_conv2d_native_backprop_filter":"QLaB","../depthwise_conv2d_native_backprop_input":"vLIu","../fused_util":"Pva5","../operation":"uE86","../reshape":"F0cm"}],"PAQD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matMul = void 0;

var _engine = require("../../engine");

var _gradients = require("../../gradients");

var _kernel_names = require("../../kernel_names");

var _tensor_util = require("../../tensor_util");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _add = require("../add");

var broadcast_util = _interopRequireWildcard(require("../broadcast_util"));

var _fused_util = require("../fused_util");

var _mat_mul = require("../mat_mul");

var _operation = require("../operation");

var _reshape = require("../reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the dot product of two matrices with optional activation and bias.
 *
 * ```js
 * const a = tf.tensor2d([-1, -2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const bias = tf.tensor2d([1, 2], [1, 2]);
 *
 * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();
 * ```
 *
 * @param obj An object with the following properties:
 * - `a` First matrix in dot product operation.
 * - `b` Second matrix in dot product operation.
 * - `transposeA` If true, `a` is transposed before multiplication.
 * - `transposeB` If true, `b` is transposed before multiplication.
 * - `bias` Matrix to be added to the result.
 * - `activation` Name of activation kernel (defaults to `linear`).
 * - `preluActivationWeights` Tensor of prelu weights.
 * - `leakyreluAlpha` Alpha of leakyrelu.
 */
function fusedMatMul_({
  a,
  b,
  transposeA = false,
  transposeB = false,
  bias,
  activation = 'linear',
  preluActivationWeights,
  leakyreluAlpha
}) {
  if ((0, _fused_util.shouldFuse)(_engine.ENGINE.state.gradientDepth, activation) === false) {
    let result = (0, _mat_mul.matMul)(a, b, transposeA, transposeB);

    if (bias != null) {
      result = (0, _add.add)(result, bias);
    }

    return (0, _fused_util.applyActivation)(result, activation, preluActivationWeights, leakyreluAlpha);
  }

  let $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'fused matMul');
  let $b = (0, _tensor_util_env.convertToTensor)(b, 'b', 'fused matMul');
  [$a, $b] = (0, _tensor_util.makeTypesMatch)($a, $b);
  const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];
  const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];
  const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];
  const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];
  const outerDimsA = $a.shape.slice(0, -2);
  const outerDimsB = $b.shape.slice(0, -2);
  const batchDimA = util.sizeFromShape(outerDimsA);
  const batchDimB = util.sizeFromShape(outerDimsB);
  util.assert($a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank, () => `Error in fused matMul: inputs must have the same rank of at ` + `least 2, got ranks ${$a.rank} and ${$b.rank}.`);
  util.assert(util.arraysEqual(outerDimsA, outerDimsB), () => `Error in fused matMul: outer dimensions (${outerDimsA}) and (` + `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` + `${$b.shape} must match.`);
  util.assert(innerShapeA === innerShapeB, () => `Error in fused matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` + `${$b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);
  const outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);
  const a3D = transposeA ? (0, _reshape.reshape)($a, [batchDimA, innerShapeA, outerShapeA]) : (0, _reshape.reshape)($a, [batchDimA, outerShapeA, innerShapeA]);
  const b3D = transposeB ? (0, _reshape.reshape)($b, [batchDimB, outerShapeB, innerShapeB]) : (0, _reshape.reshape)($b, [batchDimB, innerShapeB, outerShapeB]);
  let $bias;

  if (bias != null) {
    $bias = (0, _tensor_util_env.convertToTensor)(bias, 'bias', 'fused matMul');
    [$bias] = (0, _tensor_util.makeTypesMatch)($bias, $a);
    broadcast_util.assertAndGetBroadcastShape(outShape, $bias.shape);
  }

  let $preluActivationWeights;

  if (preluActivationWeights != null) {
    $preluActivationWeights = (0, _tensor_util_env.convertToTensor)(preluActivationWeights, 'prelu weights', 'fused matMul');
  }

  const grad = (dy, saved) => {
    const [a3D, b3D, y, $bias] = saved; // we reshape dy because the result of the forward is not
    // necessarily going to be a 3d tensor due to a reshape done at the end of
    // the customOp.

    const dyActivation = (0, _fused_util.getFusedDyActivation)((0, _reshape.reshape)(dy, y.shape), y, activation);
    let aDer;
    let bDer;

    if (!transposeA && !transposeB) {
      aDer = (0, _mat_mul.matMul)(dyActivation, b3D, false, true);
      bDer = (0, _mat_mul.matMul)(a3D, dyActivation, true, false);
    } else if (!transposeA && transposeB) {
      aDer = (0, _mat_mul.matMul)(dyActivation, b3D, false, false);
      bDer = (0, _mat_mul.matMul)(dyActivation, a3D, true, false);
    } else if (transposeA && !transposeB) {
      aDer = (0, _mat_mul.matMul)(b3D, dyActivation, false, true);
      bDer = (0, _mat_mul.matMul)(a3D, dyActivation, false, false);
    } else {
      aDer = (0, _mat_mul.matMul)(b3D, dyActivation, true, true);
      bDer = (0, _mat_mul.matMul)(dyActivation, a3D, true, true);
    }

    if (bias != null) {
      const biasDer = (0, _fused_util.getFusedBiasGradient)($bias, dyActivation);
      return [aDer, bDer, biasDer];
    } else {
      return [aDer, bDer];
    }
  };

  const inputs = {
    a: a3D,
    b: b3D,
    bias: $bias,
    preluActivationWeights: $preluActivationWeights
  };
  const attrs = {
    transposeA,
    transposeB,
    activation,
    leakyreluAlpha
  }; // Depending on the the params passed in we will have different number of
  // inputs and thus a a different number of elements in the gradient.

  if (bias == null) {
    const customOp = (0, _gradients.customGrad)((a3D, b3D, save) => {
      const res = // tslint:disable-next-line: no-unnecessary-type-assertion
      _engine.ENGINE.runKernel(_kernel_names._FusedMatMul, inputs, attrs);

      save([a3D, b3D, res]);
      return {
        value: (0, _reshape.reshape)(res, outShape),
        gradFunc: grad
      };
    });
    return customOp(a3D, b3D);
  } else {
    const customOpWithBias = (0, _gradients.customGrad)((a3D, b3D, $bias, save) => {
      const res = // tslint:disable-next-line: no-unnecessary-type-assertion
      _engine.ENGINE.runKernel(_kernel_names._FusedMatMul, inputs, attrs);

      save([a3D, b3D, res, $bias]);
      return {
        value: (0, _reshape.reshape)(res, outShape),
        gradFunc: grad
      };
    });
    return customOpWithBias(a3D, b3D, $bias);
  }
}

const matMul = (0, _operation.op)({
  fusedMatMul_
});
exports.matMul = matMul;
},{"../../engine":"phT7","../../gradients":"VR5t","../../kernel_names":"rJl6","../../tensor_util":"wtFc","../../tensor_util_env":"y4X4","../../util":"XXxQ","../add":"N73o","../broadcast_util":"fD2T","../fused_util":"Pva5","../mat_mul":"zVDr","../operation":"uE86","../reshape":"F0cm"}],"Z9t3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "conv2d", {
  enumerable: true,
  get: function () {
    return _conv2d.conv2d;
  }
});
Object.defineProperty(exports, "depthwiseConv2d", {
  enumerable: true,
  get: function () {
    return _depthwise_conv2d.depthwiseConv2d;
  }
});
Object.defineProperty(exports, "matMul", {
  enumerable: true,
  get: function () {
    return _mat_mul.matMul;
  }
});

var _conv2d = require("./fused/conv2d");

var _depthwise_conv2d = require("./fused/depthwise_conv2d");

var _mat_mul = require("./fused/mat_mul");
},{"./fused/conv2d":"SiRR","./fused/depthwise_conv2d":"e8Po","./fused/mat_mul":"PAQD"}],"HdvD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hammingWindow = void 0;

var _operation = require("../operation");

var _signal_ops_util = require("../signal_ops_util");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Generate a hamming window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hammingWindow(10).print();
 * ```
 * @param The length of window
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function hammingWindow_(windowLength) {
  return (0, _signal_ops_util.cosineWindow)(windowLength, 0.54, 0.46);
}

const hammingWindow = (0, _operation.op)({
  hammingWindow_
});
exports.hammingWindow = hammingWindow;
},{"../operation":"uE86","../signal_ops_util":"Ubrm"}],"bdTr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hannWindow = void 0;

var _operation = require("../operation");

var _signal_ops_util = require("../signal_ops_util");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Generate a Hann window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hannWindow(10).print();
 * ```
 * @param The length of window
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function hannWindow_(windowLength) {
  return (0, _signal_ops_util.cosineWindow)(windowLength, 0.5, 0.5);
}

const hannWindow = (0, _operation.op)({
  hannWindow_
});
exports.hannWindow = hannWindow;
},{"../operation":"uE86","../signal_ops_util":"Ubrm"}],"Go7t":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.frame = void 0;

var _concat = require("../concat");

var _fill = require("../fill");

var _operation = require("../operation");

var _reshape = require("../reshape");

var _slice = require("../slice");

var _tensor2d = require("../tensor2d");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Expands input into frames of frameLength.
 * Slides a window size with frameStep.
 *
 * ```js
 * tf.signal.frame([1, 2, 3], 2, 1).print();
 * ```
 * @param signal The input tensor to be expanded
 * @param frameLength Length of each frame
 * @param frameStep The frame hop size in samples.
 * @param padEnd Whether to pad the end of signal with padValue.
 * @param padValue An number to use where the input signal does
 *     not exist when padEnd is True.
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function frame_(signal, frameLength, frameStep, padEnd = false, padValue = 0) {
  let start = 0;
  const output = [];

  while (start + frameLength <= signal.size) {
    output.push((0, _slice.slice)(signal, start, frameLength));
    start += frameStep;
  }

  if (padEnd) {
    while (start < signal.size) {
      const padLen = start + frameLength - signal.size;
      const pad = (0, _concat.concat)([(0, _slice.slice)(signal, start, frameLength - padLen), (0, _fill.fill)([padLen], padValue)]);
      output.push(pad);
      start += frameStep;
    }
  }

  if (output.length === 0) {
    return (0, _tensor2d.tensor2d)([], [0, frameLength]);
  }

  return (0, _reshape.reshape)((0, _concat.concat)(output), [output.length, frameLength]);
}

const frame = (0, _operation.op)({
  frame_
});
exports.frame = frame;
},{"../concat":"V5Ij","../fill":"gaCw","../operation":"uE86","../reshape":"F0cm","../slice":"wIos","../tensor2d":"UEzj"}],"jWvs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stft = void 0;

var _mul = require("../mul");

var _operation = require("../operation");

var _signal_ops_util = require("../signal_ops_util");

var _rfft = require("../spectral/rfft");

var _frame = require("./frame");

var _hann_window = require("./hann_window");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the Short-time Fourier Transform of signals
 * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform
 *
 * ```js
 * const input = tf.tensor1d([1, 1, 1, 1, 1])
 * tf.signal.stft(input, 3, 1).print();
 * ```
 * @param signal 1-dimensional real value tensor.
 * @param frameLength The window length of samples.
 * @param frameStep The number of samples to step.
 * @param fftLength The size of the FFT to apply.
 * @param windowFn A callable that takes a window length and returns 1-d tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function stft_(signal, frameLength, frameStep, fftLength, windowFn = _hann_window.hannWindow) {
  if (fftLength == null) {
    fftLength = (0, _signal_ops_util.enclosingPowerOfTwo)(frameLength);
  }

  const framedSignal = (0, _frame.frame)(signal, frameLength, frameStep);
  const windowedSignal = (0, _mul.mul)(framedSignal, windowFn(frameLength));
  return (0, _rfft.rfft)(windowedSignal, fftLength);
}

const stft = (0, _operation.op)({
  stft_
});
exports.stft = stft;
},{"../mul":"tBJ4","../operation":"uE86","../signal_ops_util":"Ubrm","../spectral/rfft":"FMnE","./frame":"Go7t","./hann_window":"bdTr"}],"su0V":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cropAndResize = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _operation = require("../operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Extracts crops from the input image tensor and resizes them using bilinear
 * sampling or nearest neighbor sampling (possibly with aspect ratio change)
 * to a common output size specified by cropSize.
 *
 * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,
 *     where imageHeight and imageWidth must be positive, specifying the
 *     batch of images from which to take crops
 * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized
 *     coordinates of the box in the boxInd[i]'th image in the batch
 * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range
 *     `[0, batch)` that specifies the image that the `i`-th box refers to.
 * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`
 *     specifying the size to which all crops are resized to.
 * @param method Optional string from `'bilinear' | 'nearest'`,
 *     defaults to bilinear, which specifies the sampling method for resizing
 * @param extrapolationValue A threshold for deciding when to remove boxes based
 *     on score. Defaults to 0.
 * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function cropAndResize_(image, boxes, boxInd, cropSize, method = 'bilinear', extrapolationValue = 0) {
  const $image = (0, _tensor_util_env.convertToTensor)(image, 'image', 'cropAndResize');
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'cropAndResize', 'float32');
  const $boxInd = (0, _tensor_util_env.convertToTensor)(boxInd, 'boxInd', 'cropAndResize', 'int32');
  const numBoxes = $boxes.shape[0];
  util.assert($image.rank === 4, () => 'Error in cropAndResize: image must be rank 4,' + `but got rank ${$image.rank}.`);
  util.assert($boxes.rank === 2 && $boxes.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` + `but had shape ${$boxes.shape}.`);
  util.assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` + `but had shape ${$boxes.shape}.`);
  util.assert(cropSize.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got ` + `length ${cropSize.length}.`);
  util.assert(cropSize[0] >= 1 && cropSize[1] >= 1, () => `cropSize must be atleast [1,1], but was ${cropSize}`);
  util.assert(method === 'bilinear' || method === 'nearest', () => `method must be bilinear or nearest, but was ${method}`);
  const inputs = {
    image: $image,
    boxes: $boxes,
    boxInd: $boxInd
  };
  const attrs = {
    method,
    extrapolationValue,
    cropSize
  };

  const res = _engine.ENGINE.runKernel(_kernel_names.CropAndResize, inputs, attrs);

  return res;
}

const cropAndResize = (0, _operation.op)({
  cropAndResize_
});
exports.cropAndResize = cropAndResize;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../../util":"XXxQ","../operation":"uE86"}],"tSJb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flipLeftRight = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _operation = require("../operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Flips the image left to right. Currently available in the CPU, WebGL, and
 * WASM backends.
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 */

/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
function flipLeftRight_(image) {
  const $image = (0, _tensor_util_env.convertToTensor)(image, 'image', 'flipLeftRight', 'float32');
  util.assert($image.rank === 4, () => 'Error in flipLeftRight: image must be rank 4,' + `but got rank ${$image.rank}.`);
  const inputs = {
    image: $image
  };

  const res = _engine.ENGINE.runKernel(_kernel_names.FlipLeftRight, inputs, {});

  return res;
}

const flipLeftRight = (0, _operation.op)({
  flipLeftRight_
});
exports.flipLeftRight = flipLeftRight;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../../util":"XXxQ","../operation":"uE86"}],"t1ei":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rotateWithOffset = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _operation = require("../operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Rotates the input image tensor counter-clockwise with an optional offset
 * center of rotation. Currently available in the CPU, WebGL, and WASM backends.
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 * @param radians The amount of rotation.
 * @param fillValue The value to fill in the empty space leftover
 *     after rotation. Can be either a single grayscale value (0-255), or an
 *     array of three numbers `[red, green, blue]` specifying the red, green,
 *     and blue channels. Defaults to `0` (black).
 * @param center The center of rotation. Can be either a single value (0-1), or
 *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates
 *     the image around its center).
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function rotateWithOffset_(image, radians, fillValue = 0, center = 0.5) {
  const $image = (0, _tensor_util_env.convertToTensor)(image, 'image', 'rotateWithOffset', 'float32');
  util.assert($image.rank === 4, () => 'Error in rotateWithOffset: image must be rank 4,' + `but got rank ${$image.rank}.`);
  const inputs = {
    image: $image
  };
  const attrs = {
    radians,
    fillValue,
    center
  };

  const res = _engine.ENGINE.runKernel(_kernel_names.RotateWithOffset, inputs, attrs);

  return res;
}

const rotateWithOffset = (0, _operation.op)({
  rotateWithOffset_
});
exports.rotateWithOffset = rotateWithOffset;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../../util":"XXxQ","../operation":"uE86"}],"McNH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppSanityCheck = nonMaxSuppSanityCheck;

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
  if (iouThreshold == null) {
    iouThreshold = 0.5;
  }

  if (scoreThreshold == null) {
    scoreThreshold = Number.NEGATIVE_INFINITY;
  }

  if (softNmsSigma == null) {
    softNmsSigma = 0.0;
  }

  const numBoxes = boxes.shape[0];
  maxOutputSize = Math.min(maxOutputSize, numBoxes);
  util.assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);
  util.assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);
  util.assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);
  util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');
  util.assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` + `but was ${scores.shape[0]}`);
  util.assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);
  return {
    maxOutputSize,
    iouThreshold,
    scoreThreshold,
    softNmsSigma
  };
}
},{"../util":"XXxQ"}],"wp0Q":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppression = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var _nonmax_util = require("../nonmax_util");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @return A 1D tensor with the selected box indices.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'nonMaxSuppression');
  const $scores = (0, _tensor_util_env.convertToTensor)(scores, 'scores', 'nonMaxSuppression');
  const inputs = (0, _nonmax_util.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
  maxOutputSize = inputs.maxOutputSize;
  iouThreshold = inputs.iouThreshold;
  scoreThreshold = inputs.scoreThreshold;
  const attrs = {
    maxOutputSize,
    iouThreshold,
    scoreThreshold
  };
  return _engine.ENGINE.runKernel(_kernel_names.NonMaxSuppressionV3, {
    boxes: $boxes,
    scores: $scores
  }, attrs);
}

const nonMaxSuppression = (0, _operation.op)({
  nonMaxSuppression_
});
exports.nonMaxSuppression = nonMaxSuppression;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../nonmax_util":"McNH","../operation":"uE86"}],"Xjt4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.binaryInsert = binaryInsert;
exports.binarySearch = binarySearch;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Inserts a value into a sorted array. This method allows duplicate, meaning it
 * allows inserting duplicate value, in which case, the element will be inserted
 * at the lowest index of the value.
 * @param arr The array to modify.
 * @param element The element to insert.
 * @param comparator Optional. If no comparator is specified, elements are
 * compared using array_util.defaultComparator, which is suitable for Strings
 * and Numbers in ascending arrays. If the array contains multiple instances of
 * the target value, the left-most instance will be returned. To provide a
 * comparator, it should take 2 arguments to compare and return a negative,
 * zero, or a positive number.
 */
function binaryInsert(arr, element, comparator) {
  const index = binarySearch(arr, element, comparator);
  const insertionPoint = index < 0 ? -(index + 1) : index;
  arr.splice(insertionPoint, 0, element);
}
/**
 * Searches the array for the target using binary search, returns the index
 * of the found element, or position to insert if element not found. If no
 * comparator is specified, elements are compared using array_
 * util.defaultComparator, which is suitable for Strings and Numbers in
 * ascending arrays. If the array contains multiple instances of the target
 * value, the left-most instance will be returned.
 * @param arr The array to be searched in.
 * @param target The target to be searched for.
 * @param comparator Should take 2 arguments to compare and return a negative,
 *    zero, or a positive number.
 * @return Lowest index of the target value if found, otherwise the insertion
 *    point where the target should be inserted, in the form of
 *    (-insertionPoint - 1).
 */


function binarySearch(arr, target, comparator) {
  return binarySearch_(arr, target, comparator || defaultComparator);
}
/**
 * Compares its two arguments for order.
 * @param a The first element to be compared.
 * @param b The second element to be compared.
 * @return A negative number, zero, or a positive number as the first
 *     argument is less than, equal to, or greater than the second.
 */


function defaultComparator(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
}

function binarySearch_(arr, target, comparator) {
  let left = 0;
  let right = arr.length;
  let middle = 0;
  let found = false;

  while (left < right) {
    middle = left + (right - left >>> 1);
    const compareResult = comparator(target, arr[middle]);

    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle; // If compareResult is 0, the value is found. We record it is found,
      // and then keep looking because there may be duplicate.

      found = !compareResult;
    }
  }

  return found ? left : -left - 1;
}
},{}],"awVp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionV3Impl = nonMaxSuppressionV3Impl;
exports.nonMaxSuppressionV4Impl = nonMaxSuppressionV4Impl;
exports.nonMaxSuppressionV5Impl = nonMaxSuppressionV5Impl;

var _non_max_suppression_util = require("./non_max_suppression_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0
  /* softNmsSigma */
  );
}

function nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {
  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0
  /* softNmsSigma */
  , false
  /* returnScoresTensor */
  , padToMaxOutputSize
  /* padToMaxOutputSize */
  , true
  /* returnValidOutputs */
  );
}

function nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true
  /* returnScoresTensor */
  );
}

function nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor = false, padToMaxOutputSize = false, returnValidOutputs = false) {
  // The list is sorted in ascending order, so that we can always pop the
  // candidate with the largest score in O(1) time.
  const candidates = [];

  for (let i = 0; i < scores.length; i++) {
    if (scores[i] > scoreThreshold) {
      candidates.push({
        score: scores[i],
        boxIndex: i,
        suppressBeginIndex: 0
      });
    }
  }

  candidates.sort(ascendingComparator); // If softNmsSigma is 0, the outcome of this algorithm is exactly same as
  // before.

  const scale = softNmsSigma > 0 ? -0.5 / softNmsSigma : 0.0;
  const selectedIndices = [];
  const selectedScores = [];

  while (selectedIndices.length < maxOutputSize && candidates.length > 0) {
    const candidate = candidates.pop();
    const {
      score: originalScore,
      boxIndex,
      suppressBeginIndex
    } = candidate;

    if (originalScore < scoreThreshold) {
      break;
    } // Overlapping boxes are likely to have similar scores, therefore we
    // iterate through the previously selected boxes backwards in order to
    // see if candidate's score should be suppressed. We use
    // suppressBeginIndex to track and ensure a candidate can be suppressed
    // by a selected box no more than once. Also, if the overlap exceeds
    // iouThreshold, we simply ignore the candidate.


    let ignoreCandidate = false;

    for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {
      const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);

      if (iou >= iouThreshold) {
        ignoreCandidate = true;
        break;
      }

      candidate.score = candidate.score * suppressWeight(iouThreshold, scale, iou);

      if (candidate.score <= scoreThreshold) {
        break;
      }
    } // At this point, if `candidate.score` has not dropped below
    // `scoreThreshold`, then we know that we went through all of the
    // previous selections and can safely update `suppressBeginIndex` to the
    // end of the selected array. Then we can re-insert the candidate with
    // the updated score and suppressBeginIndex back in the candidate list.
    // If on the other hand, `candidate.score` has dropped below the score
    // threshold, we will not add it back to the candidates list.


    candidate.suppressBeginIndex = selectedIndices.length;

    if (!ignoreCandidate) {
      // Candidate has passed all the tests, and is not suppressed, so
      // select the candidate.
      if (candidate.score === originalScore) {
        selectedIndices.push(boxIndex);
        selectedScores.push(candidate.score);
      } else if (candidate.score > scoreThreshold) {
        // Candidate's score is suppressed but is still high enough to be
        // considered, so add back to the candidates list.
        (0, _non_max_suppression_util.binaryInsert)(candidates, candidate, ascendingComparator);
      }
    }
  } // NonMaxSuppressionV4 feature: padding output to maxOutputSize.


  const validOutputs = selectedIndices.length;
  const elemsToPad = maxOutputSize - validOutputs;

  if (padToMaxOutputSize && elemsToPad > 0) {
    selectedIndices.push(...new Array(elemsToPad).fill(0));
    selectedScores.push(...new Array(elemsToPad).fill(0.0));
  }

  const result = {
    selectedIndices
  };

  if (returnScoresTensor) {
    result['selectedScores'] = selectedScores;
  }

  if (returnValidOutputs) {
    result['validOutputs'] = validOutputs;
  }

  return result;
}

function intersectionOverUnion(boxes, i, j) {
  const iCoord = boxes.subarray(i * 4, i * 4 + 4);
  const jCoord = boxes.subarray(j * 4, j * 4 + 4);
  const yminI = Math.min(iCoord[0], iCoord[2]);
  const xminI = Math.min(iCoord[1], iCoord[3]);
  const ymaxI = Math.max(iCoord[0], iCoord[2]);
  const xmaxI = Math.max(iCoord[1], iCoord[3]);
  const yminJ = Math.min(jCoord[0], jCoord[2]);
  const xminJ = Math.min(jCoord[1], jCoord[3]);
  const ymaxJ = Math.max(jCoord[0], jCoord[2]);
  const xmaxJ = Math.max(jCoord[1], jCoord[3]);
  const areaI = (ymaxI - yminI) * (xmaxI - xminI);
  const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);

  if (areaI <= 0 || areaJ <= 0) {
    return 0.0;
  }

  const intersectionYmin = Math.max(yminI, yminJ);
  const intersectionXmin = Math.max(xminI, xminJ);
  const intersectionYmax = Math.min(ymaxI, ymaxJ);
  const intersectionXmax = Math.min(xmaxI, xmaxJ);
  const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) * Math.max(intersectionXmax - intersectionXmin, 0.0);
  return intersectionArea / (areaI + areaJ - intersectionArea);
} // A Gaussian penalty function, this method always returns values in [0, 1].
// The weight is a function of similarity, the more overlap two boxes are, the
// smaller the weight is, meaning highly overlapping boxe will be significantly
// penalized. On the other hand, a non-overlapping box will not be penalized.


function suppressWeight(iouThreshold, scale, iou) {
  const weight = Math.exp(scale * iou * iou);
  return iou <= iouThreshold ? weight : 0.0;
}

function ascendingComparator(c1, c2) {
  // For objects with same scores, we make the object with the larger index go
  // first. In an array that pops from the end, this means that the object with
  // the smaller index will be popped first. This ensures the same output as
  // the TensorFlow python version.
  return c1.score - c2.score || c1.score === c2.score && c2.boxIndex - c1.boxIndex;
}
},{"./non_max_suppression_util":"Xjt4"}],"kFcs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionAsync = void 0;

var _non_max_suppression_impl = require("../../backends/non_max_suppression_impl");

var _tensor_util_env = require("../../tensor_util_env");

var _nonmax_util = require("../nonmax_util");

var _tensor1d = require("../tensor1d");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This is the async version of `nonMaxSuppression`
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @return A 1D tensor with the selected box indices.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
async function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'nonMaxSuppressionAsync');
  const $scores = (0, _tensor_util_env.convertToTensor)(scores, 'scores', 'nonMaxSuppressionAsync');
  const inputs = (0, _nonmax_util.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
  maxOutputSize = inputs.maxOutputSize;
  iouThreshold = inputs.iouThreshold;
  scoreThreshold = inputs.scoreThreshold;
  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);
  const boxesVals = boxesAndScores[0];
  const scoresVals = boxesAndScores[1]; // We call a cpu based impl directly with the typedarray data  here rather
  // than a kernel because all kernels are synchronous (and thus cannot await
  // .data()).

  const {
    selectedIndices
  } = (0, _non_max_suppression_impl.nonMaxSuppressionV3Impl)(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);

  if ($boxes !== boxes) {
    $boxes.dispose();
  }

  if ($scores !== scores) {
    $scores.dispose();
  }

  return (0, _tensor1d.tensor1d)(selectedIndices, 'int32');
}

const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;
exports.nonMaxSuppressionAsync = nonMaxSuppressionAsync;
},{"../../backends/non_max_suppression_impl":"awVp","../../tensor_util_env":"y4X4","../nonmax_util":"McNH","../tensor1d":"vKgg"}],"KHDA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionWithScore = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var _nonmax_util = require("../nonmax_util");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This op also supports a Soft-NMS mode (c.f.
 * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
 * of other overlapping boxes, therefore favoring different regions of the image
 * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
 * parameter to be larger than 0.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
 *     When sigma is 0, it falls back to nonMaxSuppression.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - selectedScores: A 1D tensor with the corresponding scores for each
 *       selected box.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'nonMaxSuppression');
  const $scores = (0, _tensor_util_env.convertToTensor)(scores, 'scores', 'nonMaxSuppression');
  const params = (0, _nonmax_util.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
  maxOutputSize = params.maxOutputSize;
  iouThreshold = params.iouThreshold;
  scoreThreshold = params.scoreThreshold;
  softNmsSigma = params.softNmsSigma;
  const inputs = {
    boxes: $boxes,
    scores: $scores
  };
  const attrs = {
    maxOutputSize,
    iouThreshold,
    scoreThreshold,
    softNmsSigma
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const result = _engine.ENGINE.runKernel(_kernel_names.NonMaxSuppressionV5, inputs, attrs);

  return {
    selectedIndices: result[0],
    selectedScores: result[1]
  };
}

const nonMaxSuppressionWithScore = (0, _operation.op)({
  nonMaxSuppressionWithScore_
});
exports.nonMaxSuppressionWithScore = nonMaxSuppressionWithScore;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../nonmax_util":"McNH","../operation":"uE86"}],"t65b":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionWithScoreAsync = void 0;

var _non_max_suppression_impl = require("../../backends/non_max_suppression_impl");

var _tensor_util_env = require("../../tensor_util_env");

var _nonmax_util = require("../nonmax_util");

var _tensor1d = require("../tensor1d");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This op also supports a Soft-NMS mode (c.f.
 * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
 * of other overlapping boxes, therefore favoring different regions of the image
 * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
 * parameter to be larger than 0.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
 *     When sigma is 0, it falls back to nonMaxSuppression.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - selectedScores: A 1D tensor with the corresponding scores for each
 *       selected box.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
async function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'nonMaxSuppressionAsync');
  const $scores = (0, _tensor_util_env.convertToTensor)(scores, 'scores', 'nonMaxSuppressionAsync');
  const params = (0, _nonmax_util.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
  maxOutputSize = params.maxOutputSize;
  iouThreshold = params.iouThreshold;
  scoreThreshold = params.scoreThreshold;
  softNmsSigma = params.softNmsSigma;
  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);
  const boxesVals = boxesAndScores[0];
  const scoresVals = boxesAndScores[1]; // We call a cpu based impl directly with the typedarray data  here rather
  // than a kernel because all kernels are synchronous (and thus cannot await
  // .data()).

  const {
    selectedIndices,
    selectedScores
  } = (0, _non_max_suppression_impl.nonMaxSuppressionV5Impl)(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);

  if ($boxes !== boxes) {
    $boxes.dispose();
  }

  if ($scores !== scores) {
    $scores.dispose();
  }

  return {
    selectedIndices: (0, _tensor1d.tensor1d)(selectedIndices, 'int32'),
    selectedScores: (0, _tensor1d.tensor1d)(selectedScores)
  };
}

const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;
exports.nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync;
},{"../../backends/non_max_suppression_impl":"awVp","../../tensor_util_env":"y4X4","../nonmax_util":"McNH","../tensor1d":"vKgg"}],"zXJN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionPadded = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var _nonmax_util = require("../nonmax_util");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union), with an option to pad results.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param padToMaxOutputSize Defalts to false. If true, size of output
 *     `selectedIndices` is padded to maxOutputSize.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
 *       are valid. Valid elements occur first, then padding.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function nonMaxSuppressionPadded_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'nonMaxSuppression');
  const $scores = (0, _tensor_util_env.convertToTensor)(scores, 'scores', 'nonMaxSuppression');
  const params = (0, _nonmax_util.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null
  /* softNmsSigma */
  );
  const $maxOutputSize = params.maxOutputSize;
  const $iouThreshold = params.iouThreshold;
  const $scoreThreshold = params.scoreThreshold;
  const inputs = {
    boxes: $boxes,
    scores: $scores
  };
  const attrs = {
    maxOutputSize: $maxOutputSize,
    iouThreshold: $iouThreshold,
    scoreThreshold: $scoreThreshold,
    padToMaxOutputSize
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const result = _engine.ENGINE.runKernel(_kernel_names.NonMaxSuppressionV4, inputs, attrs);

  return {
    selectedIndices: result[0],
    validOutputs: result[1]
  };
}

const nonMaxSuppressionPadded = (0, _operation.op)({
  nonMaxSuppressionPadded_
});
exports.nonMaxSuppressionPadded = nonMaxSuppressionPadded;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../nonmax_util":"McNH","../operation":"uE86"}],"sgWJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionPaddedAsync = void 0;

var _non_max_suppression_impl = require("../../backends/non_max_suppression_impl");

var _tensor_util_env = require("../../tensor_util_env");

var _nonmax_util = require("../nonmax_util");

var _scalar = require("../scalar");

var _tensor1d = require("../tensor1d");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union), with an option to pad results.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param padToMaxOutputSize Defalts to false. If true, size of output
 *     `selectedIndices` is padded to maxOutputSize.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
 *       are valid. Valid elements occur first, then padding.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
async function nonMaxSuppressionPaddedAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {
  const $boxes = (0, _tensor_util_env.convertToTensor)(boxes, 'boxes', 'nonMaxSuppressionAsync');
  const $scores = (0, _tensor_util_env.convertToTensor)(scores, 'scores', 'nonMaxSuppressionAsync');
  const params = (0, _nonmax_util.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null
  /* softNmsSigma */
  );
  const $maxOutputSize = params.maxOutputSize;
  const $iouThreshold = params.iouThreshold;
  const $scoreThreshold = params.scoreThreshold;
  const [boxesVals, scoresVals] = await Promise.all([$boxes.data(), $scores.data()]); // We call a cpu based impl directly with the typedarray data here rather
  // than a kernel because all kernels are synchronous (and thus cannot await
  // .data()).

  const {
    selectedIndices,
    validOutputs
  } = (0, _non_max_suppression_impl.nonMaxSuppressionV4Impl)(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);

  if ($boxes !== boxes) {
    $boxes.dispose();
  }

  if ($scores !== scores) {
    $scores.dispose();
  }

  return {
    selectedIndices: (0, _tensor1d.tensor1d)(selectedIndices, 'int32'),
    validOutputs: (0, _scalar.scalar)(validOutputs, 'int32')
  };
}

const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;
exports.nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync;
},{"../../backends/non_max_suppression_impl":"awVp","../../tensor_util_env":"y4X4","../nonmax_util":"McNH","../scalar":"TiGU","../tensor1d":"vKgg"}],"JODz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resizeBilinear = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _operation = require("../operation");

var _reshape = require("../reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Bilinear resize a single 3D image or a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to `false`. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 * @param halfPixelCenters Defaults to `false`. Whether to assume pixel centers
 *     are at 0.5, which would make the floating point coordinates of the top
 *     left pixel 0.5, 0.5.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function resizeBilinear_(images, size, alignCorners = false, halfPixelCenters = false) {
  const $images = (0, _tensor_util_env.convertToTensor)(images, 'images', 'resizeBilinear');
  util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` + `rank ${$images.rank}.`);
  util.assert(size.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ` + `${size}.`);
  util.assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeBilinear: If halfPixelCenters is true, ` + `alignCorners must be false.`);
  let batchImages = $images;
  let reshapedTo4D = false;

  if ($images.rank === 3) {
    reshapedTo4D = true;
    batchImages = (0, _reshape.reshape)($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);
  }

  const [] = size;
  const inputs = {
    images: batchImages
  };
  const attrs = {
    alignCorners,
    halfPixelCenters,
    size
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const res = _engine.ENGINE.runKernel(_kernel_names.ResizeBilinear, inputs, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const resizeBilinear = (0, _operation.op)({
  resizeBilinear_
});
exports.resizeBilinear = resizeBilinear;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../../util":"XXxQ","../operation":"uE86","../reshape":"F0cm"}],"rQ9Q":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resizeNearestNeighbor = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _operation = require("../operation");

var _reshape = require("../reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * NearestNeighbor resize a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to False. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 * @param halfPixelCenters Defaults to `false`. Whether to assumes pixels are of
 *      half the actual dimensions, and yields more accurate resizes. This flag
 *      would also make the floating point coordinates of the top left pixel
 *      0.5, 0.5.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function resizeNearestNeighbor_(images, size, alignCorners = false, halfPixelCenters = false) {
  const $images = (0, _tensor_util_env.convertToTensor)(images, 'images', 'resizeNearestNeighbor');
  util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` + `rank ${$images.rank}.`);
  util.assert(size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` + `${size}.`);
  util.assert($images.dtype === 'float32' || $images.dtype === 'int32', () => '`images` must have `int32` or `float32` as dtype');
  util.assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeNearestNeighbor: If halfPixelCenters is true, ` + `alignCorners must be false.`);
  let batchImages = $images;
  let reshapedTo4D = false;

  if ($images.rank === 3) {
    reshapedTo4D = true;
    batchImages = (0, _reshape.reshape)($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);
  }

  const [] = size;
  const inputs = {
    images: batchImages
  };
  const attrs = {
    alignCorners,
    halfPixelCenters,
    size
  }; // tslint:disable-next-line: no-unnecessary-type-assertion

  const res = _engine.ENGINE.runKernel(_kernel_names.ResizeNearestNeighbor, inputs, attrs);

  if (reshapedTo4D) {
    return (0, _reshape.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }

  return res;
}

const resizeNearestNeighbor = (0, _operation.op)({
  resizeNearestNeighbor_
});
exports.resizeNearestNeighbor = resizeNearestNeighbor;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../../util":"XXxQ","../operation":"uE86","../reshape":"F0cm"}],"M9mR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.threshold = void 0;

var _tensor1d = require("../tensor1d");

var _operation = require("../operation");

var _cast = require("../cast");

var _split = require("../split");

var _bincount = require("../bincount");

var _less_equal = require("../less_equal");

var _greater = require("../greater");

var _sum = require("../sum");

var _add = require("../add");

var _mul = require("../mul");

var _div = require("../div");

var _sub = require("../sub");

var _round = require("../round");

var _where = require("../where");

var _fill = require("../fill");

var _slice = require("../slice");

var _range = require("../range");

var _tensor = require("../tensor");

var util = _interopRequireWildcard(require("../../util"));

var _tensor_util_env = require("../../tensor_util_env");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Performs image binarization with corresponding threshold
 * (depends on the method)value, which creates a binary image from a grayscale.
 * @param image 3d tensor of shape [imageHeight,imageWidth, depth],
 * where imageHeight and imageWidth must be positive.The image color
 * range should be [0, 255].
 * @param method Optional string from `'binary' | 'otsu'`
 * which specifies the method for thresholding. Defaults to 'binary'.
 * @param inverted Optional boolean whichspecifies
 * if colours should be inverted. Defaults to false.
 * @param threshValue Optional number which defines threshold value from 0 to 1.
 * Defaults to 0.5.
 * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which
 * contains binarized image.
 */
function threshold_(image, method = 'binary', inverted = false, threshValue = 0.5) {
  const $image = (0, _tensor_util_env.convertToTensor)(image, 'image', 'threshold');
  /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.
  Reference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */

  const RED_INTENCITY_COEF = 0.2989;
  const GREEN_INTENCITY_COEF = 0.5870;
  const BLUE_INTENCITY_COEF = 0.1140;
  const totalPixelsInImage = $image.shape[0] * $image.shape[1];
  let $threshold = (0, _mul.mul)((0, _tensor1d.tensor1d)([threshValue]), 255);
  let r, g, b, grayscale;
  util.assert($image.rank === 3, () => 'Error in threshold: image must be rank 3,' + `but got rank ${$image.rank}.`);
  util.assert($image.shape[2] === 3 || $image.shape[2] === 1, () => 'Error in threshold: ' + 'image color channel must be equal to 3 or 1' + `but got ${$image.shape[2]}.`);
  util.assert($image.dtype === 'int32' || $image.dtype === 'float32', () => 'Error in dtype: image dtype must be int32 or float32,' + `but got dtype ${$image.dtype}.`);
  util.assert(method === 'otsu' || method === 'binary', () => `Method must be binary or otsu, but was ${method}`);

  if ($image.shape[2] === 3) {
    [r, g, b] = (0, _split.split)($image, [1, 1, 1], -1);
    const $r = (0, _mul.mul)(r, RED_INTENCITY_COEF);
    const $g = (0, _mul.mul)(g, GREEN_INTENCITY_COEF);
    const $b = (0, _mul.mul)(b, BLUE_INTENCITY_COEF);
    grayscale = (0, _add.add)((0, _add.add)($r, $g), $b);
  } else {
    grayscale = image;
  }

  if (method === 'otsu') {
    const $histogram = (0, _bincount.bincount)((0, _cast.cast)((0, _round.round)(grayscale), 'int32'), (0, _tensor.tensor)([]), 256);
    $threshold = otsu($histogram, totalPixelsInImage);
  }

  const invCondition = inverted ? (0, _less_equal.lessEqual)(grayscale, $threshold) : (0, _greater.greater)(grayscale, $threshold);
  const result = (0, _cast.cast)((0, _mul.mul)(invCondition, 255), 'int32');
  return result;
}

function otsu(histogram, total) {
  let bestThresh = (0, _tensor1d.tensor1d)([-1]);
  let bestInBetVar = (0, _tensor1d.tensor1d)([0]);
  let cInBetVar = (0, _tensor1d.tensor1d)([0]);
  let classFirst, classSecond, meanFirst, meanSec, weightForeground, weightBack;

  for (let index = 0; index < histogram.size - 1; index++) {
    classFirst = (0, _slice.slice)(histogram, 0, index + 1);
    classSecond = (0, _slice.slice)(histogram, index + 1);
    weightForeground = (0, _div.div)((0, _sum.sum)(classFirst), total);
    weightBack = (0, _div.div)((0, _sum.sum)(classSecond), total);
    const meanFirstDivA = (0, _sum.sum)((0, _mul.mul)(classFirst, (0, _range.range)(0, classFirst.size)));
    meanFirst = (0, _div.div)(meanFirstDivA, (0, _sum.sum)(classFirst));
    const meanSecFill = (0, _fill.fill)(classSecond.shape, classFirst.size);
    const meanSecAdd = (0, _add.add)((0, _range.range)(0, classSecond.size), meanSecFill);
    const meanSecMul = (0, _mul.mul)(classSecond, meanSecAdd);
    meanSec = (0, _div.div)((0, _sum.sum)(meanSecMul), (0, _sum.sum)(classSecond));
    const cInBetVarSubA = (0, _sub.sub)(meanFirst, meanSec);
    const cInBetVarSubB = (0, _sub.sub)(meanFirst, meanSec);
    const cInBetVarMul = (0, _mul.mul)(weightForeground, weightBack);
    cInBetVar = (0, _mul.mul)((0, _mul.mul)(cInBetVarMul, cInBetVarSubA), cInBetVarSubB);
    const condition = (0, _greater.greater)(cInBetVar, bestInBetVar);
    bestInBetVar = (0, _where.where)(condition, cInBetVar, bestInBetVar);
    bestThresh = (0, _where.where)(condition, (0, _tensor1d.tensor1d)([index]), bestThresh);
  }

  return bestThresh;
}

const threshold = (0, _operation.op)({
  threshold_
});
exports.threshold = threshold;
},{"../tensor1d":"vKgg","../operation":"uE86","../cast":"qnzc","../split":"lgPf","../bincount":"rYQ1","../less_equal":"vnhI","../greater":"WT29","../sum":"kc8w","../add":"N73o","../mul":"tBJ4","../div":"S2L5","../sub":"SgzI","../round":"NMXN","../where":"TsgC","../fill":"gaCw","../slice":"wIos","../range":"FAHd","../tensor":"woAd","../../util":"XXxQ","../../tensor_util_env":"y4X4"}],"cGGF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transform = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var util = _interopRequireWildcard(require("../../util"));

var _operation = require("../operation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Applies the given transform(s) to the image(s).
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 * @param transforms Projective transform matrix/matrices. A tensor1d of length
 *     8 or tensor of size N x 8. If one row of transforms is [a0, a1, a2, b0
 *     b1, b2, c0, c1], then it maps the output point (x, y) to a transformed
 *     input point (x', y') = ((a0 x + a1 y + a2) / k, (b0 x + b1 y + b2) / k),
 *     where k = c0 x + c1 y + 1. The transforms are inverted compared to the
 *     transform mapping input points to output points.
 * @param interpolation Interpolation mode.
 *     Supported values: 'nearest', 'bilinear'. Default to 'nearest'.
 * @param fillMode Points outside the boundaries of the input are filled
 *     according to the given mode, one of 'constant', 'reflect', 'wrap',
 *     'nearest'. Default to 'constant'.
 *     'reflect': (d c b a | a b c d | d c b a ) The input is extended by
 *     reflecting about the edge of the last pixel.
 *     'constant': (k k k k | a b c d | k k k k) The input is extended by
 *     filling all values beyond the edge with the same constant value k.
 *     'wrap': (a b c d | a b c d | a b c d) The input is extended by
 *     wrapping around to the opposite edge.
 *     'nearest': (a a a a | a b c d | d d d d) The input is extended by
 *     the nearest pixel.
 * @param fillValue A float represents the value to be filled outside the
 *     boundaries when fillMode is 'constant'.
 * @param Output dimension after the transform, [height, width]. If undefined,
 *     output is the same size as input image.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function transform_(image, transforms, interpolation = 'nearest', fillMode = 'constant', fillValue = 0, outputShape) {
  const $image = (0, _tensor_util_env.convertToTensor)(image, 'image', 'transform', 'float32');
  const $transforms = (0, _tensor_util_env.convertToTensor)(transforms, 'transforms', 'transform', 'float32');
  util.assert($image.rank === 4, () => 'Error in transform: image must be rank 4,' + `but got rank ${$image.rank}.`);
  util.assert($transforms.rank === 2 && ($transforms.shape[0] === $image.shape[0] || $transforms.shape[0] === 1) && $transforms.shape[1] === 8, () => `Error in transform: Input transform should be batch x 8 or 1 x 8`);
  util.assert(outputShape == null || outputShape.length === 2, () => 'Error in transform: outputShape must be [height, width] or null, ' + `but got ${outputShape}.`);
  const inputs = {
    image: $image,
    transforms: $transforms
  };
  const attrs = {
    interpolation,
    fillMode,
    fillValue,
    outputShape
  };
  return _engine.ENGINE.runKernel(_kernel_names.Transform, inputs, attrs);
}

const transform = (0, _operation.op)({
  transform_
});
exports.transform = transform;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../../util":"XXxQ","../operation":"uE86"}],"KELI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bandPart = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _greater_equal = require("../greater_equal");

var _less_equal = require("../less_equal");

var _logical_and = require("../logical_and");

var _operation = require("../operation");

var _range = require("../range");

var _reshape = require("../reshape");

var _scalar = require("../scalar");

var _stack = require("../stack");

var _sub = require("../sub");

var _unstack = require("../unstack");

var _where = require("../where");

var _zeros = require("../zeros");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Copy a tensor setting everything outside a central band in each innermost
 * matrix to zero.
 *
 * The band part is computed as follows: Assume input has `k` dimensions
 * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where
 * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.
 * The indicator function
 * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`
 * `&& (num_upper < 0 || (n-m) <= num_upper)`
 *
 * ```js
 * const x = tf.tensor2d([[ 0,  1,  2, 3],
 *                        [-1,  0,  1, 2],
 *                        [-2, -1,  0, 1],
 *                        [-3, -2, -1, 0]]);
 * let y = tf.linalg.bandPart(x, 1, -1);
 * y.print(); // [[ 0,  1,  2, 3],
 *            //  [-1,  0,  1, 2],
 *            //  [ 0, -1,  0, 1],
 *            //  [ 0, 0 , -1, 0]]
 * let z = tf.linalg.bandPart(x, 2, 1);
 * z.print(); // [[ 0,  1,  0, 0],
 *            //  [-1,  0,  1, 0],
 *            //  [-2, -1,  0, 1],
 *            //  [ 0, -2, -1, 0]]
 * ```
 *
 * @param x Rank `k` tensor
 * @param numLower Number of subdiagonals to keep.
 *   If negative, keep entire lower triangle.
 * @param numUpper Number of subdiagonals to keep.
 *   If negative, keep entire upper triangle.
 * @returns Rank `k` tensor of the same shape as input.
 *   The extracted banded tensor.
 *
 * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
 */
function bandPart_(a, numLower, numUpper) {
  (0, _util.assert)(numLower % 1 === 0, () => `bandPart(): numLower must be an integer, got ${numLower}.`);
  (0, _util.assert)(numUpper % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);
  const $a = (0, _tensor_util_env.convertToTensor)(a, 'a', 'bandPart');
  (0, _util.assert)($a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);
  const shape = $a.shape;
  const [M, N] = $a.shape.slice(-2);

  if (!(numLower <= M)) {
    throw new Error(`bandPart(): numLower (${numLower})` + ` must not be greater than the number of rows (${M}).`);
  }

  if (!(numUpper <= N)) {
    throw new Error(`bandPart(): numUpper (${numUpper})` + ` must not be greater than the number of columns (${N}).`);
  }

  if (numLower < 0) {
    numLower = M;
  }

  if (numUpper < 0) {
    numUpper = N;
  }

  const i = (0, _reshape.reshape)((0, _range.range)(0, M, 1, 'int32'), [-1, 1]);
  const j = (0, _range.range)(0, N, 1, 'int32');
  const ij = (0, _sub.sub)(i, j);
  const inBand = (0, _logical_and.logicalAnd)((0, _less_equal.lessEqual)(ij, (0, _scalar.scalar)(+numLower, 'int32')), (0, _greater_equal.greaterEqual)(ij, (0, _scalar.scalar)(-numUpper, 'int32')));
  const zero = (0, _zeros.zeros)([M, N], $a.dtype);
  return (0, _reshape.reshape)((0, _stack.stack)((0, _unstack.unstack)((0, _reshape.reshape)($a, [-1, M, N])).map(mat => (0, _where.where)(inBand, mat, zero))), shape);
}

const bandPart = (0, _operation.op)({
  bandPart_
});
exports.bandPart = bandPart;
},{"../../tensor_util_env":"y4X4","../../util":"XXxQ","../greater_equal":"a6nY","../less_equal":"vnhI","../logical_and":"sHir","../operation":"uE86","../range":"FAHd","../reshape":"F0cm","../scalar":"TiGU","../stack":"Wzzr","../sub":"SgzI","../unstack":"Smo9","../where":"TsgC","../zeros":"AsfN"}],"uAHR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gramSchmidt = void 0;

var _engine = require("../../engine");

var _util = require("../../util");

var _div = require("../div");

var _mul = require("../mul");

var _norm = require("../norm");

var _operation = require("../operation");

var _split = require("../split");

var _squeeze = require("../squeeze");

var _stack = require("../stack");

var _sub = require("../sub");

var _sum = require("../sum");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Gram-Schmidt orthogonalization.
 *
 * ```js
 * const x = tf.tensor2d([[1, 2], [3, 4]]);
 * let y = tf.linalg.gramSchmidt(x);
 * y.print();
 * console.log('Othogonalized:');
 * y.dot(y.transpose()).print();  // should be nearly the identity matrix.
 * console.log('First row direction maintained:');
 * const data = await y.array();
 * console.log(data[0][1] / data[0][0]);  // should be nearly 2.
 * ```
 *
 * @param xs The vectors to be orthogonalized, in one of the two following
 *   formats:
 *   - An Array of `tf.Tensor1D`.
 *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows
 *     of `xs`.
 *   In each case, all the vectors must have the same length and the length
 *   must be greater than or equal to the number of vectors.
 * @returns The orthogonalized and normalized vectors or matrix.
 *   Orthogonalization means that the vectors or the rows of the matrix
 *   are orthogonal (zero inner products). Normalization means that each
 *   vector or each row of the matrix has an L2 norm that equals `1`.
 *
 * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
 */
function gramSchmidt_(xs) {
  let inputIsTensor2D;

  if (Array.isArray(xs)) {
    inputIsTensor2D = false;
    (0, _util.assert)(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' + 'empty');
    const dim = xs[0].shape[0];

    for (let i = 1; i < xs.length; ++i) {
      (0, _util.assert)(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' + `(${xs[i].shape[0]} vs. ${dim})`);
    }
  } else {
    inputIsTensor2D = true;
    xs = (0, _split.split)(xs, xs.shape[0], 0).map(x => (0, _squeeze.squeeze)(x, [0]));
  }

  (0, _util.assert)(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` + `number of dimensions (${xs[0].shape[0]}).`);
  const ys = [];
  const xs1d = xs;

  for (let i = 0; i < xs.length; ++i) {
    ys.push(_engine.ENGINE.tidy(() => {
      let x = xs1d[i];

      if (i > 0) {
        for (let j = 0; j < i; ++j) {
          const proj = (0, _mul.mul)((0, _sum.sum)((0, _mul.mul)(ys[j], x)), ys[j]);
          x = (0, _sub.sub)(x, proj);
        }
      }

      return (0, _div.div)(x, (0, _norm.norm)(x, 'euclidean'));
    }));
  }

  if (inputIsTensor2D) {
    return (0, _stack.stack)(ys, 0);
  } else {
    return ys;
  }
}

const gramSchmidt = (0, _operation.op)({
  gramSchmidt_
});
exports.gramSchmidt = gramSchmidt;
},{"../../engine":"phT7","../../util":"XXxQ","../div":"S2L5","../mul":"tBJ4","../norm":"exuO","../operation":"uE86","../split":"lgPf","../squeeze":"pxYL","../stack":"Wzzr","../sub":"SgzI","../sum":"kc8w"}],"Ppe5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.qr = void 0;

var _engine = require("../../engine");

var _globals = require("../../globals");

var _util = require("../../util");

var _clone = require("../clone");

var _concat = require("../concat");

var _div = require("../div");

var _eye = require("../eye");

var _greater = require("../greater");

var _mat_mul = require("../mat_mul");

var _mul = require("../mul");

var _neg = require("../neg");

var _norm = require("../norm");

var _operation = require("../operation");

var _reshape = require("../reshape");

var _slice = require("../slice");

var _stack = require("../stack");

var _sub = require("../sub");

var _tensor2d = require("../tensor2d");

var _transpose = require("../transpose");

var _unstack = require("../unstack");

var _where = require("../where");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Compute QR decomposition of m-by-n matrix using Householder transformation.
 *
 * Implementation based on
 *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]
 * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [3, 4]]);
 * let [q, r] = tf.linalg.qr(a);
 * console.log('Q');
 * q.print();
 * console.log('R');
 * r.print();
 * console.log('Orthogonalized');
 * q.dot(q.transpose()).print()  // should be nearly the identity matrix.
 * console.log('Reconstructed');
 * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];
 * ```
 *
 * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose
 *   it has the shape `[..., M, N]`.
 * @param fullMatrices An optional boolean parameter. Defaults to `false`.
 *   If `true`, compute full-sized `Q`. If `false` (the default),
 *   compute only the leading N columns of `Q` and `R`.
 * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,
 *   i.e., its columns all have unit norm and are mutually orthogonal.
 *   If `M >= N`,
 *     If `fullMatrices` is `false` (default),
 *       - `Q` has a shape of `[..., M, N]`,
 *       - `R` has a shape of `[..., N, N]`.
 *     If `fullMatrices` is `true` (default),
 *       - `Q` has a shape of `[..., M, M]`,
 *       - `R` has a shape of `[..., M, N]`.
 *   If `M < N`,
 *     - `Q` has a shape of `[..., M, M]`,
 *     - `R` has a shape of `[..., M, N]`.
 * @throws If the rank of `x` is less than 2.
 *
 * @doc {heading:'Operations',
 *       subheading:'Linear Algebra',
 *       namespace:'linalg'}
 */
function qr_(x, fullMatrices = false) {
  (0, _util.assert)(x.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);

  if (x.rank === 2) {
    return qr2d(x, fullMatrices);
  } else {
    // Rank > 2.
    // TODO(cais): Below we split the input into individual 2D tensors,
    //   perform QR decomposition on them and then stack the results back
    //   together. We should explore whether this can be parallelized.
    const outerDimsProd = x.shape.slice(0, x.shape.length - 2).reduce((value, prev) => value * prev);
    const x2ds = (0, _unstack.unstack)((0, _reshape.reshape)(x, [outerDimsProd, x.shape[x.shape.length - 2], x.shape[x.shape.length - 1]]), 0);
    const q2ds = [];
    const r2ds = [];
    x2ds.forEach(x2d => {
      const [q2d, r2d] = qr2d(x2d, fullMatrices);
      q2ds.push(q2d);
      r2ds.push(r2d);
    });
    const q = (0, _reshape.reshape)((0, _stack.stack)(q2ds, 0), x.shape);
    const r = (0, _reshape.reshape)((0, _stack.stack)(r2ds, 0), x.shape);
    return [q, r];
  }
}

function qr2d(x, fullMatrices = false) {
  return _engine.ENGINE.tidy(() => {
    (0, _util.assert)(x.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);
    const m = x.shape[0];
    const n = x.shape[1];
    let q = (0, _eye.eye)(m); // Orthogonal transform so far.

    let r = (0, _clone.clone)(x); // Transformed matrix so far.

    const one2D = (0, _tensor2d.tensor2d)([[1]], [1, 1]);
    let w = (0, _clone.clone)(one2D);
    const iters = m >= n ? n : m;

    for (let j = 0; j < iters; ++j) {
      // This tidy within the for-loop ensures we clean up temporary
      // tensors as soon as they are no longer needed.
      const rTemp = r;
      const wTemp = w;
      const qTemp = q;
      [w, r, q] = _engine.ENGINE.tidy(() => {
        // Find H = I - tau * w * w', to put zeros below R(j, j).
        const rjEnd1 = (0, _slice.slice)(r, [j, j], [m - j, 1]);
        const normX = (0, _norm.norm)(rjEnd1);
        const rjj = (0, _slice.slice)(r, [j, j], [1, 1]); // The sign() function returns 0 on 0, which causes division by zero.

        const s = (0, _where.where)((0, _greater.greater)(rjj, 0), (0, _tensor2d.tensor2d)([[-1]]), (0, _tensor2d.tensor2d)([[1]]));
        const u1 = (0, _sub.sub)(rjj, (0, _mul.mul)(s, normX));
        const wPre = (0, _div.div)(rjEnd1, u1);

        if (wPre.shape[0] === 1) {
          w = (0, _clone.clone)(one2D);
        } else {
          w = (0, _concat.concat)([one2D, (0, _slice.slice)(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])], 0);
        }

        const tau = (0, _neg.neg)((0, _div.div)((0, _mat_mul.matMul)(s, u1), normX)); // -- R := HR, Q := QH.

        const rjEndAll = (0, _slice.slice)(r, [j, 0], [m - j, n]);
        const tauTimesW = (0, _mul.mul)(tau, w);
        const wT = (0, _transpose.transpose)(w);

        if (j === 0) {
          r = (0, _sub.sub)(rjEndAll, (0, _mat_mul.matMul)(tauTimesW, (0, _mat_mul.matMul)(wT, rjEndAll)));
        } else {
          const rTimesTau = (0, _sub.sub)(rjEndAll, (0, _mat_mul.matMul)(tauTimesW, (0, _mat_mul.matMul)(wT, rjEndAll)));
          r = (0, _concat.concat)([(0, _slice.slice)(r, [0, 0], [j, n]), rTimesTau], 0);
        }

        const tawTimesWT = (0, _transpose.transpose)(tauTimesW);
        const qAllJEnd = (0, _slice.slice)(q, [0, j], [m, q.shape[1] - j]);

        if (j === 0) {
          q = (0, _sub.sub)(qAllJEnd, (0, _mat_mul.matMul)((0, _mat_mul.matMul)(qAllJEnd, w), tawTimesWT));
        } else {
          const qTimesTau = (0, _sub.sub)(qAllJEnd, (0, _mat_mul.matMul)((0, _mat_mul.matMul)(qAllJEnd, w), tawTimesWT));
          q = (0, _concat.concat)([(0, _slice.slice)(q, [0, 0], [m, j]), qTimesTau], 1);
        }

        return [w, r, q];
      });
      (0, _globals.dispose)([rTemp, wTemp, qTemp]);
    }

    if (!fullMatrices && m > n) {
      q = (0, _slice.slice)(q, [0, 0], [m, n]);
      r = (0, _slice.slice)(r, [0, 0], [n, n]);
    }

    return [q, r];
  });
}

const qr = (0, _operation.op)({
  qr_
});
exports.qr = qr;
},{"../../engine":"phT7","../../globals":"TsQp","../../util":"XXxQ","../clone":"Ot88","../concat":"V5Ij","../div":"S2L5","../eye":"MP6S","../greater":"WT29","../mat_mul":"zVDr","../mul":"tBJ4","../neg":"i2LN","../norm":"exuO","../operation":"uE86","../reshape":"F0cm","../slice":"wIos","../stack":"Wzzr","../sub":"SgzI","../tensor2d":"UEzj","../transpose":"JmRY","../unstack":"Smo9","../where":"TsgC"}],"IQtV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Reduction = void 0;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Reduction;
exports.Reduction = Reduction;

(function (Reduction) {
  Reduction[Reduction["NONE"] = 0] = "NONE";
  Reduction[Reduction["MEAN"] = 1] = "MEAN";
  Reduction[Reduction["SUM"] = 2] = "SUM";
  Reduction[Reduction["SUM_BY_NONZERO_WEIGHTS"] = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Reduction || (exports.Reduction = Reduction = {}));
},{}],"WmQQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeWeightedLoss = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _cast = require("../cast");

var _div = require("../div");

var _loss_ops_utils = require("../loss_ops_utils");

var _mean = require("../mean");

var _mul = require("../mul");

var _not_equal = require("../not_equal");

var _ones = require("../ones");

var _operation = require("../operation");

var _scalar = require("../scalar");

var _sum = require("../sum");

/**
 * Computes the weighted loss between two tensors.
 *
 * @param losses Tensor of shape `[batch_size, d1, ... dN]`.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `losses`, and must be broadcastable to `losses` (i.e., all
 *    dimensions must be either `1`, or the same as the corresponding
 *    `losses` dimension).
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function computeWeightedLoss_(losses, weights, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const $losses = (0, _tensor_util_env.convertToTensor)(losses, 'losses', 'computeWeightedLoss');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'computeWeightedLoss');
  }

  const weightedLoss = $weights == null ? $losses : (0, _mul.mul)($losses, $weights);

  if (reduction === _loss_ops_utils.Reduction.NONE) {
    return weightedLoss;
  }

  if (reduction === _loss_ops_utils.Reduction.SUM) {
    return (0, _sum.sum)(weightedLoss);
  }

  if (reduction === _loss_ops_utils.Reduction.MEAN) {
    if ($weights == null) {
      return (0, _mean.mean)(weightedLoss);
    } else {
      const broadcastFactor = $losses.size / $weights.size;
      const result = (0, _div.div)((0, _sum.sum)(weightedLoss), (0, _sum.sum)($weights));
      return broadcastFactor > 1 ? (0, _div.div)(result, (0, _scalar.scalar)(broadcastFactor)) : result;
    }
  }

  if (reduction === _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
    if ($weights == null) {
      return (0, _div.div)((0, _sum.sum)(weightedLoss), (0, _scalar.scalar)($losses.size));
    } else {
      const broadcastedWeights = (0, _mul.mul)($weights, (0, _ones.ones)($losses.shape));
      const numNonZeros = (0, _cast.cast)((0, _sum.sum)((0, _not_equal.notEqual)(broadcastedWeights, (0, _scalar.scalar)(0))), 'float32');
      return (0, _div.div)((0, _sum.sum)(weightedLoss), numNonZeros);
    }
  }

  throw Error(`Unknown reduction: ${reduction}`);
}

const computeWeightedLoss = (0, _operation.op)({
  computeWeightedLoss_
});
exports.computeWeightedLoss = computeWeightedLoss;
},{"../../tensor_util_env":"y4X4","../cast":"qnzc","../div":"S2L5","../loss_ops_utils":"IQtV","../mean":"DIOh","../mul":"tBJ4","../not_equal":"TOzH","../ones":"iY3A","../operation":"uE86","../scalar":"TiGU","../sum":"kc8w"}],"coTE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.absoluteDifference = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _abs = require("../abs");

var _loss_ops_utils = require("../loss_ops_utils");

var _operation = require("../operation");

var _sub = require("../sub");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the absolute difference loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function absoluteDifference_(labels, predictions, weights, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'absoluteDifference');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'absoluteDifference');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'absoluteDifference');
  }

  (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in absoluteDifference: ');
  const losses = (0, _abs.abs)((0, _sub.sub)($labels, $predictions));
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const absoluteDifference = (0, _operation.op)({
  absoluteDifference_
});
exports.absoluteDifference = absoluteDifference;
},{"../../tensor_util_env":"y4X4","../../util":"XXxQ","../abs":"U9d5","../loss_ops_utils":"IQtV","../operation":"uE86","../sub":"SgzI","./compute_weighted_loss":"WmQQ"}],"IpNr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cosineDistance = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _loss_ops_utils = require("../loss_ops_utils");

var _mul = require("../mul");

var _operation = require("../operation");

var _scalar = require("../scalar");

var _sub = require("../sub");

var _sum = require("../sum");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * Computes the cosine distance loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param axis The dimension along which the cosine distance is computed.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function cosineDistance_(labels, predictions, axis, weights, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'cosineDistance');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'cosineDistance');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'cosineDistance');
  }

  (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in cosineDistance: ');
  const one = (0, _scalar.scalar)(1);
  const losses = (0, _sub.sub)(one, (0, _sum.sum)((0, _mul.mul)($labels, $predictions), axis, true));
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const cosineDistance = (0, _operation.op)({
  cosineDistance_
});
exports.cosineDistance = cosineDistance;
},{"../../tensor_util_env":"y4X4","../../util":"XXxQ","../loss_ops_utils":"IQtV","../mul":"tBJ4","../operation":"uE86","../scalar":"TiGU","../sub":"SgzI","../sum":"kc8w","./compute_weighted_loss":"WmQQ"}],"QDEw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hingeLoss = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _loss_ops_utils = require("../loss_ops_utils");

var _mul = require("../mul");

var _operation = require("../operation");

var _relu = require("../relu");

var _scalar = require("../scalar");

var _sub = require("../sub");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * Computes the Hinge loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function hingeLoss_(labels, predictions, weights, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  let $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'hingeLoss');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'hingeLoss');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'hingeLoss');
  }

  (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in hingeLoss: ');
  const one = (0, _scalar.scalar)(1); // Convert binary labels to (-1, 1)

  $labels = (0, _sub.sub)((0, _mul.mul)((0, _scalar.scalar)(2), $labels), one);
  const losses = (0, _relu.relu)((0, _sub.sub)(one, (0, _mul.mul)($labels, $predictions)));
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const hingeLoss = (0, _operation.op)({
  hingeLoss_
});
exports.hingeLoss = hingeLoss;
},{"../../tensor_util_env":"y4X4","../../util":"XXxQ","../loss_ops_utils":"IQtV","../mul":"tBJ4","../operation":"uE86","../relu":"JbIg","../scalar":"TiGU","../sub":"SgzI","./compute_weighted_loss":"WmQQ"}],"wWxs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.huberLoss = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _abs = require("../abs");

var _add = require("../add");

var _loss_ops_utils = require("../loss_ops_utils");

var _minimum = require("../minimum");

var _mul = require("../mul");

var _operation = require("../operation");

var _scalar = require("../scalar");

var _square = require("../square");

var _sub = require("../sub");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the huber loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param delta Point where huber loss changes from quadratic to linear.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`.
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function huberLoss_(labels, predictions, weights, delta = 1.0, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'huberLoss');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'huberLoss');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'huberLoss');
  }

  (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in huberLoss: ');
  const deltaScalar = (0, _scalar.scalar)(delta);
  const error = (0, _abs.abs)((0, _sub.sub)($predictions, $labels));
  const quadratic = (0, _minimum.minimum)(error, deltaScalar);
  const linear = (0, _sub.sub)(error, quadratic);
  const losses = (0, _add.add)((0, _mul.mul)((0, _scalar.scalar)(0.5), (0, _square.square)(quadratic)), (0, _mul.mul)(deltaScalar, linear));
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const huberLoss = (0, _operation.op)({
  huberLoss_
});
exports.huberLoss = huberLoss;
},{"../../tensor_util_env":"y4X4","../../util":"XXxQ","../abs":"U9d5","../add":"N73o","../loss_ops_utils":"IQtV","../minimum":"TKku","../mul":"tBJ4","../operation":"uE86","../scalar":"TiGU","../square":"KiGo","../sub":"SgzI","./compute_weighted_loss":"WmQQ"}],"sLE3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logLoss = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _add = require("../add");

var _log = require("../log");

var _loss_ops_utils = require("../loss_ops_utils");

var _mul = require("../mul");

var _neg = require("../neg");

var _operation = require("../operation");

var _scalar = require("../scalar");

var _sub = require("../sub");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the log loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param epsilon A small increment to avoid taking log of zero
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function logLoss_(labels, predictions, weights, epsilon = 1e-7, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'logLoss');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'logLoss');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'logLoss');
  }

  (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in logLoss: ');
  const one = (0, _scalar.scalar)(1);
  const epsilonScalar = (0, _scalar.scalar)(epsilon);
  const l1 = (0, _neg.neg)((0, _mul.mul)($labels, (0, _log.log)((0, _add.add)($predictions, epsilonScalar))));
  const l2 = (0, _mul.mul)((0, _sub.sub)(one, $labels), (0, _log.log)((0, _add.add)((0, _sub.sub)(one, $predictions), epsilonScalar)));
  const losses = (0, _sub.sub)(l1, l2);
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const logLoss = (0, _operation.op)({
  logLoss_
});
exports.logLoss = logLoss;
},{"../../tensor_util_env":"y4X4","../../util":"XXxQ","../add":"N73o","../log":"f3PH","../loss_ops_utils":"IQtV","../mul":"tBJ4","../neg":"i2LN","../operation":"uE86","../scalar":"TiGU","../sub":"SgzI","./compute_weighted_loss":"WmQQ"}],"ZpcK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.meanSquaredError = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _loss_ops_utils = require("../loss_ops_utils");

var _operation = require("../operation");

var _squared_difference = require("../squared_difference");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the mean squared error between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function meanSquaredError_(labels, predictions, weights, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'meanSquaredError');
  const $predictions = (0, _tensor_util_env.convertToTensor)(predictions, 'predictions', 'meanSquaredError');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'meanSquaredError');
  }

  (0, _util.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in meanSquaredError: ');
  const losses = (0, _squared_difference.squaredDifference)($labels, $predictions);
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const meanSquaredError = (0, _operation.op)({
  meanSquaredError_
});
exports.meanSquaredError = meanSquaredError;
},{"../../tensor_util_env":"y4X4","../../util":"XXxQ","../loss_ops_utils":"IQtV","../operation":"uE86","../squared_difference":"hbAV","./compute_weighted_loss":"WmQQ"}],"E5VI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sigmoidCrossEntropy = void 0;

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _abs = require("../abs");

var _add = require("../add");

var _exp = require("../exp");

var _log1p = require("../log1p");

var _loss_ops_utils = require("../loss_ops_utils");

var _mul = require("../mul");

var _neg = require("../neg");

var _operation = require("../operation");

var _relu = require("../relu");

var _scalar = require("../scalar");

var _sub = require("../sub");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sigmoidCrossEntropyWithLogits_(labels, logits) {
  const $labels = (0, _tensor_util_env.convertToTensor)(labels, 'labels', 'sigmoidCrossEntropyWithLogits');
  const $logits = (0, _tensor_util_env.convertToTensor)(logits, 'logits', 'sigmoidCrossEntropyWithLogits');
  (0, _util.assertShapesMatch)($labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');
  /**
   * Implementation Details:
   *
   * For brevity, let `x = logits`, `z = labels`.  The logistic loss is
   *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))
   *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))
   *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))
   *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))
   *   = (1 - z) * x + log(1 + exp(-x))
   *   = x - x * z + log(1 + exp(-x))
   *
   *   For x < 0, to avoid overflow in exp(-x), we reformulate the above
   *     x - x * z + log(1 + exp(-x))
   *   = log(exp(x)) - x * z + log(1 + exp(-x))
   *   = - x * z + log(1 + exp(x))
   *
   * Hence, to ensure stability and avoid overflow, the implementation uses
   * this equivalent formulation:
   *     max(x, 0) - x * z + log(1 + exp(-abs(x)))
   */

  const maxOutput = (0, _relu.relu)($logits);
  const outputXTarget = (0, _mul.mul)($logits, $labels);
  const sigmoidOutput = (0, _log1p.log1p)((0, _exp.exp)((0, _neg.neg)((0, _abs.abs)($logits))));
  return (0, _add.add)((0, _sub.sub)(maxOutput, outputXTarget), sigmoidOutput);
}
/**
 * Computes the sigmoid cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)
 *                         + 0.5 * labelSmoothing
 *
 * @param multiClassLabels The ground truth output tensor of shape
 * [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
 */


function sigmoidCrossEntropy_(multiClassLabels, logits, weights, labelSmoothing = 0, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  let $multiClassLabels = (0, _tensor_util_env.convertToTensor)(multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');
  const $logits = (0, _tensor_util_env.convertToTensor)(logits, 'logits', 'sigmoidCrossEntropy');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'sigmoidCrossEntropy');
  }

  (0, _util.assertShapesMatch)($multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');

  if (labelSmoothing > 0) {
    const labelSmoothingScalar = (0, _scalar.scalar)(labelSmoothing);
    const one = (0, _scalar.scalar)(1);
    const half = (0, _scalar.scalar)(0.5);
    $multiClassLabels = (0, _add.add)((0, _mul.mul)($multiClassLabels, (0, _sub.sub)(one, labelSmoothingScalar)), (0, _mul.mul)(half, labelSmoothingScalar));
  }

  const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const sigmoidCrossEntropy = (0, _operation.op)({
  sigmoidCrossEntropy_
});
exports.sigmoidCrossEntropy = sigmoidCrossEntropy;
},{"../../tensor_util_env":"y4X4","../../util":"XXxQ","../abs":"U9d5","../add":"N73o","../exp":"xcz4","../log1p":"ODmc","../loss_ops_utils":"IQtV","../mul":"tBJ4","../neg":"i2LN","../operation":"uE86","../relu":"JbIg","../scalar":"TiGU","../sub":"SgzI","./compute_weighted_loss":"WmQQ"}],"w47l":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.softmaxCrossEntropy = void 0;

var _gradients = require("../../gradients");

var _tensor_util_env = require("../../tensor_util_env");

var _util = require("../../util");

var _add = require("../add");

var _axis_util = require("../axis_util");

var _cast = require("../cast");

var _div = require("../div");

var _exp = require("../exp");

var _log_sum_exp = require("../log_sum_exp");

var _loss_ops_utils = require("../loss_ops_utils");

var _mul = require("../mul");

var _neg = require("../neg");

var _operation = require("../operation");

var _reshape = require("../reshape");

var _scalar = require("../scalar");

var _sub = require("../sub");

var _sum = require("../sum");

var _compute_weighted_loss = require("./compute_weighted_loss");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes softmax cross entropy between logits and labels.
 *
 * Measures the probability error in discrete classification tasks in which
 * the classes are mutually exclusive (each entry is in exactly one class).
 * For example, each CIFAR-10 image is labeled with one and only one label: an
 * image can be a dog or a truck, but not both.
 *
 * `NOTE`: While the classes are mutually exclusive, their probabilities need
 * not be. All that is required is that each row of labels is a valid
 * probability distribution. If they are not, the computation of the gradient
 * will be incorrect.
 *
 * `WARNING`: This op expects unscaled logits, since it performs a softmax on
 * logits internally for efficiency. Do not call this op with the output of
 * softmax, as it will produce incorrect results.
 *
 * logits and labels must have the same shape, e.g. [batch_size, num_classes]
 * and the same dtype.
 * @param labels The labels array.
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 */
function softmaxCrossEntropyWithLogits_(labels, logits, dim = -1) {
  if (dim === -1) {
    dim = logits.rank - 1;
  }

  if (dim !== logits.rank - 1) {
    throw Error(`Softmax cross entropy along a non-last dimension is not yet ` + `supported. Labels / logits was rank ${logits.rank} ` + `and dim was ${dim}`);
  } // Use a custom gradient for numerical stability.


  const customOp = (0, _gradients.customGrad)((labels, logits, save) => {
    // Reference:
    //   1. http://cs231n.github.io/linear-classify/#softmax
    //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/
    const keepDims = true;
    const lse = (0, _log_sum_exp.logSumExp)(logits, [dim], keepDims);
    const logResult = (0, _sub.sub)((0, _cast.cast)(logits, 'float32'), lse);
    save([labels, logResult]);
    const costVector = (0, _neg.neg)((0, _mul.mul)(logResult, labels));
    const value = (0, _sum.sum)(costVector, [dim]);

    const gradFunc = (dy, saved) => {
      const [labels, logResult] = saved;
      const dyShape = (0, _axis_util.expandShapeToKeepDim)(dy.shape, [dim]);
      return [(0, _mul.mul)((0, _reshape.reshape)(dy, dyShape), (0, _sub.sub)((0, _cast.cast)(labels, 'float32'), (0, _exp.exp)(logResult))), (0, _mul.mul)((0, _reshape.reshape)(dy, dyShape), (0, _sub.sub)((0, _exp.exp)(logResult), (0, _cast.cast)(labels, 'float32')))];
    };

    return {
      value,
      gradFunc
    };
  });
  return customOp(labels, logits);
}
/**
 * Computes the softmax cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)
 *                         + labelSmoothing / numClasses
 *
 * @param onehotLabels One hot encoded labels
 *    [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or 1, and must be
 *    broadcastable to `loss`  of shape [batch_size]
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
 */


function softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing = 0, reduction = _loss_ops_utils.Reduction.SUM_BY_NONZERO_WEIGHTS) {
  let $onehotLabels = (0, _tensor_util_env.convertToTensor)(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');
  const $logits = (0, _tensor_util_env.convertToTensor)(logits, 'logits', 'softmaxCrossEntropy');
  let $weights = null;

  if (weights != null) {
    $weights = (0, _tensor_util_env.convertToTensor)(weights, 'weights', 'softmaxCrossEntropy');
  }

  (0, _util.assertShapesMatch)($onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');

  if (labelSmoothing > 0) {
    const labelSmoothingScalar = (0, _scalar.scalar)(labelSmoothing);
    const one = (0, _scalar.scalar)(1);
    const numClasses = (0, _scalar.scalar)($onehotLabels.shape[1]);
    $onehotLabels = (0, _add.add)((0, _mul.mul)($onehotLabels, (0, _sub.sub)(one, labelSmoothingScalar)), (0, _div.div)(labelSmoothingScalar, numClasses));
  }

  const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);
  return (0, _compute_weighted_loss.computeWeightedLoss)(losses, $weights, reduction);
}

const softmaxCrossEntropy = (0, _operation.op)({
  softmaxCrossEntropy_
});
exports.softmaxCrossEntropy = softmaxCrossEntropy;
},{"../../gradients":"VR5t","../../tensor_util_env":"y4X4","../../util":"XXxQ","../add":"N73o","../axis_util":"mPwf","../cast":"qnzc","../div":"S2L5","../exp":"xcz4","../log_sum_exp":"te98","../loss_ops_utils":"IQtV","../mul":"tBJ4","../neg":"i2LN","../operation":"uE86","../reshape":"F0cm","../scalar":"TiGU","../sub":"SgzI","../sum":"kc8w","./compute_weighted_loss":"WmQQ"}],"mqNF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseFillEmptyRows = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * The input SparseTensor is represented via the map of inputs {`indices`,
 * `values`, `denseShape`}. The output SparseTensor has the same `denseShape`
 * but with indices `outputIndices` and values `outputValues`. This op inserts a
 * single entry for every row that doesn't have any values. The index is created
 * as `[row, 0, ..., 0]` and the inserted value is `defaultValue`.
 *
 * For example, suppose `spInput` has shape [5, 6] and non-empty values:
 * [0, 1]: a
 * [0, 3]: b
 * [2, 0]: c
 * [3, 1]: d
 *
 * Rows 1 and 4 are empty, so the output will be of shape [5, 6] with values:
 * [0, 1]: a
 * [0, 3]: b
 * [1, 0]: `defaultValue`
 * [2, 0]: c
 * [3, 1]: d
 * [4, 0]: `defaultValue`
 *
 * The output SparseTensor will be in row-major order and will have the same
 * shape as the input.
 *
 * This op also returns an indicator vector shaped [dense_shape[0]] such that
 * emptyRowIndicator[i] = True iff row i was an empty row.
 *
 * And a reverse index map vector shaped [indices.shape[0]] that is used during
 * backpropagation, reverseIndexMap[i] = outi s.t. indices[i, j] ==
 * outputIndices[outi, j] for all j
 *
 * ```js
 * const result = tf.sparse.sparseFillEmptyRows(
 *   [[0, 0], [1, 0], [1, 3], [1, 4], [3, 2], [3, 3]],
 *   [0, 10, 13, 14, 32, 33], [5, 6], -1);
 * console.log(result);
 * result['outputIndices'].print(); // [[0, 0], [1, 0], [1, 3], [1, 4],
 *                                  //  [2, 0], [3, 2], [3, 3], [4, 0]]
 * result['outputValues'].print(); // [0, 10, 13, 14,-1, 32, 33, -1]
 * result['emptyRowIndicator'].print(); // [false, false, true, false, true]
 * result['reverseIndexMap'].print(); // [0, 1, 2, 3, 5, 6]
 * ```
 * @param indices: 2-D. the indices of the sparse tensor.
 * @param values: 1-D. the values of the sparse tensor.
 * @param denseShape: 1-D. the shape of the sparse tensor.
 * @param defaultValue: 0-D. default value to insert into location [row, 0, ...,
 *     0] for rows missing from the input sparse tensor.
 * @return A map with the following properties:
 *     - outputIndices
 *     - outputValues: 1-D. the values of the filled sparse tensor.
 *     - emptyRowIndicator: 1-D. whether the dense row was missing in the input
 * sparse tensor.
 *     - reverseIndexMap: 1-D. a map from the input indices to the output
 * indices.
 * @doc {heading: 'Operations', subheading: 'Sparse'}
 */
function sparseFillEmptyRows_(indices, values, denseShape, defaultValue) {
  const $indices = (0, _tensor_util_env.convertToTensor)(indices, 'indices', 'sparseFillEmptyRows');
  const $values = (0, _tensor_util_env.convertToTensor)(values, 'values', 'sparseFillEmptyRows');
  const $denseShape = (0, _tensor_util_env.convertToTensor)(denseShape, 'denseShape', 'sparseFillEmptyRows');
  const $defaultValue = (0, _tensor_util_env.convertToTensor)(defaultValue, 'defaultValue', 'sparseFillEmptyRows', $values.dtype);

  if ($indices.rank !== 2) {
    throw new Error(`Indices should be Tensor2D but received shape
        ${$indices.shape}`);
  }

  if ($values.rank !== 1) {
    throw new Error(`Values should be Tensor1D but received shape ${$values.shape}`);
  }

  if ($denseShape.rank !== 1) {
    throw new Error(`Dense shape should be Tensor1D but received shape ${$denseShape.shape}`);
  }

  if ($defaultValue.rank !== 0) {
    throw new Error(`Default value should be a scalar but received shape ${$defaultValue.shape}`);
  }

  const inputs = {
    indices: $indices,
    values: $values,
    denseShape: $denseShape,
    defaultValue: $defaultValue
  };

  const result = _engine.ENGINE.runKernel(_kernel_names.SparseFillEmptyRows, inputs);

  return {
    outputIndices: result[0],
    outputValues: result[1],
    emptyRowIndicator: result[2],
    reverseIndexMap: result[3]
  };
}

const sparseFillEmptyRows = (0, _operation.op)({
  sparseFillEmptyRows_
});
exports.sparseFillEmptyRows = sparseFillEmptyRows;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../operation":"uE86"}],"zr2y":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseReshape = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * This operation has the same semantics as reshape on the represented dense
 * tensor. The `inputIndices` are recomputed based on the requested `newShape`.
 * If one component of `newShape` is the special value -1, the size of that
 * dimension is computed so that the total dense size remains constant. At most
 * one component of `newShape` can be -1. The number of dense elements implied
 * by `newShape` must be the same as the number of dense elements originally
 * implied by `inputShape`. Reshaping does not affect the order of values in the
 * SparseTensor. If the input tensor has rank R_in and N non-empty values, and
 * `newShape` has length R_out, then `inputIndices` has shape [N, R_in],
 * `inputShape` has length R_in, `outputIndices` has shape [N, R_out], and
 * `outputShape` has length R_out.
 *
 * ```js
 * const result = tf.sparse.sparseReshape(
 *   [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 2, 3]],
 *   [2, 3, 6], [9, -1]);
 * console.log(result);
 * result['outputIndices'].print(); //[[0, 0], [0, 1], [1, 2], [4, 2], [8, 1]]
 * result['outputShape'].print(); // [9, 4]
 * ```
 * @param inputIndices: 2-D. N x R_in matrix with the indices of non-empty
 * values in a SparseTensor.
 * @param inputShape: 1-D. R_in Tensor1D with the input SparseTensor's dense
 * shape.
 * @param newShape: 1-D. R_out Tensor1D with the requested new dense shape.
 * @return A map with the following properties:
 *     - outputIndices: 2-D. N x R_out matrix with the updated indices of
 *       non-empty values in the output SparseTensor.
 *     - outputShape: 1-D. R_out vector with the full dense shape of the output
 *       SparseTensor. This is the same as newShape but with any -1 dimensions
 *        filled in.
 * @doc {heading: 'Operations', subheading: 'Sparse'}
 */
function sparseReshape_(inputIndices, inputShape, newShape) {
  const $inputIndices = (0, _tensor_util_env.convertToTensor)(inputIndices, 'inputIndices', 'sparseReshape');
  const $inputShape = (0, _tensor_util_env.convertToTensor)(inputShape, 'inputShape', 'sparseReshape');
  const $newShape = (0, _tensor_util_env.convertToTensor)(newShape, 'newShape', 'sparseReshape');

  if ($inputIndices.rank !== 2) {
    throw new Error(`Input indices should be Tensor2D but received shape
        ${$inputIndices.shape}`);
  }

  if ($inputShape.rank !== 1) {
    throw new Error(`Input shape should be Tensor1D but received shape ${$inputShape.shape}`);
  }

  if ($newShape.rank !== 1) {
    throw new Error(`New shape should be Tensor1D but received shape ${$newShape.shape}`);
  }

  const inputs = {
    inputIndices: $inputIndices,
    inputShape: $inputShape,
    newShape: $newShape
  };

  const result = _engine.ENGINE.runKernel(_kernel_names.SparseReshape, inputs);

  return {
    outputIndices: result[0],
    outputShape: result[1]
  };
}

const sparseReshape = (0, _operation.op)({
  sparseReshape_
});
exports.sparseReshape = sparseReshape;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../operation":"uE86"}],"CqLM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseSegmentMean = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the mean along sparse segments of a tensor.
 *
 * ```js
 * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [6,7,8,9]]);
 * // Select two rows, one segment.
 * const result1 = tf.sparse.sparseSegmentMean(c,
 *                                           tf.tensor1d([0, 1], 'int32'),
 *                                           tf.tensor1d([0, 0], 'int32'));
 * result1.print(); // [[0, 0, 0, 0]]
 *
 * // Select two rows, two segments.
 * const result2 = tf.sparse.sparseSegmentMean(c,
 *                                             tf.tensor1d([0, 1], 'int32'),
 *                                             tf.tensor1d([0, 1], 'int32'));
 * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]
 *
 * // Select all rows, two segments.
 * const result3 = tf.sparse.sparseSegmentMean(c,
 *                                             tf.tensor1d([0, 1, 2], 'int32'),
 *                                             tf.tensor1d([0, 1, 1], 'int32'));
 * result3.print(); // [[1.0, 2.0, 3.0, 4.0], [2.5, 2.5, 2.5, 2.5]]
 * ```
 * @param data: A Tensor of at least one dimension with data that will be
 *     assembled in the output.
 * @param indices: A 1-D Tensor with indices into data. Has same rank as
 *     segmentIds.
 * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values
 *     should be sorted and can be repeated.
 * @return Has same shape as data, except for dimension 0 which has equal to
 *         the number of segments.
 *
 * @doc {heading: 'Operations', subheading: 'Sparse'}
 */
function sparseSegmentMean_(data, indices, segmentIds) {
  const $data = (0, _tensor_util_env.convertToTensor)(data, 'data', 'sparseSegmentMean');
  const $indices = (0, _tensor_util_env.convertToTensor)(indices, 'indices', 'sparseSegmentMean');
  const $segmentIds = (0, _tensor_util_env.convertToTensor)(segmentIds, 'segmentIds', 'sparseSegmentMean');

  if ($data.rank < 1) {
    throw new Error(`Data should be at least 1 dimensional but received scalar`);
  }

  if ($indices.rank !== 1) {
    throw new Error(`Indices should be Tensor1D but received shape
          ${$indices.shape}`);
  }

  if ($segmentIds.rank !== 1) {
    throw new Error(`Segment ids should be Tensor1D but received shape
          ${$segmentIds.shape}`);
  }

  const inputs = {
    data: $data,
    indices: $indices,
    segmentIds: $segmentIds
  };
  return _engine.ENGINE.runKernel(_kernel_names.SparseSegmentMean, inputs);
}

const sparseSegmentMean = (0, _operation.op)({
  sparseSegmentMean_
});
exports.sparseSegmentMean = sparseSegmentMean;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../operation":"uE86"}],"bhoc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseSegmentSum = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes the sum along sparse segments of a tensor.
 *
 * ```js
 * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]]);
 * // Select two rows, one segment.
 * const result1 = tf.sparse.sparseSegmentSum(c,
 *                                           tf.tensor1d([0, 1], 'int32'),
 *                                           tf.tensor1d([0, 0], 'int32'));
 * result1.print(); // [[0, 0, 0, 0]]
 *
 * // Select two rows, two segment.
 * const result2 = tf.sparse.sparseSegmentSum(c,
 *                                           tf.tensor1d([0, 1], 'int32'),
 *                                           tf.tensor1d([0, 1], 'int32'));
 * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]
 *
 * // Select all rows, two segments.
 * const result3 = tf.sparse.sparseSegmentSum(c,
 *                                           tf.tensor1d([0, 1, 2], 'int32'),
 *                                           tf.tensor1d([0, 0, 1], 'int32'));
 * result3.print(); // [[0, 0, 0, 0], [5, 6, 7, 8]]
 * ```
 * @param data: A Tensor of at least one dimension with data that will be
 *     assembled in the output.
 * @param indices: A 1-D Tensor with indices into data. Has same rank as
 *     segmentIds.
 * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values
 *     should be sorted and can be repeated.
 * @return Has same shape as data, except for dimension 0 which has equal to
 *         the number of segments.
 *
 * @doc {heading: 'Operations', subheading: 'Sparse'}
 */
function sparseSegmentSum_(data, indices, segmentIds) {
  const $data = (0, _tensor_util_env.convertToTensor)(data, 'data', 'sparseSegmentSum');
  const $indices = (0, _tensor_util_env.convertToTensor)(indices, 'indices', 'sparseSegmentSum');
  const $segmentIds = (0, _tensor_util_env.convertToTensor)(segmentIds, 'segmentIds', 'sparseSegmentSum');

  if ($data.rank < 1) {
    throw new Error(`Data should be at least 1 dimensional but received scalar`);
  }

  if ($indices.rank !== 1) {
    throw new Error(`Indices should be Tensor1D but received shape
         ${$indices.shape}`);
  }

  if ($segmentIds.rank !== 1) {
    throw new Error(`Segment ids should be Tensor1D but received shape
         ${$segmentIds.shape}`);
  }

  const inputs = {
    data: $data,
    indices: $indices,
    segmentIds: $segmentIds
  };
  return _engine.ENGINE.runKernel(_kernel_names.SparseSegmentSum, inputs);
}

const sparseSegmentSum = (0, _operation.op)({
  sparseSegmentSum_
});
exports.sparseSegmentSum = sparseSegmentSum;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../operation":"uE86"}],"IQZI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringNGrams = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates ngrams from ragged string data.
 *
 * This op accepts a ragged tensor with 1 ragged dimension containing only
 * strings and outputs a ragged tensor with 1 ragged dimension containing ngrams
 * of that string, joined along the innermost axis.
 *
 * ```js
 * const result = tf.string.stringNGrams(
 *   ['a', 'b', 'c', 'd'], tf.tensor1d([0, 2, 4], 'int32'),
 *   '|', [1, 2], 'LP', 'RP', -1, false);
 * result['nGrams'].print(); // ['a', 'b', 'LP|a', 'a|b', 'b|RP',
 *                           //  'c', 'd', 'LP|c', 'c|d', 'd|RP']
 * result['nGramsSplits'].print(); // [0, 5, 10]
 * ```
 * @param data: The values tensor of the ragged string tensor to make ngrams out
 *     of. Must be a 1D string tensor.
 * @param dataSplits: The splits tensor of the ragged string tensor to make
 *     ngrams out of.
 * @param separator: The string to append between elements of the token. Use ""
 *     for no separator.
 * @param nGramWidths: The sizes of the ngrams to create.
 * @param leftPad: The string to use to pad the left side of the ngram sequence.
 *     Only used if pad_width !== 0.
 * @param rightPad: The string to use to pad the right side of the ngram
 *     sequence. Only used if pad_width !== 0.
 * @param padWidth: The number of padding elements to add to each side of each
 *     sequence. Note that padding will never be greater than `nGramWidths`-1
 *     regardless of this value. If `padWidth`=-1 , then add max(`nGramWidths)-1
 *     elements.
 * @param preserveShortSequences: If true, then ensure that at least one ngram
 *     is generated for each input sequence. In particular, if an input sequence
 *     is shorter than min(ngramWidth) + 2*padWidth, then generate a single
 *     ngram containing the entire sequence. If false, then no ngrams are
 *     generated for these short input sequences.
 * @return A map with the following properties:
 *     - nGrams: The values tensor of the output ngrams ragged tensor.
 *     - nGramsSplits: The splits tensor of the output ngrams ragged tensor.
 *
 * @doc {heading: 'Operations', subheading: 'String'}
 */
function stringNGrams_(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {
  const $data = (0, _tensor_util_env.convertToTensor)(data, 'data', 'stringNGrams', 'string');

  if ($data.dtype !== 'string') {
    throw new Error('Data must be of datatype string');
  }

  if ($data.shape.length !== 1) {
    throw new Error(`Data must be a vector, saw: ${$data.shape}`);
  }

  const $dataSplits = (0, _tensor_util_env.convertToTensor)(dataSplits, 'dataSplits', 'stringNGrams');

  if ($dataSplits.dtype !== 'int32') {
    throw new Error('Data splits must be of datatype int32');
  }

  const attrs = {
    separator,
    nGramWidths,
    leftPad,
    rightPad,
    padWidth,
    preserveShortSequences
  };
  const inputs = {
    data: $data,
    dataSplits: $dataSplits
  };

  const result = _engine.ENGINE.runKernel(_kernel_names.StringNGrams, inputs, attrs);

  return {
    nGrams: result[0],
    nGramsSplits: result[1]
  };
}

const stringNGrams = (0, _operation.op)({
  stringNGrams_
});
exports.stringNGrams = stringNGrams;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../operation":"uE86"}],"JNPF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringSplit = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Split elements of `input` based on `delimiter` into a SparseTensor .
 *
 * Let N be the size of source (typically N will be the batch size). Split each
 * element of `input` based on `delimiter` and return a SparseTensor containing
 * the splitted tokens. Empty tokens are ignored if `skipEmpty` is set to True.
 *
 * `delimiter` can be empty, or a string of split characters. If `delimiter` is
 * an empty string, each element of `input` is split into individual
 * character strings. Otherwise every character of `delimiter` is a potential
 * split point.
 *
 * ```js
 * const result = tf.string.stringSplit(['hello world',  'a b c'], ' ');
 * result['indices'].print(); // [[0, 0], [0, 1], [1, 0], [1, 1], [1, 2]]
 * result['values'].print(); // ['hello', 'world', 'a', 'b', 'c']
 * result['shape'].print(); // [2, 3]
 * ```
 * @param input: 1-D. Strings to split.
 * @param delimiter: 0-D. Delimiter characters, or empty string.
 * @param skipEmpty: Optional. If true, skip the empty strings from the result.
 *     Defaults to true.
 * @return A map with the following properties:
 *     - indices: A dense matrix of int32 representing the indices of the sparse
 *       tensor.
 *     - values: A vector of strings corresponding to the splited values.
 *     - shape: a length-2 vector of int32 representing the shape of the sparse
 * tensor, where the first value is N and the second value is the maximum number
 * of tokens in a single input entry.
 *
 * @doc {heading: 'Operations', subheading: 'String'}
 */
function stringSplit_(input, delimiter, skipEmpty = true) {
  const $input = (0, _tensor_util_env.convertToTensor)(input, 'input', 'stringSplit', 'string');
  const $delimiter = (0, _tensor_util_env.convertToTensor)(delimiter, 'delimiter', 'stringSplit', 'string');

  if ($input.rank !== 1) {
    throw new Error(`Input should be Tensor1D but received shape ${$input.shape}`);
  }

  if ($delimiter.rank !== 0) {
    throw new Error(`Delimiter should be a scalar but received shape ${$delimiter.shape}`);
  }

  const attrs = {
    skipEmpty
  };
  const inputs = {
    input: $input,
    delimiter: $delimiter
  };

  const result = _engine.ENGINE.runKernel(_kernel_names.StringSplit, inputs, attrs);

  return {
    indices: result[0],
    values: result[1],
    shape: result[2]
  };
}

const stringSplit = (0, _operation.op)({
  stringSplit_
});
exports.stringSplit = stringSplit;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../operation":"uE86"}],"ouv1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringToHashBucketFast = void 0;

var _engine = require("../../engine");

var _kernel_names = require("../../kernel_names");

var _tensor_util_env = require("../../tensor_util_env");

var _operation = require("../operation");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Converts each string in the input Tensor to its hash mod by a number of
 * buckets.
 *
 * The hash function is deterministic on the content of the string within the
 * process and will never change. However, it is not suitable for cryptography.
 * This function may be used when CPU time is scarce and inputs are trusted or
 * unimportant. There is a risk of adversaries constructing inputs that all hash
 * to the same bucket.
 *
 * ```js
 * const result = tf.string.stringToHashBucketFast(
 *   ['Hello', 'TensorFlow', '2.x'], 3);
 * result.print(); // [0, 2, 2]
 * ```
 * @param input: The strings to assign a hash bucket.
 * @param numBuckets: The number of buckets.
 * @return A Tensor of the same shape as the input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'String'}
 */
function stringToHashBucketFast_(input, numBuckets) {
  const $input = (0, _tensor_util_env.convertToTensor)(input, 'input', 'stringToHashBucketFast', 'string');
  const attrs = {
    numBuckets
  };

  if (numBuckets <= 0) {
    throw new Error(`Number of buckets must be at least 1`);
  }

  const inputs = {
    input: $input
  };
  return _engine.ENGINE.runKernel(_kernel_names.StringToHashBucketFast, inputs, attrs);
}

const stringToHashBucketFast = (0, _operation.op)({
  stringToHashBucketFast_
});
exports.stringToHashBucketFast = stringToHashBucketFast;
},{"../../engine":"phT7","../../kernel_names":"rJl6","../../tensor_util_env":"y4X4","../operation":"uE86"}],"hfXJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  image: true,
  linalg: true,
  losses: true,
  spectral: true,
  signal: true,
  sparse: true,
  string: true,
  abs: true,
  acos: true,
  acosh: true,
  add: true,
  addN: true,
  all: true,
  any: true,
  argMax: true,
  argMin: true,
  asin: true,
  asinh: true,
  atan: true,
  atan2: true,
  atanh: true,
  avgPool: true,
  avgPool3d: true,
  basicLSTMCell: true,
  batchToSpaceND: true,
  batchNorm: true,
  batchNorm2d: true,
  batchNorm3d: true,
  batchNorm4d: true,
  bincount: true,
  broadcastTo: true,
  buffer: true,
  cast: true,
  ceil: true,
  clipByValue: true,
  clone: true,
  complex: true,
  concat: true,
  concat1d: true,
  concat2d: true,
  concat3d: true,
  concat4d: true,
  conv1d: true,
  conv2d: true,
  conv2dTranspose: true,
  conv3d: true,
  conv3dTranspose: true,
  cos: true,
  cosh: true,
  cumsum: true,
  denseBincount: true,
  depthToSpace: true,
  depthwiseConv2d: true,
  diag: true,
  dilation2d: true,
  div: true,
  divNoNan: true,
  dot: true,
  einsum: true,
  elu: true,
  equal: true,
  erf: true,
  exp: true,
  expandDims: true,
  expm1: true,
  eye: true,
  fill: true,
  floor: true,
  floorDiv: true,
  gather: true,
  greater: true,
  greaterEqual: true,
  imag: true,
  isFinite: true,
  isInf: true,
  isNaN: true,
  leakyRelu: true,
  less: true,
  lessEqual: true,
  linspace: true,
  localResponseNormalization: true,
  log: true,
  log1p: true,
  logSigmoid: true,
  logSoftmax: true,
  logSumExp: true,
  logicalAnd: true,
  logicalNot: true,
  logicalOr: true,
  logicalXor: true,
  matMul: true,
  max: true,
  maxPool: true,
  maxPool3d: true,
  maxPoolWithArgmax: true,
  maximum: true,
  mean: true,
  meshgrid: true,
  min: true,
  minimum: true,
  mirrorPad: true,
  mod: true,
  moments: true,
  mul: true,
  multiRNNCell: true,
  multinomial: true,
  neg: true,
  notEqual: true,
  oneHot: true,
  ones: true,
  onesLike: true,
  outerProduct: true,
  pad: true,
  pad1d: true,
  pad2d: true,
  pad3d: true,
  pad4d: true,
  pool: true,
  pow: true,
  prelu: true,
  print: true,
  prod: true,
  rand: true,
  randomGamma: true,
  randomNormal: true,
  randomUniform: true,
  range: true,
  real: true,
  reciprocal: true,
  relu: true,
  relu6: true,
  reshape: true,
  reverse: true,
  reverse1d: true,
  reverse2d: true,
  reverse3d: true,
  reverse4d: true,
  round: true,
  rsqrt: true,
  scalar: true,
  selu: true,
  separableConv2d: true,
  setdiff1dAsync: true,
  sigmoid: true,
  sign: true,
  sin: true,
  sinh: true,
  slice: true,
  slice1d: true,
  slice2d: true,
  slice3d: true,
  slice4d: true,
  softmax: true,
  softplus: true,
  spaceToBatchND: true,
  fft: true,
  ifft: true,
  irfft: true,
  rfft: true,
  split: true,
  sqrt: true,
  square: true,
  squaredDifference: true,
  squeeze: true,
  stack: true,
  step: true,
  stridedSlice: true,
  sub: true,
  sum: true,
  tan: true,
  tanh: true,
  tensor: true,
  tensor1d: true,
  tensor2d: true,
  tensor3d: true,
  tensor4d: true,
  tensor5d: true,
  tensor6d: true,
  tile: true,
  topk: true,
  truncatedNormal: true,
  unique: true,
  unsortedSegmentSum: true,
  unstack: true,
  variable: true,
  where: true,
  whereAsync: true,
  zeros: true,
  zerosLike: true,
  op: true,
  OP_SCOPE_SUFFIX: true,
  fused: true
};
Object.defineProperty(exports, "abs", {
  enumerable: true,
  get: function () {
    return _abs.abs;
  }
});
Object.defineProperty(exports, "acos", {
  enumerable: true,
  get: function () {
    return _acos.acos;
  }
});
Object.defineProperty(exports, "acosh", {
  enumerable: true,
  get: function () {
    return _acosh.acosh;
  }
});
Object.defineProperty(exports, "add", {
  enumerable: true,
  get: function () {
    return _add.add;
  }
});
Object.defineProperty(exports, "addN", {
  enumerable: true,
  get: function () {
    return _add_n.addN;
  }
});
Object.defineProperty(exports, "all", {
  enumerable: true,
  get: function () {
    return _all.all;
  }
});
Object.defineProperty(exports, "any", {
  enumerable: true,
  get: function () {
    return _any.any;
  }
});
Object.defineProperty(exports, "argMax", {
  enumerable: true,
  get: function () {
    return _arg_max.argMax;
  }
});
Object.defineProperty(exports, "argMin", {
  enumerable: true,
  get: function () {
    return _arg_min.argMin;
  }
});
Object.defineProperty(exports, "asin", {
  enumerable: true,
  get: function () {
    return _asin.asin;
  }
});
Object.defineProperty(exports, "asinh", {
  enumerable: true,
  get: function () {
    return _asinh.asinh;
  }
});
Object.defineProperty(exports, "atan", {
  enumerable: true,
  get: function () {
    return _atan.atan;
  }
});
Object.defineProperty(exports, "atan2", {
  enumerable: true,
  get: function () {
    return _atan2.atan2;
  }
});
Object.defineProperty(exports, "atanh", {
  enumerable: true,
  get: function () {
    return _atanh.atanh;
  }
});
Object.defineProperty(exports, "avgPool", {
  enumerable: true,
  get: function () {
    return _avg_pool.avgPool;
  }
});
Object.defineProperty(exports, "avgPool3d", {
  enumerable: true,
  get: function () {
    return _avg_pool_3d.avgPool3d;
  }
});
Object.defineProperty(exports, "basicLSTMCell", {
  enumerable: true,
  get: function () {
    return _basic_lstm_cell.basicLSTMCell;
  }
});
Object.defineProperty(exports, "batchToSpaceND", {
  enumerable: true,
  get: function () {
    return _batch_to_space_nd.batchToSpaceND;
  }
});
Object.defineProperty(exports, "batchNorm", {
  enumerable: true,
  get: function () {
    return _batchnorm.batchNorm;
  }
});
Object.defineProperty(exports, "batchNorm2d", {
  enumerable: true,
  get: function () {
    return _batchnorm2d.batchNorm2d;
  }
});
Object.defineProperty(exports, "batchNorm3d", {
  enumerable: true,
  get: function () {
    return _batchnorm3d.batchNorm3d;
  }
});
Object.defineProperty(exports, "batchNorm4d", {
  enumerable: true,
  get: function () {
    return _batchnorm4d.batchNorm4d;
  }
});
Object.defineProperty(exports, "bincount", {
  enumerable: true,
  get: function () {
    return _bincount.bincount;
  }
});
Object.defineProperty(exports, "broadcastTo", {
  enumerable: true,
  get: function () {
    return _broadcast_to.broadcastTo;
  }
});
Object.defineProperty(exports, "buffer", {
  enumerable: true,
  get: function () {
    return _buffer.buffer;
  }
});
Object.defineProperty(exports, "cast", {
  enumerable: true,
  get: function () {
    return _cast.cast;
  }
});
Object.defineProperty(exports, "ceil", {
  enumerable: true,
  get: function () {
    return _ceil.ceil;
  }
});
Object.defineProperty(exports, "clipByValue", {
  enumerable: true,
  get: function () {
    return _clip_by_value.clipByValue;
  }
});
Object.defineProperty(exports, "clone", {
  enumerable: true,
  get: function () {
    return _clone.clone;
  }
});
Object.defineProperty(exports, "complex", {
  enumerable: true,
  get: function () {
    return _complex.complex;
  }
});
Object.defineProperty(exports, "concat", {
  enumerable: true,
  get: function () {
    return _concat.concat;
  }
});
Object.defineProperty(exports, "concat1d", {
  enumerable: true,
  get: function () {
    return _concat_1d.concat1d;
  }
});
Object.defineProperty(exports, "concat2d", {
  enumerable: true,
  get: function () {
    return _concat_2d.concat2d;
  }
});
Object.defineProperty(exports, "concat3d", {
  enumerable: true,
  get: function () {
    return _concat_3d.concat3d;
  }
});
Object.defineProperty(exports, "concat4d", {
  enumerable: true,
  get: function () {
    return _concat_4d.concat4d;
  }
});
Object.defineProperty(exports, "conv1d", {
  enumerable: true,
  get: function () {
    return _conv1d.conv1d;
  }
});
Object.defineProperty(exports, "conv2d", {
  enumerable: true,
  get: function () {
    return _conv2d.conv2d;
  }
});
Object.defineProperty(exports, "conv2dTranspose", {
  enumerable: true,
  get: function () {
    return _conv2d_transpose.conv2dTranspose;
  }
});
Object.defineProperty(exports, "conv3d", {
  enumerable: true,
  get: function () {
    return _conv3d.conv3d;
  }
});
Object.defineProperty(exports, "conv3dTranspose", {
  enumerable: true,
  get: function () {
    return _conv3d_transpose.conv3dTranspose;
  }
});
Object.defineProperty(exports, "cos", {
  enumerable: true,
  get: function () {
    return _cos.cos;
  }
});
Object.defineProperty(exports, "cosh", {
  enumerable: true,
  get: function () {
    return _cosh.cosh;
  }
});
Object.defineProperty(exports, "cumsum", {
  enumerable: true,
  get: function () {
    return _cumsum.cumsum;
  }
});
Object.defineProperty(exports, "denseBincount", {
  enumerable: true,
  get: function () {
    return _dense_bincount.denseBincount;
  }
});
Object.defineProperty(exports, "depthToSpace", {
  enumerable: true,
  get: function () {
    return _depth_to_space.depthToSpace;
  }
});
Object.defineProperty(exports, "depthwiseConv2d", {
  enumerable: true,
  get: function () {
    return _depthwise_conv2d.depthwiseConv2d;
  }
});
Object.defineProperty(exports, "diag", {
  enumerable: true,
  get: function () {
    return _diag.diag;
  }
});
Object.defineProperty(exports, "dilation2d", {
  enumerable: true,
  get: function () {
    return _dilation2d.dilation2d;
  }
});
Object.defineProperty(exports, "div", {
  enumerable: true,
  get: function () {
    return _div.div;
  }
});
Object.defineProperty(exports, "divNoNan", {
  enumerable: true,
  get: function () {
    return _div_no_nan.divNoNan;
  }
});
Object.defineProperty(exports, "dot", {
  enumerable: true,
  get: function () {
    return _dot.dot;
  }
});
Object.defineProperty(exports, "einsum", {
  enumerable: true,
  get: function () {
    return _einsum.einsum;
  }
});
Object.defineProperty(exports, "elu", {
  enumerable: true,
  get: function () {
    return _elu.elu;
  }
});
Object.defineProperty(exports, "equal", {
  enumerable: true,
  get: function () {
    return _equal.equal;
  }
});
Object.defineProperty(exports, "erf", {
  enumerable: true,
  get: function () {
    return _erf.erf;
  }
});
Object.defineProperty(exports, "exp", {
  enumerable: true,
  get: function () {
    return _exp.exp;
  }
});
Object.defineProperty(exports, "expandDims", {
  enumerable: true,
  get: function () {
    return _expand_dims.expandDims;
  }
});
Object.defineProperty(exports, "expm1", {
  enumerable: true,
  get: function () {
    return _expm.expm1;
  }
});
Object.defineProperty(exports, "eye", {
  enumerable: true,
  get: function () {
    return _eye.eye;
  }
});
Object.defineProperty(exports, "fill", {
  enumerable: true,
  get: function () {
    return _fill.fill;
  }
});
Object.defineProperty(exports, "floor", {
  enumerable: true,
  get: function () {
    return _floor.floor;
  }
});
Object.defineProperty(exports, "floorDiv", {
  enumerable: true,
  get: function () {
    return _floorDiv.floorDiv;
  }
});
Object.defineProperty(exports, "gather", {
  enumerable: true,
  get: function () {
    return _gather.gather;
  }
});
Object.defineProperty(exports, "greater", {
  enumerable: true,
  get: function () {
    return _greater.greater;
  }
});
Object.defineProperty(exports, "greaterEqual", {
  enumerable: true,
  get: function () {
    return _greater_equal.greaterEqual;
  }
});
Object.defineProperty(exports, "imag", {
  enumerable: true,
  get: function () {
    return _imag.imag;
  }
});
Object.defineProperty(exports, "isFinite", {
  enumerable: true,
  get: function () {
    return _is_finite.isFinite;
  }
});
Object.defineProperty(exports, "isInf", {
  enumerable: true,
  get: function () {
    return _is_inf.isInf;
  }
});
Object.defineProperty(exports, "isNaN", {
  enumerable: true,
  get: function () {
    return _is_nan.isNaN;
  }
});
Object.defineProperty(exports, "leakyRelu", {
  enumerable: true,
  get: function () {
    return _leaky_relu.leakyRelu;
  }
});
Object.defineProperty(exports, "less", {
  enumerable: true,
  get: function () {
    return _less.less;
  }
});
Object.defineProperty(exports, "lessEqual", {
  enumerable: true,
  get: function () {
    return _less_equal.lessEqual;
  }
});
Object.defineProperty(exports, "linspace", {
  enumerable: true,
  get: function () {
    return _linspace.linspace;
  }
});
Object.defineProperty(exports, "localResponseNormalization", {
  enumerable: true,
  get: function () {
    return _local_response_normalization.localResponseNormalization;
  }
});
Object.defineProperty(exports, "log", {
  enumerable: true,
  get: function () {
    return _log.log;
  }
});
Object.defineProperty(exports, "log1p", {
  enumerable: true,
  get: function () {
    return _log1p.log1p;
  }
});
Object.defineProperty(exports, "logSigmoid", {
  enumerable: true,
  get: function () {
    return _log_sigmoid.logSigmoid;
  }
});
Object.defineProperty(exports, "logSoftmax", {
  enumerable: true,
  get: function () {
    return _log_softmax.logSoftmax;
  }
});
Object.defineProperty(exports, "logSumExp", {
  enumerable: true,
  get: function () {
    return _log_sum_exp.logSumExp;
  }
});
Object.defineProperty(exports, "logicalAnd", {
  enumerable: true,
  get: function () {
    return _logical_and.logicalAnd;
  }
});
Object.defineProperty(exports, "logicalNot", {
  enumerable: true,
  get: function () {
    return _logical_not.logicalNot;
  }
});
Object.defineProperty(exports, "logicalOr", {
  enumerable: true,
  get: function () {
    return _logical_or.logicalOr;
  }
});
Object.defineProperty(exports, "logicalXor", {
  enumerable: true,
  get: function () {
    return _logical_xor.logicalXor;
  }
});
Object.defineProperty(exports, "matMul", {
  enumerable: true,
  get: function () {
    return _mat_mul.matMul;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function () {
    return _max.max;
  }
});
Object.defineProperty(exports, "maxPool", {
  enumerable: true,
  get: function () {
    return _max_pool.maxPool;
  }
});
Object.defineProperty(exports, "maxPool3d", {
  enumerable: true,
  get: function () {
    return _max_pool_3d.maxPool3d;
  }
});
Object.defineProperty(exports, "maxPoolWithArgmax", {
  enumerable: true,
  get: function () {
    return _max_pool_with_argmax.maxPoolWithArgmax;
  }
});
Object.defineProperty(exports, "maximum", {
  enumerable: true,
  get: function () {
    return _maximum.maximum;
  }
});
Object.defineProperty(exports, "mean", {
  enumerable: true,
  get: function () {
    return _mean.mean;
  }
});
Object.defineProperty(exports, "meshgrid", {
  enumerable: true,
  get: function () {
    return _meshgrid.meshgrid;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function () {
    return _min.min;
  }
});
Object.defineProperty(exports, "minimum", {
  enumerable: true,
  get: function () {
    return _minimum.minimum;
  }
});
Object.defineProperty(exports, "mirrorPad", {
  enumerable: true,
  get: function () {
    return _mirror_pad.mirrorPad;
  }
});
Object.defineProperty(exports, "mod", {
  enumerable: true,
  get: function () {
    return _mod.mod;
  }
});
Object.defineProperty(exports, "moments", {
  enumerable: true,
  get: function () {
    return _moments.moments;
  }
});
Object.defineProperty(exports, "mul", {
  enumerable: true,
  get: function () {
    return _mul.mul;
  }
});
Object.defineProperty(exports, "multiRNNCell", {
  enumerable: true,
  get: function () {
    return _multi_rnn_cell.multiRNNCell;
  }
});
Object.defineProperty(exports, "multinomial", {
  enumerable: true,
  get: function () {
    return _multinomial.multinomial;
  }
});
Object.defineProperty(exports, "neg", {
  enumerable: true,
  get: function () {
    return _neg.neg;
  }
});
Object.defineProperty(exports, "notEqual", {
  enumerable: true,
  get: function () {
    return _not_equal.notEqual;
  }
});
Object.defineProperty(exports, "oneHot", {
  enumerable: true,
  get: function () {
    return _one_hot.oneHot;
  }
});
Object.defineProperty(exports, "ones", {
  enumerable: true,
  get: function () {
    return _ones.ones;
  }
});
Object.defineProperty(exports, "onesLike", {
  enumerable: true,
  get: function () {
    return _ones_like.onesLike;
  }
});
Object.defineProperty(exports, "outerProduct", {
  enumerable: true,
  get: function () {
    return _outer_product.outerProduct;
  }
});
Object.defineProperty(exports, "pad", {
  enumerable: true,
  get: function () {
    return _pad.pad;
  }
});
Object.defineProperty(exports, "pad1d", {
  enumerable: true,
  get: function () {
    return _pad1d.pad1d;
  }
});
Object.defineProperty(exports, "pad2d", {
  enumerable: true,
  get: function () {
    return _pad2d.pad2d;
  }
});
Object.defineProperty(exports, "pad3d", {
  enumerable: true,
  get: function () {
    return _pad3d.pad3d;
  }
});
Object.defineProperty(exports, "pad4d", {
  enumerable: true,
  get: function () {
    return _pad4d.pad4d;
  }
});
Object.defineProperty(exports, "pool", {
  enumerable: true,
  get: function () {
    return _pool.pool;
  }
});
Object.defineProperty(exports, "pow", {
  enumerable: true,
  get: function () {
    return _pow.pow;
  }
});
Object.defineProperty(exports, "prelu", {
  enumerable: true,
  get: function () {
    return _prelu.prelu;
  }
});
Object.defineProperty(exports, "print", {
  enumerable: true,
  get: function () {
    return _print.print;
  }
});
Object.defineProperty(exports, "prod", {
  enumerable: true,
  get: function () {
    return _prod.prod;
  }
});
Object.defineProperty(exports, "rand", {
  enumerable: true,
  get: function () {
    return _rand.rand;
  }
});
Object.defineProperty(exports, "randomGamma", {
  enumerable: true,
  get: function () {
    return _random_gamma.randomGamma;
  }
});
Object.defineProperty(exports, "randomNormal", {
  enumerable: true,
  get: function () {
    return _random_normal.randomNormal;
  }
});
Object.defineProperty(exports, "randomUniform", {
  enumerable: true,
  get: function () {
    return _random_uniform.randomUniform;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _range.range;
  }
});
Object.defineProperty(exports, "real", {
  enumerable: true,
  get: function () {
    return _real.real;
  }
});
Object.defineProperty(exports, "reciprocal", {
  enumerable: true,
  get: function () {
    return _reciprocal.reciprocal;
  }
});
Object.defineProperty(exports, "relu", {
  enumerable: true,
  get: function () {
    return _relu.relu;
  }
});
Object.defineProperty(exports, "relu6", {
  enumerable: true,
  get: function () {
    return _relu2.relu6;
  }
});
Object.defineProperty(exports, "reshape", {
  enumerable: true,
  get: function () {
    return _reshape.reshape;
  }
});
Object.defineProperty(exports, "reverse", {
  enumerable: true,
  get: function () {
    return _reverse.reverse;
  }
});
Object.defineProperty(exports, "reverse1d", {
  enumerable: true,
  get: function () {
    return _reverse_1d.reverse1d;
  }
});
Object.defineProperty(exports, "reverse2d", {
  enumerable: true,
  get: function () {
    return _reverse_2d.reverse2d;
  }
});
Object.defineProperty(exports, "reverse3d", {
  enumerable: true,
  get: function () {
    return _reverse_3d.reverse3d;
  }
});
Object.defineProperty(exports, "reverse4d", {
  enumerable: true,
  get: function () {
    return _reverse_4d.reverse4d;
  }
});
Object.defineProperty(exports, "round", {
  enumerable: true,
  get: function () {
    return _round.round;
  }
});
Object.defineProperty(exports, "rsqrt", {
  enumerable: true,
  get: function () {
    return _rsqrt.rsqrt;
  }
});
Object.defineProperty(exports, "scalar", {
  enumerable: true,
  get: function () {
    return _scalar.scalar;
  }
});
Object.defineProperty(exports, "selu", {
  enumerable: true,
  get: function () {
    return _selu.selu;
  }
});
Object.defineProperty(exports, "separableConv2d", {
  enumerable: true,
  get: function () {
    return _separable_conv2d.separableConv2d;
  }
});
Object.defineProperty(exports, "setdiff1dAsync", {
  enumerable: true,
  get: function () {
    return _setdiff1d_async.setdiff1dAsync;
  }
});
Object.defineProperty(exports, "sigmoid", {
  enumerable: true,
  get: function () {
    return _sigmoid.sigmoid;
  }
});
Object.defineProperty(exports, "sign", {
  enumerable: true,
  get: function () {
    return _sign.sign;
  }
});
Object.defineProperty(exports, "sin", {
  enumerable: true,
  get: function () {
    return _sin.sin;
  }
});
Object.defineProperty(exports, "sinh", {
  enumerable: true,
  get: function () {
    return _sinh.sinh;
  }
});
Object.defineProperty(exports, "slice", {
  enumerable: true,
  get: function () {
    return _slice.slice;
  }
});
Object.defineProperty(exports, "slice1d", {
  enumerable: true,
  get: function () {
    return _slice1d.slice1d;
  }
});
Object.defineProperty(exports, "slice2d", {
  enumerable: true,
  get: function () {
    return _slice2d.slice2d;
  }
});
Object.defineProperty(exports, "slice3d", {
  enumerable: true,
  get: function () {
    return _slice3d.slice3d;
  }
});
Object.defineProperty(exports, "slice4d", {
  enumerable: true,
  get: function () {
    return _slice4d.slice4d;
  }
});
Object.defineProperty(exports, "softmax", {
  enumerable: true,
  get: function () {
    return _softmax.softmax;
  }
});
Object.defineProperty(exports, "softplus", {
  enumerable: true,
  get: function () {
    return _softplus.softplus;
  }
});
Object.defineProperty(exports, "spaceToBatchND", {
  enumerable: true,
  get: function () {
    return _space_to_batch_nd.spaceToBatchND;
  }
});
Object.defineProperty(exports, "fft", {
  enumerable: true,
  get: function () {
    return _fft.fft;
  }
});
Object.defineProperty(exports, "ifft", {
  enumerable: true,
  get: function () {
    return _ifft.ifft;
  }
});
Object.defineProperty(exports, "irfft", {
  enumerable: true,
  get: function () {
    return _irfft.irfft;
  }
});
Object.defineProperty(exports, "rfft", {
  enumerable: true,
  get: function () {
    return _rfft.rfft;
  }
});
Object.defineProperty(exports, "split", {
  enumerable: true,
  get: function () {
    return _split.split;
  }
});
Object.defineProperty(exports, "sqrt", {
  enumerable: true,
  get: function () {
    return _sqrt.sqrt;
  }
});
Object.defineProperty(exports, "square", {
  enumerable: true,
  get: function () {
    return _square.square;
  }
});
Object.defineProperty(exports, "squaredDifference", {
  enumerable: true,
  get: function () {
    return _squared_difference.squaredDifference;
  }
});
Object.defineProperty(exports, "squeeze", {
  enumerable: true,
  get: function () {
    return _squeeze.squeeze;
  }
});
Object.defineProperty(exports, "stack", {
  enumerable: true,
  get: function () {
    return _stack.stack;
  }
});
Object.defineProperty(exports, "step", {
  enumerable: true,
  get: function () {
    return _step.step;
  }
});
Object.defineProperty(exports, "stridedSlice", {
  enumerable: true,
  get: function () {
    return _strided_slice.stridedSlice;
  }
});
Object.defineProperty(exports, "sub", {
  enumerable: true,
  get: function () {
    return _sub.sub;
  }
});
Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function () {
    return _sum.sum;
  }
});
Object.defineProperty(exports, "tan", {
  enumerable: true,
  get: function () {
    return _tan.tan;
  }
});
Object.defineProperty(exports, "tanh", {
  enumerable: true,
  get: function () {
    return _tanh.tanh;
  }
});
Object.defineProperty(exports, "tensor", {
  enumerable: true,
  get: function () {
    return _tensor.tensor;
  }
});
Object.defineProperty(exports, "tensor1d", {
  enumerable: true,
  get: function () {
    return _tensor1d.tensor1d;
  }
});
Object.defineProperty(exports, "tensor2d", {
  enumerable: true,
  get: function () {
    return _tensor2d.tensor2d;
  }
});
Object.defineProperty(exports, "tensor3d", {
  enumerable: true,
  get: function () {
    return _tensor3d.tensor3d;
  }
});
Object.defineProperty(exports, "tensor4d", {
  enumerable: true,
  get: function () {
    return _tensor4d.tensor4d;
  }
});
Object.defineProperty(exports, "tensor5d", {
  enumerable: true,
  get: function () {
    return _tensor5d.tensor5d;
  }
});
Object.defineProperty(exports, "tensor6d", {
  enumerable: true,
  get: function () {
    return _tensor6d.tensor6d;
  }
});
Object.defineProperty(exports, "tile", {
  enumerable: true,
  get: function () {
    return _tile.tile;
  }
});
Object.defineProperty(exports, "topk", {
  enumerable: true,
  get: function () {
    return _topk.topk;
  }
});
Object.defineProperty(exports, "truncatedNormal", {
  enumerable: true,
  get: function () {
    return _truncated_normal.truncatedNormal;
  }
});
Object.defineProperty(exports, "unique", {
  enumerable: true,
  get: function () {
    return _unique.unique;
  }
});
Object.defineProperty(exports, "unsortedSegmentSum", {
  enumerable: true,
  get: function () {
    return _unsorted_segment_sum.unsortedSegmentSum;
  }
});
Object.defineProperty(exports, "unstack", {
  enumerable: true,
  get: function () {
    return _unstack.unstack;
  }
});
Object.defineProperty(exports, "variable", {
  enumerable: true,
  get: function () {
    return _variable.variable;
  }
});
Object.defineProperty(exports, "where", {
  enumerable: true,
  get: function () {
    return _where.where;
  }
});
Object.defineProperty(exports, "whereAsync", {
  enumerable: true,
  get: function () {
    return _where_async.whereAsync;
  }
});
Object.defineProperty(exports, "zeros", {
  enumerable: true,
  get: function () {
    return _zeros.zeros;
  }
});
Object.defineProperty(exports, "zerosLike", {
  enumerable: true,
  get: function () {
    return _zeros_like.zerosLike;
  }
});
Object.defineProperty(exports, "op", {
  enumerable: true,
  get: function () {
    return _operation.op;
  }
});
Object.defineProperty(exports, "OP_SCOPE_SUFFIX", {
  enumerable: true,
  get: function () {
    return _operation.OP_SCOPE_SUFFIX;
  }
});
exports.fused = exports.string = exports.sparse = exports.signal = exports.spectral = exports.losses = exports.linalg = exports.image = void 0;

var _abs = require("./abs");

var _acos = require("./acos");

var _acosh = require("./acosh");

var _add = require("./add");

var _add_n = require("./add_n");

var _all = require("./all");

var _any = require("./any");

var _arg_max = require("./arg_max");

var _arg_min = require("./arg_min");

var _asin = require("./asin");

var _asinh = require("./asinh");

var _atan = require("./atan");

var _atan2 = require("./atan2");

var _atanh = require("./atanh");

var _avg_pool = require("./avg_pool");

var _avg_pool_3d = require("./avg_pool_3d");

var _basic_lstm_cell = require("./basic_lstm_cell");

var _batch_to_space_nd = require("./batch_to_space_nd");

var _batchnorm = require("./batchnorm");

var _batchnorm2d = require("./batchnorm2d");

var _batchnorm3d = require("./batchnorm3d");

var _batchnorm4d = require("./batchnorm4d");

var _bincount = require("./bincount");

var _broadcast_to = require("./broadcast_to");

var _buffer = require("./buffer");

var _cast = require("./cast");

var _ceil = require("./ceil");

var _clip_by_value = require("./clip_by_value");

var _clone = require("./clone");

var _complex = require("./complex");

var _concat = require("./concat");

var _concat_1d = require("./concat_1d");

var _concat_2d = require("./concat_2d");

var _concat_3d = require("./concat_3d");

var _concat_4d = require("./concat_4d");

var _conv1d = require("./conv1d");

var _conv2d = require("./conv2d");

var _conv2d_transpose = require("./conv2d_transpose");

var _conv3d = require("./conv3d");

var _conv3d_transpose = require("./conv3d_transpose");

var _cos = require("./cos");

var _cosh = require("./cosh");

var _cumsum = require("./cumsum");

var _dense_bincount = require("./dense_bincount");

var _depth_to_space = require("./depth_to_space");

var _depthwise_conv2d = require("./depthwise_conv2d");

var _diag = require("./diag");

var _dilation2d = require("./dilation2d");

var _div = require("./div");

var _div_no_nan = require("./div_no_nan");

var _dot = require("./dot");

var _einsum = require("./einsum");

var _elu = require("./elu");

var _equal = require("./equal");

var _erf = require("./erf");

var _exp = require("./exp");

var _expand_dims = require("./expand_dims");

var _expm = require("./expm1");

var _eye = require("./eye");

var _fill = require("./fill");

var _floor = require("./floor");

var _floorDiv = require("./floorDiv");

var _gather = require("./gather");

var _greater = require("./greater");

var _greater_equal = require("./greater_equal");

var _imag = require("./imag");

var _is_finite = require("./is_finite");

var _is_inf = require("./is_inf");

var _is_nan = require("./is_nan");

var _leaky_relu = require("./leaky_relu");

var _less = require("./less");

var _less_equal = require("./less_equal");

var _linspace = require("./linspace");

var _local_response_normalization = require("./local_response_normalization");

var _log = require("./log");

var _log1p = require("./log1p");

var _log_sigmoid = require("./log_sigmoid");

var _log_softmax = require("./log_softmax");

var _log_sum_exp = require("./log_sum_exp");

var _logical_and = require("./logical_and");

var _logical_not = require("./logical_not");

var _logical_or = require("./logical_or");

var _logical_xor = require("./logical_xor");

var _mat_mul = require("./mat_mul");

var _max = require("./max");

var _max_pool = require("./max_pool");

var _max_pool_3d = require("./max_pool_3d");

var _max_pool_with_argmax = require("./max_pool_with_argmax");

var _maximum = require("./maximum");

var _mean = require("./mean");

var _meshgrid = require("./meshgrid");

var _min = require("./min");

var _minimum = require("./minimum");

var _mirror_pad = require("./mirror_pad");

var _mod = require("./mod");

var _moments = require("./moments");

var _mul = require("./mul");

var _multi_rnn_cell = require("./multi_rnn_cell");

var _multinomial = require("./multinomial");

var _neg = require("./neg");

var _not_equal = require("./not_equal");

var _one_hot = require("./one_hot");

var _ones = require("./ones");

var _ones_like = require("./ones_like");

var _outer_product = require("./outer_product");

var _pad = require("./pad");

var _pad1d = require("./pad1d");

var _pad2d = require("./pad2d");

var _pad3d = require("./pad3d");

var _pad4d = require("./pad4d");

var _pool = require("./pool");

var _pow = require("./pow");

var _prelu = require("./prelu");

var _print = require("./print");

var _prod = require("./prod");

var _rand = require("./rand");

var _random_gamma = require("./random_gamma");

var _random_normal = require("./random_normal");

var _random_uniform = require("./random_uniform");

var _range = require("./range");

var _real = require("./real");

var _reciprocal = require("./reciprocal");

var _relu = require("./relu");

var _relu2 = require("./relu6");

var _reshape = require("./reshape");

var _reverse = require("./reverse");

var _reverse_1d = require("./reverse_1d");

var _reverse_2d = require("./reverse_2d");

var _reverse_3d = require("./reverse_3d");

var _reverse_4d = require("./reverse_4d");

var _round = require("./round");

var _rsqrt = require("./rsqrt");

var _scalar = require("./scalar");

var _selu = require("./selu");

var _separable_conv2d = require("./separable_conv2d");

var _setdiff1d_async = require("./setdiff1d_async");

var _sigmoid = require("./sigmoid");

var _sign = require("./sign");

var _sin = require("./sin");

var _sinh = require("./sinh");

var _slice = require("./slice");

var _slice1d = require("./slice1d");

var _slice2d = require("./slice2d");

var _slice3d = require("./slice3d");

var _slice4d = require("./slice4d");

var _softmax = require("./softmax");

var _softplus = require("./softplus");

var _space_to_batch_nd = require("./space_to_batch_nd");

var _fft = require("./spectral/fft");

var _ifft = require("./spectral/ifft");

var _irfft = require("./spectral/irfft");

var _rfft = require("./spectral/rfft");

var _split = require("./split");

var _sqrt = require("./sqrt");

var _square = require("./square");

var _squared_difference = require("./squared_difference");

var _squeeze = require("./squeeze");

var _stack = require("./stack");

var _step = require("./step");

var _strided_slice = require("./strided_slice");

var _sub = require("./sub");

var _sum = require("./sum");

var _tan = require("./tan");

var _tanh = require("./tanh");

var _tensor = require("./tensor");

var _tensor1d = require("./tensor1d");

var _tensor2d = require("./tensor2d");

var _tensor3d = require("./tensor3d");

var _tensor4d = require("./tensor4d");

var _tensor5d = require("./tensor5d");

var _tensor6d = require("./tensor6d");

var _tile = require("./tile");

var _topk = require("./topk");

var _truncated_normal = require("./truncated_normal");

var _unique = require("./unique");

var _unsorted_segment_sum = require("./unsorted_segment_sum");

var _unstack = require("./unstack");

var _variable = require("./variable");

var _where = require("./where");

var _where_async = require("./where_async");

var _zeros = require("./zeros");

var _zeros_like = require("./zeros_like");

var _boolean_mask = require("./boolean_mask");

Object.keys(_boolean_mask).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _boolean_mask[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _boolean_mask[key];
    }
  });
});

var _transpose = require("./transpose");

Object.keys(_transpose).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _transpose[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _transpose[key];
    }
  });
});

var _norm = require("./norm");

Object.keys(_norm).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _norm[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _norm[key];
    }
  });
});

var _moving_average = require("./moving_average");

Object.keys(_moving_average).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _moving_average[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _moving_average[key];
    }
  });
});

var _scatter_nd = require("./scatter_nd");

Object.keys(_scatter_nd).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _scatter_nd[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _scatter_nd[key];
    }
  });
});

var _sparse_to_dense = require("./sparse_to_dense");

Object.keys(_sparse_to_dense).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _sparse_to_dense[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _sparse_to_dense[key];
    }
  });
});

var _gather_nd = require("./gather_nd");

Object.keys(_gather_nd).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _gather_nd[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gather_nd[key];
    }
  });
});

var _dropout = require("./dropout");

Object.keys(_dropout).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _dropout[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dropout[key];
    }
  });
});

var _signal_ops_util = require("./signal_ops_util");

Object.keys(_signal_ops_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _signal_ops_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _signal_ops_util[key];
    }
  });
});

var _in_top_k = require("./in_top_k");

Object.keys(_in_top_k).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _in_top_k[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _in_top_k[key];
    }
  });
});

var _operation = require("./operation");

var fused = _interopRequireWildcard(require("./fused_ops"));

exports.fused = fused;

var _hamming_window = require("./signal/hamming_window");

var _hann_window = require("./signal/hann_window");

var _frame = require("./signal/frame");

var _stft = require("./signal/stft");

var _crop_and_resize = require("./image/crop_and_resize");

var _flip_left_right = require("./image/flip_left_right");

var _rotate_with_offset = require("./image/rotate_with_offset");

var _non_max_suppression = require("./image/non_max_suppression");

var _non_max_suppression_async = require("./image/non_max_suppression_async");

var _non_max_suppression_with_score = require("./image/non_max_suppression_with_score");

var _non_max_suppression_with_score_async = require("./image/non_max_suppression_with_score_async");

var _non_max_suppression_padded = require("./image/non_max_suppression_padded");

var _non_max_suppression_padded_async = require("./image/non_max_suppression_padded_async");

var _resize_bilinear = require("./image/resize_bilinear");

var _resize_nearest_neighbor = require("./image/resize_nearest_neighbor");

var _threshold = require("./image/threshold");

var _transform = require("./image/transform");

var _band_part = require("./linalg/band_part");

var _gram_schmidt = require("./linalg/gram_schmidt");

var _qr = require("./linalg/qr");

var _absolute_difference = require("./losses/absolute_difference");

var _compute_weighted_loss = require("./losses/compute_weighted_loss");

var _cosine_distance = require("./losses/cosine_distance");

var _hinge_loss = require("./losses/hinge_loss");

var _huber_loss = require("./losses/huber_loss");

var _log_loss = require("./losses/log_loss");

var _mean_squared_error = require("./losses/mean_squared_error");

var _sigmoid_cross_entropy = require("./losses/sigmoid_cross_entropy");

var _softmax_cross_entropy = require("./losses/softmax_cross_entropy");

var _sparse_fill_empty_rows = require("./sparse/sparse_fill_empty_rows");

var _sparse_reshape = require("./sparse/sparse_reshape");

var _sparse_segment_mean = require("./sparse/sparse_segment_mean");

var _sparse_segment_sum = require("./sparse/sparse_segment_sum");

var _string_n_grams = require("./string/string_n_grams");

var _string_split = require("./string/string_split");

var _string_to_hash_bucket_fast = require("./string/string_to_hash_bucket_fast");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Modularized ops.
const spectral = {
  fft: _fft.fft,
  ifft: _ifft.ifft,
  rfft: _rfft.rfft,
  irfft: _irfft.irfft
};
exports.spectral = spectral;
const signal = {
  hammingWindow: _hamming_window.hammingWindow,
  hannWindow: _hann_window.hannWindow,
  frame: _frame.frame,
  stft: _stft.stft
}; // Image Ops namespace

exports.signal = signal;
const image = {
  flipLeftRight: _flip_left_right.flipLeftRight,
  resizeNearestNeighbor: _resize_nearest_neighbor.resizeNearestNeighbor,
  resizeBilinear: _resize_bilinear.resizeBilinear,
  rotateWithOffset: _rotate_with_offset.rotateWithOffset,
  cropAndResize: _crop_and_resize.cropAndResize,
  nonMaxSuppression: _non_max_suppression.nonMaxSuppression,
  nonMaxSuppressionAsync: _non_max_suppression_async.nonMaxSuppressionAsync,
  nonMaxSuppressionWithScore: _non_max_suppression_with_score.nonMaxSuppressionWithScore,
  nonMaxSuppressionWithScoreAsync: _non_max_suppression_with_score_async.nonMaxSuppressionWithScoreAsync,
  nonMaxSuppressionPadded: _non_max_suppression_padded.nonMaxSuppressionPadded,
  nonMaxSuppressionPaddedAsync: _non_max_suppression_padded_async.nonMaxSuppressionPaddedAsync,
  threshold: _threshold.threshold,
  transform: _transform.transform
}; // linalg namespace

exports.image = image;
const linalg = {
  bandPart: _band_part.bandPart,
  gramSchmidt: _gram_schmidt.gramSchmidt,
  qr: _qr.qr
}; // losses namespace;

exports.linalg = linalg;
const losses = {
  absoluteDifference: _absolute_difference.absoluteDifference,
  computeWeightedLoss: _compute_weighted_loss.computeWeightedLoss,
  cosineDistance: _cosine_distance.cosineDistance,
  hingeLoss: _hinge_loss.hingeLoss,
  huberLoss: _huber_loss.huberLoss,
  logLoss: _log_loss.logLoss,
  meanSquaredError: _mean_squared_error.meanSquaredError,
  sigmoidCrossEntropy: _sigmoid_cross_entropy.sigmoidCrossEntropy,
  softmaxCrossEntropy: _softmax_cross_entropy.softmaxCrossEntropy
};
exports.losses = losses;
const sparse = {
  sparseFillEmptyRows: _sparse_fill_empty_rows.sparseFillEmptyRows,
  sparseReshape: _sparse_reshape.sparseReshape,
  sparseSegmentMean: _sparse_segment_mean.sparseSegmentMean,
  sparseSegmentSum: _sparse_segment_sum.sparseSegmentSum
};
exports.sparse = sparse;
// tslint:disable-next-line:variable-name
const string = {
  stringNGrams: _string_n_grams.stringNGrams,
  stringSplit: _string_split.stringSplit,
  stringToHashBucketFast: _string_to_hash_bucket_fast.stringToHashBucketFast
}; // Second level exports.

exports.string = string;
},{"./abs":"U9d5","./acos":"hDnd","./acosh":"zTvf","./add":"N73o","./add_n":"rS0T","./all":"zHmK","./any":"XocL","./arg_max":"dv7u","./arg_min":"y2ST","./asin":"kcJ4","./asinh":"mK5f","./atan":"Qawb","./atan2":"lkDZ","./atanh":"c4nq","./avg_pool":"LNDu","./avg_pool_3d":"gUgG","./basic_lstm_cell":"IrGh","./batch_to_space_nd":"vEiD","./batchnorm":"gYII","./batchnorm2d":"PwSx","./batchnorm3d":"zSL9","./batchnorm4d":"PGAU","./bincount":"rYQ1","./broadcast_to":"ZDfb","./buffer":"GfO2","./cast":"qnzc","./ceil":"VBn4","./clip_by_value":"OIQo","./clone":"Ot88","./complex":"e4je","./concat":"V5Ij","./concat_1d":"SY4F","./concat_2d":"rep6","./concat_3d":"La3N","./concat_4d":"UYxl","./conv1d":"RZoo","./conv2d":"CVMs","./conv2d_transpose":"v80f","./conv3d":"uOsG","./conv3d_transpose":"ndAv","./cos":"gHiU","./cosh":"dWiz","./cumsum":"s2nI","./dense_bincount":"IzLf","./depth_to_space":"o3IO","./depthwise_conv2d":"HEHz","./diag":"Qz11","./dilation2d":"XEeh","./div":"S2L5","./div_no_nan":"VrTr","./dot":"M98r","./einsum":"aqvb","./elu":"qSof","./equal":"haNF","./erf":"Ng3O","./exp":"xcz4","./expand_dims":"WqhD","./expm1":"NE5u","./eye":"MP6S","./fill":"gaCw","./floor":"EeTS","./floorDiv":"OIz3","./gather":"TfxI","./greater":"WT29","./greater_equal":"a6nY","./imag":"eG10","./is_finite":"uXDy","./is_inf":"d2YA","./is_nan":"cHRr","./leaky_relu":"RYa8","./less":"onA7","./less_equal":"vnhI","./linspace":"Eb8v","./local_response_normalization":"uT9U","./log":"f3PH","./log1p":"ODmc","./log_sigmoid":"h4az","./log_softmax":"rVC8","./log_sum_exp":"te98","./logical_and":"sHir","./logical_not":"jt3a","./logical_or":"cBH6","./logical_xor":"RGME","./mat_mul":"zVDr","./max":"KIVY","./max_pool":"g3Dm","./max_pool_3d":"Z3LC","./max_pool_with_argmax":"vORB","./maximum":"E33m","./mean":"DIOh","./meshgrid":"OeUD","./min":"pkmC","./minimum":"TKku","./mirror_pad":"y7Tc","./mod":"cyrT","./moments":"xfMn","./mul":"tBJ4","./multi_rnn_cell":"C2RS","./multinomial":"moMD","./neg":"i2LN","./not_equal":"TOzH","./one_hot":"HpS0","./ones":"iY3A","./ones_like":"nMI9","./outer_product":"mAdl","./pad":"y7nM","./pad1d":"c4D8","./pad2d":"Zzwk","./pad3d":"DYJf","./pad4d":"k9sb","./pool":"Zp2S","./pow":"o2Kl","./prelu":"Xs9q","./print":"avTA","./prod":"V8As","./rand":"DOKZ","./random_gamma":"KZ1e","./random_normal":"aurk","./random_uniform":"Imph","./range":"FAHd","./real":"j99O","./reciprocal":"kFd0","./relu":"JbIg","./relu6":"urTr","./reshape":"F0cm","./reverse":"JJIO","./reverse_1d":"AODX","./reverse_2d":"JN76","./reverse_3d":"hWz2","./reverse_4d":"X21a","./round":"NMXN","./rsqrt":"gHPL","./scalar":"TiGU","./selu":"HaUr","./separable_conv2d":"PKLM","./setdiff1d_async":"yk2k","./sigmoid":"DbGB","./sign":"CH4E","./sin":"zDLt","./sinh":"DmYY","./slice":"wIos","./slice1d":"vSl0","./slice2d":"bSki","./slice3d":"c5n3","./slice4d":"EHN5","./softmax":"TVVR","./softplus":"TLV5","./space_to_batch_nd":"ERrS","./spectral/fft":"lRSx","./spectral/ifft":"G5kM","./spectral/irfft":"Yh9k","./spectral/rfft":"FMnE","./split":"lgPf","./sqrt":"brr7","./square":"KiGo","./squared_difference":"hbAV","./squeeze":"pxYL","./stack":"Wzzr","./step":"vRkD","./strided_slice":"quwm","./sub":"SgzI","./sum":"kc8w","./tan":"fQEZ","./tanh":"djih","./tensor":"woAd","./tensor1d":"vKgg","./tensor2d":"UEzj","./tensor3d":"gE0c","./tensor4d":"CbDo","./tensor5d":"ViEa","./tensor6d":"j89l","./tile":"DlNu","./topk":"Hv3o","./truncated_normal":"YHjl","./unique":"LuF4","./unsorted_segment_sum":"oY1I","./unstack":"Smo9","./variable":"dH8d","./where":"TsgC","./where_async":"moUh","./zeros":"AsfN","./zeros_like":"qY0o","./boolean_mask":"JMVl","./transpose":"JmRY","./norm":"exuO","./moving_average":"SiXR","./scatter_nd":"r4bT","./sparse_to_dense":"s9K8","./gather_nd":"PYkI","./dropout":"jb36","./signal_ops_util":"Ubrm","./in_top_k":"oeUN","./operation":"uE86","./fused_ops":"Z9t3","./signal/hamming_window":"HdvD","./signal/hann_window":"bdTr","./signal/frame":"Go7t","./signal/stft":"jWvs","./image/crop_and_resize":"su0V","./image/flip_left_right":"tSJb","./image/rotate_with_offset":"t1ei","./image/non_max_suppression":"wp0Q","./image/non_max_suppression_async":"kFcs","./image/non_max_suppression_with_score":"KHDA","./image/non_max_suppression_with_score_async":"t65b","./image/non_max_suppression_padded":"zXJN","./image/non_max_suppression_padded_async":"sgWJ","./image/resize_bilinear":"JODz","./image/resize_nearest_neighbor":"rQ9Q","./image/threshold":"M9mR","./image/transform":"cGGF","./linalg/band_part":"KELI","./linalg/gram_schmidt":"uAHR","./linalg/qr":"Ppe5","./losses/absolute_difference":"coTE","./losses/compute_weighted_loss":"WmQQ","./losses/cosine_distance":"IpNr","./losses/hinge_loss":"QDEw","./losses/huber_loss":"wWxs","./losses/log_loss":"sLE3","./losses/mean_squared_error":"ZpcK","./losses/sigmoid_cross_entropy":"E5VI","./losses/softmax_cross_entropy":"w47l","./sparse/sparse_fill_empty_rows":"mqNF","./sparse/sparse_reshape":"zr2y","./sparse/sparse_segment_mean":"CqLM","./sparse/sparse_segment_sum":"bhoc","./string/string_n_grams":"IQZI","./string/string_split":"JNPF","./string/string_to_hash_bucket_fast":"ouv1"}],"zxzS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Optimizer = void 0;

var _globals = require("../globals");

var _gradients = require("../gradients");

var _ops = require("../ops/ops");

var _serialization = require("../serialization");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */
class Optimizer extends _serialization.Serializable {
  /**
   * Executes `f()` and minimizes the scalar output of `f()` by computing
   * gradients of y with respect to the list of trainable variables provided by
   * `varList`. If no list is provided, it defaults to all trainable variables.
   *
   * @param f The function to execute and whose output to minimize.
   * @param returnCost Whether to return the scalar cost value produced by
   * executing `f()`.
   * @param varList An optional list of variables to update. If specified, only
   * the trainable variables in varList will be updated by minimize. Defaults to
   * all trainable variables.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers'}
   */
  minimize(f, returnCost = false, varList) {
    const {
      value,
      grads
    } = this.computeGradients(f, varList);

    if (varList != null) {
      const gradArray = varList.map(v => ({
        name: v.name,
        tensor: grads[v.name]
      }));
      this.applyGradients(gradArray);
    } else {
      this.applyGradients(grads);
    } // Dispose gradients.


    (0, _globals.dispose)(grads);

    if (returnCost) {
      return value;
    } else {
      value.dispose();
      return null;
    }
  }
  /**
   * The number of iterations that this optimizer instance has been invoked for.
   */


  get iterations() {
    if (this.iterations_ == null) {
      this.iterations_ = 0;
    }

    return this.iterations_;
  }

  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  /**
   * Executes f() and computes the gradient of the scalar output of f() with
   * respect to the list of trainable variables provided by `varList`. If no
   * list is provided, it defaults to all trainable variables.
   *
   * @param f The function to execute and whose output to use for computing
   * gradients with respect to variables.
   * @param varList An optional list of variables to compute gradients with
   * respect to. If specified, only the trainable variables in varList will have
   * gradients computed with respect to. Defaults to all trainable variables.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers'}
   */


  computeGradients(f, varList) {
    return (0, _gradients.variableGrads)(f, varList);
  }
  /**
   * Dispose the variables (if any) owned by this optimizer instance.
   */


  dispose() {
    if (this.iterations_ != null) {
      (0, _globals.dispose)(this.iterations_);
    }
  }

  async saveIterations() {
    if (this.iterations_ == null) {
      this.iterations_ = 0;
    }

    return {
      name: 'iter',
      // TODO(cais): Use 'int64' type when available.
      tensor: (0, _ops.scalar)(this.iterations_, 'int32')
    };
  }

  async getWeights() {
    throw new Error('getWeights() is not implemented for this optimizer yet.');
  }

  async setWeights(weightValues) {
    throw new Error(`setWeights() is not implemented for this optimizer class ` + `${this.getClassName()}`);
  }
  /**
   * Extract the first element of the weight values and set it
   * as the iterations counter variable of this instance of optimizer.
   *
   * @param weightValues
   * @returns Weight values with the first element consumed and excluded.
   */


  async extractIterations(weightValues) {
    this.iterations_ = (await weightValues[0].tensor.data())[0];
    return weightValues.slice(1);
  }

}

exports.Optimizer = Optimizer;
Object.defineProperty(Optimizer, Symbol.hasInstance, {
  value: instance => {
    return instance.minimize != null && instance.computeGradients != null && instance.applyGradients != null;
  }
});
},{"../globals":"TsQp","../gradients":"VR5t","../ops/ops":"hfXJ","../serialization":"aVHA"}],"WprY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdadeltaOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _add = require("../ops/add");

var _div = require("../ops/div");

var _mul = require("../ops/mul");

var _ops = require("../ops/ops");

var _square = require("../ops/square");

var _zeros_like = require("../ops/zeros_like");

var _serialization = require("../serialization");

var _optimizer = require("./optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** @doclink Optimizer */
class AdadeltaOptimizer extends _optimizer.Optimizer {
  constructor(learningRate, rho, epsilon = null) {
    super();
    this.learningRate = learningRate;
    this.rho = rho;
    this.epsilon = epsilon;
    this.accumulatedGrads = [];
    this.accumulatedUpdates = [];

    if (epsilon == null) {
      this.epsilon = _engine.ENGINE.backend.epsilon();
    }
  }

  applyGradients(variableGradients) {
    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);
    variableNames.forEach((name, i) => {
      const value = _engine.ENGINE.registeredVariables[name];
      const trainable = false;

      if (this.accumulatedGrads[i] == null) {
        this.accumulatedGrads[i] = {
          originalName: `${name}/accum_grad`,
          variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
        };
      }

      if (this.accumulatedUpdates[i] == null) {
        this.accumulatedUpdates[i] = {
          originalName: `${name}/accum_var`,
          variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
        };
      }

      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

      if (gradient == null) {
        return;
      }

      const accumulatedGrad = this.accumulatedGrads[i].variable;
      const accumulatedUpdate = this.accumulatedUpdates[i].variable;
      (0, _globals.tidy)(() => {
        const newAccumulatedGrad = (0, _add.add)((0, _mul.mul)(accumulatedGrad, this.rho), (0, _mul.mul)((0, _square.square)(gradient), 1 - this.rho));
        const updates = (0, _mul.mul)((0, _div.div)((0, _ops.sqrt)((0, _add.add)(accumulatedUpdate, this.epsilon)), (0, _ops.sqrt)((0, _add.add)(accumulatedGrad, this.epsilon))), gradient);
        const newAccumulatedUpdate = (0, _add.add)((0, _mul.mul)(accumulatedUpdate, this.rho), (0, _mul.mul)((0, _square.square)(updates), 1 - this.rho));
        accumulatedGrad.assign(newAccumulatedGrad);
        accumulatedUpdate.assign(newAccumulatedUpdate);
        const newValue = (0, _add.add)((0, _mul.mul)(updates, -this.learningRate), value);
        value.assign(newValue);
      });
    });
    this.incrementIterations();
  }

  dispose() {
    if (this.accumulatedUpdates != null) {
      (0, _globals.dispose)(this.accumulatedGrads.map(v => v.variable));
      (0, _globals.dispose)(this.accumulatedUpdates.map(v => v.variable));
    }
  }

  async getWeights() {
    // Order matters for Python compatibility.
    const variables = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(variables.map(v => ({
      name: v.originalName,
      tensor: v.variable
    })));
  }

  async setWeights(weightValues) {
    weightValues = await this.extractIterations(weightValues);
    const variableCount = weightValues.length / 2;
    const trainable = false;
    this.accumulatedGrads = weightValues.slice(0, variableCount).map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
    this.accumulatedUpdates = weightValues.slice(variableCount, variableCount * 2).map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
  }

  getConfig() {
    return {
      'learningRate': this.learningRate,
      'rho': this.rho,
      'epsilon': this.epsilon
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate'], config['rho'], config['epsilon']);
  }

}
/** @nocollapse */


exports.AdadeltaOptimizer = AdadeltaOptimizer;
AdadeltaOptimizer.className = 'Adadelta'; // Name matters for Python compatibility.

(0, _serialization.registerClass)(AdadeltaOptimizer);
},{"../engine":"phT7","../globals":"TsQp","../ops/add":"N73o","../ops/div":"S2L5","../ops/mul":"tBJ4","../ops/ops":"hfXJ","../ops/square":"KiGo","../ops/zeros_like":"qY0o","../serialization":"aVHA","./optimizer":"zxzS"}],"zRFy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdagradOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _add = require("../ops/add");

var _div = require("../ops/div");

var _fill = require("../ops/fill");

var _mul = require("../ops/mul");

var _sqrt = require("../ops/sqrt");

var _square = require("../ops/square");

var _serialization = require("../serialization");

var _optimizer = require("./optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** @doclink Optimizer */
class AdagradOptimizer extends _optimizer.Optimizer {
  constructor(learningRate, initialAccumulatorValue = 0.1) {
    super();
    this.learningRate = learningRate;
    this.initialAccumulatorValue = initialAccumulatorValue;
    this.accumulatedGrads = [];
  }

  applyGradients(variableGradients) {
    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);
    variableNames.forEach((name, i) => {
      const value = _engine.ENGINE.registeredVariables[name];

      if (this.accumulatedGrads[i] == null) {
        const trainable = false;
        this.accumulatedGrads[i] = {
          originalName: `${name}/accumulator`,
          variable: (0, _globals.tidy)(() => (0, _fill.fill)(value.shape, this.initialAccumulatorValue).variable(trainable))
        };
      }

      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

      if (gradient == null) {
        return;
      }

      const accumulatedGrad = this.accumulatedGrads[i].variable;
      (0, _globals.tidy)(() => {
        const newAccumulatedGrad = (0, _add.add)(accumulatedGrad, (0, _square.square)(gradient));
        accumulatedGrad.assign(newAccumulatedGrad);
        const newValue = (0, _add.add)((0, _mul.mul)((0, _div.div)(gradient, (0, _sqrt.sqrt)((0, _add.add)(newAccumulatedGrad, _engine.ENGINE.backend.epsilon()))), -this.learningRate), value);
        value.assign(newValue);
      });
    });
    this.incrementIterations();
  }

  dispose() {
    if (this.accumulatedGrads != null) {
      (0, _globals.dispose)(this.accumulatedGrads.map(v => v.variable));
    }
  }

  async getWeights() {
    // Order matters for Python compatibility.
    return [await this.saveIterations()].concat(this.accumulatedGrads.map(v => ({
      name: v.originalName,
      tensor: v.variable
    })));
  }

  async setWeights(weightValues) {
    weightValues = await this.extractIterations(weightValues);
    const trainable = false;
    this.accumulatedGrads = weightValues.map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
  }

  getConfig() {
    return {
      'learningRate': this.learningRate,
      'initialAccumulatorValue': this.initialAccumulatorValue
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate'], config['initialAccumulatorValue']);
  }

}
/** @nocollapse */


exports.AdagradOptimizer = AdagradOptimizer;
AdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.

(0, _serialization.registerClass)(AdagradOptimizer);
},{"../engine":"phT7","../globals":"TsQp","../ops/add":"N73o","../ops/div":"S2L5","../ops/fill":"gaCw","../ops/mul":"tBJ4","../ops/sqrt":"brr7","../ops/square":"KiGo","../serialization":"aVHA","./optimizer":"zxzS"}],"ZLBF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdamOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _add = require("../ops/add");

var _div = require("../ops/div");

var _mul = require("../ops/mul");

var _pow = require("../ops/pow");

var _scalar = require("../ops/scalar");

var _sqrt = require("../ops/sqrt");

var _square = require("../ops/square");

var _sub = require("../ops/sub");

var _zeros_like = require("../ops/zeros_like");

var _serialization = require("../serialization");

var _optimizer = require("./optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AdamOptimizer extends _optimizer.Optimizer {
  constructor(learningRate, beta1, beta2, epsilon = null) {
    super();
    this.learningRate = learningRate;
    this.beta1 = beta1;
    this.beta2 = beta2;
    this.epsilon = epsilon;
    this.accumulatedFirstMoment = [];
    this.accumulatedSecondMoment = [];
    (0, _globals.tidy)(() => {
      // accB* will be updated by batch.
      this.accBeta1 = (0, _scalar.scalar)(beta1).variable();
      this.accBeta2 = (0, _scalar.scalar)(beta2).variable();
    });

    if (epsilon == null) {
      this.epsilon = _engine.ENGINE.backend.epsilon();
    }
  }

  applyGradients(variableGradients) {
    const varNames = Array.isArray(variableGradients) ? variableGradients.map(v => v.name) : Object.keys(variableGradients);
    (0, _globals.tidy)(() => {
      const oneMinusAccBeta1 = (0, _sub.sub)(1, this.accBeta1);
      const oneMinusAccBeta2 = (0, _sub.sub)(1, this.accBeta2);
      varNames.forEach((name, i) => {
        const value = _engine.ENGINE.registeredVariables[name];
        const trainable = false;

        if (this.accumulatedFirstMoment[i] == null) {
          this.accumulatedFirstMoment[i] = {
            originalName: `${name}/m`,
            variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
          };
        }

        if (this.accumulatedSecondMoment[i] == null) {
          this.accumulatedSecondMoment[i] = {
            originalName: `${name}/v`,
            variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
          };
        }

        const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

        if (gradient == null) {
          return;
        }

        const firstMoment = this.accumulatedFirstMoment[i].variable;
        const secondMoment = this.accumulatedSecondMoment[i].variable;
        const newFirstMoment = (0, _add.add)((0, _mul.mul)(firstMoment, this.beta1), (0, _mul.mul)(gradient, 1 - this.beta1));
        const newSecondMoment = (0, _add.add)((0, _mul.mul)(secondMoment, this.beta2), (0, _mul.mul)((0, _square.square)(gradient), 1 - this.beta2));
        const biasCorrectedFirstMoment = (0, _div.div)(newFirstMoment, oneMinusAccBeta1);
        const biasCorrectedSecondMoment = (0, _div.div)(newSecondMoment, oneMinusAccBeta2);
        firstMoment.assign(newFirstMoment);
        secondMoment.assign(newSecondMoment);
        const newValue = (0, _add.add)((0, _mul.mul)((0, _div.div)(biasCorrectedFirstMoment, (0, _add.add)((0, _sqrt.sqrt)(biasCorrectedSecondMoment), this.epsilon)), -this.learningRate), value);
        value.assign(newValue);
      });
      this.accBeta1.assign((0, _mul.mul)(this.accBeta1, this.beta1));
      this.accBeta2.assign((0, _mul.mul)(this.accBeta2, this.beta2));
    });
    this.incrementIterations();
  }

  dispose() {
    this.accBeta1.dispose();
    this.accBeta2.dispose();

    if (this.accumulatedFirstMoment != null) {
      (0, _globals.dispose)(this.accumulatedFirstMoment.map(v => v.variable));
    }

    if (this.accumulatedSecondMoment != null) {
      (0, _globals.dispose)(this.accumulatedSecondMoment.map(v => v.variable));
    }
  }

  async getWeights() {
    // Order matters for Python compatibility.
    const variables = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(variables.map(v => ({
      name: v.originalName,
      tensor: v.variable
    })));
  }

  async setWeights(weightValues) {
    weightValues = await this.extractIterations(weightValues);
    (0, _globals.tidy)(() => {
      this.accBeta1.assign((0, _pow.pow)(this.beta1, this.iterations_ + 1));
      this.accBeta2.assign((0, _pow.pow)(this.beta2, this.iterations_ + 1));
    });
    const variableCount = weightValues.length / 2;
    const trainable = false;
    this.accumulatedFirstMoment = weightValues.slice(0, variableCount).map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
    this.accumulatedSecondMoment = weightValues.slice(variableCount, variableCount * 2).map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
  }

  getConfig() {
    return {
      'learningRate': this.learningRate,
      'beta1': this.beta1,
      'beta2': this.beta2,
      'epsilon': this.epsilon
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);
  }

}
/** @nocollapse */


exports.AdamOptimizer = AdamOptimizer;
AdamOptimizer.className = 'Adam'; // Note: Name matters for Python compatibility.

(0, _serialization.registerClass)(AdamOptimizer);
},{"../engine":"phT7","../globals":"TsQp","../ops/add":"N73o","../ops/div":"S2L5","../ops/mul":"tBJ4","../ops/pow":"o2Kl","../ops/scalar":"TiGU","../ops/sqrt":"brr7","../ops/square":"KiGo","../ops/sub":"SgzI","../ops/zeros_like":"qY0o","../serialization":"aVHA","./optimizer":"zxzS"}],"eIt3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdamaxOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _abs = require("../ops/abs");

var _add = require("../ops/add");

var _div = require("../ops/div");

var _maximum = require("../ops/maximum");

var _mul = require("../ops/mul");

var _scalar = require("../ops/scalar");

var _sub = require("../ops/sub");

var _zeros_like = require("../ops/zeros_like");

var _serialization = require("../serialization");

var _optimizer = require("./optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AdamaxOptimizer extends _optimizer.Optimizer {
  constructor(learningRate, beta1, beta2, epsilon = null, decay = 0.0) {
    super();
    this.learningRate = learningRate;
    this.beta1 = beta1;
    this.beta2 = beta2;
    this.epsilon = epsilon;
    this.decay = decay;
    this.accumulatedFirstMoment = [];
    this.accumulatedWeightedInfNorm = [];
    (0, _globals.tidy)(() => {
      this.iteration = (0, _scalar.scalar)(0).variable();
      this.accBeta1 = (0, _scalar.scalar)(beta1).variable();
    });

    if (epsilon == null) {
      this.epsilon = _engine.ENGINE.backend.epsilon();
    }
  }

  applyGradients(variableGradients) {
    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);
    (0, _globals.tidy)(() => {
      const oneMinusAccBeta1 = (0, _sub.sub)(1, this.accBeta1);
      const lr = (0, _div.div)(-this.learningRate, (0, _add.add)((0, _mul.mul)(this.iteration, this.decay), 1));
      variableNames.forEach((name, i) => {
        const value = _engine.ENGINE.registeredVariables[name];
        const trainable = false;

        if (this.accumulatedFirstMoment[i] == null) {
          this.accumulatedFirstMoment[i] = {
            originalName: `${name}/m`,
            variable: (0, _zeros_like.zerosLike)(value).variable(trainable)
          };
        }

        if (this.accumulatedWeightedInfNorm[i] == null) {
          this.accumulatedWeightedInfNorm[i] = {
            originalName: `${name}/v`,
            variable: (0, _zeros_like.zerosLike)(value).variable(trainable)
          };
        }

        const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

        if (gradient == null) {
          return;
        }

        const firstMoment = this.accumulatedFirstMoment[i].variable;
        const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;
        const newFirstMoment = (0, _add.add)((0, _mul.mul)(firstMoment, this.beta1), (0, _mul.mul)(gradient, 1 - this.beta1));
        const ut0 = (0, _mul.mul)(weightedInfNorm, this.beta2);
        const ut1 = (0, _abs.abs)(gradient);
        const newWeightedInfNorm = (0, _maximum.maximum)(ut0, ut1);
        firstMoment.assign(newFirstMoment);
        weightedInfNorm.assign(newWeightedInfNorm);
        const newValue = (0, _add.add)((0, _mul.mul)((0, _div.div)(lr, oneMinusAccBeta1), (0, _div.div)(newFirstMoment, (0, _add.add)(newWeightedInfNorm, this.epsilon))), value);
        value.assign(newValue);
      });
      this.iteration.assign((0, _add.add)(this.iteration, 1));
      this.accBeta1.assign((0, _mul.mul)(this.accBeta1, this.beta1));
    });
    this.incrementIterations();
  }

  dispose() {
    this.accBeta1.dispose();
    this.iteration.dispose();

    if (this.accumulatedFirstMoment != null) {
      (0, _globals.dispose)(this.accumulatedFirstMoment.map(v => v.variable));
    }

    if (this.accumulatedWeightedInfNorm != null) {
      (0, _globals.dispose)(this.accumulatedWeightedInfNorm.map(v => v.variable));
    }
  }

  async getWeights() {
    throw new Error('getWeights() is not implemented for Adamax yet.');
  }

  async setWeights(weightValues) {
    throw new Error('setWeights() is not implemented for Adamax yet.');
  }

  getConfig() {
    return {
      'learningRate': this.learningRate,
      'beta1': this.beta1,
      'beta2': this.beta2,
      'epsilon': this.epsilon,
      'decay': this.decay
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);
  }

}
/** @nocollapse */


exports.AdamaxOptimizer = AdamaxOptimizer;
AdamaxOptimizer.className = 'Adamax'; // Note: Name matters for Python compatbility.

(0, _serialization.registerClass)(AdamaxOptimizer);
},{"../engine":"phT7","../globals":"TsQp","../ops/abs":"U9d5","../ops/add":"N73o","../ops/div":"S2L5","../ops/maximum":"E33m","../ops/mul":"tBJ4","../ops/scalar":"TiGU","../ops/sub":"SgzI","../ops/zeros_like":"qY0o","../serialization":"aVHA","./optimizer":"zxzS"}],"GrUb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SGDOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _add = require("../ops/add");

var _mul = require("../ops/mul");

var _scalar = require("../ops/scalar");

var _serialization = require("../serialization");

var _optimizer = require("./optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** @doclink Optimizer */
class SGDOptimizer extends _optimizer.Optimizer {
  constructor(learningRate) {
    super();
    this.learningRate = learningRate;
    this.setLearningRate(learningRate);
  }

  applyGradients(variableGradients) {
    const varNames = Array.isArray(variableGradients) ? variableGradients.map(v => v.name) : Object.keys(variableGradients);
    varNames.forEach((name, i) => {
      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

      if (gradient == null) {
        return;
      }

      const value = _engine.ENGINE.registeredVariables[name];
      (0, _globals.tidy)(() => {
        const newValue = (0, _add.add)((0, _mul.mul)(this.c, gradient), value);
        value.assign(newValue);
      });
    });
    this.incrementIterations();
  }
  /**
   * Sets the learning rate of the optimizer.
   */


  setLearningRate(learningRate) {
    this.learningRate = learningRate;

    if (this.c != null) {
      this.c.dispose();
    }

    this.c = (0, _globals.keep)((0, _scalar.scalar)(-learningRate));
  }

  dispose() {
    this.c.dispose();
  }

  async getWeights() {
    return [await this.saveIterations()];
  }

  async setWeights(weightValues) {
    weightValues = await this.extractIterations(weightValues);

    if (weightValues.length !== 0) {
      throw new Error('SGD optimizer does not have settable weights.');
    }
  }

  getConfig() {
    return {
      'learningRate': this.learningRate
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate']);
  }

}
/** @nocollapse */


exports.SGDOptimizer = SGDOptimizer;
SGDOptimizer.className = 'SGD'; // Note: Name matters for Python compatibility.

(0, _serialization.registerClass)(SGDOptimizer);
},{"../engine":"phT7","../globals":"TsQp","../ops/add":"N73o","../ops/mul":"tBJ4","../ops/scalar":"TiGU","../serialization":"aVHA","./optimizer":"zxzS"}],"M8Me":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MomentumOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _add = require("../ops/add");

var _mul = require("../ops/mul");

var _scalar = require("../ops/scalar");

var _zeros_like = require("../ops/zeros_like");

var _serialization = require("../serialization");

var _sgd_optimizer = require("./sgd_optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** @doclink Optimizer */
class MomentumOptimizer extends _sgd_optimizer.SGDOptimizer {
  constructor(learningRate, momentum, useNesterov = false) {
    super(learningRate);
    this.learningRate = learningRate;
    this.momentum = momentum;
    this.useNesterov = useNesterov;
    this.accumulations = [];
    this.m = (0, _scalar.scalar)(this.momentum);
  }

  applyGradients(variableGradients) {
    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);
    variableNames.forEach((name, i) => {
      const value = _engine.ENGINE.registeredVariables[name];

      if (this.accumulations[i] == null) {
        const trainable = false;
        this.accumulations[i] = {
          originalName: `${name}/momentum`,
          variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
        };
      }

      const accumulation = this.accumulations[i].variable;
      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

      if (gradient == null) {
        return;
      }

      (0, _globals.tidy)(() => {
        let newValue;
        const newAccumulation = (0, _add.add)((0, _mul.mul)(this.m, accumulation), gradient);

        if (this.useNesterov) {
          newValue = (0, _add.add)((0, _mul.mul)(this.c, (0, _add.add)(gradient, (0, _mul.mul)(newAccumulation, this.m))), value);
        } else {
          newValue = (0, _add.add)((0, _mul.mul)(this.c, newAccumulation), value);
        }

        accumulation.assign(newAccumulation);
        value.assign(newValue);
      });
    });
    this.incrementIterations();
  }

  dispose() {
    this.m.dispose();

    if (this.accumulations != null) {
      (0, _globals.dispose)(this.accumulations.map(v => v.variable));
    }
  }
  /**
   * Sets the momentum of the optimizer.
   *
   * @param momentum
   */


  setMomentum(momentum) {
    this.momentum = momentum;
  }

  async getWeights() {
    // Order matters for Python compatibility.
    return [await this.saveIterations()].concat(this.accumulations.map(v => ({
      name: v.originalName,
      tensor: v.variable
    })));
  }

  async setWeights(weightValues) {
    weightValues = await this.extractIterations(weightValues);
    const trainable = false;
    this.accumulations = weightValues.map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
  }

  getConfig() {
    return {
      'learningRate': this.learningRate,
      'momentum': this.momentum,
      'useNesterov': this.useNesterov
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate'], config['momentum'], config['useNesterov']);
  }

}
/** @nocollapse */


exports.MomentumOptimizer = MomentumOptimizer;
MomentumOptimizer.className = 'Momentum'; // Name matters for Python compatibility.

(0, _serialization.registerClass)(MomentumOptimizer);
},{"../engine":"phT7","../globals":"TsQp","../ops/add":"N73o","../ops/mul":"tBJ4","../ops/scalar":"TiGU","../ops/zeros_like":"qY0o","../serialization":"aVHA","./sgd_optimizer":"GrUb"}],"dOmP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RMSPropOptimizer = void 0;

var _engine = require("../engine");

var _globals = require("../globals");

var _add = require("../ops/add");

var _div = require("../ops/div");

var _mul = require("../ops/mul");

var _sqrt = require("../ops/sqrt");

var _square = require("../ops/square");

var _sub = require("../ops/sub");

var _zeros_like = require("../ops/zeros_like");

var _serialization = require("../serialization");

var _optimizer = require("./optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** @doclink Optimizer */
class RMSPropOptimizer extends _optimizer.Optimizer {
  constructor(learningRate, decay = 0.9, momentum = 0.0, epsilon = null, centered = false) {
    super();
    this.learningRate = learningRate;
    this.decay = decay;
    this.momentum = momentum;
    this.epsilon = epsilon;
    this.accumulatedMeanSquares = [];
    this.accumulatedMoments = [];
    this.accumulatedMeanGrads = [];
    this.centered = centered;

    if (epsilon == null) {
      this.epsilon = _engine.ENGINE.backend.epsilon();
    }

    if (learningRate == null) {
      throw new Error(`learningRate for RMSPropOptimizer must be defined.`);
    }
  }

  applyGradients(variableGradients) {
    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);
    variableNames.forEach((name, i) => {
      const value = _engine.ENGINE.registeredVariables[name];
      const trainable = false;

      if (this.accumulatedMeanSquares[i] == null) {
        this.accumulatedMeanSquares[i] = {
          originalName: `${name}/rms`,
          variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
        };
      }

      if (this.accumulatedMoments[i] == null) {
        this.accumulatedMoments[i] = {
          originalName: `${name}/momentum`,
          variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
        };
      }

      if (this.accumulatedMeanGrads[i] == null && this.centered) {
        this.accumulatedMeanGrads[i] = {
          originalName: `${name}/mg`,
          variable: (0, _globals.tidy)(() => (0, _zeros_like.zerosLike)(value).variable(trainable))
        };
      }

      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];

      if (gradient == null) {
        return;
      }

      const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;
      const accumulatedMoments = this.accumulatedMoments[i].variable;
      (0, _globals.tidy)(() => {
        const newAccumulatedMeanSquare = (0, _add.add)((0, _mul.mul)(accumulatedMeanSquare, this.decay), (0, _mul.mul)((0, _square.square)(gradient), 1 - this.decay));

        if (this.centered) {
          const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable; // Centered gradient

          const newAccumulatedMeanGrad = (0, _add.add)((0, _mul.mul)(accumulatedMeanGrad, this.decay), (0, _mul.mul)(gradient, 1 - this.decay));
          const gradContribution = (0, _div.div)((0, _mul.mul)(gradient, this.learningRate), (0, _sqrt.sqrt)((0, _sub.sub)(newAccumulatedMeanSquare, (0, _add.add)((0, _square.square)(newAccumulatedMeanGrad), this.epsilon))));
          const newAccumulatedMoments = (0, _add.add)((0, _mul.mul)(accumulatedMoments, this.momentum), gradContribution);
          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);
          accumulatedMeanGrad.assign(newAccumulatedMeanGrad);
          accumulatedMoments.assign(newAccumulatedMoments);
          const newValue = (0, _sub.sub)(value, newAccumulatedMoments);
          value.assign(newValue);
        } else {
          // Plain gradient
          const newAccumulatedMeanSquare = (0, _add.add)((0, _mul.mul)(accumulatedMeanSquare, this.decay), (0, _mul.mul)((0, _square.square)(gradient), 1 - this.decay));
          const newAccumulatedMoments = (0, _add.add)((0, _mul.mul)(accumulatedMoments, this.momentum), (0, _div.div)((0, _mul.mul)(gradient, this.learningRate), (0, _sqrt.sqrt)((0, _add.add)(newAccumulatedMeanSquare, this.epsilon))));
          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);
          accumulatedMoments.assign(newAccumulatedMoments);
          const newValue = (0, _sub.sub)(value, newAccumulatedMoments);
          value.assign(newValue);
        }
      });
    });
    this.incrementIterations();
  }

  dispose() {
    if (this.accumulatedMeanSquares != null) {
      (0, _globals.dispose)(this.accumulatedMeanSquares.map(v => v.variable));
    }

    if (this.accumulatedMeanGrads != null && this.centered) {
      (0, _globals.dispose)(this.accumulatedMeanGrads.map(v => v.variable));
    }

    if (this.accumulatedMoments != null) {
      (0, _globals.dispose)(this.accumulatedMoments.map(v => v.variable));
    }
  }

  async getWeights() {
    // Order matters for Python compatibility.
    const variables = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];

    if (this.centered) {
      variables.push(...this.accumulatedMeanGrads);
    }

    return [await this.saveIterations()].concat(variables.map(v => ({
      name: v.originalName,
      tensor: v.variable
    })));
  }

  async setWeights(weightValues) {
    weightValues = await this.extractIterations(weightValues);
    const variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;
    const trainable = false;
    this.accumulatedMeanSquares = weightValues.slice(0, variableCount).map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));
    this.accumulatedMoments = weightValues.slice(variableCount, variableCount * 2).map(v => ({
      originalName: v.name,
      variable: v.tensor.variable(trainable)
    }));

    if (this.centered) {
      this.accumulatedMeanGrads = weightValues.slice(variableCount * 2, variableCount * 3).map(v => ({
        originalName: v.name,
        variable: v.tensor.variable(trainable)
      }));
    }
  }

  getConfig() {
    return {
      'learningRate': this.learningRate,
      'decay': this.decay,
      'momentum': this.momentum,
      'epsilon': this.epsilon,
      'centered': this.centered
    };
  }
  /** @nocollapse */


  static fromConfig(cls, config) {
    return new cls(config['learningRate'], config['decay'], config['momentum'], config['epsilon'], config['centered']);
  }

}
/** @nocollapse */


exports.RMSPropOptimizer = RMSPropOptimizer;
RMSPropOptimizer.className = 'RMSProp'; // Note: Name matters for Python compatibility.

(0, _serialization.registerClass)(RMSPropOptimizer);
},{"../engine":"phT7","../globals":"TsQp","../ops/add":"N73o","../ops/div":"S2L5","../ops/mul":"tBJ4","../ops/sqrt":"brr7","../ops/square":"KiGo","../ops/sub":"SgzI","../ops/zeros_like":"qY0o","../serialization":"aVHA","./optimizer":"zxzS"}],"efk8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptimizerConstructors = void 0;

var _adadelta_optimizer = require("./adadelta_optimizer");

var _adagrad_optimizer = require("./adagrad_optimizer");

var _adam_optimizer = require("./adam_optimizer");

var _adamax_optimizer = require("./adamax_optimizer");

var _momentum_optimizer = require("./momentum_optimizer");

var _rmsprop_optimizer = require("./rmsprop_optimizer");

var _sgd_optimizer = require("./sgd_optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OptimizerConstructors {
  /**
   * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
   *
   * ```js
   * // Fit a quadratic function by learning the coefficients a, b, c.
   * const xs = tf.tensor1d([0, 1, 2, 3]);
   * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
   *
   * const a = tf.scalar(Math.random()).variable();
   * const b = tf.scalar(Math.random()).variable();
   * const c = tf.scalar(Math.random()).variable();
   *
   * // y = a * x^2 + b * x + c.
   * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
   * const loss = (pred, label) => pred.sub(label).square().mean();
   *
   * const learningRate = 0.01;
   * const optimizer = tf.train.sgd(learningRate);
   *
   * // Train the model.
   * for (let i = 0; i < 10; i++) {
   *   optimizer.minimize(() => loss(f(xs), ys));
   * }
   *
   * // Make predictions.
   * console.log(
   *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
   * const preds = f(xs).dataSync();
   * preds.forEach((pred, i) => {
   *   console.log(`x: ${i}, pred: ${pred}`);
   * });
   * ```
   *
   * @param learningRate The learning rate to use for the SGD algorithm.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static sgd(learningRate) {
    return new _sgd_optimizer.SGDOptimizer(learningRate);
  }
  /**
   * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
   * descent.
   *
   * See
   * [http://proceedings.mlr.press/v28/sutskever13.pdf](
   * http://proceedings.mlr.press/v28/sutskever13.pdf)
   *
   * @param learningRate The learning rate to use for the Momentum gradient
   * descent algorithm.
   * @param momentum The momentum to use for the momentum gradient descent
   * algorithm.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */


  static momentum(learningRate, momentum, useNesterov = false) {
    return new _momentum_optimizer.MomentumOptimizer(learningRate, momentum, useNesterov);
  }
  /**
   * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
   * descent. This implementation uses plain momentum and is not centered
   * version of RMSProp.
   *
   * See
   * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
   * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
   *
   * @param learningRate The learning rate to use for the RMSProp gradient
   * descent algorithm.
   * @param decay The discounting factor for the history/coming gradient.
   * @param momentum The momentum to use for the RMSProp gradient descent
   * algorithm.
   * @param epsilon Small value to avoid zero denominator.
   * @param centered If true, gradients are normalized by the estimated
   * variance of the gradient.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */


  static rmsprop(learningRate, decay = .9, momentum = 0.0, epsilon = null, centered = false) {
    return new _rmsprop_optimizer.RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered);
  }
  /**
   * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
   *
   * @param learningRate The learning rate to use for the Adam gradient
   * descent algorithm.
   * @param beta1 The exponential decay rate for the 1st moment estimates.
   * @param beta2 The exponential decay rate for the 2nd moment estimates.
   * @param epsilon A small constant for numerical stability.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */


  static adam(learningRate = 0.001, beta1 = 0.9, beta2 = 0.999, epsilon = null) {
    return new _adam_optimizer.AdamOptimizer(learningRate, beta1, beta2, epsilon);
  }
  /**
   * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
   * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
   *
   * @param learningRate The learning rate to use for the Adadelta gradient
   * descent algorithm.
   * @param rho The learning rate decay over each update.
   * @param epsilon A constant epsilon used to better condition the grad
   * update.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */


  static adadelta(learningRate = .001, rho = .95, epsilon = null) {
    return new _adadelta_optimizer.AdadeltaOptimizer(learningRate, rho, epsilon);
  }
  /**
   * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
   *
   * @param learningRate The learning rate to use for the Adamax gradient
   * descent algorithm.
   * @param beta1 The exponential decay rate for the 1st moment estimates.
   * @param beta2 The exponential decay rate for the 2nd moment estimates.
   * @param epsilon A small constant for numerical stability.
   * @param decay The learning rate decay over each update.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */


  static adamax(learningRate = 0.002, beta1 = 0.9, beta2 = 0.999, epsilon = null, decay = 0.0) {
    return new _adamax_optimizer.AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay);
  }
  /**
   * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
   * See
   * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
   * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
   * or
   * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
   * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
   *
   * @param learningRate The learning rate to use for the Adagrad gradient
   * descent algorithm.
   * @param initialAccumulatorValue Starting value for the accumulators, must be
   * positive.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */


  static adagrad(learningRate, initialAccumulatorValue = 0.1) {
    return new _adagrad_optimizer.AdagradOptimizer(learningRate, initialAccumulatorValue);
  }

}

exports.OptimizerConstructors = OptimizerConstructors;
},{"./adadelta_optimizer":"WprY","./adagrad_optimizer":"zRFy","./adam_optimizer":"ZLBF","./adamax_optimizer":"eIt3","./momentum_optimizer":"M8Me","./rmsprop_optimizer":"dOmP","./sgd_optimizer":"GrUb"}],"MvXC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.train = void 0;

var _adadelta_optimizer = require("./optimizers/adadelta_optimizer");

var _adagrad_optimizer = require("./optimizers/adagrad_optimizer");

var _adam_optimizer = require("./optimizers/adam_optimizer");

var _adamax_optimizer = require("./optimizers/adamax_optimizer");

var _momentum_optimizer = require("./optimizers/momentum_optimizer");

var _optimizer_constructors = require("./optimizers/optimizer_constructors");

var _rmsprop_optimizer = require("./optimizers/rmsprop_optimizer");

var _sgd_optimizer = require("./optimizers/sgd_optimizer");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// So typings can propagate.
// tslint:disable-next-line:no-unused-expression
[_momentum_optimizer.MomentumOptimizer, _sgd_optimizer.SGDOptimizer, _adadelta_optimizer.AdadeltaOptimizer, _adagrad_optimizer.AdagradOptimizer, _rmsprop_optimizer.RMSPropOptimizer, _adamax_optimizer.AdamaxOptimizer, _adam_optimizer.AdamOptimizer];
const train = {
  sgd: _optimizer_constructors.OptimizerConstructors.sgd,
  momentum: _optimizer_constructors.OptimizerConstructors.momentum,
  adadelta: _optimizer_constructors.OptimizerConstructors.adadelta,
  adagrad: _optimizer_constructors.OptimizerConstructors.adagrad,
  rmsprop: _optimizer_constructors.OptimizerConstructors.rmsprop,
  adamax: _optimizer_constructors.OptimizerConstructors.adamax,
  adam: _optimizer_constructors.OptimizerConstructors.adam
};
exports.train = train;
},{"./optimizers/adadelta_optimizer":"WprY","./optimizers/adagrad_optimizer":"zRFy","./optimizers/adam_optimizer":"ZLBF","./optimizers/adamax_optimizer":"eIt3","./optimizers/momentum_optimizer":"M8Me","./optimizers/optimizer_constructors":"efk8","./optimizers/rmsprop_optimizer":"dOmP","./optimizers/sgd_optimizer":"GrUb"}],"kUit":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nextFrame = nextFrame;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const delayCallback = (() => {
  if (typeof requestAnimationFrame !== 'undefined') {
    return requestAnimationFrame;
  } else if (typeof setImmediate !== 'undefined') {
    return setImmediate;
  }

  return f => f(); // no delays
})();
/**
 * Returns a promise that resolve when a requestAnimationFrame has completed.
 *
 * On Node.js this uses setImmediate instead of requestAnimationFrame.
 *
 * This is simply a sugar method so that users can do the following:
 * `await tf.nextFrame();`
 *
 * @doc {heading: 'Performance', subheading: 'Timing'}
 */


function nextFrame() {
  return new Promise(resolve => delayCallback(() => resolve()));
}
},{}],"tzvg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertParamsConsistent = assertParamsConsistent;
exports.computeOutShape = computeOutShape;

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function assertParamsConsistent(shapes, axis) {
  const rank = shapes[0].length;
  shapes.forEach((shape, i) => {
    util.assert(shape.length === rank, () => `Error in concat${rank}D: rank of tensors[${i}] must be the same ` + `as the rank of the rest (${rank})`);
  });
  util.assert(axis >= 0 && axis < rank, () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);
  const firstShape = shapes[0];
  shapes.forEach((shape, i) => {
    for (let r = 0; r < rank; r++) {
      util.assert(r === axis || shape[r] === firstShape[r], () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` + `does not match the shape of the rest (${firstShape}) ` + `along the non-concatenated axis ${i}.`);
    }
  });
}

function computeOutShape(shapes, axis) {
  const outputShape = shapes[0].slice();

  for (let i = 1; i < shapes.length; i++) {
    outputShape[axis] += shapes[i][axis];
  }

  return outputShape;
}
},{"../util":"XXxQ"}],"HQdi":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeOptimalWindowSize = computeOptimalWindowSize;
exports.PARALLELIZE_THRESHOLD = void 0;

var _util = require("../util");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Inputs of size above this threshold will be parallelized by calling multiple
 * shader programs.
 */
const PARALLELIZE_THRESHOLD = 30;
exports.PARALLELIZE_THRESHOLD = PARALLELIZE_THRESHOLD;

function computeOptimalWindowSize(inSize) {
  if (inSize <= PARALLELIZE_THRESHOLD) {
    return inSize;
  }

  return (0, _util.nearestDivisor)(inSize, Math.floor(Math.sqrt(inSize)));
}
},{"../util":"XXxQ"}],"CFTd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageCenter = getImageCenter;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Returns the image center in pixels.
function getImageCenter(center, imageHeight, imageWidth) {
  const centerX = imageWidth * (typeof center === 'number' ? center : center[0]);
  const centerY = imageHeight * (typeof center === 'number' ? center : center[1]);
  return [centerX, centerY];
}
},{}],"XaxW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getReshaped = getReshaped;
exports.getPermuted = getPermuted;
exports.getReshapedPermuted = getReshapedPermuted;
exports.getSliceBeginCoords = getSliceBeginCoords;
exports.getSliceSize = getSliceSize;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Gets the new shape of the input Tensor after it's been reshaped
 * to:
 * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),
 * inputShape[1], ..., inputShape[N-1]]
 *
 * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */
function getReshaped(inputShape, blockShape, prod, batchToSpace = true) {
  let reshaped = [];

  if (batchToSpace) {
    reshaped = reshaped.concat(blockShape.slice(0));
    reshaped.push(inputShape[0] / prod);
    reshaped = reshaped.concat(inputShape.slice(1));
  } else {
    reshaped = reshaped.concat(inputShape[0]);
    const spatialLength = blockShape.length;

    for (let i = 0; i < spatialLength; ++i) {
      reshaped = reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);
    }

    reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));
  }

  return reshaped;
}
/**
 * Gets the permutation that will transpose the dimensions of the
 * reshaped tensor to shape:
 *
 * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,
 * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */


function getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {
  const permuted = [];

  if (batchToSpace) {
    permuted.push(blockShapeRank);

    for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {
      if (i <= 2 * blockShapeRank) {
        permuted.push(i);
        permuted.push(i - (blockShapeRank + 1));
      } else {
        permuted.push(i);
      }
    }
  } else {
    const permutedBeforeBatch = [];
    const permutedAfterBatch = [];

    for (let i = 1; i < reshapedRank; ++i) {
      if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {
        permutedAfterBatch.push(i);
      } else {
        permutedBeforeBatch.push(i);
      }
    }

    permuted.push(...permutedBeforeBatch);
    permuted.push(0);
    permuted.push(...permutedAfterBatch);
  }

  return permuted;
}
/**
 * Gets the shape of the reshaped and permuted input Tensor before any cropping
 * is applied.  The new shape will be:
 *
 * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,
 * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */


function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace = true) {
  const reshapedPermuted = [];

  if (batchToSpace) {
    reshapedPermuted.push(inputShape[0] / prod);
  } else {
    reshapedPermuted.push(inputShape[0] * prod);
  }

  for (let i = 1; i < inputShape.length; ++i) {
    if (i <= blockShape.length) {
      if (batchToSpace) {
        reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);
      } else {
        reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);
      }
    } else {
      reshapedPermuted.push(inputShape[i]);
    }
  }

  return reshapedPermuted;
}
/**
 * Converts the crops argument into the beginning coordinates of a slice
 * operation.
 */


function getSliceBeginCoords(crops, blockShape) {
  const sliceBeginCoords = [0];

  for (let i = 0; i < blockShape; ++i) {
    sliceBeginCoords.push(crops[i][0]);
  }

  return sliceBeginCoords;
}
/**
 * Converts the crops argument into the size of a slice operation.  When
 * combined with getSliceBeginCoords this function allows the reshaped and
 * permuted Tensor to be cropped to its final output shape of:
 *
 * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,
 * inputShape[M] * blockShape[M-1] -crops[M-1,0] -
 * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */


function getSliceSize(uncroppedShape, crops, blockShape) {
  const sliceSize = uncroppedShape.slice(0, 1);

  for (let i = 0; i < blockShape; ++i) {
    sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);
  }

  return sliceSize;
}
},{}],"mEjB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SELU_SCALE = exports.SELU_SCALEALPHA = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SELU_SCALEALPHA = 1.7580993408473768599402175208123;
exports.SELU_SCALEALPHA = SELU_SCALEALPHA;
const SELU_SCALE = 1.0507009873554804934193349852946;
exports.SELU_SCALE = SELU_SCALE;
},{}],"uHuP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ERF_A5 = exports.ERF_A4 = exports.ERF_A3 = exports.ERF_A2 = exports.ERF_A1 = exports.ERF_P = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ERF_P = 0.3275911;
exports.ERF_P = ERF_P;
const ERF_A1 = 0.254829592;
exports.ERF_A1 = ERF_A1;
const ERF_A2 = -0.284496736;
exports.ERF_A2 = ERF_A2;
const ERF_A3 = 1.421413741;
exports.ERF_A3 = ERF_A3;
const ERF_A4 = -1.453152027;
exports.ERF_A4 = ERF_A4;
const ERF_A5 = 1.061405429;
exports.ERF_A5 = ERF_A5;
},{}],"kMIn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.warn = warn;
exports.log = log;

var _environment = require("./environment");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function warn(...msg) {
  if (!(0, _environment.env)().getBool('IS_TEST')) {
    console.warn(...msg);
  }
}

function log(...msg) {
  if (!(0, _environment.env)().getBool('IS_TEST')) {
    console.log(...msg);
  }
}
},{"./environment":"vpgN"}],"C9bx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeRealAndImagArrays = mergeRealAndImagArrays;
exports.splitRealAndImagArrays = splitRealAndImagArrays;
exports.complexWithEvenIndex = complexWithEvenIndex;
exports.complexWithOddIndex = complexWithOddIndex;
exports.getComplexWithIndex = getComplexWithIndex;
exports.assignToTypedArray = assignToTypedArray;
exports.exponents = exponents;
exports.exponent = exponent;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Merges real and imaginary Float32Arrays into a single complex Float32Array.
 *
 * The memory layout is interleaved as follows:
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 * complex: [r0, i0, r1, i1, r2, i2]
 *
 * This is the inverse of splitRealAndImagArrays.
 *
 * @param real The real values of the complex tensor values.
 * @param imag The imag values of the complex tensor values.
 * @returns A complex tensor as a Float32Array with merged values.
 */
function mergeRealAndImagArrays(real, imag) {
  if (real.length !== imag.length) {
    throw new Error(`Cannot merge real and imag arrays of different lengths. real:` + `${real.length}, imag: ${imag.length}.`);
  }

  const result = new Float32Array(real.length * 2);

  for (let i = 0; i < result.length; i += 2) {
    result[i] = real[i / 2];
    result[i + 1] = imag[i / 2];
  }

  return result;
}
/**
 * Splits a complex Float32Array into real and imag parts.
 *
 * The memory layout is interleaved as follows:
 * complex: [r0, i0, r1, i1, r2, i2]
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 *
 * This is the inverse of mergeRealAndImagArrays.
 *
 * @param complex The complex tensor values.
 * @returns An object with real and imag Float32Array components of the complex
 *     tensor.
 */


function splitRealAndImagArrays(complex) {
  const real = new Float32Array(complex.length / 2);
  const imag = new Float32Array(complex.length / 2);

  for (let i = 0; i < complex.length; i += 2) {
    real[i / 2] = complex[i];
    imag[i / 2] = complex[i + 1];
  }

  return {
    real,
    imag
  };
}
/**
 * Extracts even indexed complex values in the given array.
 * @param complex The complex tensor values
 */


function complexWithEvenIndex(complex) {
  const len = Math.ceil(complex.length / 4);
  const real = new Float32Array(len);
  const imag = new Float32Array(len);

  for (let i = 0; i < complex.length; i += 4) {
    real[Math.floor(i / 4)] = complex[i];
    imag[Math.floor(i / 4)] = complex[i + 1];
  }

  return {
    real,
    imag
  };
}
/**
 * Extracts odd indexed comple values in the given array.
 * @param complex The complex tensor values
 */


function complexWithOddIndex(complex) {
  const len = Math.floor(complex.length / 4);
  const real = new Float32Array(len);
  const imag = new Float32Array(len);

  for (let i = 2; i < complex.length; i += 4) {
    real[Math.floor(i / 4)] = complex[i];
    imag[Math.floor(i / 4)] = complex[i + 1];
  }

  return {
    real,
    imag
  };
}
/**
 * Get the map representing a complex value in the given array.
 * @param complex The complex tensor values.
 * @param index An index of the target complex value.
 */


function getComplexWithIndex(complex, index) {
  const real = complex[index * 2];
  const imag = complex[index * 2 + 1];
  return {
    real,
    imag
  };
}
/**
 * Insert a given complex value into the TypedArray.
 * @param data The array in which the complex value is inserted.
 * @param c The complex value to be inserted.
 * @param index An index of the target complex value.
 */


function assignToTypedArray(data, real, imag, index) {
  data[index * 2] = real;
  data[index * 2 + 1] = imag;
}
/**
 * Make the list of exponent terms used by FFT.
 */


function exponents(n, inverse) {
  const real = new Float32Array(n / 2);
  const imag = new Float32Array(n / 2);

  for (let i = 0; i < Math.ceil(n / 2); i++) {
    const x = (inverse ? 2 : -2) * Math.PI * (i / n);
    real[i] = Math.cos(x);
    imag[i] = Math.sin(x);
  }

  return {
    real,
    imag
  };
}
/**
 * Make the exponent term used by FFT.
 */


function exponent(k, n, inverse) {
  const x = (inverse ? 2 : -2) * Math.PI * (k / n);
  const real = Math.cos(x);
  const imag = Math.sin(x);
  return {
    real,
    imag
  };
}
},{}],"GBT3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeEinsumEquation = decodeEinsumEquation;
exports.getEinsumPermutation = getEinsumPermutation;
exports.checkEinsumDimSizes = checkEinsumDimSizes;
exports.getEinsumComputePath = getEinsumComputePath;
exports.isIdentityPermutation = isIdentityPermutation;

var _util_base = require("../util_base");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ARROW = '->';
const ARROW_REGEX = /->/g;
const COMMA = ',';
const ELLIPSIS = '...';
/**
 * Parse an equation for einsum.
 *
 * @param equation The einsum equation (e.g., "ij,jk->ik").
 * @param numTensors Number of tensors provided along with `equation`. Used to
 *   check matching number of input tensors.
 * @returns An object consisting of the following fields:
 *   - allDims: all dimension names as strings.
 *   - summedDims: a list of all dimensions being summed over, as indices to
 *     the elements of `allDims`.
 *   - idDims: indices of the dimensions in each input tensor, as indices to
 *     the elements of `allDims.
 */

function decodeEinsumEquation(equation, numTensors) {
  equation = equation.replace(/\s/g, ''); // Remove witespace in equation.

  const numArrows = (equation.length - equation.replace(ARROW_REGEX, '').length) / ARROW.length;

  if (numArrows < 1) {
    throw new Error('Equations without an arrow are not supported.');
  } else if (numArrows > 1) {
    throw new Error(`Equation must contain exactly one arrow ("${ARROW}").`);
  }

  const [inputString, outputString] = equation.split(ARROW);
  (0, _util_base.assert)(inputString.indexOf(ELLIPSIS) === -1, () => `The ellipsis notation ("${ELLIPSIS}") is not supported yet.`);
  const inputTerms = inputString.split(COMMA);
  const numInputs = inputTerms.length;

  if (numTensors !== numInputs) {
    throw new Error(`Expected ${numInputs} input tensors, received ${numTensors}`);
  }

  if (numInputs > 2) {
    throw new Error('Support for more than 2 input tensors is not implemented yet.');
  }

  const allDims = [];

  for (let i = 0; i < outputString.length; ++i) {
    const dimName = outputString[i];

    if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {
      throw new Error(`Output subscripts contain the label ${dimName} ` + `not present in the input subscripts.`);
    }

    if (allDims.indexOf(dimName) === -1) {
      allDims.push(dimName);
    }
  }

  for (let i = 0; i < inputString.length; ++i) {
    const dimName = inputString[i];

    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {
      allDims.push(dimName);
    }
  }

  const idDims = new Array(inputTerms.length);

  for (let i = 0; i < numInputs; ++i) {
    if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {
      throw new Error(`Found duplicate axes in input component ${inputTerms[i]}. ` + `Support for duplicate axes in input is not implemented yet.`);
    }

    idDims[i] = [];

    for (let j = 0; j < inputTerms[i].length; ++j) {
      idDims[i].push(allDims.indexOf(inputTerms[i][j]));
    }
  }

  const numDims = allDims.length; // Number of unique dimensions.

  const numOutDims = outputString.length; // Number of output dimensions.

  const summedDims = []; // Dimensions being summed over.

  for (let i = numOutDims; i < numDims; ++i) {
    summedDims.push(i);
  }

  return {
    allDims,
    summedDims,
    idDims
  };
}
/**
 * Get the permutation for a given input tensor.
 *
 * @param nDims Total number of dimension of all tensors involved in the einsum
 *   operation.
 * @param idDims Dimension indices involve in the tensor in question.
 * @returns An object consisting of the following fields:
 *   - permutationIndices: Indices to permute the axes of the tensor with.
 *   - expandDims: Indices to the dimension that need to be expanded from the
 *     tensor after permutation.
 */


function getEinsumPermutation(nDims, idDims) {
  let permutationIndices = new Array(nDims);
  permutationIndices.fill(-1);

  for (let i = 0; i < idDims.length; ++i) {
    permutationIndices[idDims[i]] = i;
  }

  const expandDims = [];

  for (let i = 0; i < nDims; ++i) {
    if (permutationIndices[i] === -1) {
      expandDims.push(i);
    }
  }

  permutationIndices = permutationIndices.filter(d => d !== -1);
  return {
    permutationIndices,
    expandDims
  };
}
/**
 * Checks that the dimension sizes from different input tensors match the
 * equation.
 */


function checkEinsumDimSizes(nDims, idDims, tensors) {
  const dimSizes = new Array(nDims);

  for (let i = 0; i < tensors.length; ++i) {
    const shape = tensors[i].shape;

    for (let j = 0; j < idDims[i].length; ++j) {
      if (dimSizes[idDims[i][j]] === undefined) {
        dimSizes[idDims[i][j]] = shape[j];
      } else {
        (0, _util_base.assert)(dimSizes[idDims[i][j]] === shape[j], () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` + `of input shaped ${JSON.stringify(shape)}, ` + `but got dimension ${shape[j]}`);
      }
    }
  }
}
/**
 * Gets path of computation for einsum.
 *
 * @param summedDims indices to the dimensions being summed over.
 * @param idDims A look up table for the dimensions present in each input
 *     tensor. Each consituent array contains indices for the dimensions in the
 *     corresponding input tensor.
 *
 * @return A map with two fields:
 *   - path: The path of computation, with each element indicating the dimension
 *     being summed over after the element-wise multiplication in that step.
 *   - steps: With the same length as `path`. Each element contains the indices
 *     to the input tensors being used for element-wise multiplication in the
 *     corresponding step.
 */


function getEinsumComputePath(summedDims, idDims) {
  const path = summedDims;
  const steps = [];
  let nSteps = 0;

  if (summedDims.length === 0) {
    // Einsum that involes no summing: e.g., transpose and outer product.
    path.push(-1);
  }

  nSteps = summedDims.length + 1;

  for (let i = 0; i < nSteps; ++i) {
    steps.push([]);
  }

  const computedTermIndices = [];

  for (let i = 0; i < path.length; ++i) {
    const summedDim = path[i];
    const termIndices = findTermsWithDim(idDims, summedDim);

    for (const termIndex of termIndices) {
      if (computedTermIndices.indexOf(termIndex) === -1) {
        steps[i].push(termIndex);
        computedTermIndices.push(termIndex);
      }
    }
  }

  return {
    path,
    steps
  };
}
/** Determines if an axes permutation is the identity permutation. */


function isIdentityPermutation(perm) {
  return perm.every((dim, index) => dim === index);
}

function findTermsWithDim(idDims, dim) {
  const termIndices = [];

  for (let i = 0; i < idDims.length; ++i) {
    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {
      termIndices.push(i);
    }
  }

  return termIndices;
}
},{"../util_base":"uID4"}],"YeLn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prepareSplitSize = prepareSplitSize;

var _util = require("../util");

/**
 * Prepare the split size array. When the input is a number, the axis is evenly
 * divided among the split size. When the input contains the negative value, the
 * rest of the axis is allocated toward that.
 */
function prepareSplitSize(x, numOrSizeSplits, axis = 0) {
  let splitSizes = [];

  if (typeof numOrSizeSplits === 'number') {
    (0, _util.assert)(x.shape[axis] % numOrSizeSplits === 0, () => 'Number of splits must evenly divide the axis.');
    splitSizes = new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);
  } else {
    const numOfNegs = numOrSizeSplits.reduce((count, value) => {
      if (value === -1) {
        count += 1;
      }

      return count;
    }, 0);
    (0, _util.assert)(numOfNegs <= 1, () => 'There should be only one negative value in split array.');
    const negIndex = numOrSizeSplits.indexOf(-1); // Allow the number of split array to be -1, which indicates the rest
    // of dimension is allocated to that split.

    if (negIndex !== -1) {
      const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);
      numOrSizeSplits[negIndex] = x.shape[axis] - total;
    }

    (0, _util.assert)(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => 'The sum of sizes must match the size of the axis dimension.');
    splitSizes = numOrSizeSplits;
  }

  return splitSizes;
}
},{"../util":"XXxQ"}],"MHAK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.segOpComputeOptimalWindowSize = segOpComputeOptimalWindowSize;
exports.computeOutShape = computeOutShape;
exports.collectGatherOpShapeInfo = collectGatherOpShapeInfo;

var _util = require("../util");

var _reduce_util = require("./reduce_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function segOpComputeOptimalWindowSize(inSize, numSegments) {
  let done = false;
  let res;

  if (inSize <= _reduce_util.PARALLELIZE_THRESHOLD) {
    res = inSize;
    done = true;
  } else {
    res = (0, _util.nearestDivisor)(inSize, Math.floor(Math.sqrt(inSize)));
  }

  while (!done) {
    if (res > numSegments || res === inSize) {
      done = true;
    } else {
      res = (0, _util.nearestDivisor)(inSize, res + 1);
    }
  }

  return res;
}

function computeOutShape(aShape, axis, numSegments) {
  const outShape = [];
  const rank = aShape.length;

  for (let dim = 0; dim < rank; dim++) {
    if (dim !== axis) {
      outShape.push(aShape[dim]);
    } else {
      outShape.push(numSegments);
    }
  }

  return outShape;
}

function collectGatherOpShapeInfo(x, indices, axis, batchDims) {
  const indicesRank = indices.shape.length;
  const xRank = x.shape.length;

  if (batchDims !== 0) {
    if (batchDims < -indicesRank || batchDims > indicesRank) {
      throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${indicesRank}], but got ${batchDims}`);
    }
  }

  if (batchDims < 0) {
    batchDims += indicesRank;
  }

  if (batchDims > xRank) {
    throw new Error(`batchDims (${batchDims}) must be less than rank(x) (
    ${xRank}).`);
  }

  if (axis < batchDims) {
    throw new Error(`batchDims (${batchDims}) must be less than or equal to axis (${axis}).`);
  }

  for (let i = 0; i < batchDims; ++i) {
    if (x.shape[i] !== indices.shape[i]) {
      throw new Error(`x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${i}]: ${indices.shape[i]}.`);
    }
  }

  const dimSize = x.shape[axis];
  const outputShape = [];
  let batchSize = 1;
  let outerSize = 1;
  let sliceSize = 1;

  for (let i = 0; i < batchDims; ++i) {
    outputShape.push(x.shape[i]);
    batchSize *= x.shape[i];
  }

  for (let i = batchDims; i < axis; i++) {
    outputShape.push(x.shape[i]);
    outerSize *= x.shape[i];
  }

  for (let i = batchDims; i < indicesRank; i++) {
    outputShape.push(indices.shape[i]);
  }

  for (let i = axis + 1; i < xRank; i++) {
    outputShape.push(x.shape[i]);
    sliceSize *= x.shape[i];
  }

  return {
    batchSize,
    sliceSize,
    outerSize,
    dimSize,
    outputShape
  };
}
},{"../util":"XXxQ","./reduce_util":"HQdi"}],"rkoq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  fromUint8ToStringArray: true,
  fromStringArrayToUint8: true,
  slice_util: true,
  upcastType: true,
  segment_util: true
};
exports.fromUint8ToStringArray = fromUint8ToStringArray;
exports.fromStringArrayToUint8 = fromStringArrayToUint8;
Object.defineProperty(exports, "upcastType", {
  enumerable: true,
  get: function () {
    return _types.upcastType;
  }
});
exports.segment_util = exports.slice_util = void 0;

var _util = require("../util");

var _axis_util = require("../ops/axis_util");

Object.keys(_axis_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _axis_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _axis_util[key];
    }
  });
});

var _broadcast_util = require("../ops/broadcast_util");

Object.keys(_broadcast_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _broadcast_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _broadcast_util[key];
    }
  });
});

var _concat_util = require("../ops/concat_util");

Object.keys(_concat_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _concat_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _concat_util[key];
    }
  });
});

var _conv_util = require("../ops/conv_util");

Object.keys(_conv_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _conv_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _conv_util[key];
    }
  });
});

var _fused_util = require("../ops/fused_util");

Object.keys(_fused_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _fused_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _fused_util[key];
    }
  });
});

var _reduce_util = require("../ops/reduce_util");

Object.keys(_reduce_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _reduce_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _reduce_util[key];
    }
  });
});

var slice_util = _interopRequireWildcard(require("../ops/slice_util"));

exports.slice_util = slice_util;

var _types = require("../types");

var _rotate_util = require("../ops/rotate_util");

Object.keys(_rotate_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _rotate_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _rotate_util[key];
    }
  });
});

var _array_ops_util = require("../ops/array_ops_util");

Object.keys(_array_ops_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _array_ops_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _array_ops_util[key];
    }
  });
});

var _gather_nd_util = require("../ops/gather_nd_util");

Object.keys(_gather_nd_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _gather_nd_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gather_nd_util[key];
    }
  });
});

var _scatter_nd_util = require("../ops/scatter_nd_util");

Object.keys(_scatter_nd_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _scatter_nd_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _scatter_nd_util[key];
    }
  });
});

var _selu_util = require("../ops/selu_util");

Object.keys(_selu_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _selu_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _selu_util[key];
    }
  });
});

var _erf_util = require("../ops/erf_util");

Object.keys(_erf_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _erf_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _erf_util[key];
    }
  });
});

var _log = require("../log");

Object.keys(_log).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _log[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _log[key];
    }
  });
});

var _complex_util = require("../backends/complex_util");

Object.keys(_complex_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _complex_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _complex_util[key];
    }
  });
});

var _einsum_util = require("../backends/einsum_util");

Object.keys(_einsum_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _einsum_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _einsum_util[key];
    }
  });
});

var _split_util = require("../ops/split_util");

Object.keys(_split_util).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _split_util[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _split_util[key];
    }
  });
});

var segment_util = _interopRequireWildcard(require("../ops/segment_util"));

exports.segment_util = segment_util;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Utilities needed by backend consumers of tf-core.
function fromUint8ToStringArray(vals) {
  try {
    // Decode the bytes into string.
    return vals.map(val => (0, _util.decodeString)(val));
  } catch (err) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${err}`);
  }
}

function fromStringArrayToUint8(strings) {
  return strings.map(s => (0, _util.encodeString)(s));
}
},{"../util":"XXxQ","../ops/axis_util":"mPwf","../ops/broadcast_util":"fD2T","../ops/concat_util":"tzvg","../ops/conv_util":"PhWH","../ops/fused_util":"Pva5","../ops/reduce_util":"HQdi","../ops/slice_util":"PuAY","../types":"xhfJ","../ops/rotate_util":"CFTd","../ops/array_ops_util":"XaxW","../ops/gather_nd_util":"JyCd","../ops/scatter_nd_util":"keWG","../ops/selu_util":"mEjB","../ops/erf_util":"uHuP","../log":"kMIn","../backends/complex_util":"C9bx","../backends/einsum_util":"GBT3","../ops/split_util":"YeLn","../ops/segment_util":"MHAK"}],"VTG5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "nonMaxSuppressionV3Impl", {
  enumerable: true,
  get: function () {
    return _non_max_suppression_impl.nonMaxSuppressionV3Impl;
  }
});
Object.defineProperty(exports, "nonMaxSuppressionV4Impl", {
  enumerable: true,
  get: function () {
    return _non_max_suppression_impl.nonMaxSuppressionV4Impl;
  }
});
Object.defineProperty(exports, "nonMaxSuppressionV5Impl", {
  enumerable: true,
  get: function () {
    return _non_max_suppression_impl.nonMaxSuppressionV5Impl;
  }
});
Object.defineProperty(exports, "whereImpl", {
  enumerable: true,
  get: function () {
    return _where_impl.whereImpl;
  }
});

var _non_max_suppression_impl = require("./non_max_suppression_impl");

var _where_impl = require("./where_impl");
},{"./non_max_suppression_impl":"awVp","./where_impl":"ebhY"}],"LYBT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  io: true,
  math: true,
  browser: true,
  gather_util: true,
  scatter_util: true,
  slice_util: true,
  serialization: true,
  tensor_util: true,
  test_util: true,
  util: true,
  version_core: true,
  AdadeltaOptimizer: true,
  AdagradOptimizer: true,
  AdamOptimizer: true,
  AdamaxOptimizer: true,
  MomentumOptimizer: true,
  Optimizer: true,
  RMSPropOptimizer: true,
  SGDOptimizer: true,
  Tensor: true,
  TensorBuffer: true,
  Variable: true,
  Rank: true,
  sumOutType: true,
  upcastType: true,
  Reduction: true,
  customGrad: true,
  grad: true,
  grads: true,
  valueAndGrad: true,
  valueAndGrads: true,
  variableGrads: true,
  Environment: true,
  env: true,
  ENV: true,
  nextFrame: true,
  backend_util: true,
  device_util: true,
  kernel_impls: true,
  KernelBackend: true,
  DataStorage: true
};
Object.defineProperty(exports, "version_core", {
  enumerable: true,
  get: function () {
    return _version.version;
  }
});
Object.defineProperty(exports, "AdadeltaOptimizer", {
  enumerable: true,
  get: function () {
    return _adadelta_optimizer.AdadeltaOptimizer;
  }
});
Object.defineProperty(exports, "AdagradOptimizer", {
  enumerable: true,
  get: function () {
    return _adagrad_optimizer.AdagradOptimizer;
  }
});
Object.defineProperty(exports, "AdamOptimizer", {
  enumerable: true,
  get: function () {
    return _adam_optimizer.AdamOptimizer;
  }
});
Object.defineProperty(exports, "AdamaxOptimizer", {
  enumerable: true,
  get: function () {
    return _adamax_optimizer.AdamaxOptimizer;
  }
});
Object.defineProperty(exports, "MomentumOptimizer", {
  enumerable: true,
  get: function () {
    return _momentum_optimizer.MomentumOptimizer;
  }
});
Object.defineProperty(exports, "Optimizer", {
  enumerable: true,
  get: function () {
    return _optimizer.Optimizer;
  }
});
Object.defineProperty(exports, "RMSPropOptimizer", {
  enumerable: true,
  get: function () {
    return _rmsprop_optimizer.RMSPropOptimizer;
  }
});
Object.defineProperty(exports, "SGDOptimizer", {
  enumerable: true,
  get: function () {
    return _sgd_optimizer.SGDOptimizer;
  }
});
Object.defineProperty(exports, "Tensor", {
  enumerable: true,
  get: function () {
    return _tensor.Tensor;
  }
});
Object.defineProperty(exports, "TensorBuffer", {
  enumerable: true,
  get: function () {
    return _tensor.TensorBuffer;
  }
});
Object.defineProperty(exports, "Variable", {
  enumerable: true,
  get: function () {
    return _tensor.Variable;
  }
});
Object.defineProperty(exports, "Rank", {
  enumerable: true,
  get: function () {
    return _types.Rank;
  }
});
Object.defineProperty(exports, "sumOutType", {
  enumerable: true,
  get: function () {
    return _types.sumOutType;
  }
});
Object.defineProperty(exports, "upcastType", {
  enumerable: true,
  get: function () {
    return _types.upcastType;
  }
});
Object.defineProperty(exports, "Reduction", {
  enumerable: true,
  get: function () {
    return _loss_ops_utils.Reduction;
  }
});
Object.defineProperty(exports, "customGrad", {
  enumerable: true,
  get: function () {
    return _gradients.customGrad;
  }
});
Object.defineProperty(exports, "grad", {
  enumerable: true,
  get: function () {
    return _gradients.grad;
  }
});
Object.defineProperty(exports, "grads", {
  enumerable: true,
  get: function () {
    return _gradients.grads;
  }
});
Object.defineProperty(exports, "valueAndGrad", {
  enumerable: true,
  get: function () {
    return _gradients.valueAndGrad;
  }
});
Object.defineProperty(exports, "valueAndGrads", {
  enumerable: true,
  get: function () {
    return _gradients.valueAndGrads;
  }
});
Object.defineProperty(exports, "variableGrads", {
  enumerable: true,
  get: function () {
    return _gradients.variableGrads;
  }
});
Object.defineProperty(exports, "Environment", {
  enumerable: true,
  get: function () {
    return _environment.Environment;
  }
});
Object.defineProperty(exports, "env", {
  enumerable: true,
  get: function () {
    return _environment.env;
  }
});
Object.defineProperty(exports, "ENV", {
  enumerable: true,
  get: function () {
    return _environment.ENV;
  }
});
Object.defineProperty(exports, "nextFrame", {
  enumerable: true,
  get: function () {
    return _browser_util.nextFrame;
  }
});
Object.defineProperty(exports, "KernelBackend", {
  enumerable: true,
  get: function () {
    return _backend.KernelBackend;
  }
});
Object.defineProperty(exports, "DataStorage", {
  enumerable: true,
  get: function () {
    return _backend.DataStorage;
  }
});
exports.kernel_impls = exports.device_util = exports.backend_util = exports.util = exports.test_util = exports.tensor_util = exports.serialization = exports.slice_util = exports.scatter_util = exports.gather_util = exports.browser = exports.math = exports.io = void 0;

var io = _interopRequireWildcard(require("./io/io"));

exports.io = io;

var math = _interopRequireWildcard(require("./math"));

exports.math = math;

var browser = _interopRequireWildcard(require("./ops/browser"));

exports.browser = browser;

var gather_util = _interopRequireWildcard(require("./ops/gather_nd_util"));

exports.gather_util = gather_util;

var scatter_util = _interopRequireWildcard(require("./ops/scatter_nd_util"));

exports.scatter_util = scatter_util;

var slice_util = _interopRequireWildcard(require("./ops/slice_util"));

exports.slice_util = slice_util;

var serialization = _interopRequireWildcard(require("./serialization"));

exports.serialization = serialization;

var tensor_util = _interopRequireWildcard(require("./tensor_util"));

exports.tensor_util = tensor_util;

var test_util = _interopRequireWildcard(require("./test_util"));

exports.test_util = test_util;

var util = _interopRequireWildcard(require("./util"));

exports.util = util;

var _version = require("./version");

var _adadelta_optimizer = require("./optimizers/adadelta_optimizer");

var _adagrad_optimizer = require("./optimizers/adagrad_optimizer");

var _adam_optimizer = require("./optimizers/adam_optimizer");

var _adamax_optimizer = require("./optimizers/adamax_optimizer");

var _momentum_optimizer = require("./optimizers/momentum_optimizer");

var _optimizer = require("./optimizers/optimizer");

var _rmsprop_optimizer = require("./optimizers/rmsprop_optimizer");

var _sgd_optimizer = require("./optimizers/sgd_optimizer");

var _tensor = require("./tensor");

var _types = require("./types");

var _ops = require("./ops/ops");

Object.keys(_ops).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ops[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ops[key];
    }
  });
});

var _loss_ops_utils = require("./ops/loss_ops_utils");

var _train = require("./train");

Object.keys(_train).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _train[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _train[key];
    }
  });
});

var _globals = require("./globals");

Object.keys(_globals).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _globals[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _globals[key];
    }
  });
});

var _kernel_registry = require("./kernel_registry");

Object.keys(_kernel_registry).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _kernel_registry[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _kernel_registry[key];
    }
  });
});

var _gradients = require("./gradients");

var _environment = require("./environment");

var _browser_util = require("./browser_util");

var backend_util = _interopRequireWildcard(require("./backends/backend_util"));

exports.backend_util = backend_util;

var device_util = _interopRequireWildcard(require("./device_util"));

exports.device_util = device_util;

var kernel_impls = _interopRequireWildcard(require("./backends/kernel_impls"));

exports.kernel_impls = kernel_impls;

var _backend = require("./backends/backend");

var _kernel_names = require("./kernel_names");

Object.keys(_kernel_names).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _kernel_names[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _kernel_names[key];
    }
  });
});

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./io/io":"wh56","./math":"EwBN","./ops/browser":"Wqnn","./ops/gather_nd_util":"JyCd","./ops/scatter_nd_util":"keWG","./ops/slice_util":"PuAY","./serialization":"aVHA","./tensor_util":"wtFc","./test_util":"cFdt","./util":"XXxQ","./version":"KPnh","./optimizers/adadelta_optimizer":"WprY","./optimizers/adagrad_optimizer":"zRFy","./optimizers/adam_optimizer":"ZLBF","./optimizers/adamax_optimizer":"eIt3","./optimizers/momentum_optimizer":"M8Me","./optimizers/optimizer":"zxzS","./optimizers/rmsprop_optimizer":"dOmP","./optimizers/sgd_optimizer":"GrUb","./tensor":"eFW4","./types":"xhfJ","./ops/ops":"hfXJ","./ops/loss_ops_utils":"IQtV","./train":"MvXC","./globals":"TsQp","./kernel_registry":"PlaY","./gradients":"VR5t","./environment":"vpgN","./browser_util":"kUit","./backends/backend_util":"rkoq","./device_util":"g3Z1","./backends/kernel_impls":"VTG5","./backends/backend":"Sk1f","./kernel_names":"rJl6"}],"kSBl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("./base_side_effects");

var _base = require("./base");

Object.keys(_base).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _base[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _base[key];
    }
  });
});
},{"./base_side_effects":"viUI","./base":"LYBT"}],"vYlf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SaverDef = exports.DataType = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */

/** DataType enum. */
var DataType;
exports.DataType = DataType;

(function (DataType) {
  DataType[DataType["DT_INVALID"] = 0] = "DT_INVALID";
  DataType[DataType["DT_FLOAT"] = 1] = "DT_FLOAT";
  DataType[DataType["DT_DOUBLE"] = 2] = "DT_DOUBLE";
  DataType[DataType["DT_INT32"] = 3] = "DT_INT32";
  DataType[DataType["DT_UINT8"] = 4] = "DT_UINT8";
  DataType[DataType["DT_INT16"] = 5] = "DT_INT16";
  DataType[DataType["DT_INT8"] = 6] = "DT_INT8";
  DataType[DataType["DT_STRING"] = 7] = "DT_STRING";
  DataType[DataType["DT_COMPLEX64"] = 8] = "DT_COMPLEX64";
  DataType[DataType["DT_INT64"] = 9] = "DT_INT64";
  DataType[DataType["DT_BOOL"] = 10] = "DT_BOOL";
  DataType[DataType["DT_QINT8"] = 11] = "DT_QINT8";
  DataType[DataType["DT_QUINT8"] = 12] = "DT_QUINT8";
  DataType[DataType["DT_QINT32"] = 13] = "DT_QINT32";
  DataType[DataType["DT_BFLOAT16"] = 14] = "DT_BFLOAT16";
  DataType[DataType["DT_FLOAT_REF"] = 101] = "DT_FLOAT_REF";
  DataType[DataType["DT_DOUBLE_REF"] = 102] = "DT_DOUBLE_REF";
  DataType[DataType["DT_INT32_REF"] = 103] = "DT_INT32_REF";
  DataType[DataType["DT_UINT8_REF"] = 104] = "DT_UINT8_REF";
  DataType[DataType["DT_INT16_REF"] = 105] = "DT_INT16_REF";
  DataType[DataType["DT_INT8_REF"] = 106] = "DT_INT8_REF";
  DataType[DataType["DT_STRING_REF"] = 107] = "DT_STRING_REF";
  DataType[DataType["DT_COMPLEX64_REF"] = 108] = "DT_COMPLEX64_REF";
  DataType[DataType["DT_INT64_REF"] = 109] = "DT_INT64_REF";
  DataType[DataType["DT_BOOL_REF"] = 110] = "DT_BOOL_REF";
  DataType[DataType["DT_QINT8_REF"] = 111] = "DT_QINT8_REF";
  DataType[DataType["DT_QUINT8_REF"] = 112] = "DT_QUINT8_REF";
  DataType[DataType["DT_QINT32_REF"] = 113] = "DT_QINT32_REF";
  DataType[DataType["DT_BFLOAT16_REF"] = 114] = "DT_BFLOAT16_REF";
})(DataType || (exports.DataType = DataType = {}));

var SaverDef;
exports.SaverDef = SaverDef;

(function (SaverDef) {
  /** CheckpointFormatVersion enum. */
  let CheckpointFormatVersion;

  (function (CheckpointFormatVersion) {
    CheckpointFormatVersion[CheckpointFormatVersion["LEGACY"] = 0] = "LEGACY";
    CheckpointFormatVersion[CheckpointFormatVersion["V1"] = 1] = "V1";
    CheckpointFormatVersion[CheckpointFormatVersion["V2"] = 2] = "V2";
  })(CheckpointFormatVersion = SaverDef.CheckpointFormatVersion || (SaverDef.CheckpointFormatVersion = {}));
})(SaverDef || (exports.SaverDef = SaverDef = {}));
},{}],"LNan":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerOp = registerOp;
exports.getRegisteredOp = getRegisteredOp;
exports.deregisterOp = deregisterOp;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CUSTOM_OPS = {};
/**
 * Register an Op for graph model executor. This allow you to register
 * TensorFlow custom op or override existing op.
 *
 * Here is an example of registering a new MatMul Op.
 * ```js
 * const customMatmul = (node) =>
 *    tf.matMul(
 *        node.inputs[0], node.inputs[1],
 *        node.attrs['transpose_a'], node.attrs['transpose_b']);
 *
 * tf.registerOp('MatMul', customMatmul);
 * ```
 * The inputs and attrs of the node object is based on the TensorFlow op
 * registry.
 *
 * @param name The Tensorflow Op name.
 * @param opFunc An op function which is called with the current graph node
 * during execution and needs to return a tensor or a list of tensors. The node
 * has the following attributes:
 *    - attr: A map from attribute name to its value
 *    - inputs: A list of input tensors
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */

function registerOp(name, opFunc) {
  const opMapper = {
    tfOpName: name,
    category: 'custom',
    inputs: [],
    attrs: [],
    customExecutor: opFunc
  };
  CUSTOM_OPS[name] = opMapper;
}
/**
 * Retrieve the OpMapper object for the registered op.
 *
 * @param name The Tensorflow Op name.
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */


function getRegisteredOp(name) {
  return CUSTOM_OPS[name];
}
/**
 * Deregister the Op for graph model executor.
 *
 * @param name The Tensorflow Op name.
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */


function deregisterOp(name) {
  delete CUSTOM_OPS[name];
}
},{}],"eBau":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getParamValue = getParamValue;
exports.getTensor = getTensor;
exports.getTensorsForCurrentContenxt = getTensorsForCurrentContenxt;
exports.getNodeNameAndIndex = getNodeNameAndIndex;
exports.parseNodeName = parseNodeName;
exports.split = split;
exports.getPadding = getPadding;
exports.cloneTensor = cloneTensor;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getParamValue(paramName, node, tensorMap, context, resourceManager) {
  const inputParam = node.inputParams[paramName];

  if (inputParam && inputParam.inputIndexStart !== undefined) {
    const start = inputParam.inputIndexStart;
    const end = inputParam.inputIndexEnd === 0 ? undefined : inputParam.inputIndexEnd === undefined ? start + 1 : inputParam.inputIndexEnd;

    if (inputParam.type === 'tensor') {
      return getTensor(node.inputNames[inputParam.inputIndexStart], tensorMap, context, resourceManager);
    }

    if (inputParam.type === 'tensors') {
      const inputs = node.inputNames.slice(start, end);
      return inputs.map(name => getTensor(name, tensorMap, context, resourceManager));
    }

    const tensor = getTensor(node.inputNames.slice(start)[0], tensorMap, context, resourceManager);
    const data = tensor.dataSync();
    return inputParam.type === 'number' ? data[0] : _tfjsCore.util.toNestedArray(tensor.shape, data);
  }

  const attrParam = node.attrParams[paramName];
  return attrParam && attrParam.value;
}
/**
 * Retrieve the tensor from tensorsMap based on input name.
 * @param name Node input name
 * @param tensorsMap Tensors map keyed by the node
 * @param context contains tensors and information for running the current node.
 * @param resourceManager Optional. Contains global resources of the model.
 */


function getTensor(name, tensorsMap, context, resourceManager) {
  const [nodeName, index] = parseNodeName(name);

  if (resourceManager != null) {
    const tensor = resourceManager.getHashTableHandleByName(nodeName);

    if (tensor != null) {
      return tensor;
    }
  }

  const contextId = context.currentContextIds.find(contextId => {
    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];
  });
  return contextId !== undefined ? tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] : undefined;
}
/**
 * Retrieve the tensors based on input name for current context.
 * @param name Node input name
 * @param tensorsMap Tensors map keyed by the node
 */


function getTensorsForCurrentContenxt(name, tensorsMap, context) {
  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];
}
/**
 * Returns the node name, outputName and index from the Node input name.
 * @param inputName The input name of the node, in format of
 * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is
 * default to 0.
 * If the input name contains output name i.e. StringSplit:indices:0, it will
 * return ['StringSplit', 0, 'indices'].
 */


function getNodeNameAndIndex(inputName, context) {
  const [nodeName, index, outputName] = parseNodeName(inputName);
  return [getNodeNameWithContextId(nodeName, context && context.currentContextId), index, outputName];
}

function getNodeNameWithContextId(name, contextId) {
  return !!contextId ? `${name}-${contextId}` : name;
}

function parseNodeName(name) {
  const parts = name.split(':');

  if (parts.length === 1) {
    return [name, 0, undefined];
  }

  const nodeName = parts[0];
  const outputName = parts.length === 3 ? parts[1] : undefined;
  const index = Number(parts[parts.length - 1]);
  return [nodeName, index, outputName];
}

function split(arr, size) {
  const res = [];

  for (let i = 0; i < arr.length; i += size) {
    res.push(arr.slice(i, i + size));
  }

  return res;
}

function getPadding(node, tensorMap, context) {
  let pad = getParamValue('pad', node, tensorMap, context);

  if (pad === 'explicit') {
    // This is 1d array, we need to convert it to 2d array
    pad = getParamValue('explicitPaddings', node, tensorMap, context);
    const explicitPadding = [[0, 0], [0, 0], [0, 0], [0, 0]];

    for (let i = 0; i < 4; i++) {
      explicitPadding[i][0] = pad[i * 2];
      explicitPadding[i][1] = pad[i * 2 + 1];
    }

    return explicitPadding;
  }

  return pad;
}
/**
 *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to
 *  avoid disposal. This is important for TensorArray and TensorList ops, since
 *  internally they use a tensor as the id for TensorArray and TensorList, and
 * to simplify lookup, they also use Tensor.id as the key to the internal map.
 * These id tensors have been marked as kept in the backend, we need avoid clone
 * them in order to create new Tensor.id.
 * @param tensor
 */


function cloneTensor(tensor) {
  return tensor.kept ? tensor : (0, _tfjsCore.clone)(tensor);
}
},{"@tensorflow/tfjs-core":"kSBl"}],"qkVg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Add',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'AddV2',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'AddN',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }]
}, {
  'tfOpName': 'BiasAdd',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sub',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'RealDiv',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Div',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'DivNoNan',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'FloorDiv',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Mul',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Maximum',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Minimum',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Pow',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'SquaredDifference',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Mod',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'FloorMod',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"gSiX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Abs',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Acos',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Asin',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Atan',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Atan2',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'y',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Ceil',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'ClipByValue',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'clipValueMin',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'clipValueMax',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Complex',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'real',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'imag',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'ComplexAbs',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Cos',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Cosh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Elu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Exp',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Floor',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Log',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Imag',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'outputType',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Neg',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Real',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'outputType',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Prelu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'alpha',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Relu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Relu6',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Selu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sigmoid',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sin',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sinh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sqrt',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Rsqrt',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Square',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Tan',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Tanh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sign',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Round',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Expm1',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Log1p',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Reciprocal',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Softplus',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Asinh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Acosh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Atanh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Erf',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Prod',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axes',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool',
    'notSupported': true
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LeakyRelu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'alpha',
    'name': 'alpha',
    'type': 'number',
    'defaultValue': 0.2
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'IsNan',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"hTO9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;
const json = [{
  'tfOpName': 'EmptyTensorList',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'start': 1,
    'name': 'maxNumElements',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'LoopCond',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'pred',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Switch',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'data',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'pred',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Merge',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }]
}, {
  'tfOpName': 'Enter',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'frame_name',
    'name': 'frameName',
    'type': 'string'
  }, {
    'tfName': 'is_constant',
    'name': 'isConstant',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Exit',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'NextIteration',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'TensorArrayV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'size',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'element_shape',
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'tfName': 'dynamic_size',
    'name': 'dynamicSize',
    'type': 'bool'
  }, {
    'tfName': 'clear_after_read',
    'name': 'clearAfterRead',
    'type': 'bool'
  }, {
    'tfName': 'identical_element_shapes',
    'name': 'identicalElementShapes',
    'type': 'bool'
  }, {
    'tfName': 'tensor_array_name',
    'name': 'name',
    'type': 'string'
  }]
}, {
  'tfOpName': 'TensorArrayWriteV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'index',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'TensorArrayReadV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'index',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'TensorArrayGatherV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'element_shape',
    'name': 'elementShape',
    'type': 'shape'
  }]
}, {
  'tfOpName': 'TensorArrayScatterV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorArrayConcatV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'element_shape_except0',
    'name': 'elementShapeExcept0',
    'type': 'shape',
    'notSupported': true
  }]
}, {
  'tfOpName': 'TensorArraySplitV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'lengths',
    'type': 'number[]'
  }, {
    'start': 3,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorArraySizeV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'flowIn',
    'type': 'number'
  }]
}, {
  'tfOpName': 'TensorArrayCloseV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'StatelessIf',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'cond',
    'type': 'tensor'
  }, {
    'start': 1,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'then_branch',
    'name': 'thenBranch',
    'type': 'func'
  }, {
    'tfName': 'else_branch',
    'name': 'elseBranch',
    'type': 'func'
  }]
}, {
  'tfOpName': 'If',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'cond',
    'type': 'tensor'
  }, {
    'start': 1,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'then_branch',
    'name': 'thenBranch',
    'type': 'func'
  }, {
    'tfName': 'else_branch',
    'name': 'elseBranch',
    'type': 'func'
  }]
}, {
  'tfOpName': 'StatelessWhile',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'cond',
    'name': 'cond',
    'type': 'func'
  }, {
    'tfName': 'body',
    'name': 'body',
    'type': 'func'
  }]
}, {
  'tfOpName': 'While',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'cond',
    'name': 'cond',
    'type': 'func'
  }, {
    'tfName': 'body',
    'name': 'body',
    'type': 'func'
  }]
}, {
  'tfOpName': 'TensorListScatter',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListScatterV2',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'start': 3,
    'name': 'numElements',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListGather',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListGetItem',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'index',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListSetItem',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'index',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListReserve',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'start': 1,
    'name': 'numElements',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListFromTensor',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListStack',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }, {
    'tfName': 'num_elements',
    'name': 'numElements',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListSplit',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'start': 2,
    'name': 'lengths',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListConcat',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'element_shape',
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListPopBack',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListPushBack',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}];
exports.json = json;
},{}],"zEHf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'AvgPool',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'MaxPool',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': [],
    'notSupported': true
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'MaxPoolWithArgmax',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'include_batch_in_index',
    'name': 'includeBatchInIndex',
    'type': 'bool'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'AvgPool3D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'MaxPool3D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Conv1D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'stride',
    'name': 'stride',
    'type': 'number'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NWC'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'dilation',
    'name': 'dilation',
    'type': 'number',
    'defaultValue': 1
  }]
}, {
  'tfOpName': 'Conv2D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'useCudnnOnGpu',
    'name': 'useCudnnOnGpu',
    'type': 'bool'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]'
  }]
}, {
  'tfOpName': '_FusedConv2D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }, {
    'start': 2,
    end: 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'num_args',
    'name': 'numArgs',
    'type': 'number'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'use_cudnn_on_gpu',
    'name': 'useCudnnOnGpu',
    'type': 'bool',
    'defaultValue': true
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]',
    'defaultValue': [1, 1, 1, 1]
  }, {
    'tfName': 'fused_ops',
    'name': 'fusedOps',
    'type': 'string[]',
    'defaultValue': []
  }, {
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.0001
  }, {
    'tfName': 'leakyrelu_alpha',
    'name': 'leakyreluAlpha',
    'type': 'number'
  }]
}, {
  'tfOpName': 'Conv2DBackpropInput',
  'category': 'convolution',
  'inputs': [{
    'start': 2,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }, {
    'start': 0,
    'name': 'outputShape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]',
    'notSupported': true
  }]
}, {
  'tfOpName': 'DepthwiseConv2d',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'input',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'DepthwiseConv2dNative',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'input',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'FusedDepthwiseConv2dNative',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }, {
    'start': 2,
    end: 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'num_args',
    'name': 'numArgs',
    'type': 'number'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]',
    'defaultValue': [1, 1, 1, 1]
  }, {
    'tfName': 'fused_ops',
    'name': 'fusedOps',
    'type': 'string[]',
    'defaultValue': []
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }]
}, {
  'tfOpName': 'Conv3D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'Dilation2D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'rates',
    'name': 'dilations',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }]
}];
exports.json = json;
},{}],"lWlx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Fill',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }, {
    'start': 1,
    'name': 'value',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'LinSpace',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'start',
    'type': 'number'
  }, {
    'start': 1,
    'name': 'stop',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'num',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'OneHot',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'depth',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'onValue',
    'type': 'number',
    'defaultValue': 1
  }, {
    'start': 3,
    'name': 'offValue',
    'type': 'number',
    'defaultValue': 0
  }],
  'attrs': [{
    'tfName': 'axis',
    'name': 'axis',
    'type': 'number',
    'notSupported': true
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Ones',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'OnesLike',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'RandomUniform',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'minval',
    'name': 'minval',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'maxval',
    'name': 'maxval',
    'type': 'number',
    'defaultValue': 1
  }, {
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'seed',
    'name': 'seed',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'seed2',
    'name': 'seed2',
    'type': 'number',
    'defaultValue': 0,
    'notSupported': true
  }, {
    'tfName': 'T',
    'name': 'T',
    'type': 'number',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Range',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'start',
    'type': 'number'
  }, {
    'start': 1,
    'name': 'stop',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'step',
    'type': 'number',
    'defaultValue': 0
  }],
  'attrs': [{
    'tfName': 'Tidx',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TruncatedNormal',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'means',
    'name': 'mean',
    'type': 'number',
    'defaultValue': 0.0
  }, {
    'tfName': 'stddev',
    'name': 'stdDev',
    'type': 'number',
    'defaultValue': 1.0
  }, {
    'tfName': 'seed',
    'name': 'seed',
    'type': 'number'
  }, {
    'tfName': 'seed2',
    'name': 'seed2',
    'type': 'number',
    'defaultValue': 0,
    'notSupported': true
  }, {
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'T',
    'name': 'T',
    'type': 'number',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Zeros',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'ZerosLike',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'Multinomial',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'logits',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'numSamples',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'seed',
    'name': 'seed',
    'type': 'number'
  }, {
    'tfName': 'seed2',
    'name': 'seed2',
    'type': 'number'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'output_dtype',
    'name': 'output_dtype',
    'type': 'dtype'
  }]
}];
exports.json = json;
},{}],"n11C":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'NonMaxSuppressionV2',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scores',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'maxOutputSize',
    'type': 'number'
  }, {
    'start': 3,
    'name': 'iouThreshold',
    'type': 'number'
  }]
}, {
  'tfOpName': 'NonMaxSuppressionV3',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scores',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'maxOutputSize',
    'type': 'number'
  }, {
    'start': 3,
    'name': 'iouThreshold',
    'type': 'number'
  }, {
    'start': 4,
    'name': 'scoreThreshold',
    'type': 'number'
  }]
}, {
  'tfOpName': 'NonMaxSuppressionV4',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scores',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'maxOutputSize',
    'type': 'number'
  }, {
    'start': 3,
    'name': 'iouThreshold',
    'type': 'number'
  }, {
    'start': 4,
    'name': 'scoreThreshold',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'T_threshold',
    'name': 'threshold',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'pad_to_max_output_size',
    'name': 'padToMaxOutputSize',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'NonMaxSuppressionV5',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scores',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'maxOutputSize',
    'type': 'number'
  }, {
    'start': 3,
    'name': 'iouThreshold',
    'type': 'number'
  }, {
    'start': 4,
    'name': 'scoreThreshold',
    'type': 'number'
  }, {
    'start': 5,
    'name': 'softNmsSigma',
    'type': 'number'
  }]
}, {
  'tfOpName': 'Where',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'condition',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'ListDiff',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'y',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"qR2a":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'TopKV2',
  'category': 'evaluation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'k',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'sorted',
    'name': 'sorted',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Unique',
  'category': 'evaluation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'UniqueV2',
  'category': 'evaluation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }]
}];
exports.json = json;
},{}],"ohbw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'PlaceholderWithDefault',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'default',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'shape',
    'name': 'shape',
    'type': 'shape'
  }, {
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'Placeholder',
  'category': 'graph',
  'attrs': [{
    'tfName': 'shape',
    'name': 'shape',
    'type': 'shape'
  }, {
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'Const',
  'category': 'graph'
}, {
  'tfOpName': 'Identity',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'IdentityN',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'x',
    'type': 'tensors'
  }]
}, {
  'tfOpName': 'Snapshot',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Rank',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Size',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Shape',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'ShapeN',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'x',
    'type': 'tensors'
  }]
}, {
  'tfOpName': 'Print',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'data',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'message',
    'name': 'message',
    'type': 'string'
  }, {
    'tfName': 'first_n',
    'name': 'firstN',
    'type': 'number',
    'notSupported': true
  }, {
    'tfName': 'summarize',
    'name': 'summarize',
    'type': 'number',
    'defaultValue': 3
  }]
}, {
  'tfOpName': 'NoOp',
  'category': 'graph',
  'inputs': []
}, {
  'tfOpName': 'StopGradient',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'FakeQuantWithMinMaxVars',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'min',
    'name': 'min',
    'type': 'number'
  }, {
    'tfName': 'max',
    'name': 'max',
    'type': 'number'
  }]
}];
exports.json = json;
},{}],"dtjV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;
const json = [{
  'tfOpName': 'HashTable',
  'category': 'hash_table',
  'inputs': [],
  'attrs': [{
    'tfName': 'shared_name',
    'name': 'sharedName',
    'type': 'string'
  }, {
    'tfName': 'use_node_name_sharing',
    'name': 'useNodeNameSharing',
    'type': 'bool'
  }, {
    'tfName': 'key_dtype',
    'name': 'keyDType',
    'type': 'dtype'
  }, {
    'tfName': 'value_dtype',
    'name': 'valueDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'HashTableV2',
  'category': 'hash_table',
  'inputs': [],
  'attrs': [{
    'tfName': 'shared_name',
    'name': 'sharedName',
    'type': 'string'
  }, {
    'tfName': 'use_node_name_sharing',
    'name': 'useNodeNameSharing',
    'type': 'bool'
  }, {
    'tfName': 'key_dtype',
    'name': 'keyDType',
    'type': 'dtype'
  }, {
    'tfName': 'value_dtype',
    'name': 'valueDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'LookupTableImport',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'keys',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'values',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'Tin',
    'name': 'tIn',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'tOut',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LookupTableImportV2',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'keys',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'values',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'Tin',
    'name': 'tIn',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'tOut',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LookupTableFind',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'keys',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'defaultValue',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'Tin',
    'name': 'tIn',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'tOut',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LookupTableFindV2',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'keys',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'defaultValue',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'Tin',
    'name': 'tIn',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'tOut',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LookupTableSize',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'LookupTableSizeV2',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }]
}];
exports.json = json;
},{}],"DnM7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'ResizeBilinear',
  'category': 'image',
  'inputs': [{
    'start': 0,
    'name': 'images',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'size',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'align_corners',
    'name': 'alignCorners',
    'type': 'bool'
  }, {
    'tfName': 'half_pixel_centers',
    'name': 'halfPixelCenters',
    'type': 'bool'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'ResizeNearestNeighbor',
  'category': 'image',
  'inputs': [{
    'start': 0,
    'name': 'images',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'size',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'align_corners',
    'name': 'alignCorners',
    'type': 'bool'
  }, {
    'tfName': 'half_pixel_centers',
    'name': 'halfPixelCenters',
    'type': 'bool'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'CropAndResize',
  'category': 'image',
  'inputs': [{
    'start': 0,
    'name': 'image',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'boxInd',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'cropSize',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'method',
    'name': 'method',
    'type': 'string'
  }, {
    'tfName': 'extrapolation_value',
    'name': 'extrapolationValue',
    'type': 'number'
  }]
}];
exports.json = json;
},{}],"MpO5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Equal',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'NotEqual',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Greater',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'GreaterEqual',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Less',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LessEqual',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LogicalAnd',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LogicalNot',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LogicalOr',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Select',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'condition',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'SelectV2',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'condition',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"Tnxn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': '_FusedMatMul',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }, {
    'start': 2,
    end: 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'num_args',
    'name': 'numArgs',
    'type': 'number'
  }, {
    'tfName': 'fused_ops',
    'name': 'fusedOps',
    'type': 'string[]',
    'defaultValue': []
  }, {
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.0001
  }, {
    'tfName': 'transpose_a',
    'name': 'transposeA',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'transpose_b',
    'name': 'transposeB',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'MatMul',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'transpose_a',
    'name': 'transposeA',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'transpose_b',
    'name': 'transposeB',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'BatchMatMul',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'adj_x',
    'name': 'transposeA',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'adj_y',
    'name': 'transposeB',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'BatchMatMulV2',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'adj_x',
    'name': 'transposeA',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'adj_y',
    'name': 'transposeB',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Transpose',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'perm',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Einsum',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'equation',
    'name': 'equation',
    'type': 'string'
  }, {
    'tfName': 'N',
    'name': 'n',
    'type': 'number',
    'defaultValue': 2
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}];
exports.json = json;
},{}],"rf0I":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'FusedBatchNorm',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scale',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'offset',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'mean',
    'type': 'tensor'
  }, {
    'start': 4,
    'name': 'variance',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.001
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }]
}, {
  'tfOpName': 'FusedBatchNormV2',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scale',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'offset',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'mean',
    'type': 'tensor'
  }, {
    'start': 4,
    'name': 'variance',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.001
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }]
}, {
  'tfOpName': 'FusedBatchNormV3',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scale',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'offset',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'mean',
    'type': 'tensor'
  }, {
    'start': 4,
    'name': 'variance',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.001
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LRN',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'depth_radius',
    'name': 'radius',
    'type': 'number',
    'defaultValue': 5
  }, {
    'tfName': 'bias',
    'name': 'bias',
    'type': 'number',
    'defaultValue': 1.0
  }, {
    'tfName': 'alpha',
    'name': 'alpha',
    'type': 'number',
    'defaultValue': 1.0
  }, {
    'tfName': 'beta',
    'name': 'beta',
    'type': 'number',
    'defaultValue': 0.5
  }]
}, {
  'tfOpName': 'Softmax',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'LogSoftmax',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'SparseToDense',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'sparseIndices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'outputShape',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'sparseValues',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'defaultValue',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'validate_indices',
    'name': 'validateIndices',
    'type': 'bool',
    'defaultValue': true,
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"lx5W":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Bincount',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'size',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'weights',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'DenseBincount',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'size',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'weights',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'binary_output',
    'name': 'binaryOutput',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Max',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Mean',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Min',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Sum',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'All',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Any',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'ArgMax',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }]
}, {
  'tfOpName': 'ArgMin',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }]
}, {
  'tfOpName': 'Prod',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Cumsum',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'exclusive',
    'name': 'exclusive',
    'type': 'bool'
  }, {
    'tfName': 'reverse',
    'name': 'reverse',
    'type': 'bool'
  }]
}];
exports.json = json;
},{}],"BYbb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'ConcatV2',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'end': -1,
    'name': 'tensors',
    'type': 'tensors'
  }, {
    'start': -1,
    'name': 'axis',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'N',
    'name': 'n',
    'type': 'number',
    'defaultValue': 2
  }]
}, {
  'tfOpName': 'Concat',
  'category': 'slice_join',
  'inputs': [{
    'start': 1,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }, {
    'start': 0,
    'name': 'axis',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'N',
    'name': 'n',
    'type': 'number',
    'defaultValue': 2
  }]
}, {
  'tfOpName': 'GatherV2',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }],
  'attrs': [{
    'tfName': 'batch_dims',
    'name': 'batchDims',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'Gather',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'validate_indices',
    'name': 'validateIndices',
    'type': 'bool',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Reverse',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'dims',
    'type': 'bool[]'
  }]
}, {
  'tfOpName': 'ReverseV2',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'Slice',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'begin',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'size',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'StridedSlice',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'begin',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'end',
    'type': 'number[]'
  }, {
    'start': 3,
    'name': 'strides',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'begin_mask',
    'name': 'beginMask',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'end_mask',
    'name': 'endMask',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'new_axis_mask',
    'name': 'newAxisMask',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'ellipsis_mask',
    'name': 'ellipsisMask',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'shrink_axis_mask',
    'name': 'shrinkAxisMask',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'Pack',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'axis',
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'Unpack',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'axis',
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'num',
    'name': 'num',
    'type': 'number',
    'defaultValue': 0,
    'notSupported': true
  }]
}, {
  'tfOpName': 'Tile',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'reps',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'Split',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }, {
    'start': 1,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'num_split',
    'name': 'numOrSizeSplits',
    'type': 'number',
    'defaultValue': 1
  }]
}, {
  'tfOpName': 'SplitV',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'numOrSizeSplits',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'ScatterNd',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'values',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'shape',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'GatherNd',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'SparseToDense',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'sparseIndices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'outputShape',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'sparseValues',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'defaultValue',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'validate_indices',
    'name': 'validateIndices',
    'type': 'bool',
    'defaultValue': false,
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"mrEg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'SparseFillEmptyRows',
  'category': 'sparse',
  'inputs': [{
    'start': 0,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'values',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'denseShape',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'defaultValue',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'SparseReshape',
  'category': 'sparse',
  'inputs': [{
    'start': 0,
    'name': 'inputIndices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'inputShape',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'newShape',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'SparseSegmentMean',
  'category': 'sparse',
  'inputs': [{
    'start': 0,
    'name': 'data',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'segmentIds',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'SparseSegmentSum',
  'category': 'sparse',
  'inputs': [{
    'start': 0,
    'name': 'data',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'segmentIds',
    'type': 'tensor'
  }]
}];
exports.json = json;
},{}],"ZasE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'FFT',
  'category': 'spectral',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'IFFT',
  'category': 'spectral',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'RFFT',
  'category': 'spectral',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'fft_length',
    'type': 'number',
    'notSupported': true
  }]
}, {
  'tfOpName': 'IRFFT',
  'category': 'spectral',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'fft_length',
    'type': 'number',
    'notSupported': true
  }]
}];
exports.json = json;
},{}],"tCvz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'StringNGrams',
  'category': 'string',
  'inputs': [{
    'start': 0,
    'name': 'data',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'dataSplits',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'separator',
    'name': 'separator',
    'type': 'string'
  }, {
    'tfName': 'ngram_widths',
    'name': 'nGramWidths',
    'type': 'number[]'
  }, {
    'tfName': 'left_pad',
    'name': 'leftPad',
    'type': 'string'
  }, {
    'tfName': 'right_pad',
    'name': 'rightPad',
    'type': 'string'
  }, {
    'tfName': 'pad_width',
    'name': 'padWidth',
    'type': 'number'
  }, {
    'tfName': 'preserve_short_sequences',
    'name': 'preserveShortSequences',
    'type': 'bool'
  }],
  'outputs': ['ngrams', 'ngrams_splits']
}, {
  'tfOpName': 'StringSplit',
  'category': 'string',
  'inputs': [{
    'start': 0,
    'name': 'input',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'delimiter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'skip_empty',
    'name': 'skipEmpty',
    'type': 'bool'
  }],
  'outputs': ['indices', 'values', 'shape']
}, {
  'tfOpName': 'StringToHashBucketFast',
  'category': 'string',
  'inputs': [{
    'start': 0,
    'name': 'input',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'num_buckets',
    'name': 'numBuckets',
    'type': 'number'
  }]
}];
exports.json = json;
},{}],"wJwh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.json = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Cast',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'SrcT',
    'name': 'sdtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'DstT',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'ExpandDims',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }]
}, {
  'tfOpName': 'MirrorPad',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'padding',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'mode',
    'name': 'mode',
    'type': 'string'
  }]
}, {
  'tfOpName': 'Pad',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'padding',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'constant_value',
    'name': 'constantValue',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'PadV2',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'padding',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'constantValue',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'Reshape',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'shape',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'Squeeze',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'axis',
    'tfDeprecatedName': 'squeeze_dims',
    'name': 'axis',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'SpaceToBatchND',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'blockShape',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'paddings',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'BatchToSpaceND',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'blockShape',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'crops',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'DepthToSpace',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'block_size',
    'name': 'blockSize',
    'type': 'number'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string'
  }]
}, {
  'tfOpName': 'BroadcastTo',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': []
}];
exports.json = json;
},{}],"L12J":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("buffer").Buffer;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeBase64 = decodeBase64;
exports.parseStringParam = parseStringParam;
exports.getStringParam = getStringParam;
exports.getBoolParam = getBoolParam;
exports.getNumberParam = getNumberParam;
exports.parseDtypeParam = parseDtypeParam;
exports.getFuncParam = getFuncParam;
exports.getDtypeParam = getDtypeParam;
exports.getDtypeArrayParam = getDtypeArrayParam;
exports.parseTensorShapeParam = parseTensorShapeParam;
exports.getTensorShapeParam = getTensorShapeParam;
exports.getNumericArrayParam = getNumericArrayParam;
exports.getStringArrayParam = getStringArrayParam;
exports.getTensorShapeArrayParam = getTensorShapeArrayParam;
exports.getBoolArrayParam = getBoolArrayParam;
exports.OperationMapper = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var tensorflow = _interopRequireWildcard(require("../data/compiled_api"));

var _register = require("./custom_op/register");

var _utils = require("./executors/utils");

var arithmetic = _interopRequireWildcard(require("./op_list/arithmetic"));

var basicMath = _interopRequireWildcard(require("./op_list/basic_math"));

var control = _interopRequireWildcard(require("./op_list/control"));

var convolution = _interopRequireWildcard(require("./op_list/convolution"));

var creation = _interopRequireWildcard(require("./op_list/creation"));

var dynamic = _interopRequireWildcard(require("./op_list/dynamic"));

var evaluation = _interopRequireWildcard(require("./op_list/evaluation"));

var graph = _interopRequireWildcard(require("./op_list/graph"));

var hashTable = _interopRequireWildcard(require("./op_list/hash_table"));

var image = _interopRequireWildcard(require("./op_list/image"));

var logical = _interopRequireWildcard(require("./op_list/logical"));

var matrices = _interopRequireWildcard(require("./op_list/matrices"));

var normalization = _interopRequireWildcard(require("./op_list/normalization"));

var reduction = _interopRequireWildcard(require("./op_list/reduction"));

var sliceJoin = _interopRequireWildcard(require("./op_list/slice_join"));

var sparse = _interopRequireWildcard(require("./op_list/sparse"));

var spectral = _interopRequireWildcard(require("./op_list/spectral"));

var string = _interopRequireWildcard(require("./op_list/string"));

var transformation = _interopRequireWildcard(require("./op_list/transformation"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OperationMapper {
  // Singleton instance for the mapper
  static get Instance() {
    return this._instance || (this._instance = new this());
  } // Loads the op mapping from the JSON file.


  constructor() {
    const ops = [arithmetic, basicMath, control, convolution, creation, dynamic, evaluation, graph, hashTable, image, logical, matrices, normalization, reduction, sliceJoin, sparse, spectral, string, transformation];
    const mappersJson = [].concat(...ops.map(op => op.json));
    this.opMappers = mappersJson.reduce((map, mapper) => {
      map[mapper.tfOpName] = mapper;
      return map;
    }, {});
  } // Converts the model inference graph from Tensorflow GraphDef to local
  // representation for TensorFlow.js API


  transformGraph(graph, signature = {}) {
    const tfNodes = graph.node;
    const placeholders = [];
    const weights = [];
    const initNodes = [];
    const nodes = tfNodes.reduce((map, node) => {
      map[node.name] = this.mapNode(node);

      if (node.op.startsWith('Placeholder')) {
        placeholders.push(map[node.name]);
      } else if (node.op === 'Const') {
        weights.push(map[node.name]);
      } else if (node.input == null || node.input.length === 0) {
        initNodes.push(map[node.name]);
      }

      return map;
    }, {});
    let inputs = [];
    const outputs = [];
    let inputNodeNameToKey = {};
    let outputNodeNameToKey = {};

    if (signature != null) {
      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);
      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);
    }

    const allNodes = Object.keys(nodes);
    allNodes.forEach(key => {
      const node = nodes[key];
      node.inputNames.forEach((name, index) => {
        const [nodeName,, outputName] = (0, _utils.getNodeNameAndIndex)(name);
        const inputNode = nodes[nodeName];

        if (inputNode.outputs != null) {
          const outputIndex = inputNode.outputs.indexOf(outputName);

          if (outputIndex !== -1) {
            const inputName = `${nodeName}:${outputIndex}`; // update the input name to use the mapped output index directly.

            node.inputNames[index] = inputName;
          }
        }

        node.inputs.push(inputNode);
        inputNode.children.push(node);
      });
    }); // if signature has not outputs set, add any node that does not have
    // outputs.

    if (Object.keys(outputNodeNameToKey).length === 0) {
      allNodes.forEach(key => {
        const node = nodes[key];

        if (node.children.length === 0) {
          outputs.push(node);
        }
      });
    } else {
      Object.keys(outputNodeNameToKey).forEach(name => {
        const [nodeName] = (0, _utils.getNodeNameAndIndex)(name);
        const node = nodes[nodeName];

        if (node != null) {
          node.signatureKey = outputNodeNameToKey[name];
          outputs.push(node);
        }
      });
    }

    if (Object.keys(inputNodeNameToKey).length > 0) {
      Object.keys(inputNodeNameToKey).forEach(name => {
        const [nodeName] = (0, _utils.getNodeNameAndIndex)(name);
        const node = nodes[nodeName];

        if (node) {
          node.signatureKey = inputNodeNameToKey[name];
          inputs.push(node);
        }
      });
    } else {
      inputs = placeholders;
    }

    let functions = {};

    if (graph.library != null && graph.library.function != null) {
      functions = graph.library.function.reduce((functions, func) => {
        functions[func.signature.name] = this.mapFunction(func);
        return functions;
      }, {});
    }

    const result = {
      nodes,
      inputs,
      outputs,
      weights,
      placeholders,
      signature,
      functions
    };

    if (initNodes.length > 0) {
      result.initNodes = initNodes;
    }

    return result;
  }

  mapSignatureEntries(entries) {
    return Object.keys(entries || {}).reduce((prev, curr) => {
      prev[entries[curr].name] = curr;
      return prev;
    }, {});
  }

  mapNode(node) {
    // Unsupported ops will cause an error at run-time (not parse time), since
    // they may not be used by the actual execution subgraph.
    const mapper = (0, _register.getRegisteredOp)(node.op) || this.opMappers[node.op] || {};

    if (node.attr == null) {
      node.attr = {};
    }

    const newNode = {
      name: node.name,
      op: node.op,
      category: mapper.category,
      inputNames: (node.input || []).map(input => input.startsWith('^') ? input.substr(1) : input),
      inputs: [],
      children: [],
      inputParams: {},
      attrParams: {},
      rawAttrs: node.attr,
      outputs: mapper.outputs
    };

    if (mapper.inputs != null) {
      newNode.inputParams = mapper.inputs.reduce((map, param) => {
        map[param.name] = {
          type: param.type,
          inputIndexStart: param.start,
          inputIndexEnd: param.end
        };
        return map;
      }, {});
    }

    if (mapper.attrs != null) {
      newNode.attrParams = mapper.attrs.reduce((map, param) => {
        const type = param.type;
        let value = undefined;

        switch (param.type) {
          case 'string':
            value = getStringParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'string[]':
            value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'number':
            value = getNumberParam(node.attr, param.tfName, param.defaultValue || 0);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'number[]':
            value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'bool':
            value = getBoolParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'bool[]':
            value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'shape':
            value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'shape[]':
            value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'dtype':
            value = getDtypeParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'dtype[]':
            value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'func':
            value = getFuncParam(node.attr, param.tfName, param.defaultValue);

            if (value === undefined && !!param.tfDeprecatedName) {
              value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }

            break;

          case 'tensor':
          case 'tensors':
            break;

          default:
            throw new Error(`Unsupported param type: ${param.type} for op: ${node.op}`);
        }

        map[param.name] = {
          value,
          type
        };
        return map;
      }, {});
    }

    return newNode;
  } // map the TFunctionDef to TFJS graph object


  mapFunction(functionDef) {
    const tfNodes = functionDef.nodeDef;
    const placeholders = [];
    const weights = [];
    let nodes = {};

    if (tfNodes != null) {
      nodes = tfNodes.reduce((map, node) => {
        map[node.name] = this.mapNode(node);

        if (node.op === 'Const') {
          weights.push(map[node.name]);
        }

        return map;
      }, {});
    }

    const inputs = [];
    const outputs = [];
    functionDef.signature.inputArg.forEach(arg => {
      const [nodeName] = (0, _utils.getNodeNameAndIndex)(arg.name);
      const node = {
        name: nodeName,
        op: 'Placeholder',
        inputs: [],
        inputNames: [],
        category: 'graph',
        inputParams: {},
        attrParams: {
          dtype: {
            value: parseDtypeParam(arg.type),
            type: 'dtype'
          }
        },
        children: []
      };
      node.signatureKey = arg.name;
      inputs.push(node);
      nodes[nodeName] = node;
    });
    const allNodes = Object.keys(nodes);
    allNodes.forEach(key => {
      const node = nodes[key];
      node.inputNames.forEach((name, index) => {
        const [nodeName,, outputName] = (0, _utils.getNodeNameAndIndex)(name);
        const inputNode = nodes[nodeName];

        if (inputNode.outputs != null) {
          const outputIndex = inputNode.outputs.indexOf(outputName);

          if (outputIndex !== -1) {
            const inputName = `${nodeName}:${outputIndex}`; // update the input name to use the mapped output index directly.

            node.inputNames[index] = inputName;
          }
        }

        node.inputs.push(inputNode);
        inputNode.children.push(node);
      });
    });
    const returnNodeMap = functionDef.ret;
    functionDef.signature.outputArg.forEach(output => {
      const [nodeName, index] = (0, _utils.getNodeNameAndIndex)(returnNodeMap[output.name]);
      const node = nodes[nodeName];

      if (node != null) {
        node.defaultOutput = index;
        outputs.push(node);
      }
    });
    const signature = this.mapArgsToSignature(functionDef);
    return {
      nodes,
      inputs,
      outputs,
      weights,
      placeholders,
      signature
    };
  }

  mapArgsToSignature(functionDef) {
    return {
      methodName: functionDef.signature.name,
      inputs: functionDef.signature.inputArg.reduce((map, arg) => {
        map[arg.name] = this.mapArgToTensorInfo(arg);
        return map;
      }, {}),
      outputs: functionDef.signature.outputArg.reduce((map, arg) => {
        map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);
        return map;
      }, {})
    };
  }

  mapArgToTensorInfo(arg, nameMap) {
    let name = arg.name;

    if (nameMap != null) {
      name = nameMap[name];
    }

    return {
      name,
      dtype: arg.type
    };
  }

}

exports.OperationMapper = OperationMapper;

function decodeBase64(text) {
  const global = (0, _tfjsCore.env)().global;

  if (typeof global.atob !== 'undefined') {
    return global.atob(text);
  } else if (typeof Buffer !== 'undefined') {
    return new Buffer(text, 'base64').toString();
  } else {
    throw new Error('Unable to decode base64 in this environment. ' + 'Missing built-in atob() or Buffer()');
  }
}

function parseStringParam(s, keepCase) {
  const value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);
  return keepCase ? value : value.toLowerCase();
}

function getStringParam(attrs, name, def, keepCase = false) {
  const param = attrs[name];

  if (param != null) {
    return parseStringParam(param.s, keepCase);
  }

  return def;
}

function getBoolParam(attrs, name, def) {
  const param = attrs[name];
  return param ? param.b : def;
}

function getNumberParam(attrs, name, def) {
  const param = attrs[name] || {};
  const value = param['i'] != null ? param['i'] : param['f'] != null ? param['f'] : def;
  return typeof value === 'number' ? value : parseInt(value, 10);
}

function parseDtypeParam(value) {
  if (typeof value === 'string') {
    // tslint:disable-next-line:no-any
    value = tensorflow.DataType[value];
  }

  switch (value) {
    case tensorflow.DataType.DT_FLOAT:
      return 'float32';

    case tensorflow.DataType.DT_INT32:
    case tensorflow.DataType.DT_INT64:
    case tensorflow.DataType.DT_INT8:
    case tensorflow.DataType.DT_UINT8:
      return 'int32';

    case tensorflow.DataType.DT_BOOL:
      return 'bool';

    case tensorflow.DataType.DT_DOUBLE:
      return 'float32';

    case tensorflow.DataType.DT_STRING:
      return 'string';

    default:
      // Unknown dtype error will happen at runtime (instead of parse time),
      // since these nodes might not be used by the actual subgraph execution.
      return null;
  }
}

function getFuncParam(attrs, name, def) {
  const param = attrs[name];

  if (param && param.func) {
    return param.func.name;
  }

  return def;
}

function getDtypeParam(attrs, name, def) {
  const param = attrs[name];

  if (param && param.type) {
    return parseDtypeParam(param.type);
  }

  return def;
}

function getDtypeArrayParam(attrs, name, def) {
  const param = attrs[name];

  if (param && param.list && param.list.type) {
    return param.list.type.map(v => parseDtypeParam(v));
  }

  return def;
}

function parseTensorShapeParam(shape) {
  if (shape.unknownRank) {
    return undefined;
  }

  if (shape.dim != null) {
    return shape.dim.map(dim => typeof dim.size === 'number' ? dim.size : parseInt(dim.size, 10));
  }

  return [];
}

function getTensorShapeParam(attrs, name, def) {
  const param = attrs[name];

  if (param && param.shape) {
    return parseTensorShapeParam(param.shape);
  }

  return def;
}

function getNumericArrayParam(attrs, name, def) {
  const param = attrs[name];

  if (param) {
    return ((param.list.f && param.list.f.length ? param.list.f : param.list.i) || []).map(v => typeof v === 'number' ? v : parseInt(v, 10));
  }

  return def;
}

function getStringArrayParam(attrs, name, def, keepCase = false) {
  const param = attrs[name];

  if (param && param.list && param.list.s) {
    return param.list.s.map(v => {
      return parseStringParam(v, keepCase);
    });
  }

  return def;
}

function getTensorShapeArrayParam(attrs, name, def) {
  const param = attrs[name];

  if (param && param.list && param.list.shape) {
    return param.list.shape.map(v => {
      return parseTensorShapeParam(v);
    });
  }

  return def;
}

function getBoolArrayParam(attrs, name, def) {
  const param = attrs[name];

  if (param && param.list && param.list.b) {
    return param.list.b;
  }

  return def;
}
},{"@tensorflow/tfjs-core":"kSBl","../data/compiled_api":"vYlf","./custom_op/register":"LNan","./executors/utils":"eBau","./op_list/arithmetic":"qkVg","./op_list/basic_math":"gSiX","./op_list/control":"hTO9","./op_list/convolution":"zEHf","./op_list/creation":"lWlx","./op_list/dynamic":"n11C","./op_list/evaluation":"qR2a","./op_list/graph":"ohbw","./op_list/hash_table":"dtjV","./op_list/image":"DnM7","./op_list/logical":"MpO5","./op_list/matrices":"Tnxn","./op_list/normalization":"rf0I","./op_list/reduction":"lx5W","./op_list/slice_join":"BYbb","./op_list/sparse":"mrEg","./op_list/spectral":"ZasE","./op_list/string":"tCvz","./op_list/transformation":"wJwh","buffer":"PlI0"}],"N9rI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodeValueImpl = void 0;

var _utils = require("../executors/utils");

var _operation_mapper = require("../operation_mapper");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Helper class for lookup inputs and params for nodes in the model graph.
 */
class NodeValueImpl {
  constructor(node, tensorMap, context) {
    this.node = node;
    this.tensorMap = tensorMap;
    this.context = context;
    this.inputs = [];
    this.attrs = {};
    this.inputs = node.inputNames.map(name => this.getInput(name));

    if (node.rawAttrs != null) {
      this.attrs = Object.keys(node.rawAttrs).reduce((attrs, key) => {
        attrs[key] = this.getAttr(key);
        return attrs;
      }, {});
    }
  }
  /**
   * Return the value of the attribute or input param.
   * @param name String: name of attribute or input param.
   */


  getInput(name) {
    return (0, _utils.getTensor)(name, this.tensorMap, this.context);
  }
  /**
   * Return the value of the attribute or input param.
   * @param name String: name of attribute or input param.
   */


  getAttr(name, defaultValue) {
    const value = this.node.rawAttrs[name];

    if (value.tensor != null) {
      return (0, _utils.getTensor)(name, this.tensorMap, this.context);
    }

    if (value.i != null || value.f != null) {
      return (0, _operation_mapper.getNumberParam)(this.node.rawAttrs, name, defaultValue);
    }

    if (value.s != null) {
      return (0, _operation_mapper.getStringParam)(this.node.rawAttrs, name, defaultValue);
    }

    if (value.b != null) {
      return (0, _operation_mapper.getBoolParam)(this.node.rawAttrs, name, defaultValue);
    }

    if (value.shape != null) {
      return (0, _operation_mapper.getTensorShapeParam)(this.node.rawAttrs, name, defaultValue);
    }

    if (value.type != null) {
      return (0, _operation_mapper.getDtypeParam)(this.node.rawAttrs, name, defaultValue);
    }

    if (value.list != null) {
      if (value.list.i != null || value.list.f != null) {
        return (0, _operation_mapper.getNumericArrayParam)(this.node.rawAttrs, name, defaultValue);
      }

      if (value.list.s != null) {
        return (0, _operation_mapper.getStringArrayParam)(this.node.rawAttrs, name, defaultValue);
      }

      if (value.list.shape != null) {
        return (0, _operation_mapper.getTensorShapeArrayParam)(this.node.rawAttrs, name, defaultValue);
      }

      if (value.list.b != null) {
        return (0, _operation_mapper.getBoolArrayParam)(this.node.rawAttrs, name, defaultValue);
      }

      if (value.list.type != null) {
        return (0, _operation_mapper.getDtypeArrayParam)(this.node.rawAttrs, name, defaultValue);
      }
    }

    return defaultValue;
  }

}

exports.NodeValueImpl = NodeValueImpl;
},{"../executors/utils":"eBau","../operation_mapper":"L12J"}],"bcFm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ops = require("./ops");

Object.keys(_ops).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _ops[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ops[key];
    }
  });
});
},{"./ops":"hfXJ"}],"WLe9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'BiasAdd':
    case 'AddV2':
    case 'Add':
      {
        return [tfOps.add((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'AddN':
      {
        return [tfOps.addN((0, _utils.getParamValue)('tensors', node, tensorMap, context))];
      }

    case 'FloorMod':
    case 'Mod':
      return [tfOps.mod((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];

    case 'Mul':
      return [tfOps.mul((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];

    case 'RealDiv':
    case 'Div':
      {
        return [tfOps.div((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'DivNoNan':
      {
        return [tfOps.divNoNan((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'FloorDiv':
      {
        return [tfOps.floorDiv((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Sub':
      {
        return [tfOps.sub((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Minimum':
      {
        return [tfOps.minimum((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Maximum':
      {
        return [tfOps.maximum((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Pow':
      {
        return [tfOps.pow((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'SquaredDifference':
      {
        return [tfOps.squaredDifference((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'arithmetic';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"RUi0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Abs':
    case 'ComplexAbs':
      return [tfOps.abs((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Acos':
      return [tfOps.acos((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Acosh':
      return [tfOps.acosh((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Asin':
      return [tfOps.asin((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Asinh':
      return [tfOps.asinh((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Atan':
      return [tfOps.atan((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Atan2':
      return [tfOps.atan2((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('y', node, tensorMap, context))];

    case 'Atanh':
      return [tfOps.atanh((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Ceil':
      return [tfOps.ceil((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Complex':
      return [tfOps.complex((0, _utils.getParamValue)('real', node, tensorMap, context), (0, _utils.getParamValue)('imag', node, tensorMap, context))];

    case 'Cos':
      return [tfOps.cos((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Cosh':
      return [tfOps.cosh((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Elu':
      return [tfOps.elu((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Erf':
      return [tfOps.erf((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Exp':
      return [tfOps.exp((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Expm1':
      {
        return [tfOps.expm1((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Floor':
      return [tfOps.floor((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Log':
      return [tfOps.log((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Log1p':
      {
        return [tfOps.log1p((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Imag':
      return [tfOps.imag((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Neg':
      return [tfOps.neg((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Reciprocal':
      {
        return [tfOps.reciprocal((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Real':
      return [tfOps.real((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Relu':
      return [tfOps.relu((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Round':
      {
        return [tfOps.round((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Selu':
      return [tfOps.selu((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Sigmoid':
      return [tfOps.sigmoid((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Sin':
      return [tfOps.sin((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Sign':
      {
        return [tfOps.sign((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Sinh':
      {
        return [tfOps.sinh((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Softplus':
      {
        return [tfOps.softplus((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Sqrt':
      {
        return [tfOps.sqrt((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Square':
      {
        return [tfOps.square((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Tanh':
      {
        return [tfOps.tanh((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'Tan':
      return [tfOps.tan((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'ClipByValue':
      return [tfOps.clipByValue((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('clipValueMin', node, tensorMap, context), (0, _utils.getParamValue)('clipValueMax', node, tensorMap, context))];

    case 'Relu6':
      return [tfOps.relu6((0, _utils.getParamValue)('x', node, tensorMap, context))];

    case 'Rsqrt':
      return [tfOps.rsqrt((0, _utils.getTensor)(node.inputNames[0], tensorMap, context))];

    case 'Prod':
      return [tfOps.prod((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('axes', node, tensorMap, context))];

    case 'LeakyRelu':
      return [tfOps.leakyRelu((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('alpha', node, tensorMap, context))];

    case 'Prelu':
      return [tfOps.prelu((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('alpha', node, tensorMap, context))];

    case 'IsNan':
      return [tfOps.isNaN((0, _utils.getTensor)(node.inputNames[0], tensorMap, context))];

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'basic_math';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"RRxz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertShapesMatchAllowUndefinedSize = assertShapesMatchAllowUndefinedSize;
exports.fullDefinedShape = fullDefinedShape;
exports.inferElementShape = inferElementShape;
exports.mergeElementShape = mergeElementShape;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * This differs from util.assertShapesMatch in that it allows values of
 * negative one, an undefined size of a dimensinon, in a shape to match
 * anything.
 */

/**
 * Used by TensorList and TensorArray to verify if elementShape matches, support
 * negative value as the dim shape.
 * @param shapeA
 * @param shapeB
 * @param errorMessagePrefix
 */
function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {
  // constant shape means unknown rank
  if (typeof shapeA === 'number' || typeof shapeB === 'number') {
    return;
  }

  _tfjsCore.util.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);

  for (let i = 0; i < shapeA.length; i++) {
    const dim0 = shapeA[i];
    const dim1 = shapeB[i];

    _tfjsCore.util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
  }
}

function fullDefinedShape(elementShape) {
  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {
    return false;
  }

  return true;
}
/**
 * Generate the output element shape from the list elementShape, list tensors
 * and input param.
 * @param listElementShape
 * @param tensors
 * @param elementShape
 */


function inferElementShape(listElementShape, tensors, elementShape) {
  let partialShape = mergeElementShape(listElementShape, elementShape);
  const notfullDefinedShape = !fullDefinedShape(partialShape);

  if (notfullDefinedShape && tensors.length === 0) {
    throw new Error(`Tried to calculate elements of an empty list` + ` with non-fully-defined elementShape: ${partialShape}`);
  }

  if (notfullDefinedShape) {
    tensors.forEach(tensor => {
      partialShape = mergeElementShape(tensor.shape, partialShape);
    });
  }

  if (!fullDefinedShape(partialShape)) {
    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);
  }

  return partialShape;
}

function mergeElementShape(elementShapeA, elementShapeB) {
  if (typeof elementShapeA === 'number') {
    return elementShapeB;
  }

  if (typeof elementShapeB === 'number') {
    return elementShapeA;
  }

  if (elementShapeA.length !== elementShapeB.length) {
    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);
  }

  const result = [];

  for (let i = 0; i < elementShapeA.length; ++i) {
    const dim0 = elementShapeA[i];
    const dim1 = elementShapeB[i];

    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {
      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);
    }

    result[i] = dim0 >= 0 ? dim0 : dim1;
  }

  return result;
}
},{"@tensorflow/tfjs-core":"kSBl"}],"Ht5L":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TensorArray = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _tensor_utils = require("./tensor_utils");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * The TensorArray object keeps an array of Tensors.  It
 * allows reading from the array and writing to the array.
 */
class TensorArray {
  constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {
    this.name = name;
    this.dtype = dtype;
    this.maxSize = maxSize;
    this.elementShape = elementShape;
    this.identicalElementShapes = identicalElementShapes;
    this.dynamicSize = dynamicSize;
    this.clearAfterRead = clearAfterRead;
    this.tensors = [];
    this.closed_ = false;
    this.idTensor = (0, _tfjsCore.scalar)(0);
    (0, _tfjsCore.keep)(this.idTensor);
  }

  get id() {
    return this.idTensor.id;
  }

  get closed() {
    return this.closed_;
  }
  /**
   * Dispose the tensors and idTensor and mark the TensoryArray as closed.
   */


  clearAndClose(keepIds) {
    this.tensors.forEach(tensor => {
      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {
        tensor.tensor.dispose();
      }
    });
    this.tensors = [];
    this.closed_ = true;
    this.idTensor.dispose();
  }

  size() {
    return this.tensors.length;
  }
  /**
   * Read the value at location index in the TensorArray.
   * @param index Number the index to read from.
   */


  read(index) {
    if (this.closed_) {
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    }

    if (index < 0 || index >= this.size()) {
      throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);
    }

    const tensorWithState = this.tensors[index];

    if (tensorWithState.cleared) {
      throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` + `(perhaps try setting clear_after_read = false?).`);
    }

    if (this.clearAfterRead) {
      tensorWithState.cleared = true;
    }

    tensorWithState.read = true;
    return tensorWithState.tensor;
  }
  /**
   * Helper method to read multiple tensors from the specified indices.
   */


  readMany(indices) {
    return indices.map(index => this.read(index));
  }
  /**
   * Write value into the index of the TensorArray.
   * @param index number the index to write to.
   * @param tensor
   */


  write(index, tensor) {
    if (this.closed_) {
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    }

    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {
      throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);
    }

    const t = this.tensors[index] || {};

    if (tensor.dtype !== this.dtype) {
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},
          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);
    } // Set the shape for the first time write to unknow shape tensor array


    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0)) {
      this.elementShape = tensor.shape;
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);

    if (t.read) {
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);
    }

    if (t.written) {
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);
    }

    t.tensor = tensor;
    (0, _tfjsCore.keep)(tensor);
    t.written = true;
    this.tensors[index] = t;
  }
  /**
   * Helper method to write multiple tensors to the specified indices.
   */


  writeMany(indices, tensors) {
    if (indices.length !== tensors.length) {
      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` + `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);
    }

    indices.forEach((i, index) => this.write(i, tensors[index]));
  }
  /**
   * Return selected values in the TensorArray as a packed Tensor. All of
   * selected values must have been written and their shapes must all match.
   * @param [indices] number[] Optional. Taking values in [0, max_value). If the
   *    TensorArray is not dynamic, max_value=size(). If not specified returns
   *    all tensors in the original order.
   * @param [dtype]
   */


  gather(indices, dtype) {
    if (!!dtype && dtype !== this.dtype) {
      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);
    }

    if (!indices) {
      indices = [];

      for (let i = 0; i < this.size(); i++) {
        indices.push(i);
      }
    } else {
      indices = indices.slice(0, this.size());
    }

    if (indices.length === 0) {
      return (0, _tfjsCore.tensor)([], [0].concat(this.elementShape));
    } // Read all the PersistentTensors into a vector to keep track of
    // their memory.


    const tensors = this.readMany(indices);
    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');
    return (0, _tfjsCore.stack)(tensors, 0);
  }
  /**
   * Return the values in the TensorArray as a concatenated Tensor.
   */


  concat(dtype) {
    if (!!dtype && dtype !== this.dtype) {
      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);
    }

    if (this.size() === 0) {
      return (0, _tfjsCore.tensor)([], [0].concat(this.elementShape));
    }

    const indices = [];

    for (let i = 0; i < this.size(); i++) {
      indices.push(i);
    } // Collect all the tensors from the tensors array.


    const tensors = this.readMany(indices);
    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);
    return (0, _tfjsCore.concat)(tensors, 0);
  }
  /**
   * Scatter the values of a Tensor in specific indices of a TensorArray.
   * @param indices nummber[] values in [0, max_value). If the
   *    TensorArray is not dynamic, max_value=size().
   * @param tensor Tensor input tensor.
   */


  scatter(indices, tensor) {
    if (tensor.dtype !== this.dtype) {
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);
    }

    if (indices.length !== tensor.shape[0]) {
      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);
    }

    const maxIndex = Math.max(...indices);

    if (!this.dynamicSize && maxIndex >= this.maxSize) {
      throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);
    }

    this.writeMany(indices, (0, _tfjsCore.unstack)(tensor, 0));
  }
  /**
   * Split the values of a Tensor into the TensorArray.
   * @param length number[] with the lengths to use when splitting value along
   *    its first dimension.
   * @param tensor Tensor, the tensor to split.
   */


  split(length, tensor) {
    if (tensor.dtype !== this.dtype) {
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);
    }

    let totalLength = 0;
    const cumulativeLengths = length.map(len => {
      totalLength += len;
      return totalLength;
    });

    if (totalLength !== tensor.shape[0]) {
      throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${totalLength}, and tensor's shape is: ${tensor.shape}`);
    }

    if (!this.dynamicSize && length.length !== this.maxSize) {
      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` + 'and the TensorArray is not marked as dynamically resizeable');
    }

    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;
    const tensors = [];
    (0, _tfjsCore.tidy)(() => {
      tensor = (0, _tfjsCore.reshape)(tensor, [1, totalLength, elementPerRow]);

      for (let i = 0; i < length.length; ++i) {
        const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];
        const indices = [0, previousLength, 0];
        const sizes = [1, length[i], elementPerRow];
        tensors[i] = (0, _tfjsCore.reshape)((0, _tfjsCore.slice)(tensor, indices, sizes), this.elementShape);
      }

      return tensors;
    });
    const indices = [];

    for (let i = 0; i < length.length; i++) {
      indices[i] = i;
    }

    this.writeMany(indices, tensors);
  }

}

exports.TensorArray = TensorArray;
},{"@tensorflow/tfjs-core":"kSBl","./tensor_utils":"RRxz"}],"w2j0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromTensor = fromTensor;
exports.reserve = reserve;
exports.scatter = scatter;
exports.split = split;
exports.TensorList = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _tensor_utils = require("./tensor_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * TensorList stores a container of `tf.Tensor` objects, which are accessible
 * via tensors field.
 *
 * In order to get a copy of the underlying list, use the copy method:
 * ```
 *    TensorList b = a.copy();
 *    b.tensors().pushBack(t);  // This does not modify a.tensors().
 * ```
 *
 * Note that this is not a deep copy: the memory locations of the underlying
 * tensors will still point to the same locations of the corresponding tensors
 * in the original.
 */
class TensorList {
  /**
   *
   * @param tensors list of tensors
   * @param elementShape shape of each tensor, this can be a single number (any
   * shape is allowed) or partial shape (dim = -1).
   * @param elementDtype data type of each tensor
   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1
   *   meaning that the size of `tensors` is unbounded.
   */
  constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {
    this.tensors = tensors;
    this.elementShape = elementShape;
    this.elementDtype = elementDtype;

    if (tensors != null) {
      tensors.forEach(tensor => {
        if (elementDtype !== tensor.dtype) {
          throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);
        }

        (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(elementShape, tensor.shape, 'TensorList shape mismatch: ');
        (0, _tfjsCore.keep)(tensor);
      });
    }

    this.idTensor = (0, _tfjsCore.scalar)(0);
    this.maxNumElements = maxNumElements;
    (0, _tfjsCore.keep)(this.idTensor);
  }

  get id() {
    return this.idTensor.id;
  }
  /**
   * Get a new TensorList containing a copy of the underlying tensor container.
   */


  copy() {
    return new TensorList([...this.tensors], this.elementShape, this.elementDtype);
  }
  /**
   * Dispose the tensors and idTensor and clear the tensor list.
   */


  clearAndClose(keepIds) {
    this.tensors.forEach(tensor => {
      if (keepIds == null || !keepIds.has(tensor.id)) {
        tensor.dispose();
      }
    });
    this.tensors.length = 0;
    this.idTensor.dispose();
  }
  /**
   * The size of the tensors in the tensor list.
   */


  size() {
    return this.tensors.length;
  }
  /**
   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)
   * tf.Tensor.
   * @param elementShape shape of each tensor
   * @param elementDtype data type of each tensor
   * @param numElements the number of elements to stack
   */


  stack(elementShape, elementDtype, numElements = -1) {
    if (elementDtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
    }

    if (numElements !== -1 && this.tensors.length !== numElements) {
      throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(elementShape, this.elementShape, 'TensorList shape mismatch: ');
    const outputElementShape = (0, _tensor_utils.inferElementShape)(this.elementShape, this.tensors, elementShape);
    return (0, _tfjsCore.tidy)(() => {
      const reshapedTensors = this.tensors.map(tensor => (0, _tfjsCore.reshape)(tensor, outputElementShape));
      return (0, _tfjsCore.stack)(reshapedTensors, 0);
    });
  }
  /**
   * Pop a tensor from the end of the list.
   * @param elementShape shape of the tensor
   * @param elementDtype data type of the tensor
   */


  popBack(elementShape, elementDtype) {
    if (elementDtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
    }

    if (this.size() === 0) {
      throw new Error('Trying to pop from an empty list.');
    }

    const outputElementShape = (0, _tensor_utils.inferElementShape)(this.elementShape, this.tensors, elementShape);
    const tensor = this.tensors.pop();
    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(tensor.shape, elementShape, 'TensorList shape mismatch: ');
    return (0, _tfjsCore.reshape)(tensor, outputElementShape);
  }
  /**
   * Push a tensor to the end of the list.
   * @param tensor Tensor to be pushed.
   */


  pushBack(tensor) {
    if (tensor.dtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');

    if (this.maxNumElements === this.size()) {
      throw new Error(`Trying to push element into a full list.`);
    }

    (0, _tfjsCore.keep)(tensor);
    this.tensors.push(tensor);
  }
  /**
   * Update the size of the list.
   * @param size the new size of the list.
   */


  resize(size) {
    if (size < 0) {
      throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);
    }

    if (this.maxNumElements !== -1 && size > this.maxNumElements) {
      throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);
    }

    this.tensors.length = size;
  }
  /**
   * Retrieve the element at the provided index
   * @param elementShape shape of the tensor
   * @param elementDtype dtype of the tensor
   * @param elementIndex index of the tensor
   */


  getItem(elementIndex, elementShape, elementDtype) {
    if (elementDtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
    }

    if (elementIndex < 0 || elementIndex > this.tensors.length) {
      throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);
    }

    if (this.tensors[elementIndex] == null) {
      throw new Error(`element at index ${elementIndex} is null.`);
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');
    const outputElementShape = (0, _tensor_utils.inferElementShape)(this.elementShape, this.tensors, elementShape);
    return (0, _tfjsCore.reshape)(this.tensors[elementIndex], outputElementShape);
  }
  /**
   * Set the tensor at the index
   * @param elementIndex index of the tensor
   * @param tensor the tensor to be inserted into the list
   */


  setItem(elementIndex, tensor) {
    if (tensor.dtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);
    }

    if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {
      throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');
    (0, _tfjsCore.keep)(tensor);
    this.tensors[elementIndex] = tensor;
  }
  /**
   * Return selected values in the TensorList as a stacked Tensor. All of
   * selected values must have been written and their shapes must all match.
   * @param indices indices of tensors to gather
   * @param elementDtype output tensor dtype
   * @param elementShape output tensor element shape
   */


  gather(indices, elementDtype, elementShape) {
    if (elementDtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.elementShape, elementShape, 'TensorList shape mismatch: '); // When indices is greater than the size of the list, indices beyond the
    // size of the list are ignored.

    indices = indices.slice(0, this.size());
    const outputElementShape = (0, _tensor_utils.inferElementShape)(this.elementShape, this.tensors, elementShape);

    if (indices.length === 0) {
      return (0, _tfjsCore.tensor)([], [0].concat(outputElementShape));
    }

    return (0, _tfjsCore.tidy)(() => {
      const tensors = indices.map(i => (0, _tfjsCore.reshape)(this.tensors[i], outputElementShape));
      return (0, _tfjsCore.stack)(tensors, 0);
    });
  }
  /**
   * Return the values in the TensorList as a concatenated Tensor.
   * @param elementDtype output tensor dtype
   * @param elementShape output tensor element shape
   */


  concat(elementDtype, elementShape) {
    if (!!elementDtype && elementDtype !== this.elementDtype) {
      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);
    }

    (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(this.elementShape, elementShape, 'TensorList shape mismatch: ');
    const outputElementShape = (0, _tensor_utils.inferElementShape)(this.elementShape, this.tensors, elementShape);

    if (this.size() === 0) {
      return (0, _tfjsCore.tensor)([], [0].concat(outputElementShape));
    }

    return (0, _tfjsCore.tidy)(() => {
      const tensors = this.tensors.map(t => (0, _tfjsCore.reshape)(t, outputElementShape));
      return (0, _tfjsCore.concat)(tensors, 0);
    });
  }

}
/**
 * Creates a TensorList which, when stacked, has the value of tensor.
 * @param tensor from tensor
 * @param elementShape output tensor element shape
 */


exports.TensorList = TensorList;

function fromTensor(tensor, elementShape, elementDtype) {
  const dtype = tensor.dtype;

  if (tensor.shape.length < 1) {
    throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);
  }

  if (tensor.dtype !== elementDtype) {
    throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);
  }

  const tensorElementShape = tensor.shape.slice(1);
  (0, _tensor_utils.assertShapesMatchAllowUndefinedSize)(tensorElementShape, elementShape, 'TensorList shape mismatch: ');
  const tensorList = (0, _tfjsCore.unstack)(tensor);
  return new TensorList(tensorList, elementShape, dtype);
}
/**
 * Return a TensorList of the given size with empty elements.
 * @param elementShape the shape of the future elements of the list
 * @param elementDtype the desired type of elements in the list
 * @param numElements the number of elements to reserve
 */


function reserve(elementShape, elementDtype, numElements) {
  return new TensorList([], elementShape, elementDtype, numElements);
}
/**
 * Put tensors at specific indices of a stacked tensor into a TensorList.
 * @param indices list of indices on how to scatter the tensor.
 * @param tensor input tensor.
 * @param elementShape the shape of the future elements of the list
 * @param numElements the number of elements to scatter
 */


function scatter(tensor, indices, elementShape, numElements) {
  if (indices.length !== tensor.shape[0]) {
    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);
  }

  const maxIndex = Math.max(...indices);

  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {
    throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);
  }

  const list = new TensorList([], elementShape, tensor.dtype, numElements);
  const tensors = (0, _tfjsCore.unstack)(tensor, 0);
  indices.forEach((value, index) => {
    list.setItem(value, tensors[index]);
  });
  return list;
}
/**
 * Split the values of a Tensor into a TensorList.
 * @param length the lengths to use when splitting value along
 *    its first dimension.
 * @param tensor the tensor to split.
 * @param elementShape the shape of the future elements of the list
 */


function split(tensor, length, elementShape) {
  let totalLength = 0;
  const cumulativeLengths = length.map(len => {
    totalLength += len;
    return totalLength;
  });

  if (totalLength !== tensor.shape[0]) {
    throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${totalLength}, and tensor's shape is: ${tensor.shape}`);
  }

  const shapeWithoutFirstDim = tensor.shape.slice(1);
  const outputElementShape = (0, _tensor_utils.mergeElementShape)(shapeWithoutFirstDim, elementShape);
  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;
  const tensors = (0, _tfjsCore.tidy)(() => {
    const tensors = [];
    tensor = (0, _tfjsCore.reshape)(tensor, [1, totalLength, elementPerRow]);

    for (let i = 0; i < length.length; ++i) {
      const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];
      const indices = [0, previousLength, 0];
      const sizes = [1, length[i], elementPerRow];
      tensors[i] = (0, _tfjsCore.reshape)((0, _tfjsCore.slice)(tensor, indices, sizes), outputElementShape);
    }

    tensor.dispose();
    return tensors;
  });
  const list = new TensorList([], elementShape, tensor.dtype, length.length);

  for (let i = 0; i < tensors.length; i++) {
    list.setItem(i, tensors[i]);
  }

  return list;
}
},{"@tensorflow/tfjs-core":"kSBl","./tensor_utils":"RRxz"}],"vqcE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _tensor_array = require("../../executor/tensor_array");

var _tensor_list = require("../../executor/tensor_list");

var _utils = require("./utils");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp = async (node, tensorMap, context) => {
  switch (node.op) {
    case 'If':
    case 'StatelessIf':
      {
        const thenFunc = (0, _utils.getParamValue)('thenBranch', node, tensorMap, context);
        const elseFunc = (0, _utils.getParamValue)('elseBranch', node, tensorMap, context);
        const cond = (0, _utils.getParamValue)('cond', node, tensorMap, context);
        const args = (0, _utils.getParamValue)('args', node, tensorMap, context);
        const condValue = await cond.data();

        if (condValue[0]) {
          return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);
        } else {
          return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);
        }
      }

    case 'While':
    case 'StatelessWhile':
      {
        const bodyFunc = (0, _utils.getParamValue)('body', node, tensorMap, context);
        const condFunc = (0, _utils.getParamValue)('cond', node, tensorMap, context);
        const args = (0, _utils.getParamValue)('args', node, tensorMap, context); // Calculate the condition of the loop

        const condResult = await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);
        const argIds = args.map(tensor => tensor.id);
        let condValue = await condResult[0].data(); // Dispose the intermediate tensors for condition function

        condResult.forEach(tensor => {
          if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {
            tensor.dispose();
          }
        });
        let result = args;

        while (condValue[0]) {
          // Record the previous result for intermediate tensor tracking
          const origResult = result; // Execution the body of the loop

          result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);
          const resultIds = result.map(tensor => tensor.id); // Dispose the intermediate tensor for body function that is not global
          // kept, not input/output of the body function

          origResult.forEach(tensor => {
            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {
              tensor.dispose();
            }
          }); // Recalcuate the condition of the loop using the latest results.

          const condResult = await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);
          condValue = await condResult[0].data(); // Dispose the intermediate tensors for condition function

          condResult.forEach(tensor => {
            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {
              tensor.dispose();
            }
          });
        }

        return result;
      }

    case 'LoopCond':
      {
        const pred = (0, _utils.getParamValue)('pred', node, tensorMap, context);
        return [(0, _utils.cloneTensor)(pred)];
      }

    case 'Switch':
      {
        const pred = (0, _utils.getParamValue)('pred', node, tensorMap, context);
        let data = (0, _utils.getParamValue)('data', node, tensorMap, context);

        if (!data.kept) {
          data = (0, _utils.cloneTensor)(data);
        } // Outputs nodes :0 => false, :1 => true


        return (await pred.data())[0] ? [undefined, data] : [data, undefined];
      }

    case 'Merge':
      {
        const inputName = node.inputNames.find(name => (0, _utils.getTensor)(name, tensorMap, context) !== undefined);

        if (inputName) {
          const data = (0, _utils.getTensor)(inputName, tensorMap, context);
          return [(0, _utils.cloneTensor)(data)];
        }

        return undefined;
      }

    case 'Enter':
      {
        const frameId = (0, _utils.getParamValue)('frameName', node, tensorMap, context);
        const data = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        context.enterFrame(frameId);
        return [(0, _utils.cloneTensor)(data)];
      }

    case 'Exit':
      {
        const data = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        context.exitFrame();
        return [(0, _utils.cloneTensor)(data)];
      }

    case 'NextIteration':
      {
        const data = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        context.nextIteration();
        return [(0, _utils.cloneTensor)(data)];
      }

    case 'TensorArrayV3':
      {
        const size = (0, _utils.getParamValue)('size', node, tensorMap, context);
        const dtype = (0, _utils.getParamValue)('dtype', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const dynamicSize = (0, _utils.getParamValue)('dynamicSize', node, tensorMap, context);
        const clearAfterRead = (0, _utils.getParamValue)('clearAfterRead', node, tensorMap, context);
        const identicalElementShapes = (0, _utils.getParamValue)('identicalElementShapes', node, tensorMap, context);
        const name = (0, _utils.getParamValue)('name', node, tensorMap, context);
        const tensorArray = new _tensor_array.TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);
        context.addTensorArray(tensorArray);
        return [tensorArray.idTensor, (0, _tfjsCore.scalar)(1.0)];
      }

    case 'TensorArrayWriteV3':
      {
        const id = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const index = (0, _utils.getParamValue)('index', node, tensorMap, context);
        const writeTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const writeTensorArray = context.getTensorArray(id.id);
        writeTensorArray.write(index, writeTensor);
        return [writeTensorArray.idTensor];
      }

    case 'TensorArrayReadV3':
      {
        const readId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const readIndex = (0, _utils.getParamValue)('index', node, tensorMap, context);
        const readTensorArray = context.getTensorArray(readId.id);
        return [readTensorArray.read(readIndex)];
      }

    case 'TensorArrayGatherV3':
      {
        const gatherId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const gatherIndices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        const gatherDtype = (0, _utils.getParamValue)('dtype', node, tensorMap, context);
        const gatherTensorArray = context.getTensorArray(gatherId.id);
        return [gatherTensorArray.gather(gatherIndices, gatherDtype)];
      }

    case 'TensorArrayScatterV3':
      {
        const scatterId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const scatterIndices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        const scatterTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const scatterTensorArray = context.getTensorArray(scatterId.id);
        scatterTensorArray.scatter(scatterIndices, scatterTensor);
        return [scatterTensorArray.idTensor];
      }

    case 'TensorArrayConcatV3':
      {
        const concatId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const concatTensorArray = context.getTensorArray(concatId.id);
        const concatDtype = (0, _utils.getParamValue)('dtype', node, tensorMap, context);
        return [concatTensorArray.concat(concatDtype)];
      }

    case 'TensorArraySplitV3':
      {
        const splitId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const splitTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const lengths = (0, _utils.getParamValue)('lengths', node, tensorMap, context);
        const splitTensorArray = context.getTensorArray(splitId.id);
        splitTensorArray.split(lengths, splitTensor);
        return [splitTensorArray.idTensor];
      }

    case 'TensorArraySizeV3':
      {
        const sizeId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const sizeTensorArray = context.getTensorArray(sizeId.id);
        return [(0, _tfjsCore.scalar)(sizeTensorArray.size(), 'int32')];
      }

    case 'TensorArrayCloseV3':
      {
        const closeId = (0, _utils.getParamValue)('tensorArrayId', node, tensorMap, context);
        const closeTensorArray = context.getTensorArray(closeId.id);
        closeTensorArray.clearAndClose();
        return [closeTensorArray.idTensor];
      }

    case 'TensorListSetItem':
      {
        const idTensor = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const index = (0, _utils.getParamValue)('index', node, tensorMap, context);
        const writeTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const tensorList = context.getTensorList(idTensor.id);
        tensorList.setItem(index, writeTensor);
        return [tensorList.idTensor];
      }

    case 'TensorListGetItem':
      {
        const idTensor = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const readIndex = (0, _utils.getParamValue)('index', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const elementDType = (0, _utils.getParamValue)('elementDType', node, tensorMap, context);
        const tensorList = context.getTensorList(idTensor.id);
        return [tensorList.getItem(readIndex, elementShape, elementDType)];
      }

    case 'TensorListScatterV2':
    case 'TensorListScatter':
      {
        const scatterIndices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        const scatterTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const numElements = (0, _utils.getParamValue)('numElements', node, tensorMap, context);
        const tensorList = (0, _tensor_list.scatter)(scatterTensor, scatterIndices, elementShape, numElements);
        context.addTensorList(tensorList);
        return [tensorList.idTensor];
      }

    case 'TensorListReserve':
    case 'EmptyTensorList':
      {
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const elementDtype = (0, _utils.getParamValue)('elementDType', node, tensorMap, context);
        let numElementsParam;

        if (node.op === 'TensorListReserve') {
          numElementsParam = 'numElements';
        } else {
          numElementsParam = 'maxNumElements';
        }

        const numElements = (0, _utils.getParamValue)(numElementsParam, node, tensorMap, context);
        const tensorList = (0, _tensor_list.reserve)(elementShape, elementDtype, numElements);
        context.addTensorList(tensorList);
        return [tensorList.idTensor];
      }

    case 'TensorListGather':
      {
        const gatherId = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const gatherIndices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const elementDtype = (0, _utils.getParamValue)('elementDType', node, tensorMap, context);
        const tensorList = context.getTensorList(gatherId.id);
        return [tensorList.gather(gatherIndices, elementDtype, elementShape)];
      }

    case 'TensorListStack':
      {
        const idTensor = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const elementDtype = (0, _utils.getParamValue)('elementDType', node, tensorMap, context);
        const numElements = (0, _utils.getParamValue)('numElements', node, tensorMap, context);
        const tensorList = context.getTensorList(idTensor.id);
        return [tensorList.stack(elementShape, elementDtype, numElements)];
      }

    case 'TensorListFromTensor':
      {
        const tensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const elementDtype = (0, _utils.getParamValue)('elementDType', node, tensorMap, context);
        const tensorList = (0, _tensor_list.fromTensor)(tensor, elementShape, elementDtype);
        context.addTensorList(tensorList);
        return [tensorList.idTensor];
      }

    case 'TensorListConcat':
      {
        const concatId = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const tensorList = context.getTensorList(concatId.id);
        const concatDtype = (0, _utils.getParamValue)('dtype', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        return [tensorList.concat(concatDtype, elementShape)];
      }

    case 'TensorListPushBack':
      {
        const idTensor = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const writeTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const tensorList = context.getTensorList(idTensor.id);
        tensorList.pushBack(writeTensor);
        return [tensorList.idTensor];
      }

    case 'TensorListPopBack':
      {
        const idTensor = (0, _utils.getParamValue)('tensorListId', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const elementDType = (0, _utils.getParamValue)('elementDType', node, tensorMap, context);
        const tensorList = context.getTensorList(idTensor.id);
        return [tensorList.popBack(elementShape, elementDType)];
      }

    case 'TensorListSplit':
      {
        const splitTensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        const elementShape = (0, _utils.getParamValue)('elementShape', node, tensorMap, context);
        const lengths = (0, _utils.getParamValue)('lengths', node, tensorMap, context);
        const tensorList = (0, _tensor_list.split)(splitTensor, lengths, elementShape);
        context.addTensorList(tensorList);
        return [tensorList.idTensor];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'control';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core":"kSBl","../../executor/tensor_array":"Ht5L","../../executor/tensor_list":"w2j0","./utils":"eBau"}],"I0Jg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
function fusedConvAndDepthWiseParams(node, tensorMap, context) {
  const [extraOp, activationFunc] = (0, _utils.getParamValue)('fusedOps', node, tensorMap, context);
  const isBiasAdd = extraOp === 'biasadd';
  const noBiasAdd = !isBiasAdd;
  const isPrelu = activationFunc === 'prelu';
  const isBatchNorm = extraOp === 'fusedbatchnorm';
  const numArgs = (0, _utils.getParamValue)('numArgs', node, tensorMap, context);

  if (isBiasAdd) {
    if (isPrelu && numArgs !== 2) {
      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' + 'must have two extra arguments: bias and alpha.');
    }

    if (!isPrelu && isBiasAdd && numArgs !== 1) {
      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' + 'one extra argument: bias.');
    }
  }

  if (isBatchNorm) {
    throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');
  }

  const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
  const pad = (0, _utils.getPadding)(node, tensorMap, context);
  const dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
  const dilations = (0, _utils.getParamValue)('dilations', node, tensorMap, context);
  let [biasArg, preluArg] = (0, _utils.getParamValue)('args', node, tensorMap, context);

  if (noBiasAdd) {
    preluArg = biasArg;
    biasArg = undefined;
  }

  const leakyreluAlpha = (0, _utils.getParamValue)('leakyreluAlpha', node, tensorMap, context);
  return {
    stride,
    pad,
    dataFormat,
    dilations,
    biasArg,
    preluArg,
    activationFunc,
    leakyreluAlpha
  };
}

const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Conv1D':
      {
        const stride = (0, _utils.getParamValue)('stride', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        const dilation = (0, _utils.getParamValue)('dilation', node, tensorMap, context);
        return [tfOps.conv1d((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];
      }

    case 'Conv2D':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getPadding)(node, tensorMap, context);
        const dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        const dilations = (0, _utils.getParamValue)('dilations', node, tensorMap, context);
        return [tfOps.conv2d((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];
      }

    case '_FusedConv2D':
      {
        const {
          stride,
          pad,
          dataFormat,
          dilations,
          biasArg,
          preluArg,
          activationFunc,
          leakyreluAlpha
        } = fusedConvAndDepthWiseParams(node, tensorMap, context);
        return [tfOps.fused.conv2d({
          x: (0, _utils.getParamValue)('x', node, tensorMap, context),
          filter: (0, _utils.getParamValue)('filter', node, tensorMap, context),
          strides: [stride[1], stride[2]],
          pad: pad,
          dataFormat: dataFormat,
          dilations: [dilations[1], dilations[2]],
          bias: biasArg,
          activation: activationFunc,
          preluActivationWeights: preluArg,
          leakyreluAlpha
        })];
      }

    case 'FusedDepthwiseConv2dNative':
      {
        const {
          stride,
          pad,
          dataFormat,
          dilations,
          biasArg,
          preluArg,
          activationFunc,
          leakyreluAlpha
        } = fusedConvAndDepthWiseParams(node, tensorMap, context);
        return [tfOps.fused.depthwiseConv2d({
          x: (0, _utils.getParamValue)('x', node, tensorMap, context),
          filter: (0, _utils.getParamValue)('filter', node, tensorMap, context),
          strides: [stride[1], stride[2]],
          pad: pad,
          dataFormat: dataFormat,
          dilations: [dilations[1], dilations[2]],
          bias: biasArg,
          activation: activationFunc,
          preluActivationWeights: preluArg,
          leakyreluAlpha
        })];
      }

    case 'Conv2DBackpropInput':
    case 'Conv2dTranspose':
      {
        const shape = (0, _utils.getParamValue)('outputShape', node, tensorMap, context);
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getPadding)(node, tensorMap, context);
        return [tfOps.conv2dTranspose((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];
      }

    case 'DepthwiseConv2dNative':
    case 'DepthwiseConv2d':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getPadding)(node, tensorMap, context);
        const dilations = (0, _utils.getParamValue)('dilations', node, tensorMap, context);
        const dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        return [tfOps.depthwiseConv2d((0, _utils.getParamValue)('input', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];
      }

    case 'Conv3D':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        const dilations = (0, _utils.getParamValue)('dilations', node, tensorMap, context);
        return [tfOps.conv3d((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];
      }

    case 'AvgPool':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0, _utils.getParamValue)('kernelSize', node, tensorMap, context);
        return [tfOps.avgPool((0, _utils.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
      }

    case 'MaxPool':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0, _utils.getParamValue)('kernelSize', node, tensorMap, context);
        return [tfOps.maxPool((0, _utils.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
      }

    case 'MaxPoolWithArgmax':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0, _utils.getParamValue)('kernelSize', node, tensorMap, context);
        const includeBatchInIndex = (0, _utils.getParamValue)('includeBatchInIndex', node, tensorMap, context);
        const {
          result,
          indexes
        } = tfOps.maxPoolWithArgmax((0, _utils.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex);
        return [result, indexes];
      }

    case 'AvgPool3D':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0, _utils.getParamValue)('kernelSize', node, tensorMap, context);
        return [tfOps.avgPool3d((0, _utils.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];
      }

    case 'MaxPool3D':
      {
        const stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0, _utils.getParamValue)('kernelSize', node, tensorMap, context);
        return [tfOps.maxPool3d((0, _utils.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];
      }

    case 'Dilation2D':
      {
        const strides = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
        const dilations = (0, _utils.getParamValue)('dilations', node, tensorMap, context); // strides: [1, stride_height, stride_width, 1].

        const strideHeight = strides[1];
        const strideWidth = strides[2]; // dilations: [1, dilation_height, dilation_width, 1].

        const dilationHeight = dilations[1];
        const dilationWidth = dilations[2];
        return [tfOps.dilation2d((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC'
        /* dataFormat */
        )];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'convolution';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"S7Bc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Fill':
      {
        const shape = (0, _utils.getParamValue)('shape', node, tensorMap, context);
        const dtype = (0, _utils.getParamValue)('dtype', node, tensorMap, context);
        const value = (0, _utils.getParamValue)('value', node, tensorMap, context);
        return [tfOps.fill(shape, value, dtype)];
      }

    case 'LinSpace':
      {
        const start = (0, _utils.getParamValue)('start', node, tensorMap, context);
        const stop = (0, _utils.getParamValue)('stop', node, tensorMap, context);
        const num = (0, _utils.getParamValue)('num', node, tensorMap, context);
        return [tfOps.linspace(start, stop, num)];
      }

    case 'Multinomial':
      {
        const logits = (0, _utils.getParamValue)('logits', node, tensorMap, context);
        const numSamples = (0, _utils.getParamValue)('numSamples', node, tensorMap, context);
        const seed = (0, _utils.getParamValue)('seed', node, tensorMap, context);
        return [tfOps.multinomial(logits, numSamples, seed)];
      }

    case 'OneHot':
      {
        const indices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        const depth = (0, _utils.getParamValue)('depth', node, tensorMap, context);
        const onValue = (0, _utils.getParamValue)('onValue', node, tensorMap, context);
        const offValue = (0, _utils.getParamValue)('offValue', node, tensorMap, context);
        return [tfOps.oneHot(indices, depth, onValue, offValue)];
      }

    case 'Ones':
      {
        return [tfOps.ones((0, _utils.getParamValue)('shape', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
      }

    case 'OnesLike':
      {
        return [tfOps.onesLike((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'RandomUniform':
      {
        return [tfOps.randomUniform( // tslint:disable-next-line:no-any
        (0, _utils.getParamValue)('shape', node, tensorMap, context), (0, _utils.getParamValue)('minval', node, tensorMap, context), (0, _utils.getParamValue)('maxval', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
      }

    case 'Range':
      {
        const start = (0, _utils.getParamValue)('start', node, tensorMap, context);
        const stop = (0, _utils.getParamValue)('stop', node, tensorMap, context);
        const step = (0, _utils.getParamValue)('step', node, tensorMap, context);
        return [tfOps.range(start, stop, step, (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
      }

    case 'TruncatedNormal':
      {
        const shape = (0, _utils.getParamValue)('shape', node, tensorMap, context);
        const mean = (0, _utils.getParamValue)('mean', node, tensorMap, context);
        const stdDev = (0, _utils.getParamValue)('stdDev', node, tensorMap, context);
        const seed = (0, _utils.getParamValue)('seed', node, tensorMap, context);
        return [tfOps.truncatedNormal(shape, mean, stdDev, (0, _utils.getParamValue)('dtype', node, tensorMap, context), seed)];
      }

    case 'Zeros':
      {
        return [tfOps.zeros((0, _utils.getParamValue)('shape', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
      }

    case 'ZerosLike':
      {
        return [tfOps.zerosLike((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'creation';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"DfzY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
function nmsParams(node, tensorMap, context) {
  const boxes = (0, _utils.getParamValue)('boxes', node, tensorMap, context);
  const scores = (0, _utils.getParamValue)('scores', node, tensorMap, context);
  const maxOutputSize = (0, _utils.getParamValue)('maxOutputSize', node, tensorMap, context);
  const iouThreshold = (0, _utils.getParamValue)('iouThreshold', node, tensorMap, context);
  const scoreThreshold = (0, _utils.getParamValue)('scoreThreshold', node, tensorMap, context);
  const softNmsSigma = (0, _utils.getParamValue)('softNmsSigma', node, tensorMap, context);
  return {
    boxes,
    scores,
    maxOutputSize,
    iouThreshold,
    scoreThreshold,
    softNmsSigma
  };
}

const executeOp = async (node, tensorMap, context) => {
  switch (node.op) {
    case 'NonMaxSuppressionV5':
      {
        const {
          boxes,
          scores,
          maxOutputSize,
          iouThreshold,
          scoreThreshold,
          softNmsSigma
        } = nmsParams(node, tensorMap, context);
        const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
        return [result.selectedIndices, result.selectedScores];
      }

    case 'NonMaxSuppressionV4':
      {
        const {
          boxes,
          scores,
          maxOutputSize,
          iouThreshold,
          scoreThreshold
        } = nmsParams(node, tensorMap, context);
        const padToMaxOutputSize = (0, _utils.getParamValue)('padToMaxOutputSize', node, tensorMap, context);
        const result = await tfOps.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);
        return [result.selectedIndices, result.validOutputs];
      }

    case 'NonMaxSuppressionV3':
    case 'NonMaxSuppressionV2':
      {
        const {
          boxes,
          scores,
          maxOutputSize,
          iouThreshold,
          scoreThreshold
        } = nmsParams(node, tensorMap, context);
        return [await tfOps.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];
      }

    case 'Where':
      {
        const condition = tfOps.cast((0, _utils.getParamValue)('condition', node, tensorMap, context), 'bool');
        const result = [await tfOps.whereAsync(condition)];
        condition.dispose();
        return result;
      }

    case 'ListDiff':
      {
        return tfOps.setdiff1dAsync((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('y', node, tensorMap, context));
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'dynamic';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"j06l":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'TopKV2':
      {
        const x = (0, _utils.getParamValue)('x', node, tensorMap, context);
        const k = (0, _utils.getParamValue)('k', node, tensorMap, context);
        const sorted = (0, _utils.getParamValue)('sorted', node, tensorMap, context);
        const result = tfOps.topk(x, k, sorted);
        return [result.values, result.indices];
      }

    case 'Unique':
      {
        const x = (0, _utils.getParamValue)('x', node, tensorMap, context);
        const result = tfOps.unique(x);
        return [result.values, result.indices];
      }

    case 'UniqueV2':
      {
        const x = (0, _utils.getParamValue)('x', node, tensorMap, context);
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const result = tfOps.unique(x, axis);
        return [result.values, result.indices];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'evaluation';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"c6LN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Const':
      {
        return tensorMap[node.name];
      }

    case 'PlaceholderWithDefault':
      const def = (0, _utils.getParamValue)('default', node, tensorMap, context);
      return [(0, _utils.getTensor)(node.name, tensorMap, context) || def];

    case 'Placeholder':
      return [(0, _utils.getTensor)(node.name, tensorMap, context)];

    case 'Identity':
    case 'StopGradient':
    case 'FakeQuantWithMinMaxVars':
      {
        // This op is currently ignored.
        const data = (0, _utils.getParamValue)('x', node, tensorMap, context);
        return [(0, _utils.cloneTensor)(data)];
      }

    case 'IdentityN':
      return (0, _utils.getParamValue)('x', node, tensorMap, context).map(t => (0, _utils.cloneTensor)(t));

    case 'Snapshot':
      const snapshot = (0, _utils.getParamValue)('x', node, tensorMap, context);
      return [(0, _utils.cloneTensor)(snapshot)];

    case 'Shape':
      return [tfOps.tensor1d((0, _utils.getParamValue)('x', node, tensorMap, context).shape, 'int32')];

    case 'ShapeN':
      return (0, _utils.getParamValue)('x', node, tensorMap, context).map(t => tfOps.tensor1d(t.shape));

    case 'Size':
      return [tfOps.scalar((0, _utils.getParamValue)('x', node, tensorMap, context).size, 'int32')];

    case 'Rank':
      return [tfOps.scalar((0, _utils.getParamValue)('x', node, tensorMap, context).rank, 'int32')];

    case 'NoOp':
      return [tfOps.scalar(1)];

    case 'Print':
      const input = (0, _utils.getParamValue)('x', node, tensorMap, context);
      const data = (0, _utils.getParamValue)('data', node, tensorMap, context);
      const message = (0, _utils.getParamValue)('message', node, tensorMap, context);
      const summarize = (0, _utils.getParamValue)('summarize', node, tensorMap, context);
      console.warn('The graph has a tf.print() operation,' + 'usually used for debugging, which slows down performance.');
      console.log(message);

      for (let i = 0; i < data.length; i++) {
        console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));
      }

      return [input];

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'graph';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"zdwQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HashTable = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist

/**
 * Hashtable contains a set of tensors, which can be accessed by key.
 */
class HashTable {
  /**
   * Constructor of HashTable. Creates a hash table.
   *
   * @param keyDType `dtype` of the table keys.
   * @param valueDType `dtype` of the table values.
   */
  constructor(keyDType, valueDType) {
    this.keyDType = keyDType;
    this.valueDType = valueDType;
    this.handle = (0, _tfjsCore.scalar)(0); // tslint:disable-next-line: no-any

    this.tensorMap = new Map();
    (0, _tfjsCore.keep)(this.handle);
  }

  get id() {
    return this.handle.id;
  }
  /**
   * Dispose the tensors and handle and clear the hashtable.
   */


  clearAndClose() {
    this.tensorMap.forEach(value => value.dispose());
    this.tensorMap.clear();
    this.handle.dispose();
  }
  /**
   * The number of items in the hash table.
   */


  size() {
    return this.tensorMap.size;
  }
  /**
   * The number of items in the hash table as a rank-0 tensor.
   */


  tensorSize() {
    return tfOps.scalar(this.size(), 'int32');
  }
  /**
   * Replaces the contents of the table with the specified keys and values.
   * @param keys Keys to store in the hashtable.
   * @param values Values to store in the hashtable.
   */


  async import(keys, values) {
    this.checkKeyAndValueTensor(keys, values); // We only store the primitive values of the keys, this allows lookup
    // to be O(1).

    const $keys = await keys.data(); // Clear the hashTable before inserting new values.

    this.tensorMap.forEach(value => value.dispose());
    this.tensorMap.clear();
    return (0, _tfjsCore.tidy)(() => {
      const $values = (0, _tfjsCore.unstack)(values);
      const keysLength = $keys.length;
      const valuesLength = $values.length;

      _tfjsCore.util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` + `${keysLength} elements, the values has ${valuesLength} ` + `elements.`);

      for (let i = 0; i < keysLength; i++) {
        const key = $keys[i];
        const value = $values[i];
        (0, _tfjsCore.keep)(value);
        this.tensorMap.set(key, value);
      }

      return this.handle;
    });
  }
  /**
   * Looks up keys in a hash table, outputs the corresponding values.
   *
   * Performs batch lookups, for every element in the key tensor, `find`
   * stacks the corresponding value into the return tensor.
   *
   * If an element is not present in the table, the given `defaultValue` is
   * used.
   *
   * @param keys Keys to look up. Must have the same type as the keys of the
   *     table.
   * @param defaultValue The scalar `defaultValue` is the value output for keys
   *     not present in the table. It must also be of the same type as the
   *     table values.
   */


  async find(keys, defaultValue) {
    this.checkKeyAndValueTensor(keys, defaultValue);
    const $keys = await keys.data();
    return (0, _tfjsCore.tidy)(() => {
      const result = [];

      for (let i = 0; i < $keys.length; i++) {
        const key = $keys[i];
        const value = this.findWithDefault(key, defaultValue);
        result.push(value);
      }

      return (0, _tfjsCore.stack)(result);
    });
  } // tslint:disable-next-line: no-any


  findWithDefault(key, defaultValue) {
    const result = this.tensorMap.get(key);
    return result != null ? result : defaultValue;
  }

  checkKeyAndValueTensor(key, value) {
    if (key.dtype !== this.keyDType) {
      throw new Error(`Expect key dtype ${this.keyDType}, but got ` + `${key.dtype}`);
    }

    if (value.dtype !== this.valueDType) {
      throw new Error(`Expect value dtype ${this.valueDType}, but got ` + `${value.dtype}`);
    }
  }

}

exports.HashTable = HashTable;
},{"@tensorflow/tfjs-core":"kSBl","@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm"}],"qYIJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var _hash_table = require("../../executor/hash_table");

var _utils = require("./utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const executeOp = async (node, tensorMap, context, resourceManager) => {
  switch (node.op) {
    case 'HashTable':
    case 'HashTableV2':
      {
        const keyDType = (0, _utils.getParamValue)('keyDType', node, tensorMap, context);
        const valueDType = (0, _utils.getParamValue)('valueDType', node, tensorMap, context);
        const hashTable = new _hash_table.HashTable(keyDType, valueDType);
        resourceManager.addHashTable(node.name, hashTable);
        return [hashTable.handle];
      }

    case 'LookupTableImport':
    case 'LookupTableImportV2':
      {
        const handle = (0, _utils.getParamValue)('tableHandle', node, tensorMap, context, resourceManager);
        const keys = (0, _utils.getParamValue)('keys', node, tensorMap, context);
        const values = (0, _utils.getParamValue)('values', node, tensorMap, context);
        const hashTable = resourceManager.getHashTableById(handle.id);
        return [await hashTable.import(keys, values)];
      }

    case 'LookupTableFind':
    case 'LookupTableFindV2':
      {
        const handle = (0, _utils.getParamValue)('tableHandle', node, tensorMap, context, resourceManager);
        const keys = (0, _utils.getParamValue)('keys', node, tensorMap, context);
        const defaultValue = (0, _utils.getParamValue)('defaultValue', node, tensorMap, context);
        const hashTable = resourceManager.getHashTableById(handle.id);
        return [await hashTable.find(keys, defaultValue)];
      }

    case 'LookupTableSize':
    case 'LookupTableSizeV2':
      {
        const handle = (0, _utils.getParamValue)('tableHandle', node, tensorMap, context, resourceManager);
        const hashTable = resourceManager.getHashTableById(handle.id);
        return [hashTable.tensorSize()];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'hash_table';
exports.CATEGORY = CATEGORY;
},{"../../executor/hash_table":"zdwQ","./utils":"eBau"}],"P01n":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'ResizeBilinear':
      {
        const images = (0, _utils.getParamValue)('images', node, tensorMap, context);
        const size = (0, _utils.getParamValue)('size', node, tensorMap, context);
        const alignCorners = (0, _utils.getParamValue)('alignCorners', node, tensorMap, context);
        const halfPixelCenters = (0, _utils.getParamValue)('halfPixelCenters', node, tensorMap, context);
        return [tfOps.image.resizeBilinear(images, [size[0], size[1]], alignCorners, halfPixelCenters)];
      }

    case 'ResizeNearestNeighbor':
      {
        const images = (0, _utils.getParamValue)('images', node, tensorMap, context);
        const size = (0, _utils.getParamValue)('size', node, tensorMap, context);
        const alignCorners = (0, _utils.getParamValue)('alignCorners', node, tensorMap, context);
        const halfPixelCenters = (0, _utils.getParamValue)('halfPixelCenters', node, tensorMap, context);
        return [tfOps.image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners, halfPixelCenters)];
      }

    case 'CropAndResize':
      {
        const image = (0, _utils.getParamValue)('image', node, tensorMap, context);
        const boxes = (0, _utils.getParamValue)('boxes', node, tensorMap, context);
        const boxInd = (0, _utils.getParamValue)('boxInd', node, tensorMap, context);
        const cropSize = (0, _utils.getParamValue)('cropSize', node, tensorMap, context);
        const method = (0, _utils.getParamValue)('method', node, tensorMap, context);
        const extrapolationValue = (0, _utils.getParamValue)('extrapolationValue', node, tensorMap, context);
        return [tfOps.image.cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'image';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"fJEP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Equal':
      {
        return [tfOps.equal((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'NotEqual':
      {
        return [tfOps.notEqual((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Greater':
      {
        return [tfOps.greater((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'GreaterEqual':
      {
        return [tfOps.greaterEqual((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Less':
      {
        return [tfOps.less((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'LessEqual':
      {
        return [tfOps.lessEqual((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'LogicalAnd':
      {
        return [tfOps.logicalAnd((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'LogicalNot':
      {
        return [tfOps.logicalNot((0, _utils.getParamValue)('a', node, tensorMap, context))];
      }

    case 'LogicalOr':
      {
        return [tfOps.logicalOr((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    case 'Select':
    case 'SelectV2':
      {
        return [tfOps.where((0, _utils.getParamValue)('condition', node, tensorMap, context), (0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'logical';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"Rlpz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'BatchMatMul':
    case 'BatchMatMulV2':
    case 'MatMul':
      return [tfOps.matMul((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context), (0, _utils.getParamValue)('transposeA', node, tensorMap, context), (0, _utils.getParamValue)('transposeB', node, tensorMap, context))];

    case 'Einsum':
      return [tfOps.einsum((0, _utils.getParamValue)('equation', node, tensorMap, context), ...(0, _utils.getParamValue)('tensors', node, tensorMap, context))];

    case 'Transpose':
      return [tfOps.transpose((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('perm', node, tensorMap, context))];

    case '_FusedMatMul':
      const [extraOp, activationFunc] = (0, _utils.getParamValue)('fusedOps', node, tensorMap, context);
      const isBiasAdd = extraOp === 'biasadd';
      const isPrelu = activationFunc === 'prelu';
      const numArgs = (0, _utils.getParamValue)('numArgs', node, tensorMap, context);
      const leakyreluAlpha = (0, _utils.getParamValue)('leakyreluAlpha', node, tensorMap, context);

      if (isBiasAdd) {
        if (isPrelu && numArgs !== 2) {
          throw new Error('Fused MatMul with BiasAdd and Prelu must have two ' + 'extra arguments: bias and alpha.');
        }

        if (!isPrelu && numArgs !== 1) {
          throw new Error('Fused MatMul with BiasAdd must have one extra argument: bias.');
        }
      }

      const [biasArg, preluArg] = (0, _utils.getParamValue)('args', node, tensorMap, context);
      return [tfOps.fused.matMul({
        a: (0, _utils.getParamValue)('a', node, tensorMap, context),
        b: (0, _utils.getParamValue)('b', node, tensorMap, context),
        transposeA: (0, _utils.getParamValue)('transposeA', node, tensorMap, context),
        transposeB: (0, _utils.getParamValue)('transposeB', node, tensorMap, context),
        bias: biasArg,
        activation: activationFunc,
        preluActivationWeights: preluArg,
        leakyreluAlpha
      })];

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'matrices';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"Pftj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'FusedBatchNorm':
    case 'FusedBatchNormV2':
      {
        return [tfOps.batchNorm((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('mean', node, tensorMap, context), (0, _utils.getParamValue)('variance', node, tensorMap, context), (0, _utils.getParamValue)('offset', node, tensorMap, context), (0, _utils.getParamValue)('scale', node, tensorMap, context), (0, _utils.getParamValue)('epsilon', node, tensorMap, context))];
      }

    case 'FusedBatchNormV3':
      {
        return [tfOps.batchNorm((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('mean', node, tensorMap, context), (0, _utils.getParamValue)('variance', node, tensorMap, context), (0, _utils.getParamValue)('offset', node, tensorMap, context), (0, _utils.getParamValue)('scale', node, tensorMap, context), (0, _utils.getParamValue)('epsilon', node, tensorMap, context))];
      }

    case 'LRN':
      {
        return [tfOps.localResponseNormalization((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('radius', node, tensorMap, context), (0, _utils.getParamValue)('bias', node, tensorMap, context), (0, _utils.getParamValue)('alpha', node, tensorMap, context), (0, _utils.getParamValue)('beta', node, tensorMap, context))];
      }

    case 'Softmax':
      {
        return [tfOps.softmax((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'LogSoftmax':
      {
        return [tfOps.logSoftmax((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'SparseToDense':
      {
        return [tfOps.sparseToDense((0, _utils.getParamValue)('sparseIndices', node, tensorMap, context), (0, _utils.getParamValue)('outputShape', node, tensorMap, context), (0, _utils.getParamValue)('sparseValues', node, tensorMap, context), (0, _utils.getParamValue)('defaultValue', node, tensorMap, context))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'normalization';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"ftj2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Max':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.max((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'Mean':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.mean((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'Min':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.min((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'Sum':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.sum((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'All':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.all((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'Any':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.any((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'ArgMax':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        return [tfOps.argMax((0, _utils.getParamValue)('x', node, tensorMap, context), axis)];
      }

    case 'ArgMin':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        return [tfOps.argMin((0, _utils.getParamValue)('x', node, tensorMap, context), axis)];
      }

    case 'Prod':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
        return [tfOps.prod((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }

    case 'Cumsum':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const exclusive = (0, _utils.getParamValue)('exclusive', node, tensorMap, context);
        const reverse = (0, _utils.getParamValue)('reverse', node, tensorMap, context);
        return [tfOps.cumsum((0, _utils.getParamValue)('x', node, tensorMap, context), axis, exclusive, reverse)];
      }

    case 'Bincount':
      const x = (0, _utils.getParamValue)('x', node, tensorMap, context);
      const weights = (0, _utils.getParamValue)('weights', node, tensorMap, context);
      const size = (0, _utils.getParamValue)('size', node, tensorMap, context);
      return [tfOps.bincount(x, weights, size)];

    case 'DenseBincount':
      {
        const x = (0, _utils.getParamValue)('x', node, tensorMap, context);
        const weights = (0, _utils.getParamValue)('weights', node, tensorMap, context);
        const size = (0, _utils.getParamValue)('size', node, tensorMap, context);
        const binaryOutput = (0, _utils.getParamValue)('binaryOutput', node, tensorMap, context);
        return [tfOps.denseBincount(x, weights, size, binaryOutput)];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'reduction';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"inkj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'ConcatV2':
    case 'Concat':
      {
        const n = (0, _utils.getParamValue)('n', node, tensorMap, context);
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        let inputs = (0, _utils.getParamValue)('tensors', node, tensorMap, context);
        inputs = inputs.slice(0, n);
        return [tfOps.concat(inputs, axis)];
      }

    case 'Gather':
      {
        const input = (0, _utils.getParamValue)('x', node, tensorMap, context);
        const indices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        return [tfOps.gather(input, tfOps.cast(indices, 'int32'), 0)];
      }

    case 'GatherV2':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const batchDims = (0, _utils.getParamValue)('batchDims', node, tensorMap, context);
        const input = (0, _utils.getParamValue)('x', node, tensorMap, context);
        const indices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        return [tfOps.gather(input, tfOps.cast(indices, 'int32'), axis, batchDims)];
      }

    case 'Reverse':
      {
        const dims = (0, _utils.getParamValue)('dims', node, tensorMap, context);
        const axis = [];

        for (let i = 0; i < dims.length; i++) {
          if (dims[i]) {
            axis.push(i);
          }
        }

        const input = (0, _utils.getParamValue)('x', node, tensorMap, context);
        return [tfOps.reverse(input, axis)];
      }

    case 'ReverseV2':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const input = (0, _utils.getParamValue)('x', node, tensorMap, context);
        return [tfOps.reverse(input, axis)];
      }

    case 'Slice':
      {
        // tslint:disable-next-line:no-any
        const begin = (0, _utils.getParamValue)('begin', node, tensorMap, context); // tslint:disable-next-line:no-any

        const size = (0, _utils.getParamValue)('size', node, tensorMap, context);
        return [tfOps.slice((0, _utils.getParamValue)('x', node, tensorMap, context), begin, size)];
      }

    case 'StridedSlice':
      {
        const begin = (0, _utils.getParamValue)('begin', node, tensorMap, context);
        const end = (0, _utils.getParamValue)('end', node, tensorMap, context);
        const strides = (0, _utils.getParamValue)('strides', node, tensorMap, context);
        const beginMask = (0, _utils.getParamValue)('beginMask', node, tensorMap, context);
        const endMask = (0, _utils.getParamValue)('endMask', node, tensorMap, context);
        const ellipsisMask = (0, _utils.getParamValue)('ellipsisMask', node, tensorMap, context);
        const newAxisMask = (0, _utils.getParamValue)('newAxisMask', node, tensorMap, context);
        const shrinkAxisMask = (0, _utils.getParamValue)('shrinkAxisMask', node, tensorMap, context);
        const tensor = (0, _utils.getParamValue)('x', node, tensorMap, context);
        return [tfOps.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];
      }

    case 'Pack':
      {
        return (0, _tfjsCore.tidy)(() => {
          const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
          const tensors = (0, _utils.getParamValue)('tensors', node, tensorMap, context); // Reshape the tensors to the first tensor's shape if they don't
          // match.

          const shape = tensors[0].shape;
          const squeezedShape = tfOps.squeeze(tensors[0]).shape;
          const mapped = tensors.map(tensor => {
            const sameShape = _tfjsCore.util.arraysEqual(tensor.shape, shape);

            if (!sameShape && !_tfjsCore.util.arraysEqual(tfOps.squeeze(tensor).shape, squeezedShape)) {
              throw new Error('the input tensors shape does not match');
            }

            return sameShape ? tensor : tfOps.reshape(tensor, shape);
          });
          return [tfOps.stack(mapped, axis)];
        });
      }

    case 'Unpack':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const tensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
        return tfOps.unstack(tensor, axis);
      }

    case 'Tile':
      {
        const reps = (0, _utils.getParamValue)('reps', node, tensorMap, context);
        return [tfOps.tile((0, _utils.getParamValue)('x', node, tensorMap, context), reps)];
      }

    case 'Split':
    case 'SplitV':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        const numOrSizeSplits = (0, _utils.getParamValue)('numOrSizeSplits', node, tensorMap, context);
        const tensor = (0, _utils.getParamValue)('x', node, tensorMap, context);
        return tfOps.split(tensor, numOrSizeSplits, axis);
      }

    case 'ScatterNd':
      {
        const indices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        const values = (0, _utils.getParamValue)('values', node, tensorMap, context);
        const shape = (0, _utils.getParamValue)('shape', node, tensorMap, context);
        return [tfOps.scatterND(indices, values, shape)];
      }

    case 'GatherNd':
      {
        const x = (0, _utils.getParamValue)('x', node, tensorMap, context);
        const indices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
        return [tfOps.gatherND(x, indices)];
      }

    case 'SparseToDense':
      {
        const indices = (0, _utils.getParamValue)('sparseIndices', node, tensorMap, context);
        const shape = (0, _utils.getParamValue)('outputShape', node, tensorMap, context);
        const sparseValues = (0, _utils.getParamValue)('sparseValues', node, tensorMap, context);
        const defaultValue = (0, _utils.getParamValue)('defaultValue', node, tensorMap, context);
        return [tfOps.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ? defaultValue : tfOps.cast(defaultValue, sparseValues.dtype))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'slice_join';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core":"kSBl","@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"zdfJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'SparseFillEmptyRows':
      {
        const {
          outputIndices,
          outputValues,
          emptyRowIndicator,
          reverseIndexMap
        } = tfOps.sparse.sparseFillEmptyRows((0, _utils.getParamValue)('indices', node, tensorMap, context), (0, _utils.getParamValue)('values', node, tensorMap, context), (0, _utils.getParamValue)('denseShape', node, tensorMap, context), (0, _utils.getParamValue)('defaultValue', node, tensorMap, context));
        return [outputIndices, outputValues, emptyRowIndicator, reverseIndexMap];
      }

    case 'SparseReshape':
      {
        const {
          outputIndices,
          outputShape
        } = tfOps.sparse.sparseReshape((0, _utils.getParamValue)('inputIndices', node, tensorMap, context), (0, _utils.getParamValue)('inputShape', node, tensorMap, context), (0, _utils.getParamValue)('newShape', node, tensorMap, context));
        return [outputIndices, outputShape];
      }

    case 'SparseSegmentMean':
      {
        const outputData = tfOps.sparse.sparseSegmentMean((0, _utils.getParamValue)('data', node, tensorMap, context), (0, _utils.getParamValue)('indices', node, tensorMap, context), (0, _utils.getParamValue)('segmentIds', node, tensorMap, context));
        return [outputData];
      }

    case 'SparseSegmentSum':
      {
        const outputData = tfOps.sparse.sparseSegmentSum((0, _utils.getParamValue)('data', node, tensorMap, context), (0, _utils.getParamValue)('indices', node, tensorMap, context), (0, _utils.getParamValue)('segmentIds', node, tensorMap, context));
        return [outputData];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'sparse';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"Xups":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'FFT':
      {
        return [tfOps.fft((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'IFFT':
      {
        return [tfOps.ifft((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'RFFT':
      {
        return [tfOps.rfft((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    case 'IRFFT':
      {
        return [tfOps.irfft((0, _utils.getParamValue)('x', node, tensorMap, context))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'spectral';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"aetQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'StringNGrams':
      {
        const {
          nGrams,
          nGramsSplits
        } = tfOps.string.stringNGrams((0, _utils.getParamValue)('data', node, tensorMap, context), (0, _utils.getParamValue)('dataSplits', node, tensorMap, context), (0, _utils.getParamValue)('separator', node, tensorMap, context), (0, _utils.getParamValue)('nGramWidths', node, tensorMap, context), (0, _utils.getParamValue)('leftPad', node, tensorMap, context), (0, _utils.getParamValue)('rightPad', node, tensorMap, context), (0, _utils.getParamValue)('padWidth', node, tensorMap, context), (0, _utils.getParamValue)('preserveShortSequences', node, tensorMap, context));
        return [nGrams, nGramsSplits];
      }

    case 'StringSplit':
      {
        const {
          indices,
          values,
          shape
        } = tfOps.string.stringSplit((0, _utils.getParamValue)('input', node, tensorMap, context), (0, _utils.getParamValue)('delimiter', node, tensorMap, context), (0, _utils.getParamValue)('skipEmpty', node, tensorMap, context));
        return [indices, values, shape];
      }

    case 'StringToHashBucketFast':
      {
        const output = tfOps.string.stringToHashBucketFast((0, _utils.getParamValue)('input', node, tensorMap, context), (0, _utils.getParamValue)('numBuckets', node, tensorMap, context));
        return [output];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'string';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"m1J1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORY = exports.executeOp = void 0;

var tfOps = _interopRequireWildcard(require("@tensorflow/tfjs-core/dist/ops/ops_for_converter"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist
const executeOp = (node, tensorMap, context) => {
  switch (node.op) {
    case 'Cast':
      {
        return [tfOps.cast((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
      }

    case 'ExpandDims':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        return [tfOps.expandDims((0, _utils.getParamValue)('x', node, tensorMap, context), axis)];
      }

    case 'Squeeze':
      {
        const axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
        return [tfOps.squeeze((0, _utils.getParamValue)('x', node, tensorMap, context), axis)];
      }

    case 'Reshape':
      {
        return [tfOps.reshape((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('shape', node, tensorMap, context))];
      }

    case 'MirrorPad':
      {
        return [tfOps.mirrorPad((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('padding', node, tensorMap, context), (0, _utils.getParamValue)('mode', node, tensorMap, context))];
      }

    case 'PadV2':
    case 'Pad':
      {
        return [tfOps.pad((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('padding', node, tensorMap, context), (0, _utils.getParamValue)('constantValue', node, tensorMap, context))];
      }

    case 'SpaceToBatchND':
      {
        const blockShape = (0, _utils.getParamValue)('blockShape', node, tensorMap, context);
        const paddings = (0, _utils.getParamValue)('paddings', node, tensorMap, context);
        return [tfOps.spaceToBatchND((0, _utils.getParamValue)('x', node, tensorMap, context), blockShape, paddings)];
      }

    case 'BatchToSpaceND':
      {
        const blockShape = (0, _utils.getParamValue)('blockShape', node, tensorMap, context);
        const crops = (0, _utils.getParamValue)('crops', node, tensorMap, context);
        return [tfOps.batchToSpaceND((0, _utils.getParamValue)('x', node, tensorMap, context), blockShape, crops)];
      }

    case 'DepthToSpace':
      {
        const blockSize = (0, _utils.getParamValue)('blockSize', node, tensorMap, context);
        const dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        return [tfOps.depthToSpace((0, _utils.getParamValue)('x', node, tensorMap, context), blockSize, dataFormat)];
      }

    case 'BroadcastTo':
      {
        return [tfOps.broadcastTo((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('shape', node, tensorMap, context))];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};

exports.executeOp = executeOp;
const CATEGORY = 'transformation';
exports.CATEGORY = CATEGORY;
},{"@tensorflow/tfjs-core/dist/ops/ops_for_converter":"bcFm","./utils":"eBau"}],"hN1H":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.executeOp = executeOp;

var tfc = _interopRequireWildcard(require("@tensorflow/tfjs-core"));

var _node_value_impl = require("./custom_op/node_value_impl");

var _register = require("./custom_op/register");

var arithmetic = _interopRequireWildcard(require("./executors/arithmetic_executor"));

var basicMath = _interopRequireWildcard(require("./executors/basic_math_executor"));

var control = _interopRequireWildcard(require("./executors/control_executor"));

var convolution = _interopRequireWildcard(require("./executors/convolution_executor"));

var creation = _interopRequireWildcard(require("./executors/creation_executor"));

var dynamic = _interopRequireWildcard(require("./executors/dynamic_executor"));

var evaluation = _interopRequireWildcard(require("./executors/evaluation_executor"));

var graph = _interopRequireWildcard(require("./executors/graph_executor"));

var hashTable = _interopRequireWildcard(require("./executors/hash_table_executor"));

var image = _interopRequireWildcard(require("./executors/image_executor"));

var logical = _interopRequireWildcard(require("./executors/logical_executor"));

var matrices = _interopRequireWildcard(require("./executors/matrices_executor"));

var normalization = _interopRequireWildcard(require("./executors/normalization_executor"));

var reduction = _interopRequireWildcard(require("./executors/reduction_executor"));

var sliceJoin = _interopRequireWildcard(require("./executors/slice_join_executor"));

var sparse = _interopRequireWildcard(require("./executors/sparse_executor"));

var spectral = _interopRequireWildcard(require("./executors/spectral_executor"));

var string = _interopRequireWildcard(require("./executors/string_executor"));

var transformation = _interopRequireWildcard(require("./executors/transformation_executor"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Executes the op defined by the node object.
 * @param node
 * @param tensorMap contains tensors for executed nodes and weights
 * @param context contains tensors and information for running the current node.
 * @param resourceManager Optional. Contains global resources of the model.
 */
function executeOp(node, tensorMap, context, resourceManager) {
  const value = ((node, tensorMap, context) => {
    switch (node.category) {
      case 'arithmetic':
        return tfc.tidy(() => arithmetic.executeOp(node, tensorMap, context));

      case 'basic_math':
        return tfc.tidy(() => basicMath.executeOp(node, tensorMap, context));

      case 'control':
        return control.executeOp(node, tensorMap, context);

      case 'convolution':
        return tfc.tidy(() => convolution.executeOp(node, tensorMap, context));

      case 'creation':
        return tfc.tidy(() => creation.executeOp(node, tensorMap, context));

      case 'dynamic':
        return dynamic.executeOp(node, tensorMap, context);

      case 'evaluation':
        return tfc.tidy(() => evaluation.executeOp(node, tensorMap, context));

      case 'image':
        return tfc.tidy(() => image.executeOp(node, tensorMap, context));

      case 'graph':
        return tfc.tidy(() => graph.executeOp(node, tensorMap, context));

      case 'logical':
        return tfc.tidy(() => logical.executeOp(node, tensorMap, context));

      case 'matrices':
        return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));

      case 'normalization':
        return tfc.tidy(() => normalization.executeOp(node, tensorMap, context));

      case 'reduction':
        return tfc.tidy(() => reduction.executeOp(node, tensorMap, context));

      case 'slice_join':
        return tfc.tidy(() => sliceJoin.executeOp(node, tensorMap, context));

      case 'sparse':
        return tfc.tidy(() => sparse.executeOp(node, tensorMap, context));

      case 'spectral':
        return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));

      case 'string':
        return tfc.tidy(() => string.executeOp(node, tensorMap, context));

      case 'transformation':
        return tfc.tidy(() => transformation.executeOp(node, tensorMap, context));

      case 'hash_table':
        return hashTable.executeOp(node, tensorMap, context, resourceManager);

      case 'custom':
        const opMapper = (0, _register.getRegisteredOp)(node.op);

        if (opMapper && opMapper.customExecutor) {
          return opMapper.customExecutor(new _node_value_impl.NodeValueImpl(node, tensorMap, context));
        } else {
          throw TypeError(`Custom op ${node.op} is not registered.`);
        }

      default:
        throw TypeError(`Unknown op '${node.op}'. File an issue at ` + `https://github.com/tensorflow/tfjs/issues so we can add it` + `, or register a custom execution with tf.registerOp()`);
    }
  })(node, tensorMap, context);

  if (tfc.util.isPromise(value)) {
    return value.then(data => [].concat(data));
  }

  return [].concat(value);
}
},{"@tensorflow/tfjs-core":"kSBl","./custom_op/node_value_impl":"N9rI","./custom_op/register":"LNan","./executors/arithmetic_executor":"WLe9","./executors/basic_math_executor":"RUi0","./executors/control_executor":"vqcE","./executors/convolution_executor":"I0Jg","./executors/creation_executor":"S7Bc","./executors/dynamic_executor":"DfzY","./executors/evaluation_executor":"j06l","./executors/graph_executor":"c6LN","./executors/hash_table_executor":"qYIJ","./executors/image_executor":"P01n","./executors/logical_executor":"fJEP","./executors/matrices_executor":"Rlpz","./executors/normalization_executor":"Pftj","./executors/reduction_executor":"ftj2","./executors/slice_join_executor":"inkj","./executors/sparse_executor":"zdfJ","./executors/spectral_executor":"Xups","./executors/string_executor":"aetQ","./executors/transformation_executor":"m1J1"}],"TN5w":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExecutionContext = void 0;

/**
 * ExecutionContext captures the runtime environment of the node. It keeps
 * track of the current frame and iteration for the control flow ops.
 *
 * For example, typical Dynamic RNN model may contain loops, for which
 * TensorFlow will generate graphs with Enter/Exit nodes to control the
 * current execution frame, and NextIteration Nodes for iteration id increment.
 * For model with branch logic, TensorFLow will generate Switch/Merge ops.
 */
class ExecutionContext {
  constructor(weightMap = {}, tensorArrayMap = {}, tensorListMap = {}, functionMap = {}) {
    this.weightMap = weightMap;
    this.tensorArrayMap = tensorArrayMap;
    this.tensorListMap = tensorListMap;
    this.functionMap = functionMap;
    this.rootContext = {
      id: 0,
      frameName: '',
      iterationId: 0
    };
    this.contexts = [this.rootContext];
    this.lastId = 0;
    this.generateCurrentContextIds();
  }

  newFrame(id, frameName) {
    return {
      id,
      frameName,
      iterationId: 0
    };
  }
  /**
   * Set the current context
   * @param contexts: ExecutionContextInfo[] the current path of execution
   * frames
   */


  set currentContext(contexts) {
    if (this.contexts !== contexts) {
      this.contexts = contexts;
      this.generateCurrentContextIds();
    }
  }

  get currentContext() {
    return this.contexts;
  }
  /**
   * Returns the current context in string format.
   */


  get currentContextId() {
    return this._currentContextIds[0];
  }
  /**
   * Returns the current context and all parent contexts in string format.
   * This allow access to the nodes in the current and parent frames.
   */


  get currentContextIds() {
    return this._currentContextIds;
  }

  generateCurrentContextIds() {
    const names = [];

    for (let i = 0; i < this.contexts.length - 1; i++) {
      const contexts = this.contexts.slice(0, this.contexts.length - i);
      names.push(this.contextIdforContexts(contexts));
    }

    names.push('');
    this._currentContextIds = names;
  }

  contextIdforContexts(contexts) {
    return contexts ? contexts.map(context => context.id === 0 && context.iterationId === 0 ? '' : `${context.frameName}-${context.iterationId}`).join('/') : '';
  }
  /**
   * Enter a new frame, a new context is pushed on the current context list.
   * @param frameId new frame id
   */


  enterFrame(frameId) {
    if (this.contexts) {
      this.lastId++;
      this.contexts = this.contexts.slice();
      this.contexts.push(this.newFrame(this.lastId, frameId));

      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));
    }
  }
  /**
   * Exit the current frame, the last context is removed from the current
   * context list.
   */


  exitFrame() {
    if (this.contexts && this.contexts.length > 1) {
      this.contexts = this.contexts.slice();
      this.contexts.splice(-1);
      this.currentContextIds.shift();
    } else {
      throw new Error('Cannot exit frame, the context is empty');
    }
  }
  /**
   * Enter the next iteration of a loop, the iteration id of last context is
   * increased.
   */


  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      this.contexts = this.contexts.slice();
      this.lastId++;
      const context = Object.assign({}, this.contexts[this.contexts.length - 1]);
      context.iterationId += 1;
      context.id = this.lastId;
      this.contexts.splice(-1, 1, context);

      this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else {
      throw new Error('Cannot increase frame iteration, the context is empty');
    }
  }

  getWeight(name) {
    return this.weightMap[name];
  }

  addTensorArray(tensorArray) {
    this.tensorArrayMap[tensorArray.id] = tensorArray;
  }

  getTensorArray(id) {
    return this.tensorArrayMap[id];
  }

  addTensorList(tensorList) {
    this.tensorListMap[tensorList.id] = tensorList;
  }

  getTensorList(id) {
    return this.tensorListMap[id];
  }

  dispose(keepIds) {
    for (const key in this.tensorArrayMap) {
      this.tensorArrayMap[key].clearAndClose(keepIds);
    }

    for (const key in this.tensorListMap) {
      this.tensorListMap[key].clearAndClose(keepIds);
    }
  }

}

exports.ExecutionContext = ExecutionContext;
},{}],"dNrC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExecutionSubgraph = getExecutionSubgraph;
exports.getNodesInTopologicalOrder = getNodesInTopologicalOrder;
exports.isControlFlow = isControlFlow;
exports.isDynamicShape = isDynamicShape;
exports.isHashTable = isHashTable;

var _utils = require("../operations/executors/utils");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Given graph inputs and desired outputs, find the minimal set of nodes
 * to execute in order to compute the outputs. In addition return other useful
 * info such:
 * - Missing inputs needed to compute the output.
 * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).
 * - Alternative inputs in order to avoid async (dynamic op) execution.
 */
function getExecutionSubgraph(inputs, outputs, weightMap, initNodes) {
  const usedNodes = new Set();
  const missingInputs = [];
  let dynamicNode = null;
  let syncInputs = null; // Start with the outputs, going backwards and find all the nodes that are
  // needed to compute those outputs.

  const seen = new Set();
  const inputNodeNames = Object.keys(inputs).map(name => (0, _utils.parseNodeName)(name)[0]);
  let initNodeNames = [];

  if (initNodes != null) {
    initNodeNames = initNodes.map(node => (0, _utils.parseNodeName)(node.name)[0]);
  }

  const frontier = [...outputs];

  while (frontier.length > 0) {
    const node = frontier.pop();

    if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {
      if (dynamicNode == null) {
        dynamicNode = node;
        syncInputs = dynamicNode.children.map(child => child.name).filter(name => usedNodes.has(name));
      }
    }

    usedNodes.add(node.name); // Weights are dead end since we already have their values.

    if (weightMap[node.name] != null) {
      continue;
    } // This node is a dead end since it's one of the user-provided inputs.


    if (inputNodeNames.indexOf(node.name) !== -1) {
      continue;
    } // This node is a dead end since it doesn't have any inputs.


    if (initNodeNames.indexOf(node.name) !== -1) {
      continue;
    }

    if (node.inputs.length === 0) {
      missingInputs.push(node.name);
      continue;
    }

    node.inputs.forEach(input => {
      // Don't add to the frontier if it is already there.
      if (seen.has(input.name)) {
        return;
      }

      seen.add(input.name);
      frontier.push(input);
    });
  }

  return {
    inputs,
    outputs,
    usedNodes,
    missingInputs,
    dynamicNode,
    syncInputs
  };
}
/**
 * Given the execution info, return a list of nodes in topological order that
 * need to be executed to compute the output.
 */


function getNodesInTopologicalOrder(graph, weightMap, executionInfo) {
  const {
    usedNodes,
    inputs
  } = executionInfo;
  const frontier = [];
  const inputNodes = Object.keys(inputs).map(name => (0, _utils.parseNodeName)(name)[0]).map(name => graph.nodes[name]);
  const initNodes = graph.initNodes;
  inputNodes.forEach(input => {
    if (usedNodes.has(input.name)) {
      frontier.push(input);
    }
  });
  graph.weights.forEach(weight => {
    if (usedNodes.has(weight.name)) {
      frontier.push(weight);
    }
  });

  if (initNodes != null) {
    initNodes.forEach(node => {
      if (usedNodes.has(node.name)) {
        frontier.push(node);
      }
    });
  }

  const seen = new Set();
  const orderedNodes = [];

  while (frontier.length > 0) {
    const node = frontier.pop();
    seen.add(node.name);

    if (!weightMap[node.name]) {
      orderedNodes.push(node);
    }

    node.children.forEach(child => {
      if (!seen.has(child.name) && usedNodes.has(child.name) && child.inputs.every(input => seen.has(input.name))) {
        frontier.push(child);
      }
    });
  }

  return orderedNodes;
}

const CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf', 'StatelessWhile', 'if', 'While'];
const DYNAMIC_SHAPE_OPS = ['NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'];
const HASH_TABLE_OPS = ['HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2', 'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2'];

function isControlFlow(node) {
  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;
}

function isDynamicShape(node) {
  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;
}

function isHashTable(node) {
  return HASH_TABLE_OPS.indexOf(node.op) >= 0;
}
},{"../operations/executors/utils":"eBau"}],"tpB1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphExecutor = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _utils = require("../operations/executors/utils");

var _operation_executor = require("../operations/operation_executor");

var _execution_context = require("./execution_context");

var _model_analysis = require("./model_analysis");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class GraphExecutor {
  /**
   *
   * @param graph Graph the model or function graph to be executed.
   * @param parent When building function exector you need to set the parent
   * executor. Since the weights and function executor maps are set at parant
   * level, that function executor can access the function maps and weight maps
   * through the parent.
   */
  constructor(graph, parent) {
    this.graph = graph;
    this.parent = parent;
    this.compiledMap = new Map();
    this._weightMap = {};
    this.SEPERATOR = ',';
    this._functions = {};
    this._functionExecutorMap = {};
    this._outputs = graph.outputs;
    this._inputs = graph.inputs;
    this._initNodes = graph.initNodes;
    this._signature = graph.signature;
    this._functions = graph.functions; // create sub-graph executors

    if (graph.functions != null) {
      Object.keys(graph.functions).forEach(name => {
        this._functionExecutorMap[name] = new GraphExecutor(graph.functions[name], this);
      });
    }
  }

  get weightIds() {
    return this.parent ? this.parent.weightIds : this._weightIds;
  }

  get functionExecutorMap() {
    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
  }

  get weightMap() {
    return this.parent ? this.parent.weightMap : this._weightMap;
  }

  set weightMap(weightMap) {
    const weightIds = Object.keys(weightMap).map(key => weightMap[key].map(tensor => tensor.id));
    this._weightIds = [].concat(...weightIds);
    this._weightMap = weightMap;
  }
  /**
   * Set `ResourceManager` shared by executors of a model.
   * @param resourceManager: `ResourceManager` of the `GraphModel`.
   */


  set resourceManager(resourceManager) {
    this._resourceManager = resourceManager;
  }

  get inputs() {
    return this._inputs.map(node => {
      return {
        name: node.name,
        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,
        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined
      };
    });
  }

  get outputs() {
    return this._outputs.map(node => {
      return {
        name: node.name,
        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,
        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined
      };
    });
  }

  get inputNodes() {
    return this._inputs.map(node => node.signatureKey || node.name);
  }

  get outputNodes() {
    return this._outputs.map(node => {
      const name = node.signatureKey || node.name;
      return node.defaultOutput ? `${name}:${node.defaultOutput}` : name;
    });
  }

  get functions() {
    return Object.keys(this._functions).reduce((map, key) => {
      map[key] = this._functions[key].signature;
      return map;
    }, {});
  }

  getCompilationKey(inputs, outputs) {
    const sortedInputs = inputs.map(node => node.name).sort();
    const sortedOutputs = outputs.map(node => node.name).sort();
    return sortedInputs.join(this.SEPERATOR) + '--' + sortedOutputs.join(this.SEPERATOR);
  }
  /**
   * Compiles the inference graph and returns the minimal set of nodes that are
   * required for execution, in the correct execution order.
   */


  compile(inputs, outputs) {
    const executionInfo = (0, _model_analysis.getExecutionSubgraph)(inputs, outputs, this.weightMap, this._initNodes);
    const {
      missingInputs,
      dynamicNode,
      syncInputs
    } = executionInfo;

    if (dynamicNode != null) {
      throw new Error(`This execution contains the node '${dynamicNode.name}', which has ` + `the dynamic op '${dynamicNode.op}'. Please use ` + `model.executeAsync() instead. Alternatively, to avoid the ` + `dynamic ops, specify the inputs [${syncInputs}]`);
    }

    if (missingInputs.length > 0) {
      const outNames = outputs.map(n => n.name);
      const inNames = Object.keys(inputs);
      throw new Error(`Cannot compute the outputs [${outNames}] from the provided inputs ` + `[${inNames}]. Missing the following inputs: [${missingInputs}]`);
    }

    return (0, _model_analysis.getNodesInTopologicalOrder)(this.graph, this.weightMap, executionInfo);
  }
  /**
   * Executes the inference for given input tensors.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs Optional. output node name from the Tensorflow model, if
   * no outputs are specified, the default outputs of the model would be used.
   * You can inspect intermediate nodes of the model by adding them to the
   * outputs array.
   */


  execute(inputs, outputs) {
    inputs = this.mapInputs(inputs);
    const names = Object.keys(inputs).sort();
    this.checkInputs(inputs);
    this.checkInputShapeAndType(inputs);
    outputs = this.mapOutputs(outputs);
    this.checkOutputs(outputs);
    const inputNodes = names.map(name => this.graph.nodes[(0, _utils.parseNodeName)(name)[0]]);
    const outputNodeNames = outputs.map(name => (0, _utils.parseNodeName)(name)[0]);
    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]); // If no outputs are specified, then use the default outputs of the model.

    if (outputNodes.length === 0) {
      outputNodes = this._outputs;
    }

    const compilationKey = this.getCompilationKey(inputNodes, outputNodes); // Do nothing if the compiled graph cache contains the input.

    let orderedNodes = this.compiledMap.get(compilationKey);

    if (orderedNodes == null) {
      orderedNodes = this.compile(inputs, outputNodes);
      this.compiledMap.set(compilationKey, orderedNodes);
    }

    const tensorArrayMap = {};
    const tensorListMap = {};
    return (0, _tfjsCore.tidy)(() => {
      const context = new _execution_context.ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);
      const tensorsMap = Object.assign({}, this.weightMap);
      Object.keys(inputs).forEach(name => {
        const [nodeName, index] = (0, _utils.parseNodeName)(name);
        const tensors = [];
        tensors[index] = inputs[name];
        tensorsMap[nodeName] = tensors;
      });
      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);
      const intermediateTensorConsumerCount = {};

      for (let i = 0; i < orderedNodes.length; i++) {
        const node = orderedNodes[i];

        if (!tensorsMap[node.name]) {
          const tensors = (0, _operation_executor.executeOp)(node, tensorsMap, context, this._resourceManager);

          if (_tfjsCore.util.isPromise(tensors)) {
            throw new Error(`The execution of the op '${node.op}' returned a promise. ` + `Please use model.executeAsync() instead.`);
          }

          tensorsMap[node.name] = tensors;
          this.checkTensorForDisposal(node.name, node, tensorsMap, context, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount);
        }
      } // dispose the context for the root executor


      if (this.parent == null) {
        context.dispose(tensorsToKeep);
      }

      return outputs.map(name => (0, _utils.getTensor)(name, tensorsMap, context));
    });
  }

  getFrozenTensorIds(tensorMap) {
    const ids = [].concat.apply([], Object.keys(tensorMap).map(key => tensorMap[key]).map(tensors => tensors.map(tensor => tensor.id)));
    return new Set(ids);
  }

  checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount) {
    // Skip output nodes and any control flow nodes, since its dependency is
    // tricky to track correctly.
    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {
      return;
    }

    tensorMap[nodeName].forEach(tensor => {
      if (tensor != null) {
        intermediateTensorConsumerCount[tensor.id] = (intermediateTensorConsumerCount[tensor.id] || 0) + node.children.length;
      }
    });
    node.inputs.forEach(input => {
      // Skip any control flow nodes, since its dependency is tricky to track
      // correctly.
      if (input.category !== 'control') {
        const tensors = (0, _utils.getTensorsForCurrentContenxt)(input.name, tensorMap, context);

        if (tensors != null) {
          tensors.forEach(tensor => {
            if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {
              const count = intermediateTensorConsumerCount[tensor.id];

              if (count === 1) {
                tensor.dispose();
                delete intermediateTensorConsumerCount[tensor.id];
              } else if (count != null) {
                // only intermediate nodes has count set, inputs and weights are
                // not.
                intermediateTensorConsumerCount[tensor.id]--;
              }
            }
          });
        }
      }
    });
  }
  /**
   * Executes the inference for given input tensors in Async fashion.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs output node name from the Tensorflow model, if no outputs
   * are specified, the default outputs of the model would be used. You can
   * inspect intermediate nodes of the model by adding them to the outputs
   * array.
   */


  async executeAsync(inputs, outputs) {
    return this._executeAsync(inputs, outputs);
  }
  /**
   * Executes the inference for given input tensors in Async fashion.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs Optional. output node name from the Tensorflow model,
   * if no outputs are specified, the default outputs of the model would be
   * used. You can inspect intermediate nodes of the model by adding them to the
   * outputs array.
   * @param isFunctionExecution Optional. Flag for executing a function.
   * @param tensorArrayMap Optional, global TensorArray map by id. Used for
   * function execution.
   * @param tensorArrayMap Optinal global TensorList map by id. Used for
   * function execution.
   */


  async _executeAsync(inputs, outputs, isFunctionExecution = false, tensorArrayMap = {}, tensorListMap = {}) {
    if (!isFunctionExecution) {
      inputs = this.mapInputs(inputs);
      this.checkInputs(inputs);
      this.checkInputShapeAndType(inputs);
      outputs = this.mapOutputs(outputs);
      this.checkOutputs(outputs);
    }

    const context = new _execution_context.ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap); // Graph with control flow op requires runtime evaluation of the execution
    // order, while without control flow the execution order is pre-determined
    // in the compile method.

    const tensorMap = await this.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);
    const results = outputs.map(name => (0, _utils.getTensor)(name, tensorMap, context)); // dispose all the intermediate tensors

    const outputIds = results.map(t => t.id);
    const inputIds = Object.keys(inputs).map(name => inputs[name].id);
    const keepIds = new Set([...outputIds, ...inputIds, ...this.weightIds]);
    Object.keys(tensorMap).forEach(key => {
      const tensorArray = tensorMap[key];
      tensorArray.forEach(tensor => {
        if (tensor && !tensor.kept && !tensor.isDisposed && !keepIds.has(tensor.id)) {
          tensor.dispose();
        }
      });
    }); // dispose the context for the root executor

    if (this.parent == null) {
      context.dispose(keepIds);
    }

    return results;
  }

  async executeFunctionAsync(inputs, tensorArrayMap, tensorListMap) {
    const mappedInputs = inputs.reduce((map, tensor, index) => {
      map[this.inputs[index].name] = tensor;
      return map;
    }, {});
    return this._executeAsync(mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);
  }
  /**
   * When there are control flow nodes in the graph, the graph execution use
   * ExecutionContext to keep track of the frames and loop iterators.
   * @param inputs placeholder tensors for the graph.
   * @param context the execution context object for current execution.
   * @param outputNames Optional. output node name from the Tensorflow model,
   * if no outputs are specified, the default outputs of the model would be
   * used. You can inspect intermediate nodes of the model by adding them to the
   * outputs array.
   * @param isFunctionExecution Flag for executing a function.
   */


  async executeWithControlFlow(inputs, context, outputNames, isFunctionExecution) {
    const names = Object.keys(inputs);
    const inputNodes = names.map(name => this.graph.nodes[(0, _utils.parseNodeName)(name)[0]]);
    const outputNodeNames = outputNames.map(name => (0, _utils.parseNodeName)(name)[0]);
    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]); // If no outputs are specified, then use the default outputs of the model.

    if (outputNodes.length === 0) {
      outputNodes = this._outputs;
    }

    const {
      usedNodes,
      missingInputs,
      dynamicNode,
      syncInputs
    } = (0, _model_analysis.getExecutionSubgraph)(inputs, outputNodes, this.weightMap, this._initNodes); // First nodes to execute include inputNodes, weights, and initNodes.

    const stack = [...inputNodes, ...this.graph.weights, ...(this._initNodes || [])].map(node => {
      return {
        node,
        contexts: context.currentContext
      };
    });
    const tensorsMap = Object.assign({}, this.weightMap);
    Object.keys(inputs).forEach(name => {
      const [nodeName, index] = (0, _utils.parseNodeName)(name);
      const tensors = [];
      tensors[index] = inputs[name];
      tensorsMap[nodeName] = tensors;
    });
    const intermediateTensorConsumerCount = {};
    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);
    const added = {};

    while (stack.length > 0) {
      const promises = this.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount, usedNodes);
      await Promise.all(promises);
    }

    if (dynamicNode == null && !isFunctionExecution) {
      console.warn(`This model execution did not contain any nodes with control flow ` + `or dynamic output shapes. You can use model.execute() instead.`);
    }

    const missingOutputs = outputNodes.filter(node => !(0, _model_analysis.isControlFlow)(node) && !(0, _utils.getTensor)(node.name, tensorsMap, context)).map(node => node.name);

    if (missingOutputs.length > 0) {
      let alternativeMsg = '';

      if (dynamicNode != null) {
        alternativeMsg = `Alternatively, to avoid the dynamic ops, use model.execute() ` + `and specify the inputs [${syncInputs}]`;
      }

      throw new Error(`Cannot compute the outputs [${missingOutputs}] from the provided ` + `inputs [${names}]. Consider providing the following inputs: ` + `[${missingInputs}]. ${alternativeMsg}`);
    }

    return tensorsMap;
  }

  processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes) {
    const promises = [];

    while (stack.length > 0) {
      const item = stack.pop();
      context.currentContext = item.contexts;
      let nodeName = ''; // The tensor of the Enter op with isConstant set should be set
      // in the parent scope, so it will be available as constant for the
      // whole loop.

      if (item.node.op === 'Enter' && (0, _utils.getParamValue)('isConstant', item.node, tensorMap, context)) {
        [nodeName] = (0, _utils.getNodeNameAndIndex)(item.node.name, context);
      } // only process nodes that are not in the tensorMap yet, this include
      // inputNodes and internal initNodes.


      if (tensorMap[item.node.name] == null) {
        const tensors = (0, _operation_executor.executeOp)(item.node, tensorMap, context, this._resourceManager);

        if (!nodeName) {
          [nodeName] = (0, _utils.getNodeNameAndIndex)(item.node.name, context);
        }

        const currentContext = context.currentContext;

        if (_tfjsCore.util.isPromise(tensors)) {
          promises.push(tensors.then(t => {
            tensorMap[nodeName] = t;
            context.currentContext = currentContext;
            this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);
            this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
            return t;
          }));
        } else {
          tensorMap[nodeName] = tensors;
          this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);
          this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
        }
      } else {
        this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
      }
    }

    return promises;
  }

  processChildNodes(node, stack, context, tensorMap, added, usedNodes) {
    node.children.forEach(childNode => {
      const [nodeName] = (0, _utils.getNodeNameAndIndex)(childNode.name, context);

      if (added[nodeName] || !usedNodes.has(childNode.name)) {
        return;
      } // Merge op can be pushed if any of its inputs has value.


      if (childNode.op === 'Merge') {
        if (childNode.inputNames.some(name => {
          return !!(0, _utils.getTensor)(name, tensorMap, context);
        })) {
          added[nodeName] = true;
          stack.push({
            contexts: context.currentContext,
            node: childNode
          });
        }
      } else // Otherwise all inputs must to have value.
        if (childNode.inputNames.every(name => {
          return !!(0, _utils.getTensor)(name, tensorMap, context);
        })) {
          added[nodeName] = true;
          stack.push({
            contexts: context.currentContext,
            node: childNode
          });
        }
    });
  }
  /**
   * Releases the memory used by the weight tensors.
   */


  dispose() {
    Object.keys(this.weightMap).forEach(key => this.weightMap[key].forEach(tensor => tensor.dispose()));
  }

  checkInputShapeAndType(inputs) {
    Object.keys(inputs).forEach(name => {
      const input = inputs[name];
      const [nodeName] = (0, _utils.parseNodeName)(name);
      const node = this.graph.nodes[nodeName];

      if (node.attrParams['shape'] && node.attrParams['shape'].value) {
        const shape = node.attrParams['shape'].value;
        const match = shape.length === input.shape.length && input.shape.every((dim, index) => shape[index] === -1 || shape[index] === dim);

        _tfjsCore.util.assert(match, () => `The shape of dict['${node.name}'] provided in ` + `model.execute(dict) must be [${shape}], but was ` + `[${input.shape}]`);
      }

      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {
        _tfjsCore.util.assert(input.dtype === node.attrParams['dtype'].value, () => `The dtype of dict['${node.name}'] provided in ` + `model.execute(dict) must be ` + `${node.attrParams['dtype'].value}, but was ${input.dtype}`);
      }
    });
  }

  mapInputs(inputs) {
    const result = {};

    for (const inputName in inputs) {
      if (this._signature != null && this._signature.inputs != null && this._signature.inputs[inputName] != null) {
        const tensor = this._signature.inputs[inputName];
        result[tensor.name] = inputs[inputName];
      } else {
        result[inputName] = inputs[inputName];
      }
    }

    return result;
  }

  checkInputs(inputs) {
    const notInGraph = Object.keys(inputs).filter(name => {
      const [nodeName] = (0, _utils.parseNodeName)(name);
      return this.graph.nodes[nodeName] == null;
    });

    if (notInGraph.length > 0) {
      throw new Error(`The dict provided in model.execute(dict) has ` + `keys: [${notInGraph}] that are not part of graph`);
    }
  }

  mapOutputs(outputs) {
    return outputs.map(name => {
      if (this._signature != null && this._signature.outputs != null && this._signature.outputs[name] != null) {
        const tensor = this._signature.outputs[name];
        return tensor.name;
      }

      return name;
    }, {});
  }

  checkOutputs(outputs) {
    outputs.forEach(name => {
      const [normalizedName] = (0, _utils.parseNodeName)(name);

      if (!this.graph.nodes[normalizedName]) {
        throw new Error(`The output '${name}' is not found in the graph`);
      }
    });
  }

}

exports.GraphExecutor = GraphExecutor;
},{"@tensorflow/tfjs-core":"kSBl","../operations/executors/utils":"eBau","../operations/operation_executor":"hN1H","./execution_context":"TN5w","./model_analysis":"dNrC"}],"F3Mj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResourceManager = void 0;

/**
 * Contains global resources of a model.
 */
class ResourceManager {
  constructor(hashTableNameToHandle = {}, hashTableMap = {}) {
    this.hashTableNameToHandle = hashTableNameToHandle;
    this.hashTableMap = hashTableMap;
  }
  /**
   * Register a `HashTable` in the resource manager.
   *
   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,
   * where id is the table handle tensor's id.
   *
   * @param name Op node name that creates the `HashTable`.
   * @param hashTable The `HashTable` to be added to resource manager.
   */


  addHashTable(name, hashTable) {
    this.hashTableNameToHandle[name] = hashTable.handle;
    this.hashTableMap[hashTable.id] = hashTable;
  }
  /**
   * Get the table handle by node name.
   * @param name Op node name that creates the `HashTable`. This name is also
   *     used in the inputs list of lookup and import `HashTable` ops.
   */


  getHashTableHandleByName(name) {
    return this.hashTableNameToHandle[name];
  }
  /**
   * Get the actual `HashTable` by its handle tensor's id.
   * @param id The id of the handle tensor.
   */


  getHashTableById(id) {
    return this.hashTableMap[id];
  }
  /**
   * Dispose `ResourceManager`, including its hashTables and tensors in them.
   */


  dispose() {
    for (const key in this.hashTableMap) {
      this.hashTableMap[key].clearAndClose();
      delete this.hashTableMap[key];
    }

    for (const name in this.hashTableNameToHandle) {
      this.hashTableNameToHandle[name].dispose();
      delete this.hashTableNameToHandle[name];
    }
  }

}

exports.ResourceManager = ResourceManager;
},{}],"McTv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadGraphModel = loadGraphModel;
exports.GraphModel = exports.DEFAULT_MODEL_NAME = exports.TFHUB_SEARCH_PARAM = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _operation_mapper = require("../operations/operation_mapper");

var _graph_executor = require("./graph_executor");

var _resource_manager = require("./resource_manager");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TFHUB_SEARCH_PARAM = '?tfjs-format=file';
exports.TFHUB_SEARCH_PARAM = TFHUB_SEARCH_PARAM;
const DEFAULT_MODEL_NAME = 'model.json';
/**
 * A `tf.GraphModel` is a directed, acyclic graph built from a
 * SavedModel GraphDef and allows inference execution.
 *
 * A `tf.GraphModel` can only be created by loading from a model converted from
 * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using
 * the command line converter tool and loaded via `tf.loadGraphModel`.
 *
 * @doc {heading: 'Models', subheading: 'Classes'}
 */

exports.DEFAULT_MODEL_NAME = DEFAULT_MODEL_NAME;

class GraphModel {
  /**
   * @param modelUrl url for the model, or an `io.IOHandler`.
   * @param weightManifestUrl url for the weight file generated by
   * scripts/convert.py script.
   * @param requestOption options for Request, which allows to send credentials
   * and custom headers.
   * @param onProgress Optional, progress callback function, fired periodically
   * before the load is completed.
   */
  constructor(modelUrl, loadOptions = {}) {
    this.modelUrl = modelUrl;
    this.loadOptions = loadOptions;
    this.version = 'n/a';

    if (loadOptions == null) {
      this.loadOptions = {};
    }

    this.resourceManager = new _resource_manager.ResourceManager();
  } // Returns the version information for the tensorflow model GraphDef.


  get modelVersion() {
    return this.version;
  }

  get inputNodes() {
    return this.executor.inputNodes;
  }

  get outputNodes() {
    return this.executor.outputNodes;
  }

  get inputs() {
    return this.executor.inputs;
  }

  get outputs() {
    return this.executor.outputs;
  }

  get weights() {
    return this.executor.weightMap;
  }

  get metadata() {
    return this.artifacts.userDefinedMetadata;
  }

  get modelSignature() {
    return this.signature;
  }

  findIOHandler() {
    const path = this.modelUrl;

    if (path.load != null) {
      // Path is an IO Handler.
      this.handler = path;
    } else if (this.loadOptions.requestInit != null) {
      this.handler = _tfjsCore.io.browserHTTPRequest(path, this.loadOptions);
    } else {
      const handlers = _tfjsCore.io.getLoadHandlers(path, this.loadOptions);

      if (handlers.length === 0) {
        // For backward compatibility: if no load handler can be found,
        // assume it is a relative http path.
        handlers.push(_tfjsCore.io.browserHTTPRequest(path, this.loadOptions));
      } else if (handlers.length > 1) {
        throw new Error(`Found more than one (${handlers.length}) load handlers for ` + `URL '${[path]}'`);
      }

      this.handler = handlers[0];
    }
  }
  /**
   * Loads the model and weight files, construct the in memory weight map and
   * compile the inference graph.
   */


  async load() {
    this.findIOHandler();

    if (this.handler.load == null) {
      throw new Error('Cannot proceed with model loading because the IOHandler provided ' + 'does not have the `load` method implemented.');
    }

    const artifacts = await this.handler.load();
    return this.loadSync(artifacts);
  }
  /**
   * Synchronously construct the in memory weight map and
   * compile the inference graph. Also initialize hashtable if any.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */


  loadSync(artifacts) {
    this.artifacts = artifacts;
    const graph = this.artifacts.modelTopology;
    let signature;

    if (this.artifacts.userDefinedMetadata != null && this.artifacts.userDefinedMetadata.signature != null) {
      signature = // tslint:disable-next-line:no-any
      this.artifacts.userDefinedMetadata.signature;
    } else {
      signature = this.artifacts.signature;
    }

    this.signature = signature;
    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;

    const weightMap = _tfjsCore.io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);

    this.executor = new _graph_executor.GraphExecutor(_operation_mapper.OperationMapper.Instance.transformGraph(graph, this.signature));
    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap); // Attach a model-level resourceManager to each executor to share resources,
    // such as `HashTable`.

    this.executor.resourceManager = this.resourceManager;

    if (artifacts.modelInitializer != null && artifacts.modelInitializer.node != null) {
      const initializer = _operation_mapper.OperationMapper.Instance.transformGraph(artifacts.modelInitializer);

      this.initializer = new _graph_executor.GraphExecutor(initializer);
      this.initializer.weightMap = this.executor.weightMap; // Attach a model-level resourceManager to the initializer, the
      // hashTables created from when executing the initializer will be stored
      // in the resourceManager.

      this.initializer.resourceManager = this.resourceManager;
      this.initializer.executeAsync({}, []);
    }

    return true;
  }
  /**
   * Save the configuration and/or weights of the GraphModel.
   *
   * An `IOHandler` is an object that has a `save` method of the proper
   * signature defined. The `save` method manages the storing or
   * transmission of serialized data ("artifacts") that represent the
   * model's topology and weights onto or via a specific medium, such as
   * file downloads, local storage, IndexedDB in the web browser and HTTP
   * requests to a server. TensorFlow.js provides `IOHandler`
   * implementations for a number of frequently used saving mediums, such as
   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
   * for more details.
   *
   * This method also allows you to refer to certain types of `IOHandler`s
   * as URL-like string shortcuts, such as 'localstorage://' and
   * 'indexeddb://'.
   *
   * Example 1: Save `model`'s topology and weights to browser [local
   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
   * then load it back.
   *
   * ```js
   * const modelUrl =
   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
   * const model = await tf.loadGraphModel(modelUrl);
   * const zeros = tf.zeros([1, 224, 224, 3]);
   * model.predict(zeros).print();
   *
   * const saveResults = await model.save('localstorage://my-model-1');
   *
   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');
   * console.log('Prediction from loaded model:');
   * model.predict(zeros).print();
   * ```
   *
   * @param handlerOrURL An instance of `IOHandler` or a URL-like,
   * scheme-based string shortcut for `IOHandler`.
   * @param config Options for saving the model.
   * @returns A `Promise` of `SaveResult`, which summarizes the result of
   * the saving, such as byte sizes of the saved artifacts for the model's
   *   topology and weight values.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */


  async save(handlerOrURL, config) {
    if (typeof handlerOrURL === 'string') {
      const handlers = _tfjsCore.io.getSaveHandlers(handlerOrURL);

      if (handlers.length === 0) {
        throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);
      } else if (handlers.length > 1) {
        throw new Error(`Found more than one (${handlers.length}) save handlers for ` + `URL '${handlerOrURL}'`);
      }

      handlerOrURL = handlers[0];
    }

    if (handlerOrURL.save == null) {
      throw new Error('GraphModel.save() cannot proceed because the IOHandler ' + 'provided does not have the `save` attribute defined.');
    }

    return handlerOrURL.save(this.artifacts);
  }
  /**
   * Execute the inference for the input tensors.
   *
   * @param input The input tensors, when there is single input for the model,
   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,
   * inputs params should be in either `tf.Tensor`[] if the input order is
   * fixed, or otherwise NamedTensorMap format.
   *
   * For model with multiple inputs, we recommend you use NamedTensorMap as the
   * input type, if you use `tf.Tensor`[], the order of the array needs to
   * follow the
   * order of inputNodes array. @see {@link GraphModel.inputNodes}
   *
   * You can also feed any intermediate nodes using the NamedTensorMap as the
   * input type. For example, given the graph
   *    InputNode => Intermediate => OutputNode,
   * you can execute the subgraph Intermediate => OutputNode by calling
   *    model.execute('IntermediateNode' : tf.tensor(...));
   *
   * This is useful for models that uses tf.dynamic_rnn, where the intermediate
   * state needs to be fed manually.
   *
   * For batch inference execution, the tensors for each input need to be
   * concatenated together. For example with mobilenet, the required input shape
   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].
   * If we are provide a batched data of 100 images, the input tensor should be
   * in the shape of [100, 244, 244, 3].
   *
   * @param config Prediction configuration for specifying the batch size and
   * output node names. Currently the batch size option is ignored for graph
   * model.
   *
   * @returns Inference result tensors. The output would be single `tf.Tensor`
   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]
   * will be returned for model with multiple outputs.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */


  predict(inputs, config) {
    return this.execute(inputs, this.outputNodes);
  }

  normalizeInputs(inputs) {
    if (!(inputs instanceof _tfjsCore.Tensor) && !Array.isArray(inputs)) {
      // The input is already a NamedTensorMap.
      return inputs;
    }

    inputs = Array.isArray(inputs) ? inputs : [inputs];

    if (inputs.length !== this.inputNodes.length) {
      throw new Error('Input tensor count mismatch,' + `the graph model has ${this.inputNodes.length} placeholders, ` + `while there are ${inputs.length} input tensors.`);
    }

    return this.inputNodes.reduce((map, inputName, i) => {
      map[inputName] = inputs[i];
      return map;
    }, {});
  }

  normalizeOutputs(outputs) {
    outputs = outputs || this.outputNodes;
    return !Array.isArray(outputs) ? [outputs] : outputs;
  }
  /**
   * Executes inference for the model for given input tensors.
   * @param inputs tensor, tensor array or tensor map of the inputs for the
   * model, keyed by the input node names.
   * @param outputs output node name from the Tensorflow model, if no
   * outputs are specified, the default outputs of the model would be used.
   * You can inspect intermediate nodes of the model by adding them to the
   * outputs array.
   *
   * @returns A single tensor if provided with a single output or no outputs
   * are provided and there is only one default output, otherwise return a
   * tensor array. The order of the tensor array is the same as the outputs
   * if provided, otherwise the order of outputNodes attribute of the model.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */


  execute(inputs, outputs) {
    inputs = this.normalizeInputs(inputs);
    outputs = this.normalizeOutputs(outputs);
    const result = this.executor.execute(inputs, outputs);
    return result.length > 1 ? result : result[0];
  }
  /**
   * Executes inference for the model for given input tensors in async
   * fashion, use this method when your model contains control flow ops.
   * @param inputs tensor, tensor array or tensor map of the inputs for the
   * model, keyed by the input node names.
   * @param outputs output node name from the Tensorflow model, if no outputs
   * are specified, the default outputs of the model would be used. You can
   * inspect intermediate nodes of the model by adding them to the outputs
   * array.
   *
   * @returns A Promise of single tensor if provided with a single output or
   * no outputs are provided and there is only one default output, otherwise
   * return a tensor map.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */


  async executeAsync(inputs, outputs) {
    inputs = this.normalizeInputs(inputs);
    outputs = this.normalizeOutputs(outputs);
    const result = await this.executor.executeAsync(inputs, outputs);
    return result.length > 1 ? result : result[0];
  }

  convertTensorMapToTensorsMap(map) {
    return Object.keys(map).reduce((newMap, key) => {
      newMap[key] = [map[key]];
      return newMap;
    }, {});
  }
  /**
   * Releases the memory used by the weight tensors and resourceManager.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */


  dispose() {
    this.executor.dispose();

    if (this.initializer) {
      this.initializer.dispose();
    }

    this.resourceManager.dispose();
  }

}
/**
 * Load a graph model given a URL to the model definition.
 *
 * Example of loading MobileNetV2 from a URL and making a prediction with a
 * zeros input:
 *
 * ```js
 * const modelUrl =
 *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
 * const model = await tf.loadGraphModel(modelUrl);
 * const zeros = tf.zeros([1, 224, 224, 3]);
 * model.predict(zeros).print();
 * ```
 *
 * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with
 * a zeros input:
 *
 * ```js
 * const modelUrl =
 *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';
 * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});
 * const zeros = tf.zeros([1, 224, 224, 3]);
 * model.predict(zeros).print();
 * ```
 * @param modelUrl The url or an `io.IOHandler` that loads the model.
 * @param options Options for the HTTP request, which allows to send credentials
 *    and custom headers.
 *
 * @doc {heading: 'Models', subheading: 'Loading'}
 */


exports.GraphModel = GraphModel;

async function loadGraphModel(modelUrl, options = {}) {
  if (modelUrl == null) {
    throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' + 'or an IOHandler that loads the model');
  }

  if (options == null) {
    options = {};
  }

  if (options.fromTFHub) {
    if (modelUrl.load == null) {
      if (!modelUrl.endsWith('/')) {
        modelUrl = modelUrl + '/';
      }

      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;
    }
  }

  const model = new GraphModel(modelUrl, options);
  await model.load();
  return model;
}
},{"@tensorflow/tfjs-core":"kSBl","../operations/operation_mapper":"L12J","./graph_executor":"tpB1","./resource_manager":"F3Mj"}],"Mtvo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "GraphModel", {
  enumerable: true,
  get: function () {
    return _graph_model.GraphModel;
  }
});
Object.defineProperty(exports, "loadGraphModel", {
  enumerable: true,
  get: function () {
    return _graph_model.loadGraphModel;
  }
});
Object.defineProperty(exports, "deregisterOp", {
  enumerable: true,
  get: function () {
    return _register.deregisterOp;
  }
});
Object.defineProperty(exports, "registerOp", {
  enumerable: true,
  get: function () {
    return _register.registerOp;
  }
});
Object.defineProperty(exports, "version_converter", {
  enumerable: true,
  get: function () {
    return _version.version;
  }
});

var _graph_model = require("./executor/graph_model");

var _register = require("./operations/custom_op/register");

var _version = require("./version");
},{"./executor/graph_model":"McTv","./operations/custom_op/register":"LNan","./version":"KPnh"}],"CoLD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDetector = ze;
exports.util = exports.movenet = exports.calculators = exports.TrackerType = exports.SupportedModels = void 0;

var _pose = require("@mediapipe/pose");

var _tfjsConverter = require("@tensorflow/tfjs-converter");

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
    * @license
    * Copyright 2021 Google LLC. All Rights Reserved.
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    * =============================================================================
    */
var O = function (t, e) {
  return (O = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (t, e) {
    t.__proto__ = e;
  } || function (t, e) {
    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
  })(t, e);
};

function R(t, e) {
  function i() {
    this.constructor = t;
  }

  O(t, e), t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype, new i());
}

var C = function () {
  return (C = Object.assign || function (t) {
    for (var e, i = 1, n = arguments.length; i < n; i++) for (var r in e = arguments[i]) Object.prototype.hasOwnProperty.call(e, r) && (t[r] = e[r]);

    return t;
  }).apply(this, arguments);
};

function E(t, e, i, n) {
  return new (i || (i = Promise))(function (r, o) {
    function s(t) {
      try {
        h(n.next(t));
      } catch (t) {
        o(t);
      }
    }

    function a(t) {
      try {
        h(n.throw(t));
      } catch (t) {
        o(t);
      }
    }

    function h(t) {
      var e;
      t.done ? r(t.value) : (e = t.value, e instanceof i ? e : new i(function (t) {
        t(e);
      })).then(s, a);
    }

    h((n = n.apply(t, e || [])).next());
  });
}

function A(t, e) {
  var i,
      n,
      r,
      o,
      s = {
    label: 0,
    sent: function () {
      if (1 & r[0]) throw r[1];
      return r[1];
    },
    trys: [],
    ops: []
  };
  return o = {
    next: a(0),
    throw: a(1),
    return: a(2)
  }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {
    return this;
  }), o;

  function a(o) {
    return function (a) {
      return function (o) {
        if (i) throw new TypeError("Generator is already executing.");

        for (; s;) try {
          if (i = 1, n && (r = 2 & o[0] ? n.return : o[0] ? n.throw || ((r = n.return) && r.call(n), 0) : n.next) && !(r = r.call(n, o[1])).done) return r;

          switch (n = 0, r && (o = [2 & o[0], r.value]), o[0]) {
            case 0:
            case 1:
              r = o;
              break;

            case 4:
              return s.label++, {
                value: o[1],
                done: !1
              };

            case 5:
              s.label++, n = o[1], o = [0];
              continue;

            case 7:
              o = s.ops.pop(), s.trys.pop();
              continue;

            default:
              if (!(r = s.trys, (r = r.length > 0 && r[r.length - 1]) || 6 !== o[0] && 2 !== o[0])) {
                s = 0;
                continue;
              }

              if (3 === o[0] && (!r || o[1] > r[0] && o[1] < r[3])) {
                s.label = o[1];
                break;
              }

              if (6 === o[0] && s.label < r[1]) {
                s.label = r[1], r = o;
                break;
              }

              if (r && s.label < r[2]) {
                s.label = r[2], s.ops.push(o);
                break;
              }

              r[2] && s.ops.pop(), s.trys.pop();
              continue;
          }

          o = e.call(t, s);
        } catch (t) {
          o = [6, t], n = 0;
        } finally {
          i = r = 0;
        }

        if (5 & o[0]) throw o[1];
        return {
          value: o[0] ? o[1] : void 0,
          done: !0
        };
      }([o, a]);
    };
  }
}

var z = ["nose", "left_eye", "right_eye", "left_ear", "right_ear", "left_shoulder", "right_shoulder", "left_elbow", "right_elbow", "left_wrist", "right_wrist", "left_hip", "right_hip", "left_knee", "right_knee", "left_ankle", "right_ankle"],
    I = ["nose", "left_eye_inner", "left_eye", "left_eye_outer", "right_eye_inner", "right_eye", "right_eye_outer", "left_ear", "right_ear", "mouth_left", "mouth_right", "left_shoulder", "right_shoulder", "left_elbow", "right_elbow", "left_wrist", "right_wrist", "left_pinky", "right_pinky", "left_index", "right_index", "left_thumb", "right_thumb", "left_hip", "right_hip", "left_knee", "right_knee", "left_ankle", "right_ankle", "left_heel", "right_heel", "left_foot_index", "right_foot_index"],
    B = {
  left: [1, 2, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31],
  right: [4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32],
  middle: [0]
},
    N = {
  left: [1, 3, 5, 7, 9, 11, 13, 15],
  right: [2, 4, 6, 8, 10, 12, 14, 16],
  middle: [0]
},
    V = [[0, 1], [0, 2], [1, 3], [2, 4], [5, 6], [5, 7], [5, 11], [6, 8], [6, 12], [7, 9], [8, 10], [11, 12], [11, 13], [12, 14], [13, 15], [14, 16]],
    K = [[0, 1], [0, 4], [1, 2], [2, 3], [3, 7], [4, 5], [5, 6], [6, 8], [9, 10], [11, 12], [11, 13], [11, 23], [12, 14], [14, 16], [12, 24], [13, 15], [15, 17], [16, 18], [16, 20], [15, 17], [15, 19], [15, 21], [16, 22], [17, 19], [18, 20], [23, 25], [23, 24], [24, 26], [25, 27], [26, 28], [27, 29], [28, 30], [27, 31], [28, 32], [29, 31], [30, 32]],
    L = {
  runtime: "mediapipe",
  enableSmoothing: !0,
  modelType: "full"
};

var D = function () {
  function e(e) {
    var i,
        n = this;

    switch (this.width = 0, this.height = 0, this.selfieMode = !1, this.poseSolution = new _pose.Pose({
      locateFile: function (t, i) {
        return e.solutionPath ? e.solutionPath.replace(/\/+$/, "") + "/" + t : i + "/" + t;
      }
    }), e.modelType) {
      case "lite":
        i = 0;
        break;

      case "heavy":
        i = 2;
        break;

      case "full":
      default:
        i = 1;
    }

    this.poseSolution.setOptions({
      modelComplexity: i,
      smoothLandmarks: e.enableSmoothing || !0,
      selfieMode: this.selfieMode
    }), this.poseSolution.onResults(function (t) {
      n.height = t.image.height, n.width = t.image.width, null == t.poseLandmarks ? n.poses = [] : n.poses = [n.translateOutput(t.poseLandmarks, t.poseWorldLandmarks)];
    });
  }

  return e.prototype.translateOutput = function (t, e) {
    var i = this,
        n = {
      keypoints: t.map(function (t, e) {
        return {
          x: t.x * i.width,
          y: t.y * i.height,
          z: t.z,
          score: t.visibility,
          name: I[e]
        };
      })
    };
    return null != e && (n.keypoints3D = e.map(function (t, e) {
      return {
        x: t.x,
        y: t.y,
        z: t.z,
        score: t.visibility,
        name: I[e]
      };
    })), n;
  }, e.prototype.estimatePoses = function (t, e, i) {
    return E(this, void 0, void 0, function () {
      return A(this, function (n) {
        switch (n.label) {
          case 0:
            return e && e.flipHorizontal && e.flipHorizontal !== this.selfieMode && (this.selfieMode = e.flipHorizontal, this.poseSolution.setOptions({
              selfieMode: this.selfieMode
            })), [4, this.poseSolution.send({
              image: t
            }, i)];

          case 1:
            return n.sent(), [2, this.poses];
        }
      });
    });
  }, e.prototype.dispose = function () {
    this.poseSolution.close();
  }, e.prototype.reset = function () {
    this.poseSolution.reset();
  }, e.prototype.initialize = function () {
    return this.poseSolution.initialize();
  }, e;
}();

function j(t) {
  return E(this, void 0, void 0, function () {
    var e, i;
    return A(this, function (n) {
      switch (n.label) {
        case 0:
          return e = function (t) {
            if (null == t) return C({}, L);
            var e = C({}, t);
            return e.runtime = "mediapipe", null == e.enableSmoothing && (e.enableSmoothing = L.enableSmoothing), null == e.modelType && (e.modelType = L.modelType), e;
          }(t), [4, (i = new D(e)).initialize()];

        case 1:
          return n.sent(), [2, i];
      }
    });
  });
}

function q(t) {
  return t instanceof _tfjsCore.Tensor ? {
    height: t.shape[0],
    width: t.shape[1]
  } : {
    height: t.height,
    width: t.width
  };
}

function H(t) {
  return t - 2 * Math.PI * Math.floor((t + Math.PI) / (2 * Math.PI));
}

function U(t) {
  return t instanceof _tfjsCore.Tensor ? t : _tfjsCore.browser.fromPixels(t);
}

function X(t, e) {
  _tfjsCore.util.assert(0 !== t.width, function () {
    return e + " width cannot be 0.";
  }), _tfjsCore.util.assert(0 !== t.height, function () {
    return e + " height cannot be 0.";
  });
}

function Y(t, e, i) {
  var n = e.inputResolution,
      r = e.keepAspectRatio,
      u = q(t),
      c = function (t, e) {
    return e ? {
      xCenter: e.xCenter * t.width,
      yCenter: e.yCenter * t.height,
      width: e.width * t.width,
      height: e.height * t.height,
      rotation: e.rotation
    } : {
      xCenter: .5 * t.width,
      yCenter: .5 * t.height,
      width: t.width,
      height: t.height,
      rotation: 0
    };
  }(u, i),
      p = function (t, e, i) {
    if (void 0 === i && (i = !1), !i) return {
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    };
    var n = e.height,
        r = e.width;
    X(e, "targetSize"), X(t, "roi");
    var o,
        s,
        a = n / r,
        h = t.height / t.width,
        l = 0,
        u = 0;
    return a > h ? (o = t.width, s = t.width * a, u = (1 - h / a) / 2) : (o = t.height / a, s = t.height, l = (1 - a / h) / 2), t.width = o, t.height = s, {
      top: u,
      left: l,
      right: l,
      bottom: u
    };
  }(c, n, r);

  return {
    imageTensor: (0, _tfjsCore.tidy)(function () {
      var e = U(t),
          i = (0, _tfjsCore.tensor2d)(function (t, e, i, n) {
        X(n, "inputResolution");
        var r = 1 / e.width,
            o = 1 / e.height,
            s = t.xCenter,
            a = t.yCenter,
            h = Math.cos(t.rotation),
            l = Math.sin(t.rotation),
            u = i ? -1 : 1,
            c = t.width,
            p = t.height;
        return [1 / n.width * c * h * u * r * e.width, 1 / n.height * -p * l * r * e.width, (-.5 * c * h * u + .5 * p * l + s) * r * e.width, 1 / n.width * c * l * u * o * e.height, 1 / n.height * p * h * o * e.height, (-.5 * p * h - .5 * c * l * u + a) * o * e.height, 0, 0];
      }(c, u, !1, n), [1, 8]);
      return _tfjsCore.image.transform((0, _tfjsCore.expandDims)((0, _tfjsCore.cast)(e, "float32")), i, "bilinear", "nearest", 0, [n.height, n.width]);
    }),
    padding: p
  };
}

function W(t) {
  return null != t && null != t.currentTime;
}

var G = function () {
  function t(t) {
    this.alpha = t, this.initialized = !1;
  }

  return t.prototype.apply = function (t, e) {
    var i;
    return this.initialized ? i = null == e ? this.storedValue + this.alpha * (t - this.storedValue) : this.storedValue + this.alpha * e * Math.asinh((t - this.storedValue) / e) : (i = t, this.initialized = !0), this.rawValue = t, this.storedValue = i, i;
  }, t.prototype.applyWithAlpha = function (t, e, i) {
    return this.alpha = e, this.apply(t, i);
  }, t.prototype.hasLastRawValue = function () {
    return this.initialized;
  }, t.prototype.lastRawValue = function () {
    return this.rawValue;
  }, t.prototype.reset = function () {
    this.initialized = !1;
  }, t;
}(),
    Q = function () {
  function t(t) {
    this.frequency = t.frequency, this.minCutOff = t.minCutOff, this.beta = t.beta, this.thresholdCutOff = t.thresholdCutOff, this.thresholdBeta = t.thresholdBeta, this.derivateCutOff = t.derivateCutOff, this.x = new G(this.getAlpha(this.minCutOff)), this.dx = new G(this.getAlpha(this.derivateCutOff)), this.lastTimestamp = 0;
  }

  return t.prototype.apply = function (t, e, i) {
    if (null == t) return t;
    var n = Math.trunc(e);
    if (this.lastTimestamp >= n) return t;
    0 !== this.lastTimestamp && 0 !== n && (this.frequency = 1 / (1e-6 * (n - this.lastTimestamp))), this.lastTimestamp = n;
    var r = this.x.hasLastRawValue() ? (t - this.x.lastRawValue()) * i * this.frequency : 0,
        o = this.dx.applyWithAlpha(r, this.getAlpha(this.derivateCutOff)),
        s = this.minCutOff + this.beta * Math.abs(o),
        a = null != this.thresholdCutOff ? this.thresholdCutOff + this.thresholdBeta * Math.abs(o) : null;
    return this.x.applyWithAlpha(t, this.getAlpha(s), a);
  }, t.prototype.getAlpha = function (t) {
    return 1 / (1 + this.frequency / (2 * Math.PI * t));
  }, t;
}(),
    Z = function () {
  function t(t) {
    this.config = t;
  }

  return t.prototype.apply = function (t, e, i) {
    var n = this;
    if (null == t) return this.reset(), null;
    this.initializeFiltersIfEmpty(t);
    var r = 1;

    if (null != this.config.minAllowedObjectScale) {
      if (i < this.config.minAllowedObjectScale) return t.slice();
      r = 1 / i;
    }

    return t.map(function (t, i) {
      var o = C({}, t, {
        x: n.xFilters[i].apply(t.x, e, r),
        y: n.yFilters[i].apply(t.y, e, r)
      });
      return null != t.z && (o.z = n.zFilters[i].apply(t.z, e, r)), o;
    });
  }, t.prototype.reset = function () {
    this.xFilters = null, this.yFilters = null, this.zFilters = null;
  }, t.prototype.initializeFiltersIfEmpty = function (t) {
    var e = this;
    null != this.xFilters && this.xFilters.length === t.length || (this.xFilters = t.map(function (t) {
      return new Q(e.config);
    }), this.yFilters = t.map(function (t) {
      return new Q(e.config);
    }), this.zFilters = t.map(function (t) {
      return new Q(e.config);
    }));
  }, t;
}();

function $(t, e) {
  return t.map(function (t) {
    var i = C({}, t, {
      x: t.x / e.width,
      y: t.y / e.height
    });
    return null != t.z && (t.z = t.z / e.width), i;
  });
}

var J = function () {
  function t(t) {
    this.config = t, this.window = [], this.lowPassFilter = new G(1), this.lastValue = 0, this.lastValueScale = 1, this.lastTimestamp = -1;
  }

  return t.prototype.apply = function (t, e, i) {
    if (null == t) return t;
    var n,
        r = Math.trunc(e);
    if (this.lastTimestamp >= r) return t;
    if (-1 === this.lastTimestamp) n = 1;else {
      for (var o = t * i - this.lastValue * this.lastValueScale, s = r - this.lastTimestamp, a = o, h = s, l = (1 + this.window.length) * (1e6 / 30), u = 0, c = this.window; u < c.length; u++) {
        var p = c[u];
        if (h + p.duration > l) break;
        a += p.distance, h += p.duration;
      }

      var f = a / (1e-6 * h);
      n = 1 - 1 / (1 + this.config.velocityScale * Math.abs(f)), this.window.unshift({
        distance: o,
        duration: s
      }), this.window.length > this.config.windowSize && this.window.pop();
    }
    return this.lastValue = t, this.lastValueScale = i, this.lastTimestamp = r, this.lowPassFilter.applyWithAlpha(t, n);
  }, t;
}(),
    tt = function () {
  function t(t) {
    this.config = t;
  }

  return t.prototype.apply = function (t, e, i) {
    var n = this;
    if (null == t) return this.reset(), null;
    var r = 1;

    if (!this.config.disableValueScaling) {
      if (i < this.config.minAllowedObjectScale) return t.slice();
      r = 1 / i;
    }

    return this.initializeFiltersIfEmpty(t), t.map(function (t, i) {
      var o = C({}, t, {
        x: n.xFilters[i].apply(t.x, e, r),
        y: n.yFilters[i].apply(t.y, e, r)
      });
      return null != t.z && (o.z = n.zFilters[i].apply(t.z, e, r)), o;
    });
  }, t.prototype.reset = function () {
    this.xFilters = null, this.yFilters = null, this.zFilters = null;
  }, t.prototype.initializeFiltersIfEmpty = function (t) {
    var e = this;
    null != this.xFilters && this.xFilters.length === t.length || (this.xFilters = t.map(function (t) {
      return new J(e.config);
    }), this.yFilters = t.map(function (t) {
      return new J(e.config);
    }), this.zFilters = t.map(function (t) {
      return new J(e.config);
    }));
  }, t;
}();

function et(t, e) {
  return t.map(function (t) {
    var i = C({}, t, {
      x: t.x * e.width,
      y: t.y * e.height
    });
    return null != t.z && (i.z = t.z * e.width), i;
  });
}

var it = function () {
  function t(t) {
    if (null != t.velocityFilter) this.keypointsFilter = new tt(t.velocityFilter);else {
      if (null == t.oneEuroFilter) throw new Error("Either configure velocityFilter or oneEuroFilter, but got " + t + ".");
      this.keypointsFilter = new Z(t.oneEuroFilter);
    }
  }

  return t.prototype.apply = function (t, e, i, n, r) {
    if (void 0 === n && (n = !1), null == t) return this.keypointsFilter.reset(), null;
    var o = null != r ? function (t, e) {
      return (t.width * e.width + t.height * e.height) / 2;
    }(r, i) : 1,
        s = n ? et(t, i) : t,
        a = this.keypointsFilter.apply(s, e, o);
    return n ? $(a, i) : a;
  }, t;
}();

function nt(t, e) {
  var i = function (t, e, i, n) {
    var r = e - t,
        o = n - i;
    if (0 === r) throw new Error("Original min and max are both " + t + ", range cannot be 0.");
    var s = o / r;
    return {
      scale: s,
      offset: i - t * s
    };
  }(0, 255, e[0], e[1]);

  return (0, _tfjsCore.tidy)(function () {
    return (0, _tfjsCore.add)((0, _tfjsCore.mul)(t, i.scale), i.offset);
  });
}

function rt(t, e, i) {
  var n = i.rotationVectorStartKeypointIndex,
      r = i.rotationVectorEndKeypointIndex,
      o = t.locationData,
      s = o.relativeKeypoints[n].x * e.width,
      a = o.relativeKeypoints[n].y * e.height,
      h = o.relativeKeypoints[r].x * e.width,
      l = o.relativeKeypoints[r].y * e.height,
      u = 2 * Math.sqrt((h - s) * (h - s) + (l - a) * (l - a)),
      c = function (t, e, i) {
    var n,
        r = t.locationData,
        o = i.rotationVectorStartKeypointIndex,
        s = i.rotationVectorEndKeypointIndex;
    n = i.rotationVectorTargetAngle ? i.rotationVectorTargetAngle : Math.PI * i.rotationVectorTargetAngleDegree / 180;
    var a = r.relativeKeypoints[o].x * e.width,
        h = r.relativeKeypoints[o].y * e.height,
        l = r.relativeKeypoints[s].x * e.width,
        u = r.relativeKeypoints[s].y * e.height;
    return H(n - Math.atan2(-(u - h), l - a));
  }(t, e, i);

  return {
    xCenter: s / e.width,
    yCenter: a / e.height,
    width: u / e.width,
    height: u / e.height,
    rotation: c
  };
}

function ot(t, e, i, n) {
  return 1 === n ? .5 * (t + e) : t + (e - t) * i / (n - 1);
}

function st(t, e) {
  return (0, _tfjsCore.tidy)(function () {
    var i = function (t) {
      return (0, _tfjsCore.tidy)(function () {
        var e = (0, _tfjsCore.slice)(t, [0, 0, 0], [1, -1, 1]);
        return [(0, _tfjsCore.sigmoid)(e), (0, _tfjsCore.slice)(t, [0, 0, 1], [1, -1, -1])];
      });
    }(e.predict(t)),
        n = i[0],
        r = i[1];

    return {
      boxes: (0, _tfjsCore.squeeze)(r),
      scores: (0, _tfjsCore.squeeze)(n)
    };
  });
}

function at(t) {
  for (var e = {
    locationData: {
      relativeKeypoints: []
    }
  }, i = Number.MAX_SAFE_INTEGER, n = Number.MIN_SAFE_INTEGER, r = Number.MAX_SAFE_INTEGER, o = Number.MIN_SAFE_INTEGER, s = 0; s < t.length; ++s) {
    var a = t[s];
    i = Math.min(i, a.x), n = Math.max(n, a.x), r = Math.min(r, a.y), o = Math.max(o, a.y), e.locationData.relativeKeypoints.push({
      x: a.x,
      y: a.y
    });
  }

  return e.locationData.relativeBoundingBox = {
    xMin: i,
    yMin: r,
    xMax: n,
    yMax: o,
    width: n - i,
    height: o - r
  }, e;
}

function ht(t, e, i, n) {
  return E(this, void 0, void 0, function () {
    var r, o, h, l, u;
    return A(this, function (c) {
      switch (c.label) {
        case 0:
          return r = (0, _tfjsCore.tensor2d)(t.map(function (t) {
            return [t.locationData.relativeBoundingBox.yMin, t.locationData.relativeBoundingBox.xMin, t.locationData.relativeBoundingBox.yMax, t.locationData.relativeBoundingBox.xMax];
          })), o = (0, _tfjsCore.tensor1d)(t.map(function (t) {
            return t.score[0];
          })), [4, _tfjsCore.image.nonMaxSuppressionAsync(r, o, e, i, n)];

        case 1:
          return [4, (h = c.sent()).array()];

        case 2:
          return l = c.sent(), u = t.filter(function (t, e) {
            return l.indexOf(e) > -1;
          }), (0, _tfjsCore.dispose)([r, o, h]), [2, u];
      }
    });
  });
}

function lt(t, e, i) {
  return E(this, void 0, void 0, function () {
    var n, r, o, s, a, h, l, u, c, p, f, m, y, g, v, x, w, k, b, M, S, T, P, _;

    return A(this, function (F) {
      switch (F.label) {
        case 0:
          if (n = (0, _tfjsCore.squeeze)(e, [0]), r = n.shape, o = r[0], s = r[1], a = r[2], t.length !== a) throw new Error("Expected heatmap to have same number of channels as the number of landmarks. But got landmarks length: " + t.length + ", heatmap length: " + a);
          return h = [], [4, n.buffer()];

        case 1:
          for (l = F.sent(), u = 0; u < t.length; u++) if (c = t[u], p = C({}, c), h.push(p), f = Math.trunc(p.x * s), m = Math.trunc(p.y * o), !(f < 0 || f >= s || m < 0 || f >= o)) {
            for (y = Math.trunc((i.kernelSize - 1) / 2), g = Math.max(0, f - y), v = Math.min(s, f + y + 1), x = Math.max(0, m - y), w = Math.min(o, m + y + 1), k = 0, b = 0, M = 0, S = 0, T = x; T < w; ++T) for (P = g; P < v; ++P) _ = l.get(T, P, u), k += _, S = Math.max(S, _), b += P * _, M += T * _;

            S >= i.minConfidenceToRefine && k > 0 && (p.x = b / s / k, p.y = M / o / k);
          }

          return n.dispose(), [2, h];
      }
    });
  });
}

function ut(t, e, i) {
  return E(this, void 0, void 0, function () {
    var n, r, s, a, h;
    return A(this, function (l) {
      switch (l.label) {
        case 0:
          return n = t[0], r = t[1], s = function (t, e, i) {
            return (0, _tfjsCore.tidy)(function () {
              var n, r, o, s;
              i.reverseOutputOrder ? (r = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(t, [0, i.boxCoordOffset + 0], [-1, 1])), n = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(t, [0, i.boxCoordOffset + 1], [-1, 1])), s = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(t, [0, i.boxCoordOffset + 2], [-1, 1])), o = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(t, [0, i.boxCoordOffset + 3], [-1, 1]))) : (n = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(t, [0, i.boxCoordOffset + 0], [-1, 1])), r = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(t, [0, i.boxCoordOffset + 1], [-1, 1])), o = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(t, [0, i.boxCoordOffset + 2], [-1, 1])), s = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(t, [0, i.boxCoordOffset + 3], [-1, 1]))), r = (0, _tfjsCore.add)((0, _tfjsCore.mul)((0, _tfjsCore.div)(r, i.xScale), e.w), e.x), n = (0, _tfjsCore.add)((0, _tfjsCore.mul)((0, _tfjsCore.div)(n, i.yScale), e.h), e.y), i.applyExponentialOnBoxSize ? (o = (0, _tfjsCore.mul)((0, _tfjsCore.exp)((0, _tfjsCore.div)(o, i.hScale)), e.h), s = (0, _tfjsCore.mul)((0, _tfjsCore.exp)((0, _tfjsCore.div)(s, i.wScale)), e.w)) : (o = (0, _tfjsCore.mul)((0, _tfjsCore.div)(o, i.hScale), e.h), s = (0, _tfjsCore.mul)((0, _tfjsCore.div)(s, i.wScale), e.h));
              var a = (0, _tfjsCore.sub)(n, (0, _tfjsCore.div)(o, 2)),
                  h = (0, _tfjsCore.sub)(r, (0, _tfjsCore.div)(s, 2)),
                  l = (0, _tfjsCore.add)(n, (0, _tfjsCore.div)(o, 2)),
                  f = (0, _tfjsCore.add)(r, (0, _tfjsCore.div)(s, 2)),
                  m = (0, _tfjsCore.concat)([(0, _tfjsCore.reshape)(a, [i.numBoxes, 1]), (0, _tfjsCore.reshape)(h, [i.numBoxes, 1]), (0, _tfjsCore.reshape)(l, [i.numBoxes, 1]), (0, _tfjsCore.reshape)(f, [i.numBoxes, 1])], 1);
              if (i.numKeypoints) for (var y = 0; y < i.numKeypoints; ++y) {
                var b = i.keypointCoordOffset + y * i.numValuesPerKeypoint,
                    M = void 0,
                    S = void 0;
                i.reverseOutputOrder ? (M = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(t, [0, b], [-1, 1])), S = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(t, [0, b + 1], [-1, 1]))) : (S = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(t, [0, b], [-1, 1])), M = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(t, [0, b + 1], [-1, 1])));
                var T = (0, _tfjsCore.add)((0, _tfjsCore.mul)((0, _tfjsCore.div)(M, i.xScale), e.w), e.x),
                    P = (0, _tfjsCore.add)((0, _tfjsCore.mul)((0, _tfjsCore.div)(S, i.yScale), e.h), e.y);
                m = (0, _tfjsCore.concat)([m, (0, _tfjsCore.reshape)(T, [i.numBoxes, 1]), (0, _tfjsCore.reshape)(P, [i.numBoxes, 1])], 1);
              }
              return m;
            });
          }(r, e, i), a = (0, _tfjsCore.tidy)(function () {
            var t = n;
            return i.sigmoidScore ? (null != i.scoreClippingThresh && (t = (0, _tfjsCore.clipByValue)(n, -i.scoreClippingThresh, i.scoreClippingThresh)), t = (0, _tfjsCore.sigmoid)(t)) : t;
          }), [4, ct(s, a, i)];

        case 1:
          return h = l.sent(), (0, _tfjsCore.dispose)([s, a]), [2, h];
      }
    });
  });
}

function ct(t, e, i) {
  return E(this, void 0, void 0, function () {
    var n, r, o, s, a, h, l, u, c, p, f, d;
    return A(this, function (m) {
      switch (m.label) {
        case 0:
          return n = [], [4, t.data()];

        case 1:
          return r = m.sent(), [4, e.data()];

        case 2:
          for (o = m.sent(), s = 0; s < i.numBoxes; ++s) if (!(null != i.minScoreThresh && o[s] < i.minScoreThresh || (a = s * i.numCoords, h = pt(r[a + 0], r[a + 1], r[a + 2], r[a + 3], o[s], i.flipVertically, s), (l = h.locationData.relativeBoundingBox).width < 0 || l.height < 0))) {
            if (i.numKeypoints > 0) for ((u = h.locationData).relativeKeypoints = [], c = i.numKeypoints * i.numValuesPerKeypoint, p = 0; p < c; p += i.numValuesPerKeypoint) f = a + i.keypointCoordOffset + p, d = {
              x: r[f + 0],
              y: i.flipVertically ? 1 - r[f + 1] : r[f + 1]
            }, u.relativeKeypoints.push(d);
            n.push(h);
          }

          return [2, n];
      }
    });
  });
}

function pt(t, e, i, n, r, o, s) {
  return {
    score: [r],
    ind: s,
    locationData: {
      relativeBoundingBox: {
        xMin: e,
        yMin: o ? 1 - i : t,
        xMax: n,
        yMax: o ? 1 - t : i,
        width: n - e,
        height: i - t
      }
    }
  };
}

function ft(t, e, i, n) {
  return void 0 === i && (i = !1), void 0 === n && (n = !1), E(this, void 0, void 0, function () {
    var r, o, s, a, h, l, u, c;
    return A(this, function (p) {
      switch (p.label) {
        case 0:
          return r = t.size, o = r / e.numLandmarks, [4, t.data()];

        case 1:
          for (s = p.sent(), a = [], h = 0; h < e.numLandmarks; ++h) l = h * o, (c = {
            x: 0,
            y: 0
          }).x = i ? e.inputImageWidth - s[l] : s[l], o > 1 && (c.y = n ? e.inputImageHeight - s[l + 1] : s[l + 1]), o > 2 && (c.z = s[l + 2]), o > 3 && (c.score = (f = s[l + 3], 1 / (1 + Math.exp(-f)))), a.push(c);

          for (u = 0; u < a.length; ++u) (c = a[u]).x = c.x / e.inputImageWidth, c.y = c.y / e.inputImageHeight, c.z = c.z / e.inputImageWidth / (e.normalizeZ || 1);

          return [2, a];
      }

      var f;
    });
  });
}

function dt(t, e, i) {
  var n = t.width,
      r = t.height,
      o = t.rotation;
  if (null == i.rotation && null == i.rotationDegree || (o = function (t, e) {
    null != e.rotation ? t += e.rotation : null != e.rotationDegree && (t += Math.PI * e.rotationDegree / 180);
    return H(t);
  }(o, i)), 0 === o) t.xCenter = t.xCenter + n * i.shiftX, t.yCenter = t.yCenter + r * i.shiftY;else {
    var s = (e.width * n * i.shiftX * Math.cos(o) - e.height * r * i.shiftY * Math.sin(o)) / e.width,
        a = (e.width * n * i.shiftX * Math.sin(o) + e.height * r * i.shiftY * Math.cos(o)) / e.height;
    t.xCenter = t.xCenter + s, t.yCenter = t.yCenter + a;
  }

  if (i.squareLong) {
    var h = Math.max(n * e.width, r * e.height);
    n = h / e.width, r = h / e.height;
  } else if (i.squareShort) {
    var l = Math.min(n * e.width, r * e.height);
    n = l / e.width, r = l / e.height;
  }

  return t.width = n * i.scaleX, t.height = r * i.scaleY, t;
}

var mt = function () {
  function t(t) {
    this.alpha = t.alpha;
  }

  return t.prototype.apply = function (t) {
    var e = this;
    if (null == t) return this.visibilityFilters = null, null;
    null != this.visibilityFilters && this.visibilityFilters.length === t.length || (this.visibilityFilters = t.map(function (t) {
      return new G(e.alpha);
    }));

    for (var i = [], n = 0; n < t.length; ++n) {
      var r = t[n],
          o = C({}, r);
      o.score = this.visibilityFilters[n].apply(r.score), i.push(o);
    }

    return i;
  }, t;
}(),
    yt = {
  reduceBoxesInLowestlayer: !1,
  interpolatedScaleAspectRatio: 1,
  featureMapHeight: [],
  featureMapWidth: [],
  numLayers: 5,
  minScale: .1484375,
  maxScale: .75,
  inputSizeHeight: 224,
  inputSizeWidth: 224,
  anchorOffsetX: .5,
  anchorOffsetY: .5,
  strides: [8, 16, 32, 32, 32],
  aspectRatios: [1],
  fixedAnchorSize: !0
},
    gt = {
  runtime: "tfjs",
  modelType: "full",
  enableSmoothing: !0,
  detectorModelUrl: "https://tfhub.dev/mediapipe/tfjs-model/blazeposedetector/1/default/1",
  landmarkModelUrl: "https://tfhub.dev/mediapipe/tfjs-model/blazeposelandmark_full/2/default/2"
},
    vt = {
  maxPoses: 1,
  flipHorizontal: !1
},
    xt = {
  applyExponentialOnBoxSize: !1,
  flipVertically: !1,
  ignoreClasses: [],
  numClasses: 1,
  numBoxes: 2254,
  numCoords: 12,
  boxCoordOffset: 0,
  keypointCoordOffset: 4,
  numKeypoints: 4,
  numValuesPerKeypoint: 2,
  sigmoidScore: !0,
  scoreClippingThresh: 100,
  reverseOutputOrder: !0,
  xScale: 224,
  yScale: 224,
  hScale: 224,
  wScale: 224,
  minScoreThresh: .5
},
    wt = -1,
    kt = .3,
    bt = {
  shiftX: 0,
  shiftY: 0,
  scaleX: 1.25,
  scaleY: 1.25,
  squareLong: !0
},
    Mt = {
  inputResolution: {
    width: 224,
    height: 224
  },
  keepAspectRatio: !0
},
    St = {
  inputResolution: {
    width: 256,
    height: 256
  },
  keepAspectRatio: !0
},
    Tt = {
  numLandmarks: 39,
  inputImageWidth: 256,
  inputImageHeight: 256
},
    Pt = {
  kernelSize: 7,
  minConfidenceToRefine: .5
},
    _t = {
  alpha: .1
},
    Ft = {
  oneEuroFilter: {
    frequency: 30,
    minCutOff: .05,
    beta: 80,
    derivateCutOff: 1,
    minAllowedObjectScale: 1e-6
  }
},
    Ot = {
  oneEuroFilter: {
    frequency: 30,
    minCutOff: .01,
    beta: 10,
    derivateCutOff: 1,
    minAllowedObjectScale: 1e-6
  }
};

var Rt = function () {
  function t(t, e, i, n) {
    this.detectorModel = t, this.landmarkModel = e, this.enableSmoothing = i, this.modelType = n, this.regionOfInterest = null, this.anchors = function (t) {
      for (var e = [], i = 0; i < t.numLayers;) {
        for (var n = [], r = [], o = [], s = [], a = i; a < t.strides.length && t.strides[a] === t.strides[i];) {
          var h = ot(t.minScale, t.maxScale, a, t.strides.length);
          if (0 === a && t.reduceBoxesInLowestLayer) o.push(1), o.push(2), o.push(.5), s.push(.1), s.push(h), s.push(h);else {
            for (var l = 0; l < t.aspectRatios.length; ++l) o.push(t.aspectRatios[l]), s.push(h);

            if (t.interpolatedScaleAspectRatio > 0) {
              var u = a === t.strides.length - 1 ? 1 : ot(t.minScale, t.maxScale, a + 1, t.strides.length);
              s.push(Math.sqrt(h * u)), o.push(t.interpolatedScaleAspectRatio);
            }
          }
          a++;
        }

        for (var c = 0; c < o.length; ++c) {
          var p = Math.sqrt(o[c]);
          n.push(s[c] / p), r.push(s[c] * p);
        }

        var f = 0,
            d = 0;
        if (t.featureMapHeight.length > 0) f = t.featureMapHeight[i], d = t.featureMapWidth[i];else {
          var m = t.strides[i];
          f = Math.ceil(t.inputSizeHeight / m), d = Math.ceil(t.inputSizeWidth / m);
        }

        for (var y = 0; y < f; ++y) for (var g = 0; g < d; ++g) for (var v = 0; v < n.length; ++v) {
          var x = {
            xCenter: (g + t.anchorOffsetX) / d,
            yCenter: (y + t.anchorOffsetY) / f,
            width: 0,
            height: 0
          };
          t.fixedAnchorSize ? (x.width = 1, x.height = 1) : (x.width = r[v], x.height = n[v]), e.push(x);
        }

        i = a;
      }

      return e;
    }(yt);
    var r = (0, _tfjsCore.tensor1d)(this.anchors.map(function (t) {
      return t.width;
    })),
        o = (0, _tfjsCore.tensor1d)(this.anchors.map(function (t) {
      return t.height;
    })),
        s = (0, _tfjsCore.tensor1d)(this.anchors.map(function (t) {
      return t.xCenter;
    })),
        a = (0, _tfjsCore.tensor1d)(this.anchors.map(function (t) {
      return t.yCenter;
    }));
    this.anchorTensor = {
      x: s,
      y: a,
      w: r,
      h: o
    };
  }

  return t.prototype.estimatePoses = function (t, e, i) {
    return E(this, void 0, void 0, function () {
      var n, r, s, a, h, u, c, p, f, d, m, y, g, v, x;
      return A(this, function (w) {
        switch (w.label) {
          case 0:
            return n = function (t) {
              var e;
              if (null == (e = null == t ? vt : C({}, t)).maxPoses && (e.maxPoses = 1), e.maxPoses <= 0) throw new Error("Invalid maxPoses " + e.maxPoses + ". Should be > 0.");
              if (e.maxPoses > 1) throw new Error("Multi-pose detection is not implemented yet. Please set maxPoses to 1.");
              return e;
            }(e), null == t ? (this.reset(), [2, []]) : (this.maxPoses = n.maxPoses, this.timestamp = null != i ? 1e3 * i : W(t) ? 1e6 * t.currentTime : null, r = q(t), s = (0, _tfjsCore.tidy)(function () {
              return (0, _tfjsCore.cast)(U(t), "float32");
            }), null != (a = this.regionOfInterest) ? [3, 2] : [4, this.detectPose(s)]);

          case 1:
            if (0 === (h = w.sent()).length) return this.reset(), s.dispose(), [2, []];
            u = h[0], a = this.poseDetectionToRoi(u, r), w.label = 2;

          case 2:
            return [4, this.poseLandmarksByRoi(a, s)];

          case 3:
            return c = w.sent(), s.dispose(), null == c ? (this.reset(), [2, []]) : (p = c.actualLandmarks, f = c.auxiliaryLandmarks, d = c.poseScore, m = this.poseLandmarkFiltering(p, f, r), y = m.actualLandmarksFiltered, g = m.auxiliaryLandmarksFiltered, v = this.poseLandmarksToRoi(g, r), this.regionOfInterest = v, null != (x = null != y ? et(y, r) : null) && x.forEach(function (t, e) {
              t.name = I[e];
            }), [2, [{
              score: d,
              keypoints: x
            }]]);
        }
      });
    });
  }, t.prototype.dispose = function () {
    this.detectorModel.dispose(), this.landmarkModel.dispose(), (0, _tfjsCore.dispose)([this.anchorTensor.x, this.anchorTensor.y, this.anchorTensor.w, this.anchorTensor.h]);
  }, t.prototype.reset = function () {
    this.regionOfInterest = null, this.visibilitySmoothingFilterActual = null, this.visibilitySmoothingFilterAuxiliary = null, this.landmarksSmoothingFilterActual = null, this.landmarksSmoothingFilterAuxiliary = null;
  }, t.prototype.detectPose = function (t) {
    return E(this, void 0, void 0, function () {
      var e, i, n, r, o, s, a, h, l;
      return A(this, function (u) {
        switch (u.label) {
          case 0:
            return e = Y(t, Mt), i = e.imageTensor, n = e.padding, r = nt(i, [-1, 1]), o = st(r, this.detectorModel), s = o.boxes, [4, ut([a = o.scores, s], this.anchorTensor, xt)];

          case 1:
            return [4, ht(u.sent(), this.maxPoses, kt, wt)];

          case 2:
            return h = u.sent(), l = function (t, e) {
              void 0 === t && (t = []);

              for (var i = e.left, n = e.top, r = e.left + e.right, o = e.top + e.bottom, s = 0; s < t.length; s++) {
                var a = t[s],
                    h = a.locationData.relativeBoundingBox,
                    l = (h.xMin - i) / (1 - r),
                    u = (h.yMin - n) / (1 - o),
                    c = h.width / (1 - r),
                    p = h.height / (1 - o);
                h.xMin = l, h.yMin = u, h.width = c, h.height = p;

                for (var f = 0; f < a.locationData.relativeKeypoints.length; ++f) {
                  var d = a.locationData.relativeKeypoints[f],
                      m = (d.x - i) / (1 - r),
                      y = (d.y - n) / (1 - o);
                  d.x = m, d.y = y;
                }
              }

              return t;
            }(h, n), (0, _tfjsCore.dispose)([i, r, a, s]), [2, l];
        }
      });
    });
  }, t.prototype.poseDetectionToRoi = function (t, e) {
    return 0, 1, dt(rt(t, e, {
      rotationVectorEndKeypointIndex: 1,
      rotationVectorStartKeypointIndex: 0,
      rotationVectorTargetAngleDegree: 90
    }), e, bt);
  }, t.prototype.poseLandmarksByRoi = function (t, e) {
    return E(this, void 0, void 0, function () {
      var i, n, r, o, s, a, h, l, u, c, p, f, d, y;
      return A(this, function (g) {
        switch (g.label) {
          case 0:
            switch (i = Y(e, St, t), n = i.imageTensor, r = i.padding, o = nt(n, [0, 1]), s = this.landmarkModel.predict(o), this.modelType) {
              case "lite":
                a = s[4], h = s[0], l = s[3];
                break;

              case "full":
                a = s[4], h = s[3], l = s[2];
                break;

              case "heavy":
                a = s[2], h = s[4], l = s[1];
                break;

              default:
                throw new Error("Model type must be one of lite, full or heavy,but got " + this.modelType);
            }

            return [4, h.data()];

          case 1:
            return (u = g.sent()[0]) < .5 ? ((0, _tfjsCore.dispose)(s), (0, _tfjsCore.dispose)([n, o]), [2, null]) : [4, ft(a, Tt)];

          case 2:
            return [4, lt(g.sent(), l, Pt)];

          case 3:
            return c = g.sent(), p = function (t, e) {
              var i = e.left,
                  n = e.top,
                  r = e.left + e.right,
                  o = e.top + e.bottom;
              return t.map(function (t) {
                return C({}, t, {
                  x: (t.x - i) / (1 - r),
                  y: (t.y - n) / (1 - o),
                  z: t.z / (1 - r)
                });
              });
            }(c, r), f = function (t, e, i) {
              void 0 === i && (i = {
                ignoreRotation: !1
              });

              for (var n = [], r = 0, o = t; r < o.length; r++) {
                var s = o[r],
                    a = s.x - .5,
                    h = s.y - .5,
                    l = i.ignoreRotation ? 0 : e.rotation,
                    u = Math.cos(l) * a - Math.sin(l) * h,
                    c = Math.sin(l) * a + Math.cos(l) * h;
                u = u * e.width + e.xCenter, c = c * e.height + e.yCenter;
                var p = s.z * e.width,
                    f = C({}, s);
                f.x = u, f.y = c, f.z = p, n.push(f);
              }

              return n;
            }(p, t), d = f.slice(0, 33), y = f.slice(33, 35), (0, _tfjsCore.dispose)(s), (0, _tfjsCore.dispose)([n, o]), [2, {
              actualLandmarks: d,
              auxiliaryLandmarks: y,
              poseScore: u
            }];
        }
      });
    });
  }, t.prototype.poseLandmarksToRoi = function (t, e) {
    return dt(rt(at(t), e, {
      rotationVectorStartKeypointIndex: 0,
      rotationVectorEndKeypointIndex: 1,
      rotationVectorTargetAngleDegree: 90
    }), e, bt);
  }, t.prototype.poseLandmarkFiltering = function (t, e, i) {
    var n, r;

    if (null != this.timestamp && this.enableSmoothing) {
      var o = rt(at(e), i, {
        rotationVectorEndKeypointIndex: 0,
        rotationVectorStartKeypointIndex: 1,
        rotationVectorTargetAngleDegree: 90
      });
      null == this.visibilitySmoothingFilterActual && (this.visibilitySmoothingFilterActual = new mt(_t)), n = this.visibilitySmoothingFilterActual.apply(t), null == this.visibilitySmoothingFilterAuxiliary && (this.visibilitySmoothingFilterAuxiliary = new mt(_t)), r = this.visibilitySmoothingFilterAuxiliary.apply(e), null == this.landmarksSmoothingFilterActual && (this.landmarksSmoothingFilterActual = new it(Ft)), n = this.landmarksSmoothingFilterActual.apply(n, this.timestamp, i, !0, o), null == this.landmarksSmoothingFilterAuxiliary && (this.landmarksSmoothingFilterAuxiliary = new it(Ot)), r = this.landmarksSmoothingFilterAuxiliary.apply(r, this.timestamp, i, !0, o);
    } else n = t, r = e;

    return {
      actualLandmarksFiltered: n,
      auxiliaryLandmarksFiltered: r
    };
  }, t;
}();

function Ct(t) {
  return E(this, void 0, void 0, function () {
    var i, n, r, o, s, a;
    return A(this, function (h) {
      switch (h.label) {
        case 0:
          return i = function (t) {
            var e = C({}, null == t ? gt : t);
            if (null == e.enableSmoothing && (e.enableSmoothing = gt.enableSmoothing), null == e.modelType && (e.modelType = gt.modelType), null == e.detectorModelUrl && (e.detectorModelUrl = gt.detectorModelUrl), null == e.landmarkModelUrl) switch (e.modelType) {
              case "lite":
                e.landmarkModelUrl = "https://tfhub.dev/mediapipe/tfjs-model/blazeposelandmark_lite/2/default/2";
                break;

              case "heavy":
                e.landmarkModelUrl = "https://tfhub.dev/mediapipe/tfjs-model/blazeposelandmark_heavy/2/default/2";
                break;

              case "full":
              default:
                e.landmarkModelUrl = "https://tfhub.dev/mediapipe/tfjs-model/blazeposelandmark_full/2/default/2";
            }
            return e;
          }(t), n = i.detectorModelUrl.indexOf("https://tfhub.dev") > -1, r = i.landmarkModelUrl.indexOf("https://tfhub.dev") > -1, [4, Promise.all([(0, _tfjsConverter.loadGraphModel)(i.detectorModelUrl, {
            fromTFHub: n
          }), (0, _tfjsConverter.loadGraphModel)(i.landmarkModelUrl, {
            fromTFHub: r
          })])];

        case 1:
          return o = h.sent(), s = o[0], a = o[1], [2, new Rt(s, a, i.enableSmoothing, i.modelType)];
      }
    });
  });
}

var Et,
    At,
    zt = function () {
  function t(t) {
    !function (t) {
      if (t.maxTracks < 1) throw new Error("Must specify 'maxTracks' to be at least 1, but encountered " + t.maxTracks);
      if (t.maxAge <= 0) throw new Error("Must specify 'maxAge' to be positive, but encountered " + t.maxAge);

      if (void 0 !== t.keypointTrackerParams) {
        if (t.keypointTrackerParams.keypointConfidenceThreshold < 0 || t.keypointTrackerParams.keypointConfidenceThreshold > 1) throw new Error("Must specify 'keypointConfidenceThreshold' to be in the range [0, 1], but encountered " + t.keypointTrackerParams.keypointConfidenceThreshold);
        if (t.keypointTrackerParams.minNumberOfKeypoints < 1) throw new Error("Must specify 'minNumberOfKeypoints' to be at least 1, but encountered " + t.keypointTrackerParams.minNumberOfKeypoints);

        for (var e = 0, i = t.keypointTrackerParams.keypointFalloff; e < i.length; e++) {
          var n = i[e];
          if (n <= 0) throw new Error("Must specify each keypoint falloff parameterto be positive but encountered " + n);
        }
      }
    }(t), this.tracks = [], this.maxTracks = t.maxTracks, this.maxAge = 1e3 * t.maxAge, this.minSimilarity = t.minSimilarity, this.nextID = 1;
  }

  return t.prototype.apply = function (t, e) {
    this.filterOldTracks(e);
    var i = this.computeSimilarity(t);
    return this.assignTracks(t, i, e), this.updateTracks(e), t;
  }, t.prototype.getTracks = function () {
    return this.tracks.slice();
  }, t.prototype.getTrackIDs = function () {
    return new Set(this.tracks.map(function (t) {
      return t.id;
    }));
  }, t.prototype.filterOldTracks = function (t) {
    var e = this;
    this.tracks = this.tracks.filter(function (i) {
      return t - i.lastTimestamp <= e.maxAge;
    });
  }, t.prototype.assignTracks = function (t, e, i) {
    for (var n = Array.from(Array(e[0].length).keys()), r = [], o = 0, s = Array.from(Array(t.length).keys()); o < s.length; o++) {
      var a = s[o];

      if (0 !== n.length) {
        for (var h = -1, l = -1, u = 0, c = n; u < c.length; u++) {
          var p = c[u],
              f = e[a][p];
          f >= this.minSimilarity && f > l && (h = p, l = f);
        }

        if (h >= 0) {
          var d = this.tracks[h];
          d = Object.assign(d, this.createTrack(t[a], i, d.id)), t[a].id = d.id;
          var m = n.indexOf(h);
          n.splice(m, 1);
        } else r.push(a);
      } else r.push(a);
    }

    for (var y = 0, g = r; y < g.length; y++) {
      a = g[y];
      var v = this.createTrack(t[a], i);
      this.tracks.push(v), t[a].id = v.id;
    }
  }, t.prototype.updateTracks = function (t) {
    this.tracks.sort(function (t, e) {
      return e.lastTimestamp - t.lastTimestamp;
    }), this.tracks = this.tracks.slice(0, this.maxTracks);
  }, t.prototype.createTrack = function (t, e, i) {
    var n = {
      id: i || this.nextTrackID(),
      lastTimestamp: e,
      keypoints: t.keypoints.slice().map(function (t) {
        return C({}, t);
      })
    };
    return void 0 !== t.box && (n.box = C({}, t.box)), n;
  }, t.prototype.nextTrackID = function () {
    var t = this.nextID;
    return this.nextID += 1, t;
  }, t.prototype.remove = function () {
    for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];

    this.tracks = this.tracks.filter(function (e) {
      return !t.includes(e.id);
    });
  }, t.prototype.reset = function () {
    this.tracks = [];
  }, t;
}(),
    It = function (t) {
  function e(e) {
    return t.call(this, e) || this;
  }

  return R(e, t), e.prototype.computeSimilarity = function (t) {
    var e = this;
    return 0 === t.length || 0 === this.tracks.length ? [[]] : t.map(function (t) {
      return e.tracks.map(function (i) {
        return e.iou(t, i);
      });
    });
  }, e.prototype.iou = function (t, e) {
    var i = Math.max(t.box.xMin, e.box.xMin),
        n = Math.max(t.box.yMin, e.box.yMin),
        r = Math.min(t.box.xMax, e.box.xMax),
        o = Math.min(t.box.yMax, e.box.yMax);
    if (i >= r || n >= o) return 0;
    var s = (r - i) * (o - n);
    return s / (t.box.width * t.box.height + e.box.width * e.box.height - s);
  }, e;
}(zt),
    Bt = function (t) {
  function e(e) {
    var i = t.call(this, e) || this;
    return i.keypointThreshold = e.keypointTrackerParams.keypointConfidenceThreshold, i.keypointFalloff = e.keypointTrackerParams.keypointFalloff, i.minNumKeyoints = e.keypointTrackerParams.minNumberOfKeypoints, i;
  }

  return R(e, t), e.prototype.computeSimilarity = function (t) {
    if (0 === t.length || 0 === this.tracks.length) return [[]];

    for (var e = [], i = 0, n = t; i < n.length; i++) {
      for (var r = n[i], o = [], s = 0, a = this.tracks; s < a.length; s++) {
        var h = a[s];
        o.push(this.oks(r, h));
      }

      e.push(o);
    }

    return e;
  }, e.prototype.oks = function (t, e) {
    for (var i = this.area(e.keypoints) + 1e-6, n = 0, r = 0, o = 0; o < t.keypoints.length; ++o) {
      var s = t.keypoints[o],
          a = e.keypoints[o];

      if (!(s.score < this.keypointThreshold || a.score < this.keypointThreshold)) {
        r += 1;
        var h = Math.pow(s.x - a.x, 2) + Math.pow(s.y - a.y, 2),
            l = 2 * this.keypointFalloff[o];
        n += Math.exp(-1 * h / (2 * i * Math.pow(l, 2)));
      }
    }

    return r < this.minNumKeyoints ? 0 : n / r;
  }, e.prototype.area = function (t) {
    var e = this,
        i = t.filter(function (t) {
      return t.score > e.keypointThreshold;
    }),
        n = Math.min.apply(Math, [1].concat(i.map(function (t) {
      return t.x;
    }))),
        r = Math.max.apply(Math, [0].concat(i.map(function (t) {
      return t.x;
    }))),
        o = Math.min.apply(Math, [1].concat(i.map(function (t) {
      return t.y;
    })));
    return (r - n) * (Math.max.apply(Math, [0].concat(i.map(function (t) {
      return t.y;
    }))) - o);
  }, e;
}(zt);

exports.SupportedModels = At;
exports.TrackerType = Et;

function Nt(t) {
  switch (t) {
    case At.BlazePose:
      return I.reduce(function (t, e, i) {
        return t[e] = i, t;
      }, {});

    case At.PoseNet:
    case At.MoveNet:
      return z.reduce(function (t, e, i) {
        return t[e] = i, t;
      }, {});

    default:
      throw new Error("Model " + t + " is not supported.");
  }
}

!function (t) {
  t.Keypoint = "keypoint", t.BoundingBox = "boundingBox";
}(Et || (exports.TrackerType = Et = {})), function (t) {
  t.MoveNet = "MoveNet", t.BlazePose = "BlazePose", t.PoseNet = "PoseNet";
}(At || (exports.SupportedModels = At = {}));
var Vt = Object.freeze({
  __proto__: null,
  getKeypointIndexBySide: function (t) {
    switch (t) {
      case At.BlazePose:
        return B;

      case At.PoseNet:
      case At.MoveNet:
        return N;

      default:
        throw new Error("Model " + t + " is not supported.");
    }
  },
  getAdjacentPairs: function (t) {
    switch (t) {
      case At.BlazePose:
        return K;

      case At.PoseNet:
      case At.MoveNet:
        return V;

      default:
        throw new Error("Model " + t + " is not supported.");
    }
  },
  getKeypointIndexByName: Nt
}),
    Kt = ["SinglePose.Lightning", "SinglePose.Thunder", "MultiPose.Lightning"],
    Lt = {
  modelType: "SinglePose.Lightning",
  enableSmoothing: !0
},
    Dt = {},
    jt = {
  frequency: 30,
  minCutOff: 2.5,
  beta: 300,
  derivateCutOff: 2.5,
  thresholdCutOff: .5,
  thresholdBeta: 5
},
    qt = {
  maxTracks: 18,
  maxAge: 1e3,
  minSimilarity: .2,
  keypointTrackerParams: {
    keypointConfidenceThreshold: .3,
    keypointFalloff: [.026, .025, .025, .035, .035, .079, .079, .072, .072, .062, .062, .107, .107, .087, .087, .089, .089],
    minNumberOfKeypoints: 4
  }
},
    Ht = {
  maxTracks: 18,
  maxAge: 1e3,
  minSimilarity: .15,
  trackerParams: {}
};
exports.util = Vt;

function Ut(t, e, i, n) {
  for (var r = {}, o = 0, s = z; o < s.length; o++) {
    var a = s[o];
    r[a] = [e[i[a]].y * n.height, e[i[a]].x * n.width];
  }

  if (function (t, e) {
    return (t[e.left_hip].score > .2 || t[e.right_hip].score > .2) && (t[e.left_shoulder].score > .2 || t[e.right_shoulder].score > .2);
  }(e, i)) {
    var h = (r.left_hip[0] + r.right_hip[0]) / 2,
        l = (r.left_hip[1] + r.right_hip[1]) / 2,
        u = function (t, e, i, n, r) {
      for (var o = ["left_shoulder", "right_shoulder", "left_hip", "right_hip"], s = 0, a = 0, h = 0; h < o.length; h++) {
        (f = Math.abs(n - i[o[h]][0])) > s && (s = f), (d = Math.abs(r - i[o[h]][1])) > a && (a = d);
      }

      for (var l = 0, u = 0, c = 0, p = Object.keys(i); c < p.length; c++) {
        var f,
            d,
            m = p[c];
        if (!(t[e[m]].score < .2)) (f = Math.abs(n - i[m][0])) > l && (l = f), (d = Math.abs(r - i[m][1])) > u && (u = d);
      }

      return [s, a, l, u];
    }(e, i, r, h, l),
        c = u[0],
        p = u[1],
        f = u[2],
        d = u[3],
        m = Math.max(1.9 * p, 1.9 * c, 1.2 * f, 1.2 * d),
        y = [h - (m = Math.min(m, Math.max(l, n.width - l, h, n.height - h))), l - m];

    if (m > Math.max(n.width, n.height) / 2) return Xt(null == t, n);
    var g = 2 * m;
    return {
      yMin: y[0] / n.height,
      xMin: y[1] / n.width,
      yMax: (y[0] + g) / n.height,
      xMax: (y[1] + g) / n.width,
      height: (y[0] + g) / n.height - y[0] / n.height,
      width: (y[1] + g) / n.width - y[1] / n.width
    };
  }

  return Xt(null == t, n);
}

function Xt(t, e) {
  var i, n, r, o;
  return t ? e.width > e.height ? (i = 1, n = e.height / e.width, r = 0, o = (e.width / 2 - e.height / 2) / e.width) : (i = e.width / e.height, n = 1, r = (e.height / 2 - e.width / 2) / e.height, o = 0) : e.width > e.height ? (i = e.width / e.height, n = 1, r = (e.height / 2 - e.width / 2) / e.height, o = 0) : (i = 1, n = e.height / e.width, r = 0, o = (e.width / 2 - e.height / 2) / e.width), {
    yMin: r,
    xMin: o,
    yMax: r + i,
    xMax: o + n,
    height: i,
    width: n
  };
}

function Yt(t) {
  var e,
      i = null == t ? Lt : C({}, t);
  if (null == i.modelType) i.modelType = "SinglePose.Lightning";else if (Kt.indexOf(i.modelType) < 0) throw new Error("Invalid architecture " + i.modelType + ". Should be one of " + Kt);
  if (null == i.enableSmoothing && (i.enableSmoothing = !0), null != i.minPoseScore && (i.minPoseScore < 0 || i.minPoseScore > 1)) throw new Error("minPoseScore should be between 0.0 and 1.0");
  if (null != i.multiPoseMaxDimension && (i.multiPoseMaxDimension % 32 != 0 || i.multiPoseMaxDimension < 128 || i.multiPoseMaxDimension > 512)) throw new Error("multiPoseResolution must be a multiple of 32 and between 128 and 512");
  if ("MultiPose.Lightning" === i.modelType && null == i.enableTracking && (i.enableTracking = !0), "MultiPose.Lightning" === i.modelType && !0 === i.enableTracking) if (null == i.trackerType && (i.trackerType = Et.BoundingBox), i.trackerType === Et.Keypoint) null != i.trackerConfig ? i.trackerConfig = function (t) {
    var e = Wt(qt, t);
    e.keypointTrackerParams = C({}, qt.keypointTrackerParams), null != t.keypointTrackerParams && (null != t.keypointTrackerParams.keypointConfidenceThreshold && (e.keypointTrackerParams.keypointConfidenceThreshold = t.keypointTrackerParams.keypointConfidenceThreshold), null != t.keypointTrackerParams.keypointFalloff && (e.keypointTrackerParams.keypointFalloff = t.keypointTrackerParams.keypointFalloff), null != t.keypointTrackerParams.minNumberOfKeypoints && (e.keypointTrackerParams.minNumberOfKeypoints = t.keypointTrackerParams.minNumberOfKeypoints));
    return e;
  }(i.trackerConfig) : i.trackerConfig = qt;else {
    if (i.trackerType !== Et.BoundingBox) throw new Error("Tracker type not supported by MoveNet");
    null != i.trackerConfig ? i.trackerConfig = (e = i.trackerConfig, Wt(Ht, e)) : i.trackerConfig = Ht;
  }
  return i;
}

function Wt(t, e) {
  var i = {
    maxTracks: t.maxTracks,
    maxAge: t.maxAge,
    minSimilarity: t.minSimilarity
  };
  return null != e.maxTracks && (i.maxTracks = e.maxTracks), null != e.maxAge && (i.maxAge = e.maxAge), null != e.minSimilarity && (i.minSimilarity = e.minSimilarity), i;
}

var Gt = function () {
  function t(t, e) {
    this.moveNetModel = t, this.modelInputResolution = {
      height: 0,
      width: 0
    }, this.keypointIndexByName = Nt(At.MoveNet), "SinglePose.Lightning" === e.modelType ? (this.modelInputResolution.width = 192, this.modelInputResolution.height = 192) : "SinglePose.Thunder" === e.modelType && (this.modelInputResolution.width = 256, this.modelInputResolution.height = 256), this.multiPoseModel = "MultiPose.Lightning" === e.modelType, this.multiPoseModel || (this.keypointFilter = new Z(jt), this.cropRegionFilterYMin = new G(.9), this.cropRegionFilterXMin = new G(.9), this.cropRegionFilterYMax = new G(.9), this.cropRegionFilterXMax = new G(.9)), this.enableSmoothing = e.enableSmoothing, e.minPoseScore ? this.minPoseScore = e.minPoseScore : this.minPoseScore = .25, e.multiPoseMaxDimension ? this.multiPoseMaxDimension = e.multiPoseMaxDimension : this.multiPoseMaxDimension = 256, this.enableTracking = e.enableTracking, this.multiPoseModel && this.enableTracking && (e.trackerType === Et.Keypoint ? this.tracker = new Bt(e.trackerConfig) : e.trackerType === Et.BoundingBox && (this.tracker = new It(e.trackerConfig)), this.enableSmoothing && (this.keypointFilterMap = new Map()));
  }

  return t.prototype.runSinglePersonPoseModel = function (t) {
    return E(this, void 0, void 0, function () {
      var e, i, n, r, o;
      return A(this, function (s) {
        switch (s.label) {
          case 0:
            if (4 !== (e = this.moveNetModel.execute(t)).shape.length || 1 !== e.shape[0] || 1 !== e.shape[1] || 17 !== e.shape[2] || 3 !== e.shape[3]) throw e.dispose(), new Error("Unexpected output shape from model: [" + e.shape + "]");
            return "webgpu" === (0, _tfjsCore.getBackend)() ? [3, 1] : (i = e.dataSync(), [3, 3]);

          case 1:
            return [4, e.data()];

          case 2:
            i = s.sent(), s.label = 3;

          case 3:
            for (e.dispose(), n = {
              keypoints: [],
              score: 0
            }, r = 0, o = 0; o < 17; ++o) n.keypoints[o] = {
              y: i[3 * o],
              x: i[3 * o + 1],
              score: i[3 * o + 2]
            }, n.keypoints[o].score > .2 && (++r, n.score += n.keypoints[o].score);

            return r > 0 && (n.score /= r), [2, n];
        }
      });
    });
  }, t.prototype.runMultiPersonPoseModel = function (t) {
    return E(this, void 0, void 0, function () {
      var e, i, n, r, o, s, a, h;
      return A(this, function (l) {
        switch (l.label) {
          case 0:
            if (3 !== (e = this.moveNetModel.execute(t)).shape.length || 1 !== e.shape[0] || 56 !== e.shape[2]) throw e.dispose(), new Error("Unexpected output shape from model: [" + e.shape + "]");
            return "webgpu" === (0, _tfjsCore.getBackend)() ? [3, 1] : (i = e.dataSync(), [3, 3]);

          case 1:
            return [4, e.data()];

          case 2:
            i = l.sent(), l.label = 3;

          case 3:
            for (e.dispose(), n = [], r = i.length / 56, o = 0; o < r; ++o) for (n[o] = {
              keypoints: []
            }, s = 56 * o + 51, n[o].box = {
              yMin: i[s],
              xMin: i[s + 1],
              yMax: i[s + 2],
              xMax: i[s + 3],
              width: i[s + 3] - i[s + 1],
              height: i[s + 2] - i[s]
            }, a = 56 * o + 55, n[o].score = i[a], n[o].keypoints = [], h = 0; h < 17; ++h) n[o].keypoints[h] = {
              y: i[56 * o + 3 * h],
              x: i[56 * o + 3 * h + 1],
              score: i[56 * o + 3 * h + 2]
            };

            return [2, n];
        }
      });
    });
  }, t.prototype.estimatePoses = function (t, e, n) {
    return void 0 === e && (e = Dt), E(this, void 0, void 0, function () {
      var r, o, s, a, l, u;
      return A(this, function (c) {
        switch (c.label) {
          case 0:
            return e = function (t) {
              return null == t ? Dt : C({}, t);
            }(e), null == t ? (this.reset(), [2, []]) : (null == n ? W(t) && (n = 1e6 * t.currentTime) : n *= 1e3, r = U(t), o = q(r), s = (0, _tfjsCore.expandDims)(r, 0), t instanceof _tfjsCore.Tensor || r.dispose(), a = [], this.multiPoseModel ? [3, 2] : [4, this.estimateSinglePose(s, o, n)]);

          case 1:
            return a = c.sent(), [3, 4];

          case 2:
            return [4, this.estimateMultiplePoses(s, o, n)];

          case 3:
            a = c.sent(), c.label = 4;

          case 4:
            for (l = 0; l < a.length; ++l) for (u = 0; u < a[l].keypoints.length; ++u) a[l].keypoints[u].name = z[u], a[l].keypoints[u].y *= o.height, a[l].keypoints[u].x *= o.width;

            return [2, a];
        }
      });
    });
  }, t.prototype.estimateSinglePose = function (t, e, i) {
    return E(this, void 0, void 0, function () {
      var n,
          r,
          h,
          u,
          c = this;
      return A(this, function (p) {
        switch (p.label) {
          case 0:
            return this.cropRegion || (this.cropRegion = Xt(null == this.cropRegion, e)), n = (0, _tfjsCore.tidy)(function () {
              var e = (0, _tfjsCore.tensor2d)([[c.cropRegion.yMin, c.cropRegion.xMin, c.cropRegion.yMax, c.cropRegion.xMax]]),
                  i = (0, _tfjsCore.zeros)([1], "int32"),
                  n = [c.modelInputResolution.height, c.modelInputResolution.width];
              return (0, _tfjsCore.cast)(_tfjsCore.image.cropAndResize(t, e, i, n, "bilinear", 0), "int32");
            }), t.dispose(), [4, this.runSinglePersonPoseModel(n)];

          case 1:
            if (r = p.sent(), n.dispose(), r.score < this.minPoseScore) return this.reset(), [2, []];

            for (h = 0; h < r.keypoints.length; ++h) r.keypoints[h].y = this.cropRegion.yMin + r.keypoints[h].y * this.cropRegion.height, r.keypoints[h].x = this.cropRegion.xMin + r.keypoints[h].x * this.cropRegion.width;

            return null != i && this.enableSmoothing && (r.keypoints = this.keypointFilter.apply(r.keypoints, i, 1)), u = Ut(this.cropRegion, r.keypoints, this.keypointIndexByName, e), this.cropRegion = this.filterCropRegion(u), [2, [r]];
        }
      });
    });
  }, t.prototype.estimateMultiplePoses = function (t, e, i) {
    return E(this, void 0, void 0, function () {
      var n,
          r,
          o,
          s,
          h,
          u,
          c,
          p,
          f,
          d,
          m,
          y = this;
      return A(this, function (g) {
        switch (g.label) {
          case 0:
            return 32, e.width > e.height ? (r = this.multiPoseMaxDimension, o = Math.round(this.multiPoseMaxDimension * e.height / e.width), n = _tfjsCore.image.resizeBilinear(t, [o, r]), h = r, u = 32 * Math.ceil(o / 32), s = (0, _tfjsCore.pad)(n, [[0, 0], [0, u - o], [0, 0], [0, 0]])) : (r = Math.round(this.multiPoseMaxDimension * e.width / e.height), o = this.multiPoseMaxDimension, n = _tfjsCore.image.resizeBilinear(t, [o, r]), h = 32 * Math.ceil(r / 32), u = o, s = (0, _tfjsCore.pad)(n, [[0, 0], [0, 0], [0, h - r], [0, 0]])), n.dispose(), t.dispose(), c = (0, _tfjsCore.cast)(s, "int32"), s.dispose(), [4, this.runMultiPersonPoseModel(c)];

          case 1:
            for (p = g.sent(), c.dispose(), p = p.filter(function (t) {
              return t.score >= y.minPoseScore;
            }), d = 0; d < p.length; ++d) for (f = 0; f < p[d].keypoints.length; ++f) p[d].keypoints[f].y *= u / o, p[d].keypoints[f].x *= h / r;

            if (this.enableTracking && (this.tracker.apply(p, i), this.enableSmoothing)) {
              for (d = 0; d < p.length; ++d) this.keypointFilterMap.has(p[d].id) || this.keypointFilterMap.set(p[d].id, new Z(jt)), p[d].keypoints = this.keypointFilterMap.get(p[d].id).apply(p[d].keypoints, i, 1);

              m = this.tracker.getTrackIDs(), this.keypointFilterMap.forEach(function (t, e) {
                m.has(e) || y.keypointFilterMap.delete(e);
              });
            }

            return [2, p];
        }
      });
    });
  }, t.prototype.filterCropRegion = function (t) {
    if (t) {
      var e = this.cropRegionFilterYMin.apply(t.yMin),
          i = this.cropRegionFilterXMin.apply(t.xMin),
          n = this.cropRegionFilterYMax.apply(t.yMax),
          r = this.cropRegionFilterXMax.apply(t.xMax);
      return {
        yMin: e,
        xMin: i,
        yMax: n,
        xMax: r,
        height: n - e,
        width: r - i
      };
    }

    return this.cropRegionFilterYMin.reset(), this.cropRegionFilterXMin.reset(), this.cropRegionFilterYMax.reset(), this.cropRegionFilterXMax.reset(), null;
  }, t.prototype.dispose = function () {
    this.moveNetModel.dispose();
  }, t.prototype.reset = function () {
    this.cropRegion = null, this.resetFilters();
  }, t.prototype.resetFilters = function () {
    this.keypointFilter.reset(), this.cropRegionFilterYMin.reset(), this.cropRegionFilterXMin.reset(), this.cropRegionFilterYMax.reset(), this.cropRegionFilterXMax.reset();
  }, t;
}();

function Qt(t) {
  return void 0 === t && (t = Lt), E(this, void 0, void 0, function () {
    var i, n, r, o;
    return A(this, function (s) {
      switch (s.label) {
        case 0:
          return i = Yt(t), r = !0, i.modelUrl ? (r = i.modelUrl.indexOf("https://tfhub.dev") > -1, [4, (0, _tfjsConverter.loadGraphModel)(i.modelUrl, {
            fromTFHub: r
          })]) : [3, 2];

        case 1:
          return n = s.sent(), [3, 4];

        case 2:
          return o = void 0, "SinglePose.Lightning" === i.modelType ? o = "https://tfhub.dev/google/tfjs-model/movenet/singlepose/lightning/4" : "SinglePose.Thunder" === i.modelType ? o = "https://tfhub.dev/google/tfjs-model/movenet/singlepose/thunder/4" : "MultiPose.Lightning" === i.modelType && (o = "https://tfhub.dev/google/tfjs-model/movenet/multipose/lightning/1"), [4, (0, _tfjsConverter.loadGraphModel)(o, {
            fromTFHub: r
          })];

        case 3:
          n = s.sent(), s.label = 4;

        case 4:
          return "webgl" === (0, _tfjsCore.getBackend)() && (0, _tfjsCore.env)().set("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", 0), [2, new Gt(n, i)];
      }
    });
  });
}

var Zt = {
  architecture: "MobileNetV1",
  outputStride: 16,
  multiplier: .75,
  inputResolution: {
    height: 257,
    width: 257
  }
},
    $t = ["MobileNetV1", "ResNet50"],
    Jt = {
  MobileNetV1: [8, 16],
  ResNet50: [16]
},
    te = [8, 16, 32],
    ee = {
  MobileNetV1: [.5, .75, 1],
  ResNet50: [1]
},
    ie = [1, 2, 4],
    ne = {
  maxPoses: 1,
  flipHorizontal: !1
},
    re = {
  maxPoses: 5,
  flipHorizontal: !1,
  scoreThreshold: .5,
  nmsRadius: 20
},
    oe = [-123.15, -115.9, -103.06];

function se(t) {
  return Math.floor(t / 2);
}

var ae = function () {
  function t(t, e) {
    this.priorityQueue = new Array(t), this.numberOfElements = -1, this.getElementValue = e;
  }

  return t.prototype.enqueue = function (t) {
    this.priorityQueue[++this.numberOfElements] = t, this.swim(this.numberOfElements);
  }, t.prototype.dequeue = function () {
    var t = this.priorityQueue[0];
    return this.exchange(0, this.numberOfElements--), this.sink(0), this.priorityQueue[this.numberOfElements + 1] = null, t;
  }, t.prototype.empty = function () {
    return -1 === this.numberOfElements;
  }, t.prototype.size = function () {
    return this.numberOfElements + 1;
  }, t.prototype.all = function () {
    return this.priorityQueue.slice(0, this.numberOfElements + 1);
  }, t.prototype.max = function () {
    return this.priorityQueue[0];
  }, t.prototype.swim = function (t) {
    for (; t > 0 && this.less(se(t), t);) this.exchange(t, se(t)), t = se(t);
  }, t.prototype.sink = function (t) {
    for (; 2 * t <= this.numberOfElements;) {
      var e = 2 * t;
      if (e < this.numberOfElements && this.less(e, e + 1) && e++, !this.less(t, e)) break;
      this.exchange(t, e), t = e;
    }
  }, t.prototype.getValueAt = function (t) {
    return this.getElementValue(this.priorityQueue[t]);
  }, t.prototype.less = function (t, e) {
    return this.getValueAt(t) < this.getValueAt(e);
  }, t.prototype.exchange = function (t, e) {
    var i = this.priorityQueue[t];
    this.priorityQueue[t] = this.priorityQueue[e], this.priorityQueue[e] = i;
  }, t;
}();

function he(t, e, i, n, r, o) {
  for (var s = o.shape, a = s[0], h = s[1], l = !0, u = Math.max(i - r, 0), c = Math.min(i + r + 1, a), p = u; p < c; ++p) {
    for (var f = Math.max(n - r, 0), d = Math.min(n + r + 1, h), m = f; m < d; ++m) if (o.get(p, m, t) > e) {
      l = !1;
      break;
    }

    if (!l) break;
  }

  return l;
}

function le(t) {
  return E(this, void 0, void 0, function () {
    return A(this, function (e) {
      return [2, Promise.all(t.map(function (t) {
        return t.buffer();
      }))];
    });
  });
}

function ue(t, e, i, n) {
  return {
    y: n.get(t, e, i),
    x: n.get(t, e, i + 17)
  };
}

function ce(t, e, i) {
  var n = ue(t.heatmapY, t.heatmapX, t.id, i),
      r = n.y,
      o = n.x;
  return {
    x: t.heatmapX * e + o,
    y: t.heatmapY * e + r
  };
}

function pe(t, e, i, n) {
  var r = i.x,
      o = i.y;
  return t.some(function (t) {
    var i,
        s,
        a,
        h,
        l,
        u,
        c = t.keypoints;
    return i = o, s = r, a = c[n].y, h = c[n].x, (l = a - i) * l + (u = h - s) * u <= e;
  });
}

var fe = z.reduce(function (t, e, i) {
  return t[e] = i, t;
}, {}),
    de = [["nose", "left_eye"], ["left_eye", "left_ear"], ["nose", "right_eye"], ["right_eye", "right_ear"], ["nose", "left_shoulder"], ["left_shoulder", "left_elbow"], ["left_elbow", "left_wrist"], ["left_shoulder", "left_hip"], ["left_hip", "left_knee"], ["left_knee", "left_ankle"], ["nose", "right_shoulder"], ["right_shoulder", "right_elbow"], ["right_elbow", "right_wrist"], ["right_shoulder", "right_hip"], ["right_hip", "right_knee"], ["right_knee", "right_ankle"]].map(function (t) {
  var e = t[0],
      i = t[1];
  return [fe[e], fe[i]];
}),
    me = de.map(function (t) {
  return t[1];
}),
    ye = de.map(function (t) {
  return t[0];
});

function ge(t, e, i) {
  return t < e ? e : t > i ? i : t;
}

function ve(t, e, i, n) {
  return {
    y: ge(Math.round(t.y / e), 0, i - 1),
    x: ge(Math.round(t.x / e), 0, n - 1)
  };
}

function xe(t, e) {
  return {
    x: t.x + e.x,
    y: t.y + e.y
  };
}

function we(t, e, i, n, r, o, s, a) {
  void 0 === a && (a = 2);

  for (var h = n.shape, l = h[0], u = h[1], c = {
    y: e.y,
    x: e.x
  }, p = xe(c, function (t, e, i) {
    var n = i.shape[2] / 2;
    return {
      y: i.get(e.y, e.x, t),
      x: i.get(e.y, e.x, n + t)
    };
  }(t, ve(c, o, l, u), s)), f = 0; f < a; f++) {
    var d = ve(p, o, l, u),
        m = ue(d.y, d.x, i, r);
    p = xe({
      x: d.x * o,
      y: d.y * o
    }, {
      x: m.x,
      y: m.y
    });
  }

  var y = ve(p, o, l, u),
      g = n.get(y.y, y.x, i);
  return {
    y: p.y,
    x: p.x,
    name: z[i],
    score: g
  };
}

function ke(t, e, i, n, r, o) {
  var s = e.shape[2],
      a = me.length,
      h = new Array(s),
      l = t.part,
      u = t.score,
      c = ce(l, n, i);
  h[l.id] = {
    score: u,
    name: z[l.id],
    y: c.y,
    x: c.x
  };

  for (var p = a - 1; p >= 0; --p) {
    var f = me[p],
        d = ye[p];
    h[f] && !h[d] && (h[d] = we(p, h[f], d, e, i, n, o));
  }

  for (p = 0; p < a; ++p) {
    f = ye[p], d = me[p];
    h[f] && !h[d] && (h[d] = we(p, h[f], d, e, i, n, r));
  }

  return h;
}

function be(t, e, i) {
  return i.reduce(function (i, n, r) {
    var o = n.y,
        s = n.x,
        a = n.score;
    return pe(t, e, {
      y: o,
      x: s
    }, r) || (i += a), i;
  }, 0) / i.length;
}

function Me(t, e, i, n, r, o, s, a) {
  return void 0 === s && (s = .5), void 0 === a && (a = 20), E(this, void 0, void 0, function () {
    var h, l, u, c, p, f, d, m, y, g, v, x;
    return A(this, function (w) {
      switch (w.label) {
        case 0:
          return [4, le([t, e, i, n])];

        case 1:
          for (h = w.sent(), l = h[0], u = h[1], c = h[2], p = h[3], f = [], d = function (t, e, i) {
            for (var n = i.shape, r = n[0], o = n[1], s = n[2], a = new ae(r * o * s, function (t) {
              return t.score;
            }), h = 0; h < r; ++h) for (var l = 0; l < o; ++l) for (var u = 0; u < s; ++u) {
              var c = i.get(h, l, u);
              c < t || he(u, c, h, l, e, i) && a.enqueue({
                score: c,
                part: {
                  heatmapY: h,
                  heatmapX: l,
                  id: u
                }
              });
            }

            return a;
          }(s, 1, l), m = a * a; f.length < o && !d.empty();) y = d.dequeue(), g = ce(y.part, r, u), pe(f, m, g, y.part.id) || (v = ke(y, l, u, r, c, p), x = be(f, m, v), f.push({
            keypoints: v,
            score: x
          }));

          return [2, f];
      }
    });
  });
}

function Se(t) {
  var e = t.shape,
      i = e[0],
      n = e[1],
      r = e[2];
  return (0, _tfjsCore.tidy)(function () {
    var e,
        s,
        a = (0, _tfjsCore.reshape)(t, [i * n, r]),
        l = (0, _tfjsCore.argMax)(a, 0),
        u = (0, _tfjsCore.expandDims)((0, _tfjsCore.div)(l, (0, _tfjsCore.scalar)(n, "int32")), 1),
        p = (0, _tfjsCore.expandDims)((e = l, s = n, (0, _tfjsCore.tidy)(function () {
      var t = (0, _tfjsCore.div)(e, (0, _tfjsCore.scalar)(s, "int32"));
      return (0, _tfjsCore.sub)(e, (0, _tfjsCore.mul)(t, (0, _tfjsCore.scalar)(s, "int32")));
    })), 1);
    return (0, _tfjsCore.concat)([u, p], 1);
  });
}

function Te(t, e, i) {
  return (0, _tfjsCore.tidy)(function () {
    var n = function (t, e) {
      for (var i = [], n = 0; n < z.length; n++) {
        var r = t.get(n, 0).valueOf(),
            o = t.get(n, 1).valueOf(),
            a = Pe(r, o, n, e),
            h = a.x,
            l = a.y;
        i.push(l), i.push(h);
      }

      return (0, _tfjsCore.tensor2d)(i, [z.length, 2]);
    }(t, i);

    return (0, _tfjsCore.add)((0, _tfjsCore.cast)((0, _tfjsCore.mul)(t.toTensor(), (0, _tfjsCore.scalar)(e, "int32")), "float32"), n);
  });
}

function Pe(t, e, i, n) {
  return {
    y: n.get(t, e, i),
    x: n.get(t, e, i + z.length)
  };
}

function _e(t, e, i) {
  return E(this, void 0, void 0, function () {
    var n, r, o, s, a, h, l, u, c, p;
    return A(this, function (f) {
      switch (f.label) {
        case 0:
          return n = 0, r = Se(t), [4, Promise.all([t.buffer(), e.buffer(), r.buffer()])];

        case 1:
          return o = f.sent(), s = o[0], a = o[1], h = o[2], [4, (l = Te(h, i, a)).buffer()];

        case 2:
          return u = f.sent(), c = Array.from(function (t, e) {
            for (var i = e.shape[0], n = new Float32Array(i), r = 0; r < i; r++) {
              var o = e.get(r, 0),
                  s = e.get(r, 1);
              n[r] = t.get(o, s, r);
            }

            return n;
          }(s, h)), p = c.map(function (t, e) {
            return n += t, {
              y: u.get(e, 0),
              x: u.get(e, 1),
              score: t,
              name: z[e]
            };
          }), r.dispose(), l.dispose(), [2, {
            keypoints: p,
            score: n / p.length
          }];
      }
    });
  });
}

function Fe(t, e) {
  return (t - 1) % e == 0;
}

var Oe = "https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/",
    Re = "https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/";

function Ce(t, e) {
  return function (t, e) {
    return (t - 1) % e == 0;
  }(t, e) ? t : Math.floor(t / e) * e + 1;
}

var Ee = function () {
  function t(t, e) {
    this.posenetModel = t;
    var i = this.posenetModel.inputs[0].shape;

    _tfjsCore.util.assert(-1 === i[1] && -1 === i[2], function () {
      return "Input shape [" + i[1] + ", " + i[2] + "] must both be equal to or -1";
    });

    var n,
        o,
        s = (n = e.inputResolution, o = e.outputStride, {
      height: Ce(n.height, o),
      width: Ce(n.width, o)
    });
    !function (t) {
      _tfjsCore.util.assert(te.indexOf(t) >= 0, function () {
        return "outputStride of " + t + " is invalid. It must be either 8 or 16.";
      });
    }(e.outputStride), function (t, e) {
      _tfjsCore.util.assert(Fe(t.height, e), function () {
        return "height of " + t.height + " is invalid for output stride " + e + ".";
      }), _tfjsCore.util.assert(Fe(t.width, e), function () {
        return "width of " + t.width + " is invalid for output stride " + e + ".";
      });
    }(s, e.outputStride), this.inputResolution = s, this.outputStride = e.outputStride, this.architecture = e.architecture;
  }

  return t.prototype.estimatePoses = function (t, e) {
    return void 0 === e && (e = ne), E(this, void 0, void 0, function () {
      var i, n, r, o, s, a, h, l, c, p, y, g, v, x, w;
      return A(this, function (k) {
        switch (k.label) {
          case 0:
            return i = function (t) {
              var e = t;
              if (null == e.maxPoses && (e.maxPoses = 1), e.maxPoses <= 0) throw new Error("Invalid maxPoses " + e.maxPoses + ". Should be > 0.");

              if (e.maxPoses > 1) {
                if ((e = C({}, re, e)).scoreThreshold < 0 || e.scoreThreshold > 1) throw new Error("Invalid scoreThreshold " + e.scoreThreshold + ". Should be in range [0.0, 1.0]");
                if (e.nmsRadius <= 0) throw new Error("Invalid nmsRadius " + e.nmsRadius + ".");
              }

              return e;
            }(e), null == t ? [2, []] : (this.maxPoses = i.maxPoses, n = Y(t, {
              inputResolution: this.inputResolution,
              keepAspectRatio: !0
            }), r = n.imageTensor, o = n.padding, s = "ResNet50" === this.architecture ? (0, _tfjsCore.add)(r, oe) : nt(r, [-1, 1]), a = this.posenetModel.predict(s), "ResNet50" === this.architecture ? (h = (0, _tfjsCore.squeeze)(a[2], [0]), l = (0, _tfjsCore.squeeze)(a[3], [0]), c = (0, _tfjsCore.squeeze)(a[0], [0]), p = (0, _tfjsCore.squeeze)(a[1], [0])) : (h = (0, _tfjsCore.squeeze)(a[0], [0]), l = (0, _tfjsCore.squeeze)(a[1], [0]), c = (0, _tfjsCore.squeeze)(a[2], [0]), p = (0, _tfjsCore.squeeze)(a[3], [0])), y = (0, _tfjsCore.sigmoid)(l), 1 !== this.maxPoses ? [3, 2] : [4, _e(y, h, this.outputStride)]);

          case 1:
            return v = k.sent(), g = [v], [3, 4];

          case 2:
            return [4, Me(y, h, c, p, this.outputStride, this.maxPoses, i.scoreThreshold, i.nmsRadius)];

          case 3:
            g = k.sent(), k.label = 4;

          case 4:
            return x = q(t), w = function (t, e, i, n) {
              var r = e.height,
                  o = e.width,
                  s = r / (i.height * (1 - n.top - n.bottom)),
                  a = o / (i.width * (1 - n.left - n.right)),
                  h = -n.top * i.height,
                  l = -n.left * i.width;
              if (1 === a && 1 === s && 0 === h && 0 === l) return t;

              for (var u = 0, c = t; u < c.length; u++) for (var p = 0, f = c[u].keypoints; p < f.length; p++) {
                var d = f[p];
                d.x = (d.x + l) * a, d.y = (d.y + h) * s;
              }

              return t;
            }(g, x, this.inputResolution, o), i.flipHorizontal && (w = function (t, e) {
              for (var i = 0, n = t; i < n.length; i++) for (var r = 0, o = n[i].keypoints; r < o.length; r++) {
                var s = o[r];
                s.x = e.width - 1 - s.x;
              }

              return t;
            }(w, x)), r.dispose(), s.dispose(), (0, _tfjsCore.dispose)(a), h.dispose(), l.dispose(), c.dispose(), p.dispose(), y.dispose(), [2, w];
        }
      });
    });
  }, t.prototype.dispose = function () {
    this.posenetModel.dispose();
  }, t.prototype.reset = function () {}, t;
}();

function Ae(t) {
  return void 0 === t && (t = Zt), E(this, void 0, void 0, function () {
    var i, n, r, o, s;
    return A(this, function (a) {
      switch (a.label) {
        case 0:
          return "ResNet50" !== (i = function (t) {
            var e = t || Zt;
            if (null == e.architecture && (e.architecture = "MobileNetV1"), $t.indexOf(e.architecture) < 0) throw new Error("Invalid architecture " + e.architecture + ". Should be one of " + $t);
            if (null == e.inputResolution && (e.inputResolution = {
              height: 257,
              width: 257
            }), null == e.outputStride && (e.outputStride = 16), Jt[e.architecture].indexOf(e.outputStride) < 0) throw new Error("Invalid outputStride " + e.outputStride + ". Should be one of " + Jt[e.architecture] + " for architecture " + e.architecture + ".");
            if (null == e.multiplier && (e.multiplier = 1), ee[e.architecture].indexOf(e.multiplier) < 0) throw new Error("Invalid multiplier " + e.multiplier + ". Should be one of " + ee[e.architecture] + " for architecture " + e.architecture + ".");
            if (null == e.quantBytes && (e.quantBytes = 4), ie.indexOf(e.quantBytes) < 0) throw new Error("Invalid quantBytes " + e.quantBytes + ". Should be one of " + ie + " for architecture " + e.architecture + ".");
            if ("MobileNetV1" === e.architecture && 32 === e.outputStride && 1 !== e.multiplier) throw new Error("When using an output stride of 32, you must select 1 as the multiplier.");
            return e;
          }(t)).architecture ? [3, 2] : (h = i.outputStride, l = i.quantBytes, u = "model-stride" + h + ".json", n = 4 === l ? Re + "float/" + u : Re + "quant" + l + "/" + u, [4, (0, _tfjsConverter.loadGraphModel)(i.modelUrl || n)]);

        case 1:
          return r = a.sent(), [2, new Ee(r, i)];

        case 2:
          return o = function (t, e, i) {
            var n = {
              1: "100",
              .75: "075",
              .5: "050"
            },
                r = "model-stride" + t + ".json";
            return 4 === i ? Oe + "float/" + n[e] + "/" + r : Oe + "quant" + i + "/" + n[e] + "/" + r;
          }(i.outputStride, i.multiplier, i.quantBytes), [4, (0, _tfjsConverter.loadGraphModel)(i.modelUrl || o)];

        case 3:
          return s = a.sent(), [2, new Ee(s, i)];
      }

      var h, l, u;
    });
  });
}

function ze(t, e) {
  return E(this, void 0, void 0, function () {
    var i, n;
    return A(this, function (r) {
      switch (t) {
        case At.PoseNet:
          return [2, Ae(e)];

        case At.BlazePose:
          if (n = void 0, null != (i = e)) {
            if ("tfjs" === i.runtime) return [2, Ct(e)];
            if ("mediapipe" === i.runtime) return [2, j(e)];
            n = i.runtime;
          }

          throw new Error("Expect modelConfig.runtime to be either 'tfjs' or 'mediapipe', but got " + n);

        case At.MoveNet:
          return [2, Qt(e)];

        default:
          throw new Error(t + " is not a supported model name.");
      }
    });
  });
}

var Ie = {
  keypointsToNormalizedKeypoints: $
},
    Be = {
  modelType: {
    SINGLEPOSE_LIGHTNING: "SinglePose.Lightning",
    SINGLEPOSE_THUNDER: "SinglePose.Thunder",
    MULTIPOSE_LIGHTNING: "MultiPose.Lightning"
  }
};
exports.movenet = Be;
exports.calculators = Ie;
},{"@mediapipe/pose":"JOwF","@tensorflow/tfjs-converter":"Mtvo","@tensorflow/tfjs-core":"kSBl"}],"xuCv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearWebGLContext = clearWebGLContext;
exports.setWebGLContext = setWebGLContext;
exports.getWebGLContext = getWebGLContext;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const contexts = {};
const WEBGL_ATTRIBUTES = {
  alpha: false,
  antialias: false,
  premultipliedAlpha: false,
  preserveDrawingBuffer: false,
  depth: false,
  stencil: false,
  failIfMajorPerformanceCaveat: true
};

function clearWebGLContext(webGLVersion) {
  delete contexts[webGLVersion];
}

function setWebGLContext(webGLVersion, gl) {
  contexts[webGLVersion] = gl;
}

function getWebGLContext(webGLVersion) {
  if (!(webGLVersion in contexts)) {
    const newCtx = getWebGLRenderingContext(webGLVersion);

    if (newCtx !== null) {
      contexts[webGLVersion] = newCtx;
    } else {
      console.log('Could not get context for WebGL version', webGLVersion);
      return null;
    }
  }

  const gl = contexts[webGLVersion];

  if (gl.isContextLost()) {
    delete contexts[webGLVersion];
    return getWebGLContext(webGLVersion);
  }

  gl.disable(gl.DEPTH_TEST);
  gl.disable(gl.STENCIL_TEST);
  gl.disable(gl.BLEND);
  gl.disable(gl.DITHER);
  gl.disable(gl.POLYGON_OFFSET_FILL);
  gl.disable(gl.SAMPLE_COVERAGE);
  gl.enable(gl.SCISSOR_TEST);
  gl.enable(gl.CULL_FACE);
  gl.cullFace(gl.BACK);
  return contexts[webGLVersion];
}

function createCanvas(webGLVersion) {
  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {
    return new OffscreenCanvas(300, 150);
  } else if (typeof document !== 'undefined') {
    return document.createElement('canvas');
  } else {
    throw new Error('Cannot create a canvas in this context');
  }
}

function getWebGLRenderingContext(webGLVersion) {
  if (webGLVersion !== 1 && webGLVersion !== 2) {
    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');
  }

  const canvas = createCanvas(webGLVersion);
  canvas.addEventListener('webglcontextlost', ev => {
    ev.preventDefault();
    delete contexts[webGLVersion];
  }, false);

  if (webGLVersion === 1) {
    return canvas.getContext('webgl', WEBGL_ATTRIBUTES) || canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES);
  }

  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);
}
},{}],"jAWT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUnpackedMatrixTextureShapeWidthHeight = getUnpackedMatrixTextureShapeWidthHeight;
exports.getUnpackedArraySizeFromMatrixSize = getUnpackedArraySizeFromMatrixSize;
exports.getColorMatrixTextureShapeWidthHeight = getColorMatrixTextureShapeWidthHeight;
exports.getDenseTexShape = getDenseTexShape;
exports.getMatrixSizeFromUnpackedArraySize = getMatrixSizeFromUnpackedArraySize;
exports.decodeMatrixFromUnpackedColorRGBAArray = decodeMatrixFromUnpackedColorRGBAArray;
exports.getPackedMatrixTextureShapeWidthHeight = getPackedMatrixTextureShapeWidthHeight;
exports.getPackedRGBAArraySizeFromMatrixShape = getPackedRGBAArraySizeFromMatrixShape;
exports.getTextureConfig = getTextureConfig;
exports.PhysicalTextureType = exports.TextureUsage = exports.PackingScheme = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var PackingScheme;
exports.PackingScheme = PackingScheme;

(function (PackingScheme) {
  /**
   * All values in a single texel are densely packed without any constraints.
   *
   * This is how the shader encodes a tensor with shape = [2, 3, 4]
   * (indices are [batch, row, col]).
   *
   * 000|001   010|011   020|021
   * -------   -------   -------
   * 002|003   012|013   022|023
   *
   * 100|101   110|111   120|121
   * -------   -------   -------
   * 102|103   112|113   122|123
   *
   */
  PackingScheme[PackingScheme["DENSE"] = 0] = "DENSE";
  /**
   * Single texels contain only values from the same batch, and from adjacent
   * rows and columns.
   *
   * This is how the shader encodes a tensor with shape = [2, 3, 5]
   * (indices are [batch, row, col]).
   *
   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx
   * -------   -------   -------   -------   -------   -------
   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx
   *
   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx
   * -------   -------   -------   -------   -------   -------
   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx
   *
   */

  PackingScheme[PackingScheme["SHARED_BATCH"] = 1] = "SHARED_BATCH";
})(PackingScheme || (exports.PackingScheme = PackingScheme = {}));

var TextureUsage;
exports.TextureUsage = TextureUsage;

(function (TextureUsage) {
  TextureUsage[TextureUsage["RENDER"] = 0] = "RENDER";
  TextureUsage[TextureUsage["UPLOAD"] = 1] = "UPLOAD";
  TextureUsage[TextureUsage["PIXELS"] = 2] = "PIXELS";
  TextureUsage[TextureUsage["DOWNLOAD"] = 3] = "DOWNLOAD";
})(TextureUsage || (exports.TextureUsage = TextureUsage = {}));

var PhysicalTextureType;
exports.PhysicalTextureType = PhysicalTextureType;

(function (PhysicalTextureType) {
  PhysicalTextureType[PhysicalTextureType["UNPACKED_FLOAT16"] = 0] = "UNPACKED_FLOAT16";
  PhysicalTextureType[PhysicalTextureType["UNPACKED_FLOAT32"] = 1] = "UNPACKED_FLOAT32";
  PhysicalTextureType[PhysicalTextureType["PACKED_4X1_UNSIGNED_BYTE"] = 2] = "PACKED_4X1_UNSIGNED_BYTE";
  PhysicalTextureType[PhysicalTextureType["PACKED_2X2_FLOAT32"] = 3] = "PACKED_2X2_FLOAT32";
  PhysicalTextureType[PhysicalTextureType["PACKED_2X2_FLOAT16"] = 4] = "PACKED_2X2_FLOAT16";
})(PhysicalTextureType || (exports.PhysicalTextureType = PhysicalTextureType = {}));

function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {
  return [columns, rows];
}

function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {
  return matrixSize * channelsPerTexture;
}

function getColorMatrixTextureShapeWidthHeight(rows, columns) {
  return [columns * 4, rows];
}
/**
 * Get shape for densely packed RGBA texture.
 */


function getDenseTexShape(shape) {
  const size = _tfjsCore.util.sizeFromShape(shape);

  const texelsNeeded = Math.ceil(size / 4);
  return _tfjsCore.util.sizeToSquarishShape(texelsNeeded);
}

function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {
  if (unpackedSize % channelsPerTexture !== 0) {
    throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` + `${channelsPerTexture}`);
  }

  return unpackedSize / channelsPerTexture;
}

function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {
  const requiredSize = unpackedArray.length * channels / 4;

  if (matrix.length < requiredSize) {
    throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);
  }

  let dst = 0;

  for (let src = 0; src < unpackedArray.length; src += 4) {
    for (let c = 0; c < channels; c++) {
      matrix[dst++] = unpackedArray[src + c];
    }
  }
}

function getPackedMatrixTextureShapeWidthHeight(rows, columns) {
  return [Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))];
}

function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {
  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);
  return w * h * 4;
}

function getTextureConfig( // tslint:disable-next-line:no-any
gl, textureHalfFloatExtension) {
  // tslint:disable-next-line:no-any
  const glany = gl;
  let internalFormatFloat;
  let internalFormatHalfFloat;
  let internalFormatPackedHalfFloat;
  let internalFormatPackedFloat;
  let textureFormatFloat;
  let downloadTextureFormat;
  let downloadUnpackNumChannels;
  let defaultNumChannels;
  let textureTypeHalfFloat;
  let textureTypeFloat;

  if ((0, _tfjsCore.env)().getNumber('WEBGL_VERSION') === 2) {
    internalFormatFloat = glany.R32F;
    internalFormatHalfFloat = glany.R16F;
    internalFormatPackedHalfFloat = glany.RGBA16F;
    internalFormatPackedFloat = glany.RGBA32F;
    textureFormatFloat = glany.RED;
    downloadUnpackNumChannels = 4;
    defaultNumChannels = 1;
    textureTypeHalfFloat = glany.HALF_FLOAT;
    textureTypeFloat = glany.FLOAT;
  } else {
    internalFormatFloat = gl.RGBA;
    internalFormatHalfFloat = gl.RGBA;
    internalFormatPackedHalfFloat = gl.RGBA;
    internalFormatPackedFloat = glany.RGBA;
    textureFormatFloat = gl.RGBA;
    downloadUnpackNumChannels = 4;
    defaultNumChannels = 4;
    textureTypeHalfFloat = textureHalfFloatExtension != null ? textureHalfFloatExtension.HALF_FLOAT_OES : null;
    textureTypeFloat = gl.FLOAT;
  }

  downloadTextureFormat = gl.RGBA;
  return {
    internalFormatFloat,
    internalFormatHalfFloat,
    internalFormatPackedHalfFloat,
    internalFormatPackedFloat,
    textureFormatFloat,
    downloadTextureFormat,
    downloadUnpackNumChannels,
    defaultNumChannels,
    textureTypeHalfFloat,
    textureTypeFloat
  };
}
},{"@tensorflow/tfjs-core":"kSBl"}],"u1ML":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.callAndCheck = callAndCheck;
exports.canBeRepresented = canBeRepresented;
exports.getWebGLErrorMessage = getWebGLErrorMessage;
exports.getExtensionOrThrow = getExtensionOrThrow;
exports.createVertexShader = createVertexShader;
exports.createFragmentShader = createFragmentShader;
exports.createProgram = createProgram;
exports.linkProgram = linkProgram;
exports.validateProgram = validateProgram;
exports.createStaticVertexBuffer = createStaticVertexBuffer;
exports.createStaticIndexBuffer = createStaticIndexBuffer;
exports.getNumChannels = getNumChannels;
exports.createTexture = createTexture;
exports.validateTextureSize = validateTextureSize;
exports.createFramebuffer = createFramebuffer;
exports.bindVertexBufferToProgramAttribute = bindVertexBufferToProgramAttribute;
exports.bindTextureUnit = bindTextureUnit;
exports.unbindTextureUnit = unbindTextureUnit;
exports.getProgramUniformLocationOrThrow = getProgramUniformLocationOrThrow;
exports.getProgramUniformLocation = getProgramUniformLocation;
exports.bindTextureToProgramUniformSampler = bindTextureToProgramUniformSampler;
exports.bindCanvasToFramebuffer = bindCanvasToFramebuffer;
exports.bindColorTextureToFramebuffer = bindColorTextureToFramebuffer;
exports.unbindColorTextureFromFramebuffer = unbindColorTextureFromFramebuffer;
exports.validateFramebuffer = validateFramebuffer;
exports.getFramebufferErrorMessage = getFramebufferErrorMessage;
exports.getBatchDim = getBatchDim;
exports.getRowsCols = getRowsCols;
exports.getShapeAs3D = getShapeAs3D;
exports.getTextureShapeFromLogicalShape = getTextureShapeFromLogicalShape;
exports.isReshapeFree = isReshapeFree;
exports.getWebGLMaxTextureSize = getWebGLMaxTextureSize;
exports.resetMaxTextureSize = resetMaxTextureSize;
exports.resetMaxTexturesInShader = resetMaxTexturesInShader;
exports.getMaxTexturesInShader = getMaxTexturesInShader;
exports.getWebGLDisjointQueryTimerVersion = getWebGLDisjointQueryTimerVersion;
exports.hasExtension = hasExtension;
exports.isWebGLVersionEnabled = isWebGLVersionEnabled;
exports.isCapableOfRenderingToFloatTexture = isCapableOfRenderingToFloatTexture;
exports.isDownloadFloatTextureEnabled = isDownloadFloatTextureEnabled;
exports.isWebGLFenceEnabled = isWebGLFenceEnabled;
exports.assertNotComplex = assertNotComplex;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _canvas_util = require("./canvas_util");

var _tex_util = require("./tex_util");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function callAndCheck(gl, func) {
  const returnValue = func();

  if ((0, _tfjsCore.env)().getBool('DEBUG')) {
    checkWebGLError(gl);
  }

  return returnValue;
}

function checkWebGLError(gl) {
  const error = gl.getError();

  if (error !== gl.NO_ERROR) {
    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));
  }
} // https://en.wikipedia.org/wiki/Half-precision_floating-point_format


const MIN_FLOAT16 = 5.96e-8;
const MAX_FLOAT16 = 65504;

function canBeRepresented(num) {
  if ((0, _tfjsCore.env)().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 || MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16) {
    return true;
  }

  return false;
}

function getWebGLErrorMessage(gl, status) {
  switch (status) {
    case gl.NO_ERROR:
      return 'NO_ERROR';

    case gl.INVALID_ENUM:
      return 'INVALID_ENUM';

    case gl.INVALID_VALUE:
      return 'INVALID_VALUE';

    case gl.INVALID_OPERATION:
      return 'INVALID_OPERATION';

    case gl.INVALID_FRAMEBUFFER_OPERATION:
      return 'INVALID_FRAMEBUFFER_OPERATION';

    case gl.OUT_OF_MEMORY:
      return 'OUT_OF_MEMORY';

    case gl.CONTEXT_LOST_WEBGL:
      return 'CONTEXT_LOST_WEBGL';

    default:
      return `Unknown error code ${status}`;
  }
}

function getExtensionOrThrow(gl, extensionName) {
  return throwIfNull(gl, () => gl.getExtension(extensionName), 'Extension "' + extensionName + '" not supported on this browser.');
}

function createVertexShader(gl, vertexShaderSource) {
  const vertexShader = throwIfNull(gl, () => gl.createShader(gl.VERTEX_SHADER), 'Unable to create vertex WebGLShader.');
  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));
  callAndCheck(gl, () => gl.compileShader(vertexShader));

  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {
    console.log(gl.getShaderInfoLog(vertexShader));
    throw new Error('Failed to compile vertex shader.');
  }

  return vertexShader;
}

function createFragmentShader(gl, fragmentShaderSource) {
  const fragmentShader = throwIfNull(gl, () => gl.createShader(gl.FRAGMENT_SHADER), 'Unable to create fragment WebGLShader.');
  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));
  callAndCheck(gl, () => gl.compileShader(fragmentShader));

  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {
    logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));
    throw new Error('Failed to compile fragment shader.');
  }

  return fragmentShader;
}

const lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;

function logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {
  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);

  if (lineNumberRegexResult == null) {
    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);
    console.log(shaderSource);
    return;
  }

  const lineNumber = +lineNumberRegexResult[1];
  const shaderLines = shaderSource.split('\n');
  const pad = shaderLines.length.toString().length + 2;
  const linesWithLineNumbers = shaderLines.map((line, lineNumber) => _tfjsCore.util.rightPad((lineNumber + 1).toString(), pad) + line);
  let maxLineLength = 0;

  for (let i = 0; i < linesWithLineNumbers.length; i++) {
    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);
  }

  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);
  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);
  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);
  console.log(beforeErrorLines.join('\n'));
  console.log(shaderInfoLog.split('\n')[0]);
  console.log(`%c ${_tfjsCore.util.rightPad(errorLine[0], maxLineLength)}`, 'border:1px solid red; background-color:#e3d2d2; color:#a61717');
  console.log(afterErrorLines.join('\n'));
}

function createProgram(gl) {
  return throwIfNull(gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');
}

function linkProgram(gl, program) {
  callAndCheck(gl, () => gl.linkProgram(program));

  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
    console.log(gl.getProgramInfoLog(program));
    throw new Error('Failed to link vertex and fragment shaders.');
  }
}

function validateProgram(gl, program) {
  callAndCheck(gl, () => gl.validateProgram(program));

  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {
    console.log(gl.getProgramInfoLog(program));
    throw new Error('Shader program validation failed.');
  }
}

function createStaticVertexBuffer(gl, data) {
  const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');
  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));
  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));
  return buffer;
}

function createStaticIndexBuffer(gl, data) {
  const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');
  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));
  callAndCheck(gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));
  return buffer;
}

function getNumChannels() {
  if ((0, _tfjsCore.env)().getNumber('WEBGL_VERSION') === 2) {
    return 1;
  }

  return 4;
}

function createTexture(gl) {
  return throwIfNull(gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');
}

function validateTextureSize(width, height) {
  const maxTextureSize = (0, _tfjsCore.env)().getNumber('WEBGL_MAX_TEXTURE_SIZE');

  if (width <= 0 || height <= 0) {
    const requested = `[${width}x${height}]`;
    throw new Error('Requested texture size ' + requested + ' is invalid.');
  }

  if (width > maxTextureSize || height > maxTextureSize) {
    const requested = `[${width}x${height}]`;
    const max = `[${maxTextureSize}x${maxTextureSize}]`;
    throw new Error('Requested texture size ' + requested + ' greater than WebGL maximum on this browser / GPU ' + max + '.');
  }
}

function createFramebuffer(gl) {
  return throwIfNull(gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');
}

function bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {
  const loc = gl.getAttribLocation(program, attribute);

  if (loc === -1) {
    // The GPU compiler decided to strip out this attribute because it's unused,
    // thus no need to bind.
    return false;
  }

  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));
  callAndCheck(gl, () => gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes));
  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));
  return true;
}

function bindTextureUnit(gl, texture, textureUnit) {
  validateTextureUnit(gl, textureUnit);
  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));
  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));
}

function unbindTextureUnit(gl, textureUnit) {
  validateTextureUnit(gl, textureUnit);
  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));
  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
}

function getProgramUniformLocationOrThrow(gl, program, uniformName) {
  return throwIfNull(gl, () => gl.getUniformLocation(program, uniformName), 'uniform "' + uniformName + '" not present in program.');
}

function getProgramUniformLocation(gl, program, uniformName) {
  return gl.getUniformLocation(program, uniformName);
}

function bindTextureToProgramUniformSampler(gl, texture, uniformSamplerLocation, textureUnit) {
  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));
  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));
}

function bindCanvasToFramebuffer(gl) {
  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));
  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));
  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));
}

function bindColorTextureToFramebuffer(gl, texture, framebuffer) {
  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));
  callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));
}

function unbindColorTextureFromFramebuffer(gl, framebuffer) {
  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));
  callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));
}

function validateFramebuffer(gl) {
  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);

  if (status !== gl.FRAMEBUFFER_COMPLETE) {
    throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));
  }
}

function getFramebufferErrorMessage(gl, status) {
  switch (status) {
    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';

    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';

    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';

    case gl.FRAMEBUFFER_UNSUPPORTED:
      return 'FRAMEBUFFER_UNSUPPORTED';

    default:
      return `unknown error ${status}`;
  }
}

function throwIfNull(gl, returnTOrNull, failureMessage) {
  const tOrNull = callAndCheck(gl, () => returnTOrNull());

  if (tOrNull == null) {
    throw new Error(failureMessage);
  }

  return tOrNull;
}

function validateTextureUnit(gl, textureUnit) {
  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;
  const glTextureUnit = textureUnit + gl.TEXTURE0;

  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {
    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;
    throw new Error(`textureUnit must be in ${textureUnitRange}.`);
  }
}

function getBatchDim(shape, dimsToSkip = 2) {
  return _tfjsCore.util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));
}

function getRowsCols(shape) {
  if (shape.length === 0) {
    throw Error('Cannot get rows and columns of an empty shape array.');
  }

  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];
}

function getShapeAs3D(shape) {
  let shapeAs3D = [1, 1, 1];
  const isScalar = shape.length === 0 || shape.length === 1 && shape[0] === 1;

  if (!isScalar) {
    shapeAs3D = [getBatchDim(shape), ...getRowsCols(shape)];
  }

  return shapeAs3D;
}

function getTextureShapeFromLogicalShape(logShape, isPacked = false) {
  let maxTexSize = (0, _tfjsCore.env)().getNumber('WEBGL_MAX_TEXTURE_SIZE');

  if (isPacked) {
    maxTexSize = maxTexSize * 2; // This logic ensures we accurately count the number of packed texels needed
    // to accommodate the tensor. We can only pack values in the same texel if
    // they are from adjacent pairs of rows/cols within the same batch. So if a
    // tensor has 3 rows, we pretend it has 4 rows in order to account for the
    // fact that the texels containing the third row are half empty.

    logShape = logShape.map((d, i) => i >= logShape.length - 2 ? _tfjsCore.util.nearestLargerEven(logShape[i]) : logShape[i]); // Packed texture height is at least 2 (the channel height of a single
    // texel).

    if (logShape.length === 1) {
      logShape = [2, logShape[0]];
    }
  } // If logical shape is 2, we don't squeeze, since we want to match physical.


  if (logShape.length !== 2) {
    const squeezeResult = _tfjsCore.util.squeezeShape(logShape);

    logShape = squeezeResult.newShape;
  }

  let size = _tfjsCore.util.sizeFromShape(logShape);

  if (logShape.length <= 1 && size <= maxTexSize) {
    return [1, size];
  } else if (logShape.length === 2 && logShape[0] <= maxTexSize && logShape[1] <= maxTexSize) {
    return logShape;
  } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize && logShape[2] <= maxTexSize) {
    return [logShape[0] * logShape[1], logShape[2]];
  } else if (logShape.length === 3 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] <= maxTexSize) {
    return [logShape[0], logShape[1] * logShape[2]];
  } else if (logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTexSize && logShape[3] <= maxTexSize) {
    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];
  } else if (logShape.length === 4 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {
    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];
  } else {
    if (isPacked) {
      // For packed textures size equals the number of channels required to
      // accommodate the texture data. However in order to squarify such that
      // inner dimensions stay even, we rewrite size to equal the number of
      // texels. Then in the return statement we rehydrate the squarified
      // dimensions to channel units.
      const batchDim = getBatchDim(logShape);
      let rows = 2,
          cols = 2;

      if (logShape.length) {
        [rows, cols] = getRowsCols(logShape);
      }

      size = batchDim * (rows / 2) * (cols / 2);
      return _tfjsCore.util.sizeToSquarishShape(size).map(d => d * 2);
    }

    return _tfjsCore.util.sizeToSquarishShape(size);
  }
}

function isEven(n) {
  return n % 2 === 0;
}
/**
 * This determines whether reshaping a packed texture requires rearranging
 * the data within the texture, assuming 2x2 packing.
 */


function isReshapeFree(shape1, shape2) {
  shape1 = shape1.slice(-2);
  shape2 = shape2.slice(-2);

  if (_tfjsCore.util.arraysEqual(shape1, shape2)) {
    return true;
  }

  if (!shape1.length || !shape2.length) {
    // One of the shapes is a scalar.
    return true;
  }

  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 || shape2[1] === 0) {
    return true;
  }

  if (shape1.length !== shape2.length) {
    // One of the shapes is a vector.
    const shape1Cols = shape1.slice(-1)[0];
    const shape2Cols = shape2.slice(-1)[0];

    if (shape1Cols === shape2Cols) {
      return true;
    }

    if (isEven(shape1Cols) && isEven(shape2Cols) && (shape1[0] === 1 || shape2[0] === 1)) {
      return true;
    }
  }

  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);
} // We cache webgl params because the environment gets reset between
// unit tests and we don't want to constantly query the WebGLContext for
// MAX_TEXTURE_SIZE.


let MAX_TEXTURE_SIZE;
let MAX_TEXTURES_IN_SHADER;

function getWebGLMaxTextureSize(webGLVersion) {
  if (MAX_TEXTURE_SIZE == null) {
    const gl = (0, _canvas_util.getWebGLContext)(webGLVersion);
    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);
  }

  return MAX_TEXTURE_SIZE;
}

function resetMaxTextureSize() {
  MAX_TEXTURE_SIZE = null;
}

function resetMaxTexturesInShader() {
  MAX_TEXTURES_IN_SHADER = null;
}

function getMaxTexturesInShader(webGLVersion) {
  if (MAX_TEXTURES_IN_SHADER == null) {
    const gl = (0, _canvas_util.getWebGLContext)(webGLVersion);
    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
  } // We cap at 16 to avoid spurious runtime "memory exhausted" error.


  return Math.min(16, MAX_TEXTURES_IN_SHADER);
}

function getWebGLDisjointQueryTimerVersion(webGLVersion) {
  if (webGLVersion === 0) {
    return 0;
  }

  let queryTimerVersion;
  const gl = (0, _canvas_util.getWebGLContext)(webGLVersion);

  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') && webGLVersion === 2) {
    queryTimerVersion = 2;
  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {
    queryTimerVersion = 1;
  } else {
    queryTimerVersion = 0;
  }

  return queryTimerVersion;
}

function hasExtension(gl, extensionName) {
  const ext = gl.getExtension(extensionName);
  return ext != null;
}

function isWebGLVersionEnabled(webGLVersion) {
  try {
    const gl = (0, _canvas_util.getWebGLContext)(webGLVersion);

    if (gl != null) {
      return true;
    }
  } catch (e) {
    console.log('Error when getting WebGL context: ', e);
    return false;
  }

  return false;
}

function isCapableOfRenderingToFloatTexture(webGLVersion) {
  if (webGLVersion === 0) {
    return false;
  }

  const gl = (0, _canvas_util.getWebGLContext)(webGLVersion);

  if (webGLVersion === 1) {
    if (!hasExtension(gl, 'OES_texture_float')) {
      return false;
    }
  } else {
    if (!hasExtension(gl, 'EXT_color_buffer_float')) {
      return false;
    }
  }

  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);
  return isFrameBufferComplete;
}
/**
 * Check if we can download values from a float/half-float texture.
 *
 * Note that for performance reasons we use binding a texture to a framebuffer
 * as a proxy for ability to download float values later using readPixels. The
 * texture params of this texture will not match those in readPixels exactly
 * but if we are unable to bind some kind of float texture to the frameBuffer
 * then we definitely will not be able to read float values from it.
 */


function isDownloadFloatTextureEnabled(webGLVersion) {
  if (webGLVersion === 0) {
    return false;
  }

  const gl = (0, _canvas_util.getWebGLContext)(webGLVersion);

  if (webGLVersion === 1) {
    if (!hasExtension(gl, 'OES_texture_float')) {
      return false;
    }

    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {
      return false;
    }
  } else {
    if (hasExtension(gl, 'EXT_color_buffer_float')) {
      return createFloatTextureAndBindToFramebuffer(gl);
    }

    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';

    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {
      const textureHalfFloatExtension = gl.getExtension(COLOR_BUFFER_HALF_FLOAT);
      return createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension);
    }

    return false;
  }

  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);
  return isFrameBufferComplete;
}

function createFloatTextureAndBindToFramebuffer(gl) {
  const texConfig = (0, _tex_util.getTextureConfig)(gl);
  const texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  const width = 1;
  const height = 1;
  gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);
  const frameBuffer = gl.createFramebuffer();
  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
  const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
  gl.bindTexture(gl.TEXTURE_2D, null);
  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  gl.deleteTexture(texture);
  gl.deleteFramebuffer(frameBuffer);
  return isFrameBufferComplete;
}

function createHalfFloatTextureAndBindToFramebuffer( // tslint:disable-next-line:no-any
gl, textureHalfFloatExtension) {
  const texConfig = (0, _tex_util.getTextureConfig)(gl, textureHalfFloatExtension);
  const texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  const width = 1;
  const height = 1;
  gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);
  const frameBuffer = gl.createFramebuffer();
  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
  const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
  gl.bindTexture(gl.TEXTURE_2D, null);
  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  gl.deleteTexture(texture);
  gl.deleteFramebuffer(frameBuffer);
  return isFrameBufferComplete;
}

function isWebGLFenceEnabled(webGLVersion) {
  if (webGLVersion !== 2) {
    return false;
  }

  const gl = (0, _canvas_util.getWebGLContext)(webGLVersion); // tslint:disable-next-line:no-any

  const isEnabled = gl.fenceSync != null;
  return isEnabled;
}

function assertNotComplex(tensor, opName) {
  if (!Array.isArray(tensor)) {
    tensor = [tensor];
  }

  tensor.forEach(t => {
    if (t != null) {
      _tfjsCore.util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors ` + 'in the WebGL backend.');
    }
  });
}
},{"@tensorflow/tfjs-core":"kSBl","./canvas_util":"xuCv","./tex_util":"jAWT"}],"K5Ex":[function(require,module,exports) {
"use strict";

var _tfjsCore = require("@tensorflow/tfjs-core");

var _webgl_util = require("./webgl_util");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ENV = (0, _tfjsCore.env)();
/**
 * This file contains WebGL-specific flag registrations.
 */

/**
 * True if WebGL is supported.
 */

ENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);
/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */

ENV.registerFlag('WEBGL_VERSION', () => {
  if ((0, _webgl_util.isWebGLVersionEnabled)(2)) {
    return 2;
  } else if ((0, _webgl_util.isWebGLVersionEnabled)(1)) {
    return 1;
  }

  return 0;
});
/** Whether to check for numerical representation problems. */

ENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);
ENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);
/** Whether the WebGL backend will sometimes forward ops to the CPU. */

ENV.registerFlag('WEBGL_CPU_FORWARD', () => true);
/** Whether the WebGL backend will always use f16 textures for rendering. */

ENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);
/** Whether to turn all packing related flags on. */

ENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));
/** Whether we will pack the batchnormalization op. */

ENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack the clip op. */

ENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack the depthwise conv op. */

ENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack binary ops. */

ENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack unary ops. */

ENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack array ops. */

ENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack image ops. */

ENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack reduce ops. */

ENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));
/** Whether packed WebGL kernels lazily unpack their outputs. */

ENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will use the im2col algorithm to speed up convolutions. */

ENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));
/** The maximum texture dimension. */

ENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => (0, _webgl_util.getWebGLMaxTextureSize)(ENV.getNumber('WEBGL_VERSION')));
/** The maximum texture dimension. */

ENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => (0, _webgl_util.getMaxTexturesInShader)(ENV.getNumber('WEBGL_VERSION')));
/**
 * The disjoint_query_timer extension version.
 * 0: disabled, 1: EXT_disjoint_timer_query, 2:
 * EXT_disjoint_timer_query_webgl2.
 * In Firefox with WebGL 2.0,
 * EXT_disjoint_timer_query_webgl2 is not available, so we must use the
 * WebGL 1.0 extension.
 */

ENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {
  const webGLVersion = ENV.getNumber('WEBGL_VERSION');

  if (webGLVersion === 0) {
    return 0;
  }

  return (0, _webgl_util.getWebGLDisjointQueryTimerVersion)(webGLVersion);
});
/**
 * Whether the timer object from the disjoint_query_timer extension gives
 * timing information that is reliable.
 */

ENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 && !_tfjsCore.device_util.isMobile());
/**
 * Whether the device is physically capable of rendering to float32 textures.
 */

ENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => (0, _webgl_util.isCapableOfRenderingToFloatTexture)(ENV.getNumber('WEBGL_VERSION')));
/**
 * Whether rendering to float32 textures is enabled. If disabled, renders to
 * float16 textures.
 */

ENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {
  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ? false : ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');
});
/**
 * Whether downloading float textures is enabled (16 or 32 bit). If disabled,
 * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.
 */

ENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => (0, _webgl_util.isDownloadFloatTextureEnabled)(ENV.getNumber('WEBGL_VERSION')));
/** Whether the fence API is available. */

ENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => (0, _webgl_util.isWebGLFenceEnabled)(ENV.getNumber('WEBGL_VERSION')));
/**
 * Tensors with size <= than this will be uploaded as uniforms, not textures.
 */

ENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {
  // Use uniform uploads only when 32bit floats are supported. In
  // 16bit
  // environments there are problems with comparing a 16bit texture value
  // with a 32bit uniform value.
  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');
  return useUniforms ? 4 : 0;
});
/**
 * If the total number of bytes allocated on the GPU is greater than this
 * number, we will aggressively delete textures upon disposal with
 * gl.deleteMatrixTexture, rather than making them available for reuse.
 *
 * Default value -1 indicates that we will never aggressively delete textures.
 */

ENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {
  return -1;
}, threshold => {
  if (threshold < 0 && threshold !== -1) {
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` + `delete) or at least 0, but got ${threshold}.`);
  }
});
/**
 * Trigger a manual GL command flush if the threshold of time has passed since
 * previous Kernel execution. This can be useful for Andorid device where GL
 * command flush are delayed un til the end of javascript task. This value is
 * measured in millisecond. Typically you want to set this value to close to 1.
 *
 * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that
 * we will not enforce manual flush and depend on system default flush schedule.
 */

ENV.registerFlag('WEBGL_FLUSH_THRESHOLD', () => {
  return _tfjsCore.device_util.isMobile() && ENV.getBool('IS_CHROME') ? 1 : -1;
}, threshold => {
  if (threshold < 0 && threshold !== -1) {
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` + `manual flush) or at least 0, but got ${threshold}.`);
  }
});
/**
 * Threshold for input tensor size that determines whether WebGL backend will
 * delegate computation to CPU.
 *
 * Default value is 128.
 */

ENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);
/** Whether we will use shapes uniforms. */

ENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);
/**
 * Threshold for last dimension of input tensor that determines whether
 * WebGL backend for the Top K op will delegate computation to CPU. If input
 * is smaller than threshold then CPU will be used
 *
 * Default value is 100000.
 */

ENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);
/**
 * Threshold for K that determines whether
 * WebGL backend for the Top K op will delegate computation to CPU. If k
 * is larger than threshold then CPU will be used
 *
 * Default value is 128.
 */

ENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);
},{"@tensorflow/tfjs-core":"kSBl","./webgl_util":"u1ML"}],"fXvw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGlslDifferences = getGlslDifferences;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getGlslDifferences() {
  let version;
  let attribute;
  let varyingVs;
  let varyingFs;
  let texture2D;
  let output;
  let defineOutput;
  let defineSpecialNaN;
  let defineSpecialInf;
  let defineRound;

  if ((0, _tfjsCore.env)().getNumber('WEBGL_VERSION') === 2) {
    version = '#version 300 es';
    attribute = 'in';
    varyingVs = 'out';
    varyingFs = 'in';
    texture2D = 'texture';
    output = 'outputColor';
    defineOutput = 'out vec4 outputColor;'; // Use custom isnan definition to work across differences between
    // implementations on various platforms. While this should happen in ANGLE
    // we still see differences between android and windows (on chrome) when
    // using isnan directly.

    defineSpecialNaN = `
      bool isnan_custom(float val) {
        return (val > 0.0 || val < 0.0) ? false : val != 0.0;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `; // In webgl 2 we do not need to specify a custom isinf so there is no
    // need for a special INFINITY constant.

    defineSpecialInf = ``;
    defineRound = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `;
  } else {
    version = '';
    attribute = 'attribute';
    varyingVs = 'varying';
    varyingFs = 'varying';
    texture2D = 'texture2D';
    output = 'gl_FragColor';
    defineOutput = ''; // WebGL1 has no built in isnan so we define one here.

    defineSpecialNaN = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `;
    defineSpecialInf = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `;
    defineRound = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `;
  }

  return {
    version,
    attribute,
    varyingVs,
    varyingFs,
    texture2D,
    output,
    defineOutput,
    defineSpecialNaN,
    defineSpecialInf,
    defineRound
  };
}
},{"@tensorflow/tfjs-core":"kSBl"}],"tjqy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLogicalCoordinatesFromFlatIndex = getLogicalCoordinatesFromFlatIndex;
exports.getLogicalCoordinatesFromFlatIndexByUniform = getLogicalCoordinatesFromFlatIndexByUniform;
exports.dotify = dotify;
exports.getFlatIndexFrom3D = getFlatIndexFrom3D;
exports.ENCODE_FLOAT_SNIPPET = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Produces GLSL code that derives logical coordinates from a flat
 * index. The code performs integer division with each stride and decrements
 * the index until the index equals the final dimension coordinate.
 */
function getLogicalCoordinatesFromFlatIndex(coords, shape, index = 'index') {
  const strides = _tfjsCore.util.computeStrides(shape);

  return strides.map((stride, i) => {
    const line1 = `int ${coords[i]} = ${index} / ${stride}`;
    const line2 = i === strides.length - 1 ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` : `index -= ${coords[i]} * ${stride}`;
    return `${line1}; ${line2};`;
  }).join('');
}

function getLogicalCoordinatesFromFlatIndexByUniform(coords, shape, index = 'index') {
  const strides = _tfjsCore.util.computeStrides(shape);

  return strides.map((_, i) => {
    const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;
    const line2 = i === strides.length - 1 ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${i}]` : `index -= ${coords[i]} * outShapeStrides[${i}]`;
    return `${line1}; ${line2};`;
  }).join('');
}

function buildVec(x) {
  if (x.length === 1) {
    return `${x[0]}`;
  }

  return `vec${x.length}(${x.join(',')})`;
}
/**
 * Produces GLSL code that computes the dot product of the input x and y
 * vectors. Handles splitting inputs into increments of vec4s when necessary.
 */


function dotify(x, y) {
  if (x.length !== y.length) {
    throw new Error(`Vectors to be dotted must be of the same length -` + `got ${x.length} and ${y.length}`);
  }

  const slices = [];
  const nearestVec4 = Math.floor(x.length / 4);
  const nearestVec4Remainder = x.length % 4;

  for (let i = 0; i < nearestVec4; i++) {
    const xSlice = x.slice(i * 4, i * 4 + 4);
    const ySlice = y.slice(i * 4, i * 4 + 4);
    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);
  }

  if (nearestVec4Remainder !== 0) {
    let xSlice = x.slice(nearestVec4 * 4);
    let ySlice = y.slice(nearestVec4 * 4);

    if (xSlice.length === 1) {
      xSlice = xSlice.map(d => `float(${d})`);
      ySlice = ySlice.map(d => `float(${d})`);
    }

    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);
  }

  return slices.map((d, i) => `dot(${d})`).join('+');
}
/**
 * Produces GLSL that computes the flat index from 3D coordinates.
 */


function getFlatIndexFrom3D(shape) {
  const strides = _tfjsCore.util.computeStrides(shape).map(d => d.toString());

  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;
  }
`;
}

const ENCODE_FLOAT_SNIPPET = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
exports.ENCODE_FLOAT_SNIPPET = ENCODE_FLOAT_SNIPPET;
},{"@tensorflow/tfjs-core":"kSBl"}],"JMCa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DecodeMatrixProgram = void 0;

var _glsl_version = require("./glsl_version");

var shader_util = _interopRequireWildcard(require("./shader_compiler_util"));

var _tex_util = require("./tex_util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DecodeMatrixProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = false;
    this.packedOutput = true;
    this.outPackingScheme = _tex_util.PackingScheme.DENSE;
    const texShape = (0, _tex_util.getDenseTexShape)(outputShape);
    const glsl = (0, _glsl_version.getGlslDifferences)();
    this.outputShape = outputShape;
    this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx *
          vec2(${texShape[0]}, ${texShape[1]}));
        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${glsl.output} = result;
      }
    `;
  }

}

exports.DecodeMatrixProgram = DecodeMatrixProgram;
},{"./glsl_version":"fXvw","./shader_compiler_util":"tjqy","./tex_util":"jAWT"}],"RChy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DecodeMatrixPackedProgram = void 0;

var _glsl_version = require("./glsl_version");

var shader_util = _interopRequireWildcard(require("./shader_compiler_util"));

var _tex_util = require("./tex_util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DecodeMatrixPackedProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outPackingScheme = _tex_util.PackingScheme.DENSE;
    const texShape = (0, _tex_util.getDenseTexShape)(outputShape);
    const glsl = (0, _glsl_version.getGlslDifferences)();
    this.outputShape = outputShape;
    this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx *
          vec2(${texShape[0]}, ${texShape[1]}));
        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${glsl.output} = result;
      }
    `;
  }

}

exports.DecodeMatrixPackedProgram = DecodeMatrixPackedProgram;
},{"./glsl_version":"fXvw","./shader_compiler_util":"tjqy","./tex_util":"jAWT"}],"oHaq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EncodeFloatProgram = void 0;

var _glsl_version = require("./glsl_version");

var _shader_compiler_util = require("./shader_compiler_util");

var _tex_util = require("./tex_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EncodeFloatProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.outTexUsage = _tex_util.TextureUsage.DOWNLOAD;
    const glsl = (0, _glsl_version.getGlslDifferences)();
    this.outputShape = outputShape;
    this.userCode = `
      ${_shader_compiler_util.ENCODE_FLOAT_SNIPPET}

      void main() {
        float x = getAAtOutCoords();
        ${glsl.output} = encode_float(x);
      }
    `;
  }

}

exports.EncodeFloatProgram = EncodeFloatProgram;
},{"./glsl_version":"fXvw","./shader_compiler_util":"tjqy","./tex_util":"jAWT"}],"r0NW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EncodeFloatPackedProgram = void 0;

var _glsl_version = require("./glsl_version");

var _shader_compiler_util = require("./shader_compiler_util");

var _tex_util = require("./tex_util");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EncodeFloatPackedProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = false;
    this.outTexUsage = _tex_util.TextureUsage.DOWNLOAD;
    const glsl = (0, _glsl_version.getGlslDifferences)();
    this.outputShape = outputShape;
    this.userCode = `
      ${_shader_compiler_util.ENCODE_FLOAT_SNIPPET}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${glsl.output} = encode_float(x);
      }
    `;
  }

}

exports.EncodeFloatPackedProgram = EncodeFloatPackedProgram;
},{"./glsl_version":"fXvw","./shader_compiler_util":"tjqy","./tex_util":"jAWT"}],"o0jj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EncodeMatrixProgram = void 0;

var _glsl_version = require("./glsl_version");

var shader_util = _interopRequireWildcard(require("./shader_compiler_util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EncodeMatrixProgram {
  constructor(outputShape, texShape, inputIsUnsignedByte = false) {
    this.variableNames = ['A'];
    const glsl = (0, _glsl_version.getGlslDifferences)();
    const [height, width] = texShape;
    this.outputShape = outputShape;
    let output = `result`;

    if (inputIsUnsignedByte) {
      output = `floor(result * 255. + 0.5)`;
    }

    this.userCode = `
      ${shader_util.getFlatIndexFrom3D(outputShape)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / ${width};
        int c = imod(flatIndex, ${width});
        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);
        vec4 values = ${glsl.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${glsl.output} = vec4(${output}, 0., 0., 0.);
      }
    `;
  }

}

exports.EncodeMatrixProgram = EncodeMatrixProgram;
},{"./glsl_version":"fXvw","./shader_compiler_util":"tjqy"}],"UZCK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EncodeMatrixPackedProgram = void 0;

var _glsl_version = require("./glsl_version");

var shader_util = _interopRequireWildcard(require("./shader_compiler_util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/*
This is how the shader encodes a tensor with shape = [2, 3, 5]
(indices are [batch, row, col]).

000|001   002|003   004|xxx   020|021   022|023   024|xxx
-------   -------   -------   -------   -------   -------
010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx

100|101   102|103   104|xxx   120|121   122|123   124|xxx
-------   -------   -------   -------   -------   -------
110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx

Single texels contain only values from the same batch, and from adjacent rows
and columns.
 */
class EncodeMatrixPackedProgram {
  constructor(outputShape, texShape, inputIsUnsignedByte = false) {
    this.variableNames = ['A'];
    this.packedInputs = false;
    this.packedOutput = true;
    const glsl = (0, _glsl_version.getGlslDifferences)();
    const [height, width] = texShape;
    this.outputShape = outputShape;
    let mainLoop = '';
    let output = 'result';

    if (inputIsUnsignedByte) {
      output = 'floor(result * 255. + 0.5)';
    }

    for (let row = 0; row <= 1; row++) {
      for (let col = 0; col <= 1; col++) {
        const channel = row * 2 + col;
        mainLoop += `
          localCoords = coords;
          if(localCoords[2] + ${col} < ${outputShape[2]}) {
            localCoords[2] += ${col};
            if(localCoords[1] + ${row} < ${outputShape[1]}) {
              localCoords[1] += ${row};

              flatIndex = getFlatIndex(localCoords);
              offset = imod(flatIndex, 4);

              flatIndex = idiv(flatIndex, 4, 1.);

              r = flatIndex / ${width};
              c = imod(flatIndex, ${width});
              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);
              values = ${glsl.texture2D}(A, uv);

              if(offset == 0) {
                result[${channel}] = values[0];
              } else if(offset == 1) {
                result[${channel}] = values[1];
              } else if(offset == 2) {
                result[${channel}] = values[2];
              } else {
                result[${channel}] = values[3];
              }
            }
          }
        `;
      }
    }

    this.userCode = `
      ${shader_util.getFlatIndexFrom3D(outputShape)}

      void main() {
        ivec3 coords = getOutputCoords();

        vec4 result = vec4(0.);
        int flatIndex, r, c, offset;
        ivec3 localCoords;
        vec2 uv;
        vec4 values;

        ${mainLoop}

        ${glsl.output} = ${output};
      }
    `;
  }

}

exports.EncodeMatrixPackedProgram = EncodeMatrixPackedProgram;
},{"./glsl_version":"fXvw","./shader_compiler_util":"tjqy"}],"jgbg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createVertexShader = createVertexShader;
exports.createVertexBuffer = createVertexBuffer;
exports.createIndexBuffer = createIndexBuffer;
exports.getInternalFormatForFloat32MatrixTexture = getInternalFormatForFloat32MatrixTexture;
exports.createFloat32MatrixTexture = createFloat32MatrixTexture;
exports.getInternalFormatForFloat16MatrixTexture = getInternalFormatForFloat16MatrixTexture;
exports.createFloat16MatrixTexture = createFloat16MatrixTexture;
exports.getInternalFormatForUnsignedBytesMatrixTexture = getInternalFormatForUnsignedBytesMatrixTexture;
exports.createUnsignedBytesMatrixTexture = createUnsignedBytesMatrixTexture;
exports.getInternalFormatForPackedMatrixTexture = getInternalFormatForPackedMatrixTexture;
exports.createPackedMatrixTexture = createPackedMatrixTexture;
exports.getInternalFormatForFloat16PackedMatrixTexture = getInternalFormatForFloat16PackedMatrixTexture;
exports.createFloat16PackedMatrixTexture = createFloat16PackedMatrixTexture;
exports.bindVertexProgramAttributeStreams = bindVertexProgramAttributeStreams;
exports.uploadDenseMatrixToTexture = uploadDenseMatrixToTexture;
exports.uploadPixelDataToTexture = uploadPixelDataToTexture;
exports.createBufferFromOutputTexture = createBufferFromOutputTexture;
exports.downloadFloat32MatrixFromBuffer = downloadFloat32MatrixFromBuffer;
exports.downloadByteEncodedFloatMatrixFromOutputTexture = downloadByteEncodedFloatMatrixFromOutputTexture;
exports.downloadPackedMatrixFromBuffer = downloadPackedMatrixFromBuffer;
exports.downloadMatrixFromPackedOutputTexture = downloadMatrixFromPackedOutputTexture;

var _glsl_version = require("./glsl_version");

var tex_util = _interopRequireWildcard(require("./tex_util"));

var webgl_util = _interopRequireWildcard(require("./webgl_util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function createVertexShader(gl) {
  const glsl = (0, _glsl_version.getGlslDifferences)();
  const vertexShaderSource = `${glsl.version}
    precision highp float;
    ${glsl.attribute} vec3 clipSpacePos;
    ${glsl.attribute} vec2 uv;
    ${glsl.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return webgl_util.createVertexShader(gl, vertexShaderSource);
}

function createVertexBuffer(gl) {
  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]
  const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return webgl_util.createStaticVertexBuffer(gl, vertexArray);
}

function createIndexBuffer(gl) {
  // OpenGL (and WebGL) have "CCW == front" winding
  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);
}

function createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {
  webgl_util.validateTextureSize(width, height);
  const texture = webgl_util.createTexture(gl);
  const tex2d = gl.TEXTURE_2D;
  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));
  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));
  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));
  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));
  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));
  webgl_util.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));
  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
  return texture;
}

function getInternalFormatForFloat32MatrixTexture(textureConfig) {
  return textureConfig.internalFormatFloat;
}

function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);
}

function getInternalFormatForFloat16MatrixTexture(textureConfig) {
  return textureConfig.internalFormatHalfFloat;
}

function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);
}

function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {
  return textureConfig.downloadTextureFormat;
}

function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);
}

function getInternalFormatForPackedMatrixTexture(textureConfig) {
  return textureConfig.internalFormatPackedFloat;
}

function createPackedMatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);
}

function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {
  return textureConfig.internalFormatPackedHalfFloat;
}

function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);
}

function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {
  const posOffset = 0; // x is the first buffer element

  const uvOffset = 3 * 4; // uv comes after [x y z]

  const stride = 3 * 4 + 2 * 4; // xyz + uv, each entry is 4-byte float.

  webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));
  const success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);
  return success && webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);
}

function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {
  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));
  let dataForUpload, texelDataType, internalFormat;

  if (data instanceof Uint8Array) {
    dataForUpload = new Uint8Array(width * height * 4);
    texelDataType = gl.UNSIGNED_BYTE;
    internalFormat = gl.RGBA;
  } else {
    dataForUpload = new Float32Array(width * height * 4);
    texelDataType = gl.FLOAT;
    internalFormat = textureConfig.internalFormatPackedFloat;
  }

  dataForUpload.set(data);
  webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));
  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
}

function uploadPixelDataToTexture(gl, texture, pixels) {
  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));

  if (pixels.data instanceof Uint8Array) {
    webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));
  } else {
    webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));
  }

  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
}

function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {
  // Create and bind the buffer.
  const buffer = gl2.createBuffer();
  webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer)); // Initialize the buffer to the size of the texture in bytes.

  const bytesPerFloat = 4;
  const valuesPerTexel = 4;
  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;
  webgl_util.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ)); // Enqueue a command on the GPU command queue to copy of texture into the
  // buffer.

  webgl_util.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));
  webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));
  return buffer;
}

function downloadFloat32MatrixFromBuffer(gl, buffer, size) {
  const gl2 = gl;
  const downloadTarget = new Float32Array(size);
  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);
  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);
  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);
  return downloadTarget;
}

function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {
  const [w, h] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
  const numChannels = 4;
  const downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));
  webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget)); // By wrapping the buffer in a Float32Array, we use native browser IEEE 754
  // decoding of the 4 bytes that back each 32 bit float.

  return new Float32Array(downloadTarget.buffer);
}

function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {
  const gl2 = gl;
  const downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));
  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);
  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);
  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);
  return downloadTarget;
}

function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {
  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);
  webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));
  return packedRGBA;
}
},{"./glsl_version":"fXvw","./tex_util":"jAWT","./webgl_util":"u1ML"}],"GZkx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linearSearchLastTrue = linearSearchLastTrue;
exports.GPGPUContext = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _canvas_util = require("./canvas_util");

var gpgpu_util = _interopRequireWildcard(require("./gpgpu_util"));

var tex_util = _interopRequireWildcard(require("./tex_util"));

var webgl_util = _interopRequireWildcard(require("./webgl_util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class GPGPUContext {
  constructor(gl) {
    this.outputTexture = null;
    this.program = null;
    this.disposed = false;
    this.vertexAttrsAreBound = false;
    this.itemsToPoll = [];
    const glVersion = (0, _tfjsCore.env)().getNumber('WEBGL_VERSION');

    if (gl != null) {
      this.gl = gl;
      (0, _canvas_util.setWebGLContext)(glVersion, gl);
    } else {
      this.gl = (0, _canvas_util.getWebGLContext)(glVersion);
    } // WebGL 2.0 enables texture floats without an extension.


    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';
    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';

    if ((0, _tfjsCore.env)().getNumber('WEBGL_VERSION') === 1) {
      const TEXTURE_FLOAT = 'OES_texture_float';
      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';
      this.textureFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);

      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {
        this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);
      } else if ((0, _tfjsCore.env)().get('WEBGL_FORCE_F16_TEXTURES')) {
        throw new Error('GL context does not support half float textures, yet the ' + 'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');
      }

      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);

      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {
        this.colorBufferHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);
      } else if ((0, _tfjsCore.env)().get('WEBGL_FORCE_F16_TEXTURES')) {
        throw new Error('GL context does not support color renderable half floats, yet ' + 'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');
      }
    } else {
      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';

      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {
        this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);
      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {
        this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);
      } else {
        throw new Error('GL context does not support color renderable floats');
      }
    }

    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);
    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);
    this.framebuffer = webgl_util.createFramebuffer(this.gl);
    this.textureConfig = tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);
  }

  get debug() {
    return (0, _tfjsCore.env)().getBool('DEBUG');
  }

  dispose() {
    if (this.disposed) {
      return;
    }

    if (this.program != null) {
      console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');
    }

    if (this.outputTexture != null) {
      console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');
    }

    const gl = this.gl;
    webgl_util.callAndCheck(gl, () => gl.finish());
    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));
    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));
    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));
    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));
    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));
    this.disposed = true;
  }

  createFloat32MatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);
  }

  createFloat16MatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);
  }

  createUnsignedBytesMatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);
  }

  uploadPixelDataToTexture(texture, pixels) {
    this.throwIfDisposed();
    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);
  }

  uploadDenseMatrixToTexture(texture, width, height, data) {
    this.throwIfDisposed();
    gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);
  }

  createFloat16PackedMatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);
  }

  createPackedMatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);
  }

  deleteMatrixTexture(texture) {
    this.throwIfDisposed();

    if (this.outputTexture === texture) {
      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
      this.outputTexture = null;
    }

    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));
  }

  downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {
    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));
  }

  downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {
    return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);
  }

  downloadFloat32MatrixFromBuffer(buffer, size) {
    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);
  }

  createBufferFromTexture(texture, rows, columns) {
    this.bindTextureToFrameBuffer(texture);
    const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);
    this.unbindTextureToFrameBuffer();
    return result;
  }

  createAndWaitForFence() {
    const fenceContext = this.createFence(this.gl);
    return this.pollFence(fenceContext);
  }

  createFence(gl) {
    let query;
    let isFencePassed;

    if ((0, _tfjsCore.env)().getBool('WEBGL_FENCE_API_ENABLED')) {
      const gl2 = gl;
      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);
      gl.flush();

      isFencePassed = () => {
        const status = gl2.clientWaitSync(sync, 0, 0);
        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;
      };

      query = sync;
    } else if ((0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {
      query = this.beginQuery();
      this.endQuery();

      isFencePassed = () => this.isQueryAvailable(query, (0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));
    } else {
      // If we have no way to fence, return true immediately. This will fire in
      // WebGL 1.0 when there is no disjoint query timer. In this case, because
      // the fence passes immediately, we'll immediately ask for a download of
      // the texture, which will cause the UI thread to hang.
      isFencePassed = () => true;
    }

    return {
      query,
      isFencePassed
    };
  }

  downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {
    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));
  }

  createProgram(fragmentShaderSource) {
    this.throwIfDisposed();
    const gl = this.gl;
    const fragmentShader = webgl_util.createFragmentShader(gl, fragmentShaderSource);

    if (this.vertexShader == null) {
      this.vertexShader = gpgpu_util.createVertexShader(gl);
    }

    const program = webgl_util.createProgram(gl);
    webgl_util.callAndCheck(gl, () => gl.attachShader(program, this.vertexShader));
    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));
    webgl_util.linkProgram(gl, program);

    if (this.debug) {
      webgl_util.validateProgram(gl, program);
    }

    if (!this.vertexAttrsAreBound) {
      this.setProgram(program);
      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);
    }

    return program;
  }

  deleteProgram(program) {
    this.throwIfDisposed();

    if (program === this.program) {
      this.program = null;
    }

    if (program != null) {
      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));
    }
  }

  setProgram(program) {
    this.throwIfDisposed();
    this.program = program;

    if (this.program != null && this.debug) {
      webgl_util.validateProgram(this.gl, this.program);
    }

    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));
  }

  getUniformLocation(program, uniformName, shouldThrow = true) {
    this.throwIfDisposed();

    if (shouldThrow) {
      return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);
    } else {
      return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);
    }
  }

  getAttributeLocation(program, attribute) {
    this.throwIfDisposed();
    return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));
  }

  getUniformLocationNoThrow(program, uniformName) {
    this.throwIfDisposed();
    return this.gl.getUniformLocation(program, uniformName);
  }

  setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {
    this.throwIfDisposed();
    this.throwIfNoProgram();
    webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);
  }

  setOutputMatrixTexture(outputMatrixTexture, rows, columns) {
    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);
  }

  setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {
    this.throwIfDisposed();
    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);
    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);
  }

  setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {
    this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);
  }

  setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {
    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');
  }

  debugValidate() {
    if (this.program != null) {
      webgl_util.validateProgram(this.gl, this.program);
    }

    webgl_util.validateFramebuffer(this.gl);
  }

  executeProgram() {
    this.throwIfDisposed();
    this.throwIfNoProgram();
    const gl = this.gl;

    if (this.debug) {
      this.debugValidate();
    }

    webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));
  }

  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed();
    webgl_util.callAndCheck(this.gl, () => this.gl.finish());
  }

  getQueryTimerExtension() {
    if (this.disjointQueryTimerExtension == null) {
      this.disjointQueryTimerExtension = webgl_util.getExtensionOrThrow(this.gl, (0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');
    }

    return this.disjointQueryTimerExtension;
  }

  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }

  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }

  beginQuery() {
    if ((0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
      const gl2 = this.gl;
      const ext = this.getQueryTimerExtensionWebGL2();
      const query = gl2.createQuery();
      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);
      return query;
    }

    const ext = this.getQueryTimerExtensionWebGL1();
    const query = ext.createQueryEXT();
    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);
    return query;
  }

  endQuery() {
    if ((0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
      const gl2 = this.gl;
      const ext = this.getQueryTimerExtensionWebGL2();
      gl2.endQuery(ext.TIME_ELAPSED_EXT);
      return;
    }

    const ext = this.getQueryTimerExtensionWebGL1();
    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);
  }

  async waitForQueryAndGetTime(query) {
    await _tfjsCore.util.repeatedTry(() => this.disposed || // while testing contexts are created / disposed
    // in rapid succession, so without this check we
    // may poll for the query timer indefinitely
    this.isQueryAvailable(query, (0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));
    return this.getQueryTime(query, (0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));
  }

  getQueryTime(query, queryTimerVersion) {
    if (queryTimerVersion === 0) {
      return null;
    }

    if (queryTimerVersion === 2) {
      const gl2 = this.gl;
      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT); // Return milliseconds.

      return timeElapsedNanos / 1000000;
    } else {
      const ext = this.getQueryTimerExtensionWebGL1();
      const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT); // Return milliseconds.

      return timeElapsedNanos / 1000000;
    }
  }

  isQueryAvailable(query, queryTimerVersion) {
    if (queryTimerVersion === 0) {
      return true;
    }

    if (queryTimerVersion === 2) {
      const gl2 = this.gl;
      const ext = this.getQueryTimerExtensionWebGL2();
      const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);

      if (this.disjoint == null) {
        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
      }

      return available && !this.disjoint;
    } else {
      const ext = this.getQueryTimerExtensionWebGL1();
      const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);

      if (this.disjoint == null) {
        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
      }

      return available && !this.disjoint;
    }
  }

  pollFence(fenceContext) {
    return new Promise(resolve => {
      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());
    });
  }

  pollItems() {
    // Find the last query that has finished.
    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));

    for (let i = 0; i <= index; ++i) {
      const {
        resolveFn
      } = this.itemsToPoll[i];
      resolveFn();
    }

    this.itemsToPoll = this.itemsToPoll.slice(index + 1);
  }

  addItemToPoll(isDoneFn, resolveFn) {
    this.itemsToPoll.push({
      isDoneFn,
      resolveFn
    });

    if (this.itemsToPoll.length > 1) {
      // We already have a running loop that polls.
      return;
    } // Start a new loop that polls.


    _tfjsCore.util.repeatedTry(() => {
      this.pollItems(); // End the loop if no more items to poll.

      return this.itemsToPoll.length === 0;
    });
  }

  bindTextureToFrameBuffer(texture) {
    this.throwIfDisposed();
    webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);

    if (this.debug) {
      webgl_util.validateFramebuffer(this.gl);
    }
  }

  unbindTextureToFrameBuffer() {
    if (this.outputTexture != null) {
      webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);

      if (this.debug) {
        webgl_util.validateFramebuffer(this.gl);
      }
    } else {
      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
    }
  }

  downloadMatrixDriver(texture, downloadAndDecode) {
    this.bindTextureToFrameBuffer(texture);
    const result = downloadAndDecode();
    this.unbindTextureToFrameBuffer();
    return result;
  }

  setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {
    this.throwIfDisposed();
    const gl = this.gl;
    webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);

    if (this.debug) {
      webgl_util.validateFramebuffer(gl);
    }

    this.outputTexture = outputMatrixTextureMaybePacked;
    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));
    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));
  }

  setOutputMatrixWriteRegionDriver(x, y, width, height) {
    this.throwIfDisposed();
    webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));
  }

  throwIfDisposed() {
    if (this.disposed) {
      throw new Error('Attempted to use disposed GPGPUContext.');
    }
  }

  throwIfNoProgram() {
    if (this.program == null) {
      throw new Error('No GPU program is currently set.');
    }
  }

}
/**
 * Finds the index of the last true element using linear search.
 * Note: We can't do binary search because Chrome expects us to explicitly
 * test all fences before download:
 * https://github.com/tensorflow/tfjs/issues/1145
 */


exports.GPGPUContext = GPGPUContext;

function linearSearchLastTrue(arr) {
  let i = 0;

  for (; i < arr.length; ++i) {
    const isDone = arr[i]();

    if (!isDone) {
      break;
    }
  }

  return i - 1;
}
},{"@tensorflow/tfjs-core":"kSBl","./canvas_util":"xuCv","./gpgpu_util":"jgbg","./tex_util":"jAWT","./webgl_util":"u1ML"}],"xhhc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeShader = makeShader;
exports.getCoordsDataType = getCoordsDataType;
exports.getUniformInfoFromShape = getUniformInfoFromShape;
exports.squeezeInputInfo = squeezeInputInfo;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _glsl_version = require("./glsl_version");

var shader_util = _interopRequireWildcard(require("./shader_compiler_util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well
// mapped if any shader source code is changed in this file.
const {
  getBroadcastDims
} = _tfjsCore.backend_util;

function makeShader(inputsInfo, outputShape, program) {
  const prefixSnippets = [];
  inputsInfo.forEach(x => {
    const size = _tfjsCore.util.sizeFromShape(x.shapeInfo.logicalShape); // Snippet when we decided to upload the values as uniform.


    if (x.shapeInfo.isUniform) {
      prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);
    } else {
      prefixSnippets.push(`uniform sampler2D ${x.name};`);
      prefixSnippets.push(`uniform int offset${x.name};`);
    }

    if (program.enableShapeUniforms) {
      const {
        uniformShape
      } = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);

      switch (uniformShape.length) {
        case 1:
          prefixSnippets.push(`uniform int ${x.name}Shape;`);
          break;

        case 2:
          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);
          break;

        case 3:
          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);
          break;

        case 4:
          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);
          break;

        default:
          break;
      }

      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);
    }
  });

  if (program.enableShapeUniforms) {
    switch (outputShape.logicalShape.length) {
      case 1:
        prefixSnippets.push(`uniform int outShape;`);
        break;

      case 2:
        prefixSnippets.push(`uniform ivec2 outShape;`);
        prefixSnippets.push(`uniform int outShapeStrides;`);
        break;

      case 3:
        prefixSnippets.push(`uniform ivec3 outShape;`);
        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);
        break;

      case 4:
        prefixSnippets.push(`uniform ivec4 outShape;`);
        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);
        break;

      default:
        break;
    }

    prefixSnippets.push(`uniform ivec2 outTexShape;`);
  }

  if (program.customUniforms) {
    program.customUniforms.forEach(d => {
      prefixSnippets.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);
    });
  }

  const inputPrefixSnippet = prefixSnippets.join('\n');
  const inputSamplingSnippet = inputsInfo.map(x => getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms)).join('\n');
  const outTexShape = outputShape.texShape;
  const glsl = (0, _glsl_version.getGlslDifferences)();
  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);
  let outputSamplingSnippet;
  let floatTextureSetOutputSnippet;
  let shaderPrefix = getShaderPrefix(glsl);

  if (outputShape.isPacked) {
    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);
    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);
  } else {
    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);
    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);
  }

  if (program.packedInputs) {
    shaderPrefix += SHADER_PACKED_PREFIX;
  }

  const source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, program.userCode].join('\n');
  return source;
}

function getSamplerFromInInfo(inInfo, enableShapeUniforms = false) {
  const shape = inInfo.shapeInfo.logicalShape;

  switch (shape.length) {
    case 0:
      return getSamplerScalar(inInfo, enableShapeUniforms);

    case 1:
      return getSampler1D(inInfo, enableShapeUniforms);

    case 2:
      return getSampler2D(inInfo, enableShapeUniforms);

    case 3:
      return getSampler3D(inInfo, enableShapeUniforms);

    case 4:
      return getSampler4D(inInfo, enableShapeUniforms);

    case 5:
      return getSampler5D(inInfo);

    case 6:
      return getSampler6D(inInfo);

    default:
      throw new Error(`${shape.length}-D input sampling` + ` is not yet supported`);
  }
}

function getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {
  const shape = inInfo.shapeInfo.logicalShape;

  switch (shape.length) {
    case 0:
      return getPackedSamplerScalar(inInfo);

    case 1:
      return getPackedSampler1D(inInfo, enableShapeUniforms);

    case 2:
      return getPackedSampler2D(inInfo, enableShapeUniforms);

    case 3:
      return getPackedSampler3D(inInfo, enableShapeUniforms);

    default:
      return getPackedSamplerND(inInfo, enableShapeUniforms);
  }
}

function getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false, enableShapeUniforms) {
  let res = '';

  if (usesPackedTextures) {
    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);
  } else {
    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);
  }

  const inShape = inInfo.shapeInfo.logicalShape;
  const outShape = outShapeInfo.logicalShape;

  if (inShape.length <= outShape.length) {
    if (usesPackedTextures) {
      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);
    } else {
      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);
    }
  }

  return res;
}

function getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {
  switch (outShape.length) {
    case 0:
      return getOutputScalarCoords();

    case 1:
      return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);

    case 2:
      return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);

    case 3:
      return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);

    default:
      return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);
  }
}

function getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {
  switch (outShape.length) {
    case 0:
      return getOutputScalarCoords();

    case 1:
      return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);

    case 2:
      return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);

    case 3:
      return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);

    case 4:
      return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);

    case 5:
      return getOutput5DCoords(outShape, outTexShape);

    case 6:
      return getOutput6DCoords(outShape, outTexShape);

    default:
      throw new Error(`${outShape.length}-D output sampling is not yet supported`);
  }
}

function getFloatTextureSampleSnippet(glsl) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${glsl.texture2D}(textureSampler, uv).r;
    }
  `;
}

function getFloatTextureSetRSnippet(glsl) {
  return `
    void setOutput(float val) {
      ${glsl.output} = vec4(val, 0, 0, 0);
    }
  `;
}

function getFloatTextureSetRGBASnippet(glsl) {
  return `
    void setOutput(vec4 val) {
      ${glsl.output} = val;
    }
  `;
}

function getShaderPrefix(glsl) {
  const SHADER_PREFIX = `${glsl.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${glsl.varyingFs} vec2 resultUV;
    ${glsl.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${glsl.defineSpecialNaN}
    ${glsl.defineSpecialInf}
    ${glsl.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${SAMPLE_1D_SNIPPET}
    ${SAMPLE_2D_SNIPPET}
    ${SAMPLE_3D_SNIPPET}
  `;
  return SHADER_PREFIX;
}

const SAMPLE_1D_SNIPPET = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
const SAMPLE_2D_SNIPPET = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
const SAMPLE_3D_SNIPPET = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
const SHADER_PACKED_PREFIX = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;

function getOutputScalarCoords() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}

function getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];

  if (packedTexShape[0] === 1) {
    if (enableShapeUniforms) {
      return `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `;
    }

    return `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);
      }
    `;
  }

  if (packedTexShape[1] === 1) {
    if (enableShapeUniforms) {
      return `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `;
    }

    return `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);
      }
    `;
  }

  if (enableShapeUniforms) {
    return `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `;
  }

  return `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);
    }
  `;
}

function getOutput1DCoords(shape, texShape, enableShapeUniforms) {
  if (texShape[0] === 1) {
    if (enableShapeUniforms) {
      return `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `;
    }

    return `
      int getOutputCoords() {
        return int(resultUV.x * ${texShape[1]}.0);
      }
    `;
  }

  if (texShape[1] === 1) {
    if (enableShapeUniforms) {
      return `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `;
    }

    return `
      int getOutputCoords() {
        return int(resultUV.y * ${texShape[0]}.0);
      }
    `;
  }

  if (enableShapeUniforms) {
    return `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `;
  }

  return `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      return resTexRC.x * ${texShape[1]} + resTexRC.y;
    }
  `;
}

function getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {
  if (enableShapeUniforms) {
    return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  }

  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  const texelsInLogicalRow = Math.ceil(shape[2] / 2);
  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;

      int b = index / ${texelsInBatch};
      index -= b * ${texelsInBatch};

      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec3(b, r, c);
    }
  `;
}

function getOutput3DCoords(shape, texShape, enableShapeUniforms) {
  if (enableShapeUniforms) {
    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);
    return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${coordsFromIndexSnippet}
    return ivec3(r, c, d);
  }
`;
  }

  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      ${coordsFromIndexSnippet}
      return ivec3(r, c, d);
    }
  `;
}

function getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {
  if (enableShapeUniforms) {
    // TODO: support 5d and 6d
    return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  }

  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);
  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);
  let texelsInBatchN = texelsInBatch;
  let batches = ``;
  let coords = 'b, r, c';

  for (let b = 2; b < shape.length - 1; b++) {
    texelsInBatchN *= shape[shape.length - b - 1];
    batches = `
      int b${b} = index / ${texelsInBatchN};
      index -= b${b} * ${texelsInBatchN};
    ` + batches;
    coords = `b${b}, ` + coords;
  }

  return `
    ivec${shape.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;

      ${batches}

      int b = index / ${texelsInBatch};
      index -= b * ${texelsInBatch};

      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec${shape.length}(${coords});
    }
  `;
}

function getOutput4DCoords(shape, texShape, enableShapeUniforms) {
  if (enableShapeUniforms) {
    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${coordsFromIndexSnippet}
      return ivec4(r, c, d, d2);
    }
  `;
  }

  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      ${coordsFromIndexSnippet}
      return ivec4(r, c, d, d2);
    }
  `;
}

function getOutput5DCoords(shape, texShape) {
  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},
                             ${texShape[1]}));

      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;

      ${coordsFromIndexSnippet}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}

function getOutput6DCoords(shape, texShape) {
  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;

      ${coordsFromIndexSnippet}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}

function getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];

  if (_tfjsCore.util.arraysEqual(shape, texShape)) {
    if (enableShapeUniforms) {
      return `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `;
    }

    return `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      }
    `;
  } // texels needed to accommodate a logical row


  const texelsInLogicalRow = Math.ceil(shape[1] / 2);
  /**
   * getOutputCoords
   *
   * resTexRC: The rows and columns of the texels. If you move over one
   * texel to the right in the packed texture, you are moving over one column
   * (not two).
   *
   * index: The texel index
   */

  if (enableShapeUniforms) {
    return `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `;
  }

  return `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));

      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;
      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec2(r, c);
    }
  `;
}

function getOutput2DCoords(shape, texShape, enableShapeUniforms) {
  if (_tfjsCore.util.arraysEqual(shape, texShape)) {
    if (enableShapeUniforms) {
      return `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `;
    }

    return `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));
      }
    `;
  }

  if (shape[1] === 1) {
    if (enableShapeUniforms) {
      return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `;
    }

    return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${texShape[0]}, ${texShape[1]}));
        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `;
  }

  if (shape[0] === 1) {
    if (enableShapeUniforms) {
      return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `;
    }

    return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${texShape[0]}, ${texShape[1]}));
        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `;
  }

  if (enableShapeUniforms) {
    return `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `;
  }

  return `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      int r = index / ${shape[1]};
      int c = index - r * ${shape[1]};
      return ivec2(r, c);
    }
  `;
}

function getFlatOffsetUniformName(texName) {
  return `offset${texName}`;
}

function getPackedSamplerScalar(inputInfo) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const glsl = (0, _glsl_version.getGlslDifferences)();
  return `
    vec4 ${funcName}() {
      return ${glsl.texture2D}(${texName}, halfCR);
    }
  `;
}

function getSamplerScalar(inputInfo, enableShapeUniforms) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);

  if (inputInfo.shapeInfo.isUniform) {
    return `float ${funcName}() {return ${texName};}`;
  }

  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;

  if (texNumR === 1 && texNumC === 1) {
    return `
      float ${funcName}() {
        return sampleTexture(${texName}, halfCR);
      }
    `;
  }

  const offset = getFlatOffsetUniformName(texName);

  if (enableShapeUniforms) {
    return `
    float ${funcName}() {
      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
  }

  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;
  return `
    float ${funcName}() {
      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
}

function getPackedSampler1D(inputInfo, enableShapeUniforms) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const texShape = inputInfo.shapeInfo.texShape;
  const glsl = (0, _glsl_version.getGlslDifferences)();

  if (enableShapeUniforms) {
    return `
    vec4 ${funcName}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
  }

  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  return `
    vec4 ${funcName}(int index) {
      vec2 uv = packedUVfrom1D(
        ${packedTexShape[0]}, ${packedTexShape[1]}, index);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}

function getSampler1D(inputInfo, enableShapeUniforms) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);

  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int index) {
        ${getUniformSampler(inputInfo)}
      }
    `;
  }

  const texShape = inputInfo.shapeInfo.texShape;
  const tNumR = texShape[0];
  const tNumC = texShape[1];

  if (tNumC === 1 && tNumR === 1) {
    return `
      float ${funcName}(int index) {
        return sampleTexture(${texName}, halfCR);
      }
    `;
  }

  const offset = getFlatOffsetUniformName(texName);

  if (tNumC === 1) {
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${texName}TexShape[0]));
        return sampleTexture(${texName}, uv);
      }
    `;
    }

    return `
      float ${funcName}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  if (tNumR === 1) {
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int index) {
        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${texName}TexShape[1]), 0.5);
        return sampleTexture(${texName}, uv);
      }
    `;
    }

    return `
      float ${funcName}(int index) {
        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  if (enableShapeUniforms) {
    return `
    float ${funcName}(int index) {
      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
  }

  return `
    float ${funcName}(int index) {
      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
}

function getPackedSampler2D(inputInfo, enableShapeUniforms) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];
  const glsl = (0, _glsl_version.getGlslDifferences)();

  if (texShape != null && _tfjsCore.util.arraysEqual(shape, texShape)) {
    if (enableShapeUniforms) {
      return `
      vec4 ${funcName}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);

        return ${glsl.texture2D}(${texName}, uv);
      }
    `;
    }

    return `
      vec4 ${funcName}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);

        return ${glsl.texture2D}(${texName}, uv);
      }
    `;
  }

  if (enableShapeUniforms) {
    return `
    vec4 ${funcName}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
  }

  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  const valuesPerRow = Math.ceil(shape[1] / 2);
  return `
    vec4 ${funcName}(int row, int col) {
      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}

function getSampler2D(inputInfo, enableShapeUniforms) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const texShape = inputInfo.shapeInfo.texShape;

  if (texShape != null && _tfjsCore.util.arraysEqual(shape, texShape)) {
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
    }

    const texNumR = texShape[0];
    const texNumC = texShape[1];
    return `
    float ${funcName}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
  }

  const {
    newShape,
    keptDims
  } = _tfjsCore.util.squeezeShape(shape);

  const squeezedShape = newShape;

  if (squeezedShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
    const params = ['row', 'col'];
    return `
      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}
      float ${funcName}(int row, int col) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
  }

  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
  }

  const texNumR = texShape[0];
  const texNumC = texShape[1];
  const offset = getFlatOffsetUniformName(texName);

  if (texNumC === 1) {
    // index is used directly as physical (no risk of float16 overflow).
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col) {
        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));
        return sampleTexture(${texName}, uv);
      }
    `;
    }

    return `
    float ${funcName}(int row, int col) {
      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
  }

  if (texNumR === 1) {
    // index is used directly as physical (no risk of float16 overflow).
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col) {
        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);
        return sampleTexture(${texName}, uv);
      }
    `;
    }

    return `
    float ${funcName}(int row, int col) {
      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);
      return sampleTexture(${texName}, uv);
    }
  `;
  }

  if (enableShapeUniforms) {
    return `
      float ${funcName}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${texName}Shape[1] + col + ${offset};
        vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  return `
  float ${funcName}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${shape[1]} + col + ${offset};
    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
    return sampleTexture(${texName}, uv);
  }
`;
}

function getPackedSampler3D(inputInfo, enableShapeUniforms) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const texShape = inputInfo.shapeInfo.texShape;
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];

  if (shape[0] === 1) {
    const squeezedShape = shape.slice(1);
    const keptDims = [1, 2];
    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
    const params = ['b', 'row', 'col'];
    return `
        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}
        vec4 ${funcName}(int b, int row, int col) {
          return ${funcName}(${getSqueezedParams(params, keptDims)});
        }
      `;
  }

  const glsl = (0, _glsl_version.getGlslDifferences)();

  if (enableShapeUniforms) {
    return `
    vec4 ${funcName}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
  }

  const texNumR = packedTexShape[0];
  const texNumC = packedTexShape[1];
  const valuesPerRow = Math.ceil(shape[2] / 2);
  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);
  return `
    vec4 ${funcName}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}

function getSampler3D(inputInfo, enableShapeUniforms) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const stride0 = shape[1] * shape[2];
  const stride1 = shape[2];

  const {
    newShape,
    keptDims
  } = _tfjsCore.util.squeezeShape(shape);

  const squeezedShape = newShape;

  if (squeezedShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
    const params = ['row', 'col', 'depth'];
    return `
        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}
        float ${funcName}(int row, int col, int depth) {
          return ${funcName}(${getSqueezedParams(params, keptDims)});
        }
      `;
  }

  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${stride0}, ${stride1}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
  }

  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];
  const flatOffset = inputInfo.shapeInfo.flatOffset;

  if (texNumC === stride0 && flatOffset == null) {
    // texC is used directly as physical (no risk of float16 overflow).
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col, int depth) {
        int stride1 = ${texName}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
    }

    return `
        float ${funcName}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${texNumC}.0, ${texNumR}.0);
          return sampleTexture(${texName}, uv);
        }
      `;
  }

  if (texNumC === stride1 && flatOffset == null) {
    // texR is used directly as physical (no risk of float16 overflow).
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
    }

    return `
    float ${funcName}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
  }

  const offset = getFlatOffsetUniformName(texName);

  if (enableShapeUniforms) {
    return `
    float ${funcName}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];
      int stride1 = ${texName}Shape[2];
      int index = row * ${stride0} + col * ${stride1} + depth + ${offset};
      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);
      return sampleTexture(${texName}, uv);
    }
    `;
  }

  return `
      float ${funcName}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};
        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
        return sampleTexture(${texName}, uv);
      }
  `;
}

function getPackedSamplerND(inputInfo, enableShapeUniforms) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const glsl = (0, _glsl_version.getGlslDifferences)();

  if (enableShapeUniforms) {
    // TODO: support 5d and 6d
    return `
    vec4 ${funcName}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${texName}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${glsl.texture2D}(${texName}, uv);
    }
  `;
  }

  const shape = inputInfo.shapeInfo.logicalShape;
  const rank = shape.length;
  const texShape = inputInfo.shapeInfo.texShape;
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  const texNumR = packedTexShape[0];
  const texNumC = packedTexShape[1];
  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);
  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);
  let params = `int b, int row, int col`;
  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;

  for (let b = 2; b < rank - 1; b++) {
    params = `int b${b}, ` + params;
    texelsInBatch *= shape[rank - b - 1];
    index = `b${b} * ${texelsInBatch} + ` + index;
  }

  return `
    vec4 ${funcName}(${params}) {
      int index = ${index};
      int texR = index / ${texNumC};
      int texC = index - texR * ${texNumC};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}

function getSampler4D(inputInfo, enableShapeUniforms) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const stride2 = shape[3];
  const stride1 = shape[2] * stride2;
  const stride0 = shape[1] * stride1;

  const {
    newShape,
    keptDims
  } = _tfjsCore.util.squeezeShape(shape);

  if (newShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, newShape);
    const params = ['row', 'col', 'depth', 'depth2'];
    return `
      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}
      float ${funcName}(int row, int col, int depth, int depth2) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
  }

  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
  }

  const flatOffset = inputInfo.shapeInfo.flatOffset;
  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];
  const stride2Str = `int stride2 = ${texName}Shape[3];`;
  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;
  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;

  if (texNumC === stride0 && flatOffset == null) {
    // texC is used directly as physical (no risk of float16 overflow).
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        ${stride2Str}
        ${stride1Str}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
    }

    return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${stride1}, ${stride2}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  if (texNumC === stride2 && flatOffset == null) {
    // texR is used directly as physical (no risk of float16 overflow).
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${texName}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
    }

    return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  const offset = getFlatOffsetUniformName(texName);

  if (enableShapeUniforms) {
    return `
    float ${funcName}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${stride2Str}
      ${stride1Str}
      ${stride0Str}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
  }

  return `
    float ${funcName}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} +
          depth * ${stride2} + depth2;
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
}

function getSampler5D(inputInfo) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const stride3 = shape[4];
  const stride2 = shape[3] * stride3;
  const stride1 = shape[2] * stride2;
  const stride0 = shape[1] * stride1;

  const {
    newShape,
    keptDims
  } = _tfjsCore.util.squeezeShape(shape);

  if (newShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, newShape);
    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];
    return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
  }

  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +
          depth3;
        ${getUniformSampler(inputInfo)}
      }
    `;
  }

  const flatOffset = inputInfo.shapeInfo.flatOffset;
  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];

  if (texNumC === stride0 && flatOffset == null) {
    // texC is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${stride1}, ${stride2}, ${stride3}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  if (texNumC === stride3 && flatOffset == null) {
    // texR is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${shape[1] * shape[2] * shape[3]},
               ${shape[2] * shape[3]}, ${shape[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  const offset = getFlatOffsetUniformName(texName);
  return `
    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +
          depth2 * ${stride3} + depth3 + ${offset};
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
      return sampleTexture(${texName}, uv);
    }
  `;
}

function getSampler6D(inputInfo) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);

  const {
    newShape,
    keptDims
  } = _tfjsCore.util.squeezeShape(shape);

  if (newShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, newShape);
    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];
    return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
  }

  const stride4 = shape[5];
  const stride3 = shape[4] * stride4;
  const stride2 = shape[3] * stride3;
  const stride1 = shape[2] * stride2;
  const stride0 = shape[1] * stride1;

  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +
          dot(
            vec2(depth3, depth4),
            vec2(${stride4}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
  }

  const flatOffset = inputInfo.shapeInfo.flatOffset;
  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];

  if (texNumC === stride0 && flatOffset == null) {
    // texC is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  if (texNumC === stride4 && flatOffset == null) {
    // texR is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},
               ${shape[2] * shape[3] * shape[4]},
               ${shape[3] * shape[4]},
               ${shape[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }

  const offset = getFlatOffsetUniformName(texName);
  return `
    float ${funcName}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +
          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
      return sampleTexture(${texName}, uv);
    }
  `;
}

function getUniformSampler(inputInfo) {
  const texName = inputInfo.name;

  const inSize = _tfjsCore.util.sizeFromShape(inputInfo.shapeInfo.logicalShape);

  if (inSize < 2) {
    return `return ${texName};`;
  }

  return `
    for (int i = 0; i < ${inSize}; i++) {
      if (i == index) {
        return ${texName}[i];
      }
    }
  `;
}

function getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {
  const texName = inputInfo.name;
  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';
  const inRank = inputInfo.shapeInfo.logicalShape.length;
  const outRank = outShapeInfo.logicalShape.length;
  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
  const type = getCoordsDataType(outRank);
  const rankDiff = outRank - inRank;
  let coordsSnippet;
  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];

  if (inRank === 0) {
    coordsSnippet = '';
  } else if (outRank < 2 && broadcastDims.length >= 1) {
    coordsSnippet = 'coords = 0;';
  } else {
    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\n');
  }

  let unpackedCoordsSnippet = '';

  if (outRank < 2 && inRank > 0) {
    unpackedCoordsSnippet = 'coords';
  } else {
    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');
  }

  let output = `return outputValue;`;

  const inSize = _tfjsCore.util.sizeFromShape(inputInfo.shapeInfo.logicalShape);

  const isInputScalar = inSize === 1;

  const outSize = _tfjsCore.util.sizeFromShape(outShapeInfo.logicalShape);

  const isOutputScalar = outSize === 1;

  if (inRank === 1 && !isInputScalar && !isOutputScalar) {
    output = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  } else if (isInputScalar && !isOutputScalar) {
    if (outRank === 1) {
      output = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `;
    } else {
      output = `
        return vec4(outputValue.x);
      `;
    }
  } else if (broadcastDims.length) {
    const rows = inRank - 2;
    const cols = inRank - 1;

    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {
      output = `return vec4(outputValue.x);`;
    } else if (broadcastDims.indexOf(rows) > -1) {
      output = `return vec4(outputValue.x, outputValue.y, ` + `outputValue.x, outputValue.y);`;
    } else if (broadcastDims.indexOf(cols) > -1) {
      output = `return vec4(outputValue.xx, outputValue.zz);`;
    }
  }

  return `
    vec4 ${funcName}() {
      ${type} coords = getOutputCoords();
      ${coordsSnippet}
      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});
      ${output}
    }
  `;
}

function getSamplerAtOutputCoords(inputInfo, outShapeInfo) {
  const texName = inputInfo.name;
  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';
  const outTexShape = outShapeInfo.texShape;
  const inTexShape = inputInfo.shapeInfo.texShape;
  const inRank = inputInfo.shapeInfo.logicalShape.length;
  const outRank = outShapeInfo.logicalShape.length;

  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && _tfjsCore.util.arraysEqual(inTexShape, outTexShape)) {
    return `
      float ${funcName}() {
        return sampleTexture(${texName}, resultUV);
      }
    `;
  }

  const type = getCoordsDataType(outRank);
  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
  const rankDiff = outRank - inRank;
  let coordsSnippet;
  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];

  if (inRank === 0) {
    coordsSnippet = '';
  } else if (outRank < 2 && broadcastDims.length >= 1) {
    coordsSnippet = 'coords = 0;';
  } else {
    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\n');
  }

  let unpackedCoordsSnippet = '';

  if (outRank < 2 && inRank > 0) {
    unpackedCoordsSnippet = 'coords';
  } else {
    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');
  }

  return `
    float ${funcName}() {
      ${type} coords = getOutputCoords();
      ${coordsSnippet}
      return get${texFuncSnippet}(${unpackedCoordsSnippet});
    }
  `;
}

function getCoordsDataType(rank) {
  if (rank <= 1) {
    return 'int';
  } else if (rank === 2) {
    return 'ivec2';
  } else if (rank === 3) {
    return 'ivec3';
  } else if (rank === 4) {
    return 'ivec4';
  } else if (rank === 5) {
    return 'ivec5';
  } else if (rank === 6) {
    return 'ivec6';
  } else {
    throw Error(`GPU for rank ${rank} is not yet supported`);
  }
}

function getUniformInfoFromShape(isPacked, shape, texShape) {
  const {
    newShape
  } = _tfjsCore.util.squeezeShape(shape);

  const rank = shape.length;
  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;
  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;
  const useSqueezeShape = !isPacked && rank > 1 && !_tfjsCore.util.arraysEqual(shape, texShape) && newShape.length < rank || useSqueezePackedShape;
  const uniformShape = useSqueezeShape ? squeezeShape : shape;
  return {
    useSqueezeShape,
    uniformShape
  };
}
/** Returns a new input info (a copy) that has a squeezed logical shape. */


function squeezeInputInfo(inInfo, squeezedShape) {
  // Deep copy.
  const newInputInfo = JSON.parse(JSON.stringify(inInfo));
  newInputInfo.shapeInfo.logicalShape = squeezedShape;
  return newInputInfo;
}

function getSqueezedParams(params, keptDims) {
  return keptDims.map(d => params[d]).join(', ');
}
},{"@tensorflow/tfjs-core":"kSBl","./glsl_version":"fXvw","./shader_compiler_util":"tjqy"}],"eeKH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compileProgram = compileProgram;
exports.runProgram = runProgram;
exports.makeShaderKey = makeShaderKey;
exports.useShapeUniforms = useShapeUniforms;

var _tfjsCore = require("@tensorflow/tfjs-core");

var shader_compiler = _interopRequireWildcard(require("./shader_compiler"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function compileProgram(gpgpu, program, inputs, output) {
  const inputInfos = inputs.map((input, i) => {
    const shapeInfo = {
      logicalShape: input.shape,
      texShape: input.isUniform ? null : input.texData.texShape,
      isUniform: input.isUniform,
      isPacked: input.isUniform ? false : input.texData.isPacked,
      flatOffset: null
    };

    if (input.texData != null && input.texData.slice != null && input.texData.slice.flatOffset > 0) {
      shapeInfo.flatOffset = input.texData.slice.flatOffset;
    }

    return {
      name: program.variableNames[i],
      shapeInfo
    };
  });
  const inShapeInfos = inputInfos.map(x => x.shapeInfo);
  const outShapeInfo = {
    logicalShape: output.shape,
    texShape: output.texData.texShape,
    isUniform: false,
    isPacked: output.texData.isPacked,
    flatOffset: null
  };
  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);
  const webGLProgram = gpgpu.createProgram(source); // Add special uniforms (NAN, INFINITY)

  let infLoc = null;
  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);

  if ((0, _tfjsCore.env)().getNumber('WEBGL_VERSION') === 1) {
    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);
  } // Add user-defined uniforms


  const shouldThrow = false;
  const uniformLocations = {};
  const inShapesLocations = {};
  const inTexShapesLocations = {};

  for (let i = 0; i < program.variableNames.length; i++) {
    const varName = program.variableNames[i];
    uniformLocations[varName] = gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);
    uniformLocations[`offset${varName}`] = gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);

    if (program.enableShapeUniforms) {
      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}Shape`, shouldThrow);
      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}TexShape`, shouldThrow);
    }
  }

  let outShapeLocation;
  let outTexShapeLocation;
  let outShapeStridesLocation;

  if (program.enableShapeUniforms) {
    outShapeLocation = gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);
    outShapeStridesLocation = gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);
    outTexShapeLocation = gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);
  }

  const customUniformLocations = [];

  if (program.customUniforms) {
    program.customUniforms.forEach((d, i) => {
      customUniformLocations[i] = gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);
    });
  }

  return {
    program,
    source,
    webGLProgram,
    uniformLocations,
    customUniformLocations,
    inShapeInfos,
    outShapeInfo,
    infLoc,
    nanLoc,
    inShapesLocations,
    inTexShapesLocations,
    outShapeLocation,
    outShapeStridesLocation,
    outTexShapeLocation
  };
}

function validateBinaryAndProgram(shapeInfos, inputs) {
  if (shapeInfos.length !== inputs.length) {
    throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` + `was executed with ${inputs.length} inputs`);
  }

  shapeInfos.forEach((s, i) => {
    const shapeA = s.logicalShape;
    const input = inputs[i];
    const shapeB = input.shape;

    if (!_tfjsCore.util.arraysEqual(shapeA, shapeB)) {
      throw Error(`Binary was compiled with different shapes than ` + `the current args. Shapes ${shapeA} and ${shapeB} must match`);
    } // The input is uploaded as uniform.


    if (s.isUniform && input.isUniform) {
      return;
    }

    const texShapeA = s.texShape;
    const texShapeB = input.isUniform ? null : input.texData.texShape;

    if (!_tfjsCore.util.arraysEqual(texShapeA, texShapeB)) {
      throw Error(`Binary was compiled with different texture shapes than the` + ` current args. Shape ${texShapeA} and ${texShapeB} must match`);
    }
  });
}

function runProgram(gpgpu, binary, inputs, output, customUniformValues) {
  if (!binary.program.enableShapeUniforms) {
    validateBinaryAndProgram(binary.inShapeInfos, inputs);
    validateBinaryAndProgram([binary.outShapeInfo], [output]);
  }

  const outTex = output.texData.texture;
  const outTexShape = output.texData.texShape;

  if (output.texData.isPacked) {
    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);
  } else {
    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);
  }

  gpgpu.setProgram(binary.webGLProgram); // Set special uniforms (NAN, INFINITY)

  if ((0, _tfjsCore.env)().getNumber('WEBGL_VERSION') === 1) {
    if (binary.infLoc !== null) {
      gpgpu.gl.uniform1f(binary.infLoc, Infinity);
    }
  }

  if (binary.nanLoc !== null) {
    gpgpu.gl.uniform1f(binary.nanLoc, NaN);
  } // Set user-defined inputs


  inputs.forEach((input, i) => {
    const varName = binary.program.variableNames[i];
    const varLoc = binary.uniformLocations[varName];
    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];
    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];
    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];

    if (varShapeLoc) {
      const {
        uniformShape
      } = shader_compiler.getUniformInfoFromShape(binary.program.packedInputs, input.shape, input.texData.texShape);

      switch (uniformShape.length) {
        case 1:
          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));
          break;

        case 2:
          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));
          break;

        case 3:
          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));
          break;

        case 4:
          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));
          break;

        default:
          break;
      }
    }

    if (varTexShapeLoc) {
      gpgpu.gl.uniform2i(varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);
    }

    if (varLoc == null) {
      // The compiler inferred that this variable is not used in this shader.
      return;
    }

    if (input.isUniform) {
      // Upload the values of the tensor as uniform.
      if (_tfjsCore.util.sizeFromShape(input.shape) < 2) {
        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);
      } else {
        let vals = input.uniformValues;

        if (!(vals instanceof Float32Array)) {
          vals = new Float32Array(vals);
        }

        gpgpu.gl.uniform1fv(varLoc, vals);
      }

      return;
    } // If the input was sliced, upload the flat offset index.


    if (input.texData.slice != null && varOffsetLoc != null) {
      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);
    }

    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);
  });
  const outShapeLoc = binary.outShapeLocation;

  if (outShapeLoc) {
    switch (output.shape.length) {
      case 1:
        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));
        break;

      case 2:
        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));
        break;

      case 3:
        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));
        break;

      case 4:
        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));
        break;

      default:
        break;
    }
  }

  if (binary.outShapeStridesLocation) {
    const strides = _tfjsCore.util.computeStrides(output.shape);

    switch (output.shape.length) {
      case 2:
        gpgpu.gl.uniform1iv(binary.outShapeStridesLocation, new Int32Array(strides));
        break;

      case 3:
        gpgpu.gl.uniform2iv(binary.outShapeStridesLocation, new Int32Array(strides));
        break;

      case 4:
        gpgpu.gl.uniform3iv(binary.outShapeStridesLocation, new Int32Array(strides));
        break;

      default:
        break;
    }
  }

  if (binary.outTexShapeLocation) {
    gpgpu.gl.uniform2i(binary.outTexShapeLocation, output.texData.texShape[0], output.texData.texShape[1]);
  }

  if (binary.program.customUniforms && customUniformValues) {
    binary.program.customUniforms.forEach((d, i) => {
      const customLoc = binary.customUniformLocations[i];
      const customValue = customUniformValues[i];

      if (d.type === 'float') {
        gpgpu.gl.uniform1fv(customLoc, customValue);
      } else if (d.type === 'vec2') {
        gpgpu.gl.uniform2fv(customLoc, customValue);
      } else if (d.type === 'vec3') {
        gpgpu.gl.uniform3fv(customLoc, customValue);
      } else if (d.type === 'vec4') {
        gpgpu.gl.uniform4fv(customLoc, customValue);
      } else if (d.type === 'int') {
        gpgpu.gl.uniform1iv(customLoc, customValue);
      } else if (d.type === 'ivec2') {
        gpgpu.gl.uniform2iv(customLoc, customValue);
      } else if (d.type === 'ivec3') {
        gpgpu.gl.uniform3iv(customLoc, customValue);
      } else if (d.type === 'ivec4') {
        gpgpu.gl.uniform4iv(customLoc, customValue);
      } else {
        throw Error(`uniform type ${d.type} is not supported yet.`);
      }
    });
  }

  gpgpu.executeProgram();
}

function makeShaderKey(program, inputs, output) {
  let keyInputs = '';
  inputs.concat(output).forEach(x => {
    const hasOffset = x.texData != null && x.texData.slice != null && x.texData.slice.flatOffset > 0; // TODO: Remove the condition of !x.isUniform.

    if (program.enableShapeUniforms && !x.isUniform) {
      const xTexShape = x.texData.texShape;
      const {
        useSqueezeShape,
        uniformShape
      } = shader_compiler.getUniformInfoFromShape(program.packedInputs, x.shape, xTexShape);
      let rank1 = '',
          rank2 = '',
          rank34 = '';

      if (uniformShape.length === 1 && program.packedInputs) {
        const packedTexShape = [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];
        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;
      } else if (uniformShape.length === 2 && !program.packedInputs) {
        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;
      } else if (uniformShape.length > 2 && !program.packedInputs) {
        const strides = _tfjsCore.util.computeStrides(uniformShape);

        rank34 = `${strides[0] === xTexShape[1]}_${strides[strides.length - 1] === xTexShape[1]}`;
      }

      const xRank = x.shape.length;

      const isLogicalShapTexShapeEqual = xRank === 2 && _tfjsCore.util.arraysEqual(x.shape, xTexShape);

      const isScalar = _tfjsCore.util.sizeFromShape(x.shape) === 1;

      const broadcastDims = _tfjsCore.backend_util.getBroadcastDims(x.shape, output.shape);

      const isInOutTexShapeEqual = !program.packedInputs && xRank === output.shape.length && _tfjsCore.util.arraysEqual(xTexShape, output.texData.texShape);

      const isTexShapeGreaterThanOne = program.packedInputs || xRank > 2 ? '' : `${xTexShape[0] > 1}_${xTexShape[1] > 1}`; // These key components are needed due to shader_compiler is embedding
      // them in the shader.
      // |xRank| is used to determine the coords length. See
      // get[Packed]SamplerAtOutputCoords.
      // |isInOutTexShapeEqual| is used to determine whether going to an
      // optimization path in getSamplerAtOutputCoords.
      // |useSqueezeShape| is extracted from squeezeInputInfo of
      // getSampler[2|3|4]D/getPackedSampler3D.
      // |isScalar| is extracted from isInputScalar/isOutputScalar in
      // getPackedSamplerAtOutputCoords.
      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.
      // |isLogicalShapTexShapeEqual| is used in
      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.
      // |rank1| is used in getOutputPacked1DCoords.
      // |rank2| is used in getOutput2DCoords.
      // |rank34| is used in getSampler3D/getSampler4D.
      // |isTexShapeGreaterThanOne| are used in
      // getSampler[Scalar|1D|2D]/getOutput1DCoords.

      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${useSqueezeShape}_${uniformShape.length}_${isScalar}_${broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;
    } else {
      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;
      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;
    }
  });
  const keyUserCode = program.userCode;
  let key = program.constructor.name; // Fast string concat. See https://jsperf.com/string-concatenation/14.

  key += '_' + keyInputs + '_' + keyUserCode + `${(0, _tfjsCore.env)().getNumber('WEBGL_VERSION')}`;
  return key;
}

function useShapeUniforms(rank) {
  // TODO: Remove the limitaion of rank <= 4.
  return (0, _tfjsCore.env)().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;
}
},{"@tensorflow/tfjs-core":"kSBl","./shader_compiler":"xhhc"}],"nVKy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertNotComplex = assertNotComplex;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function assertNotComplex(tensor, opName) {
  if (!Array.isArray(tensor)) {
    tensor = [tensor];
  }

  tensor.forEach(t => {
    if (t != null) {
      _tfjsCore.util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors in the CPU backend.`);
    }
  });
}
},{"@tensorflow/tfjs-core":"kSBl"}],"WHC3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.simpleAbsImpl = simpleAbsImpl;
exports.absConfig = exports.abs = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _cpu_util = require("../cpu_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function simpleAbsImpl(vals) {
  const resultValues = new Float32Array(vals.length);

  for (let i = 0; i < vals.length; ++i) {
    resultValues[i] = Math.abs(vals[i]);
  }

  return resultValues;
}

const abs = args => {
  const {
    x
  } = args.inputs;
  const cpuBackend = args.backend;
  (0, _cpu_util.assertNotComplex)(x, 'abs');
  let resultValues = new Float32Array(_tfjsCore.util.sizeFromShape(x.shape));
  const values = cpuBackend.data.get(x.dataId).values;
  resultValues = simpleAbsImpl(values);
  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');
};

exports.abs = abs;
const absConfig = {
  kernelName: _tfjsCore.Abs,
  backendName: 'cpu',
  kernelFunc: abs
};
exports.absConfig = absConfig;
},{"@tensorflow/tfjs-core":"kSBl","../cpu_util":"nVKy"}],"v0i6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSimpleBinaryKernelImpl = createSimpleBinaryKernelImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Template that creates implementation for binary ops. Supports broadcast.
 */
function createSimpleBinaryKernelImpl(op) {
  return (aShape, bShape, aVals, bVals, dtype) => {
    const newShape = _tfjsCore.backend_util.assertAndGetBroadcastShape(aShape, bShape);

    const resultRank = newShape.length;

    const resultStrides = _tfjsCore.util.computeStrides(newShape);

    const resultSize = _tfjsCore.util.sizeFromShape(newShape);

    const result = _tfjsCore.util.getTypedArrayFromDType(dtype, resultSize);

    const aRank = aShape.length;
    const bRank = bShape.length;

    const aStrides = _tfjsCore.util.computeStrides(aShape);

    const bStrides = _tfjsCore.util.computeStrides(bShape);

    const aBroadcastDims = _tfjsCore.backend_util.getBroadcastDims(aShape, newShape);

    const bBroadcastDims = _tfjsCore.backend_util.getBroadcastDims(bShape, newShape);

    if (aBroadcastDims.length + bBroadcastDims.length === 0) {
      for (let i = 0; i < result.length; ++i) {
        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);
      }
    } else {
      for (let i = 0; i < result.length; ++i) {
        const loc = _tfjsCore.util.indexToLoc(i, resultRank, resultStrides);

        const aLoc = loc.slice(-aRank);
        aBroadcastDims.forEach(d => aLoc[d] = 0);

        const aIndex = _tfjsCore.util.locToIndex(aLoc, aRank, aStrides);

        const bLoc = loc.slice(-bRank);
        bBroadcastDims.forEach(d => bLoc[d] = 0);

        const bIndex = _tfjsCore.util.locToIndex(bLoc, bRank, bStrides);

        result[i] = op(aVals[aIndex], bVals[bIndex]);
      }
    }

    return [result, newShape];
  };
}
},{"@tensorflow/tfjs-core":"kSBl"}],"KmEe":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.complex = complex;
exports.complexConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function complex(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    real,
    imag
  } = inputs;
  const realVals = backend.data.get(real.dataId).values;
  const imagVals = backend.data.get(imag.dataId).values;
  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');
  const complex = backend.data.get(complexInfo.dataId); // The complex tensor owns the underlying real and imag tensorInfos, only the
  // complex tensor tracks refCount, when complexData is disposed the
  // underlying tensorData will be disposed.

  complex.complexTensorInfos = {
    real: backend.makeTensorInfo(real.shape, 'float32', realVals),
    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)
  };
  return complexInfo;
}

const complexConfig = {
  kernelName: _tfjsCore.Complex,
  backendName: 'cpu',
  kernelFunc: complex
};
exports.complexConfig = complexConfig;
},{"@tensorflow/tfjs-core":"kSBl"}],"QgwK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zeros = zeros;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Complex = require("../kernels/Complex");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Generates a tensorInfo with all zeros value.
 * @param backend cpu backend.
 * @param shape Shape for the zeros tensor.
 * @param dtype Optional. If set, the result has this dtype.
 */
function zeros(backend, shape, dtype = 'float32') {
  if (dtype === 'complex64') {
    const real = zeros(backend, shape, 'float32');
    const imag = zeros(backend, shape, 'float32');
    return (0, _Complex.complex)({
      inputs: {
        real,
        imag
      },
      backend
    });
  }

  const values = _tfjsCore.util.makeZerosTypedArray(_tfjsCore.util.sizeFromShape(shape), dtype);

  return backend.makeTensorInfo(shape, dtype, values);
}
},{"@tensorflow/tfjs-core":"kSBl","../kernels/Complex":"KmEe"}],"nMAE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.identity = identity;
exports.identityConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function identity(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  backend.incRef(x.dataId);
  return {
    dataId: x.dataId,
    shape: x.shape,
    dtype: x.dtype
  };
}

const identityConfig = {
  kernelName: _tfjsCore.Identity,
  backendName: 'cpu',
  kernelFunc: identity
};
exports.identityConfig = identityConfig;
},{"@tensorflow/tfjs-core":"kSBl"}],"icBn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.real = real;
exports.realConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function real(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    input
  } = inputs;
  const real = backend.data.get(input.dataId).complexTensorInfos.real;
  const realVal = backend.data.get(real.dataId).values; // When complex tensor is disposed, its underlying parts will be disposed too.
  // Make new tensor out of the real value of the complex. This makes sure the
  // value is still accessible even if complex tensor is disposed.

  return backend.makeTensorInfo(real.shape, real.dtype, realVal);
}

const realConfig = {
  kernelName: _tfjsCore.Real,
  backendName: 'cpu',
  kernelFunc: real
};
exports.realConfig = realConfig;
},{"@tensorflow/tfjs-core":"kSBl"}],"Bp6G":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cast = cast;
exports.castConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binary_impl = require("../utils/binary_impl");

var _zeros_impl = require("../utils/zeros_impl");

var _Complex = require("./Complex");

var _Identity = require("./Identity");

var _Real = require("./Real");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cast(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    dtype
  } = attrs; // Casting to complex64.

  if (dtype === 'complex64') {
    if (x.dtype === 'complex64') {
      return (0, _Identity.identity)({
        inputs: {
          x
        },
        backend
      });
    }

    const zerosTensorInfo = (0, _zeros_impl.zeros)(backend, x.shape, x.dtype);
    const floatX = cast({
      inputs: {
        x
      },
      backend,
      attrs: {
        dtype: 'float32'
      }
    });
    const result = (0, _Complex.complex)({
      inputs: {
        real: floatX,
        imag: zerosTensorInfo
      },
      backend
    });
    backend.disposeIntermediateTensorInfo(zerosTensorInfo);
    backend.disposeIntermediateTensorInfo(floatX);
    return result;
  } // Casting from complex64


  if (x.dtype === 'complex64') {
    const realPart = (0, _Real.real)({
      inputs: {
        input: x
      },
      backend
    });
    const result = cast({
      inputs: {
        x: realPart
      },
      backend,
      attrs: {
        dtype
      }
    });
    backend.disposeIntermediateTensorInfo(realPart);
    return result;
  }

  if (!_tfjsCore.util.hasEncodingLoss(x.dtype, dtype)) {
    // We don't change the underlying data, since we cast to higher
    // precision.
    const result = (0, _Identity.identity)({
      inputs: {
        x
      },
      backend
    });
    return {
      dataId: result.dataId,
      shape: result.shape,
      dtype
    };
  }

  if (dtype === 'int32') {
    const values = backend.data.get(x.dataId).values;
    const resultValues = Int32Array.from(values);
    return backend.makeTensorInfo(x.shape, 'int32', resultValues);
  }

  if (dtype === 'bool') {
    // This is essentially the result of notEqual(x, 0). We avoid using
    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->
    // cast -> notEqual -> binary_utils.
    const xVals = backend.data.get(x.dataId).values;

    const zero = _tfjsCore.util.toTypedArray([0], x.dtype);

    const [resultData, resultShape] = (0, _binary_impl.createSimpleBinaryKernelImpl)((a, b) => a !== b ? 1 : 0)(x.shape, [], xVals, zero, 'bool');
    return backend.makeTensorInfo(resultShape, 'bool', resultData);
  }

  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);
}

const castConfig = {
  kernelName: _tfjsCore.Cast,
  backendName: 'cpu',
  kernelFunc: cast
};
exports.castConfig = castConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/binary_impl":"v0i6","../utils/zeros_impl":"QgwK","./Complex":"KmEe","./Identity":"nMAE","./Real":"icBn"}],"FLbP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.binaryKernelFunc = binaryKernelFunc;
exports.createComplexBinaryKernelImpl = createComplexBinaryKernelImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _cpu_util = require("../cpu_util");

var _Cast = require("../kernels/Cast");

var _Complex = require("../kernels/Complex");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Template that creates a `KernelFunc` for binary ops.
 * @param name Kernel name.
 * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.
 * @param binaryKernelComplexImpl Optional. If exists, represents a
 *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype
 *     is `complex64`.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the first input. This is mainly used in
 *     comparison kernels, such as Equal, Less, Greater, etc.
 */
function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {
  if (complexImpl == null) {
    return ({
      inputs,
      backend
    }) => {
      const {
        a,
        b
      } = inputs;
      const cpuBackend = backend;
      (0, _cpu_util.assertNotComplex)([a, b], name);
      const aVals = cpuBackend.data.get(a.dataId).values;
      const bVals = cpuBackend.data.get(b.dataId).values;
      const decodedAVals = a.dtype === 'string' ? // tslint:disable-next-line: no-any
      _tfjsCore.backend_util.fromUint8ToStringArray(aVals) : aVals;
      const decodedBVals = a.dtype === 'string' ? // tslint:disable-next-line: no-any
      _tfjsCore.backend_util.fromUint8ToStringArray(bVals) : bVals;
      const $dtype = dtype || a.dtype;
      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);
      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);
    };
  }

  return ({
    inputs,
    backend
  }) => {
    const {
      a,
      b
    } = inputs;
    const cpuBackend = backend;

    if (a.dtype === 'complex64' || b.dtype === 'complex64') {
      const $aComplex = (0, _Cast.cast)({
        inputs: {
          x: a
        },
        backend: cpuBackend,
        attrs: {
          dtype: 'complex64'
        }
      });
      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);
      const aReal = $aComplexVals.complexTensorInfos.real;
      const aImag = $aComplexVals.complexTensorInfos.imag;
      const aRealVals = cpuBackend.data.get(aReal.dataId).values;
      const aImagVals = cpuBackend.data.get(aImag.dataId).values;
      const $bComplex = (0, _Cast.cast)({
        inputs: {
          x: b
        },
        backend: cpuBackend,
        attrs: {
          dtype: 'complex64'
        }
      });
      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);
      const bReal = $bComplexVals.complexTensorInfos.real;
      const bImag = $bComplexVals.complexTensorInfos.imag;
      const bRealVals = cpuBackend.data.get(bReal.dataId).values;
      const bImagVals = cpuBackend.data.get(bImag.dataId).values;
      const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);
      const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);
      const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);
      const result = (0, _Complex.complex)({
        inputs: {
          real: resultReal,
          imag: resultImag
        },
        backend: cpuBackend
      });
      cpuBackend.disposeIntermediateTensorInfo($aComplex);
      cpuBackend.disposeIntermediateTensorInfo($bComplex);
      cpuBackend.disposeIntermediateTensorInfo(resultReal);
      cpuBackend.disposeIntermediateTensorInfo(resultImag);
      return result;
    } else {
      const aVals = cpuBackend.data.get(a.dataId).values;
      const bVals = cpuBackend.data.get(b.dataId).values;
      const $dtype = dtype || a.dtype;
      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);
      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);
    }
  };
}
/**
 * Template that creates the complex type implementation for binary ops.
 * Supports broadcast.
 */


function createComplexBinaryKernelImpl(op) {
  return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {
    const resultShape = _tfjsCore.backend_util.assertAndGetBroadcastShape(aShape, bShape);

    const resultSize = _tfjsCore.util.sizeFromShape(resultShape);

    const resultRank = resultShape.length;

    const resultStrides = _tfjsCore.util.computeStrides(resultShape);

    const resultRealVals = _tfjsCore.util.getTypedArrayFromDType('float32', resultSize);

    const resultImagVals = _tfjsCore.util.getTypedArrayFromDType('float32', resultSize);

    const aBroadcastDims = _tfjsCore.backend_util.getBroadcastDims(aShape, resultShape);

    const bBroadcastDims = _tfjsCore.backend_util.getBroadcastDims(bShape, resultShape);

    const aVals = _tfjsCore.backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);

    const bVals = _tfjsCore.backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);

    const aRank = aShape.length;

    const aStrides = _tfjsCore.util.computeStrides(aShape);

    const bRank = bShape.length;

    const bStrides = _tfjsCore.util.computeStrides(bShape);

    if (aBroadcastDims.length + bBroadcastDims.length === 0) {
      for (let i = 0; i < resultRealVals.length; i++) {
        const aIdx = i % aVals.length;
        const bIdx = i % bVals.length;
        const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);
        resultRealVals[i] = result.real;
        resultImagVals[i] = result.imag;
      }
    } else {
      for (let i = 0; i < resultRealVals.length; i++) {
        const loc = _tfjsCore.util.indexToLoc(i, resultRank, resultStrides);

        const aLoc = loc.slice(-aRank);
        aBroadcastDims.forEach(d => aLoc[d] = 0);

        const aIndex = _tfjsCore.util.locToIndex(aLoc, aRank, aStrides);

        const bLoc = loc.slice(-bRank);
        bBroadcastDims.forEach(d => bLoc[d] = 0);

        const bIndex = _tfjsCore.util.locToIndex(bLoc, bRank, bStrides);

        const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);
        resultRealVals[i] = opResult.real;
        resultImagVals[i] = opResult.imag;
      }
    }

    return [resultRealVals, resultImagVals, resultShape];
  };
}
},{"@tensorflow/tfjs-core":"kSBl","../cpu_util":"nVKy","../kernels/Cast":"Bp6G","../kernels/Complex":"KmEe"}],"ZBkJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addConfig = exports.add = exports.addComplexImpl = exports.addImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binary_impl = require("../utils/binary_impl");

var _binary_utils = require("../utils/binary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const addImpl = (0, _binary_impl.createSimpleBinaryKernelImpl)((a, b) => a + b);
exports.addImpl = addImpl;
const addComplexImpl = (0, _binary_utils.createComplexBinaryKernelImpl)((aReal, aImag, bReal, bImag) => {
  return {
    real: aReal + bReal,
    imag: aImag + bImag
  };
});
exports.addComplexImpl = addComplexImpl;
const add = (0, _binary_utils.binaryKernelFunc)(_tfjsCore.Add, addImpl, addComplexImpl);
exports.add = add;
const addConfig = {
  kernelName: _tfjsCore.Add,
  backendName: 'cpu',
  kernelFunc: add
};
exports.addConfig = addConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/binary_impl":"v0i6","../utils/binary_utils":"FLbP"}],"cUUF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bincountImpl = bincountImpl;
exports.bincountReduceImpl = bincountReduceImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {
  const weightsSize = _tfjsCore.util.sizeFromShape(weightsShape);

  const outVals = _tfjsCore.util.makeZerosTypedArray(size, weightsDtype);

  for (let i = 0; i < xVals.length; i++) {
    const value = xVals[i];

    if (value < 0) {
      throw new Error('Input x must be non-negative!');
    }

    if (value >= size) {
      continue;
    }

    if (weightsSize > 0) {
      outVals[value] += weightsVals[i];
    } else {
      outVals[value] += 1;
    }
  }

  return outVals;
}

function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {
  const numRows = xBuf.shape[0];
  const numCols = xBuf.shape[1];
  const outBuf = (0, _tfjsCore.buffer)([numRows, size], weightsBuf.dtype);

  for (let i = 0; i < numRows; i++) {
    for (let j = 0; j < numCols; j++) {
      const value = xBuf.get(i, j);

      if (value < 0) {
        throw new Error('Input x must be non-negative!');
      }

      if (value >= size) {
        continue;
      }

      if (binaryOutput) {
        outBuf.set(1, i, value);
      } else {
        if (weightsBuf.size > 0) {
          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);
        } else {
          outBuf.set(outBuf.get(i, value) + 1, i, value);
        }
      }
    }
  }

  return outBuf;
}
},{"@tensorflow/tfjs-core":"kSBl"}],"FlCa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSimpleUnaryImpl = createSimpleUnaryImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Template that creates implementation for unary op.
 */
function createSimpleUnaryImpl(op) {
  return (values, dtype, attrs) => {
    const newValues = _tfjsCore.util.getTypedArrayFromDType(dtype, values.length);

    for (let i = 0; i < values.length; ++i) {
      newValues[i] = op(values[i], attrs);
    }

    return newValues;
  };
}
},{"@tensorflow/tfjs-core":"kSBl"}],"kZAs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unaryKernelFunc = unaryKernelFunc;
exports.unaryKernelFuncFromImpl = unaryKernelFuncFromImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _cpu_util = require("../cpu_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Template that creates a `KernelFunc` for unary ops.
 * @param name Kernel name.
 * @param op A `SimpleUnaryOperation` for the kernel.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the input. This is mainly used in certain
 *     kernels that return bool type, such as isFinite, isInf, etc.
 */
function unaryKernelFunc(name, op, dtype) {
  return ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      x
    } = inputs;
    (0, _cpu_util.assertNotComplex)(x, name);

    if (x.dtype === 'string' || dtype === 'string') {
      throw new Error('unaryKernelFunc does not support string input/output');
    }

    const cpuBackend = backend;
    const values = cpuBackend.data.get(x.dataId).values;

    const xSize = _tfjsCore.util.sizeFromShape(x.shape);

    const $dtype = dtype || x.dtype;

    const newValues = _tfjsCore.util.getArrayFromDType($dtype, xSize);

    for (let i = 0; i < xSize; ++i) {
      newValues[i] = op(values[i], attrs);
    }

    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);
  };
}
/**
 * Template that creates a `KernelFunc` for unary ops from the given
 * `SimpleUnaryImpl`..
 * @param name Kernel name.
 * @param unaryImpl A `SimpleUnaryImpl` that implements the op.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the input. This is mainly used in certain
 *     kernels that return bool type, such as isFinite, isInf, etc.
 */


function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {
  return ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      x
    } = inputs;
    (0, _cpu_util.assertNotComplex)(x, name);

    if (x.dtype === 'string' || dtype === 'string') {
      throw new Error('unaryKernelFunc does not support string input/output');
    }

    const cpuBackend = backend;
    const values = cpuBackend.data.get(x.dataId).values;
    const $dtype = dtype || x.dtype;
    const newValues = unaryImpl(values, $dtype, attrs);
    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);
  };
}
},{"@tensorflow/tfjs-core":"kSBl","../cpu_util":"nVKy"}],"PT9Z":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ceilConfig = exports.ceil = exports.ceilImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _unary_impl = require("../utils/unary_impl");

var _unary_utils = require("../utils/unary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ceilImpl = (0, _unary_impl.createSimpleUnaryImpl)(xi => Math.ceil(xi));
exports.ceilImpl = ceilImpl;
const ceil = (0, _unary_utils.unaryKernelFuncFromImpl)(_tfjsCore.Ceil, ceilImpl);
exports.ceil = ceil;
const ceilConfig = {
  kernelName: _tfjsCore.Ceil,
  backendName: 'cpu',
  kernelFunc: ceil
};
exports.ceilConfig = ceilConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/unary_impl":"FlCa","../utils/unary_utils":"kZAs"}],"axei":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatImpl = concatImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function concatImpl(inputs, outShape, dtype, simplyConcat) {
  const outVals = _tfjsCore.util.getArrayFromDType(dtype, _tfjsCore.util.sizeFromShape(outShape));

  if (simplyConcat && dtype !== 'string') {
    // Use built-in TypedArray.set() method for speed.
    let offset = 0;
    inputs.forEach(input => {
      const size = _tfjsCore.util.sizeFromShape(input.shape);

      outVals.set(input.vals, offset);
      offset += size;
    });
  } else {
    let colOffset = 0;
    inputs.forEach(input => {
      const decodedData = dtype === 'string' ? _tfjsCore.backend_util.fromUint8ToStringArray(input.vals) : input.vals;
      let tIdx = 0;

      for (let row = 0; row < input.shape[0]; ++row) {
        const resIdx = row * outShape[1] + colOffset;

        for (let col = 0; col < input.shape[1]; ++col) {
          outVals[resIdx + col] = decodedData[tIdx++];
        }
      }

      colOffset += input.shape[1];
    });
  }

  return outVals;
}
},{"@tensorflow/tfjs-core":"kSBl"}],"Qy3m":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalConfig = exports.equal = exports.equalImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binary_impl = require("../utils/binary_impl");

var _binary_utils = require("../utils/binary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const equalImpl = (0, _binary_impl.createSimpleBinaryKernelImpl)((a, b) => a === b ? 1 : 0);
exports.equalImpl = equalImpl;
const equal = (0, _binary_utils.binaryKernelFunc)(_tfjsCore.Equal, equalImpl, null
/* complexImpl */
, 'bool');
exports.equal = equal;
const equalConfig = {
  kernelName: _tfjsCore.Equal,
  backendName: 'cpu',
  kernelFunc: equal
};
exports.equalConfig = equalConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/binary_impl":"v0i6","../utils/binary_utils":"FLbP"}],"Q92g":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expConfig = exports.exp = exports.expImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _unary_impl = require("../utils/unary_impl");

var _unary_utils = require("../utils/unary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const expImpl = (0, _unary_impl.createSimpleUnaryImpl)(xi => Math.exp(xi));
exports.expImpl = expImpl;
const exp = (0, _unary_utils.unaryKernelFuncFromImpl)(_tfjsCore.Exp, expImpl);
exports.exp = exp;
const expConfig = {
  kernelName: _tfjsCore.Exp,
  backendName: 'cpu',
  kernelFunc: exp
};
exports.expConfig = expConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/unary_impl":"FlCa","../utils/unary_utils":"kZAs"}],"wiHC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expm1Config = exports.expm1 = exports.expm1Impl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _unary_impl = require("../utils/unary_impl");

var _unary_utils = require("../utils/unary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const expm1Impl = (0, _unary_impl.createSimpleUnaryImpl)(xi => Math.expm1(xi));
exports.expm1Impl = expm1Impl;
const expm1 = (0, _unary_utils.unaryKernelFuncFromImpl)(_tfjsCore.Expm1, expm1Impl);
exports.expm1 = expm1;
const expm1Config = {
  kernelName: _tfjsCore.Expm1,
  backendName: 'cpu',
  kernelFunc: expm1
};
exports.expm1Config = expm1Config;
},{"@tensorflow/tfjs-core":"kSBl","../utils/unary_impl":"FlCa","../utils/unary_utils":"kZAs"}],"KFD4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floorConfig = exports.floor = exports.floorImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _unary_impl = require("../utils/unary_impl");

var _unary_utils = require("../utils/unary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const floorImpl = (0, _unary_impl.createSimpleUnaryImpl)(xi => Math.floor(xi));
exports.floorImpl = floorImpl;
const floor = (0, _unary_utils.unaryKernelFuncFromImpl)(_tfjsCore.Floor, floorImpl);
exports.floor = floor;
const floorConfig = {
  kernelName: _tfjsCore.Floor,
  backendName: 'cpu',
  kernelFunc: floor
};
exports.floorConfig = floorConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/unary_impl":"FlCa","../utils/unary_utils":"kZAs"}],"kXTU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gatherNdImpl = gatherNdImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gatherNdImpl(indicesData, paramsBuf, dtype, numSlices, sliceRank, sliceSize, strides, paramsShape, paramsSize) {
  const outBuf = (0, _tfjsCore.buffer)([numSlices, sliceSize], dtype);

  for (let i = 0; i < numSlices; i++) {
    const index = [];
    let flattenIndex = 0;

    for (let j = 0; j < sliceRank; j++) {
      const dim = indicesData[i * sliceRank + j];
      flattenIndex += dim * strides[j];
      index.push(dim);
    }

    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {
      throw new Error(`Invalid indices: ${index} does not index into ${paramsShape}`);
    }

    for (let k = 0; k < sliceSize; k++) {
      outBuf.values[i * sliceSize + k] = paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));
    }
  }

  return outBuf;
}
},{"@tensorflow/tfjs-core":"kSBl"}],"Ea37":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gatherV2Impl = gatherV2Impl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {
  const outBuf = (0, _tfjsCore.buffer)(flattenOutputShape, xBuf.dtype);

  for (let i = 0; i < outBuf.size; ++i) {
    const newLoc = outBuf.indexToLoc(i);
    const originalLoc = newLoc.slice();
    const batchIdx = originalLoc[0];
    const indicesIdx = originalLoc[2];
    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);
    originalLoc[2] = indicesBuf.values[indicesIndex];
    const originalIndex = xBuf.locToIndex(originalLoc);
    outBuf.values[i] = xBuf.values[originalIndex];
  }

  return outBuf;
}
},{"@tensorflow/tfjs-core":"kSBl"}],"QWdt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.greaterConfig = exports.greater = exports.greaterImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binary_impl = require("../utils/binary_impl");

var _binary_utils = require("../utils/binary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const greaterImpl = (0, _binary_impl.createSimpleBinaryKernelImpl)((a, b) => a > b ? 1 : 0);
exports.greaterImpl = greaterImpl;
const greater = (0, _binary_utils.binaryKernelFunc)(_tfjsCore.Greater, greaterImpl, null
/* complexImpl */
, 'bool');
exports.greater = greater;
const greaterConfig = {
  kernelName: _tfjsCore.Greater,
  backendName: 'cpu',
  kernelFunc: greater
};
exports.greaterConfig = greaterConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/binary_impl":"v0i6","../utils/binary_utils":"FLbP"}],"gfwn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.greaterEqualConfig = exports.greaterEqual = exports.greaterEqualImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binary_impl = require("../utils/binary_impl");

var _binary_utils = require("../utils/binary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const greaterEqualImpl = (0, _binary_impl.createSimpleBinaryKernelImpl)((a, b) => a >= b ? 1 : 0);
exports.greaterEqualImpl = greaterEqualImpl;
const greaterEqual = (0, _binary_utils.binaryKernelFunc)(_tfjsCore.GreaterEqual, greaterEqualImpl, null
/* complexImpl */
, 'bool');
exports.greaterEqual = greaterEqual;
const greaterEqualConfig = {
  kernelName: _tfjsCore.GreaterEqual,
  backendName: 'cpu',
  kernelFunc: greaterEqual
};
exports.greaterEqualConfig = greaterEqualConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/binary_impl":"v0i6","../utils/binary_utils":"FLbP"}],"x95l":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lessConfig = exports.less = exports.lessImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binary_impl = require("../utils/binary_impl");

var _binary_utils = require("../utils/binary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lessImpl = (0, _binary_impl.createSimpleBinaryKernelImpl)((a, b) => a < b ? 1 : 0);
exports.lessImpl = lessImpl;
const less = (0, _binary_utils.binaryKernelFunc)(_tfjsCore.Less, lessImpl, null
/* complexImpl */
, 'bool');
exports.less = less;
const lessConfig = {
  kernelName: _tfjsCore.Less,
  backendName: 'cpu',
  kernelFunc: less
};
exports.lessConfig = lessConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/binary_impl":"v0i6","../utils/binary_utils":"FLbP"}],"N5Qh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lessEqualConfig = exports.lessEqual = exports.lessEqualImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binary_impl = require("../utils/binary_impl");

var _binary_utils = require("../utils/binary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lessEqualImpl = (0, _binary_impl.createSimpleBinaryKernelImpl)((a, b) => a <= b ? 1 : 0);
exports.lessEqualImpl = lessEqualImpl;
const lessEqual = (0, _binary_utils.binaryKernelFunc)(_tfjsCore.LessEqual, lessEqualImpl, null
/* complexImpl */
, 'bool');
exports.lessEqual = lessEqual;
const lessEqualConfig = {
  kernelName: _tfjsCore.LessEqual,
  backendName: 'cpu',
  kernelFunc: lessEqual
};
exports.lessEqualConfig = lessEqualConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/binary_impl":"v0i6","../utils/binary_utils":"FLbP"}],"BmUg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linSpaceImpl = linSpaceImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function linSpaceImpl(start, stop, num) {
  const step = (stop - start) / (num - 1);

  const values = _tfjsCore.util.makeZerosTypedArray(num, 'float32');

  values[0] = start;

  for (let i = 1; i < values.length; i++) {
    values[i] = values[i - 1] + step;
  }

  return values;
}
},{"@tensorflow/tfjs-core":"kSBl"}],"ipxn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logConfig = exports.log = exports.logImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _unary_impl = require("../utils/unary_impl");

var _unary_utils = require("../utils/unary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const logImpl = (0, _unary_impl.createSimpleUnaryImpl)(xi => Math.log(xi));
exports.logImpl = logImpl;
const log = (0, _unary_utils.unaryKernelFuncFromImpl)(_tfjsCore.Log, logImpl);
exports.log = log;
const logConfig = {
  kernelName: _tfjsCore.Log,
  backendName: 'cpu',
  kernelFunc: log
};
exports.logConfig = logConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/unary_impl":"FlCa","../utils/unary_utils":"kZAs"}],"Db4x":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxImpl = maxImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxImpl(aVals, reduceSize, outShape, dtype) {
  const vals = _tfjsCore.util.getTypedArrayFromDType(dtype, _tfjsCore.util.sizeFromShape(outShape));

  for (let i = 0; i < vals.length; ++i) {
    const offset = i * reduceSize;
    let max = aVals[offset];

    for (let j = 0; j < reduceSize; ++j) {
      const value = aVals[offset + j];

      if (Number.isNaN(value) || value > max) {
        // comparison with NaN always return false
        max = value;
      }
    }

    vals[i] = max;
  }

  return vals;
}
},{"@tensorflow/tfjs-core":"kSBl"}],"DbCK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maximumConfig = exports.maximum = exports.maximumImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binary_impl = require("../utils/binary_impl");

var _binary_utils = require("../utils/binary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maximumImpl = (0, _binary_impl.createSimpleBinaryKernelImpl)((aValue, bValue) => Math.max(aValue, bValue));
exports.maximumImpl = maximumImpl;
const maximum = (0, _binary_utils.binaryKernelFunc)(_tfjsCore.Maximum, maximumImpl);
exports.maximum = maximum;
const maximumConfig = {
  kernelName: _tfjsCore.Maximum,
  backendName: 'cpu',
  kernelFunc: maximum
};
exports.maximumConfig = maximumConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/binary_impl":"v0i6","../utils/binary_utils":"FLbP"}],"pZXl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minimumConfig = exports.minimum = exports.minimumImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binary_impl = require("../utils/binary_impl");

var _binary_utils = require("../utils/binary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const minimumImpl = (0, _binary_impl.createSimpleBinaryKernelImpl)((aValue, bValue) => Math.min(aValue, bValue));
exports.minimumImpl = minimumImpl;
const minimum = (0, _binary_utils.binaryKernelFunc)(_tfjsCore.Minimum, minimumImpl);
exports.minimum = minimum;
const minimumConfig = {
  kernelName: _tfjsCore.Minimum,
  backendName: 'cpu',
  kernelFunc: minimum
};
exports.minimumConfig = minimumConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/binary_impl":"v0i6","../utils/binary_utils":"FLbP"}],"N9Eb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiplyConfig = exports.multiply = exports.multiplyComplexImpl = exports.multiplyImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binary_impl = require("../utils/binary_impl");

var _binary_utils = require("../utils/binary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const multiplyImpl = (0, _binary_impl.createSimpleBinaryKernelImpl)((aValue, bValue) => aValue * bValue);
exports.multiplyImpl = multiplyImpl;
const multiplyComplexImpl = (0, _binary_utils.createComplexBinaryKernelImpl)((aReal, aImag, bReal, bImag) => {
  return {
    real: aReal * bReal - aImag * bImag,
    imag: aReal * bImag + aImag * bReal
  };
});
exports.multiplyComplexImpl = multiplyComplexImpl;
const multiply = (0, _binary_utils.binaryKernelFunc)(_tfjsCore.Multiply, multiplyImpl, multiplyComplexImpl);
exports.multiply = multiply;
const multiplyConfig = {
  kernelName: _tfjsCore.Multiply,
  backendName: 'cpu',
  kernelFunc: multiply
};
exports.multiplyConfig = multiplyConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/binary_impl":"v0i6","../utils/binary_utils":"FLbP"}],"NnAL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.negImpl = negImpl;
exports.neg = neg;
exports.negConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _cpu_util = require("../cpu_util");

var _Multiply = require("./Multiply");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function negImpl(xVals, xShape, xDtype) {
  const minusOne = _tfjsCore.util.createScalarValue(-1, xDtype);

  return (0, _Multiply.multiplyImpl)([], xShape, minusOne, xVals, xDtype);
}

function neg(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  (0, _cpu_util.assertNotComplex)(x, 'neg');
  const xVals = backend.data.get(x.dataId).values;
  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);
  return backend.makeTensorInfo(newShape, x.dtype, res);
}

const negConfig = {
  kernelName: _tfjsCore.Neg,
  backendName: 'cpu',
  kernelFunc: neg
};
exports.negConfig = negConfig;
},{"@tensorflow/tfjs-core":"kSBl","../cpu_util":"nVKy","./Multiply":"N9Eb"}],"VkjO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.notEqualConfig = exports.notEqual = exports.notEqualImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binary_impl = require("../utils/binary_impl");

var _binary_utils = require("../utils/binary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const notEqualImpl = (0, _binary_impl.createSimpleBinaryKernelImpl)((a, b) => a !== b ? 1 : 0);
exports.notEqualImpl = notEqualImpl;
const notEqual = (0, _binary_utils.binaryKernelFunc)(_tfjsCore.NotEqual, notEqualImpl, null
/* complexOp */
, 'bool');
exports.notEqual = notEqual;
const notEqualConfig = {
  kernelName: _tfjsCore.NotEqual,
  backendName: 'cpu',
  kernelFunc: notEqual
};
exports.notEqualConfig = notEqualConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/binary_impl":"v0i6","../utils/binary_utils":"FLbP"}],"fDvd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transposeImpl = transposeImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transposeImpl(xVals, xShape, dtype, perm, newShape) {
  const xRank = xShape.length;

  const xSize = _tfjsCore.util.sizeFromShape(xShape);

  const xStrides = _tfjsCore.util.computeStrides(xShape);

  const newStrides = _tfjsCore.util.computeStrides(newShape);

  const result = _tfjsCore.util.getTypedArrayFromDType(dtype, _tfjsCore.util.sizeFromShape(newShape));

  for (let i = 0; i < xSize; ++i) {
    const loc = _tfjsCore.util.indexToLoc(i, xRank, xStrides); // Permute location.


    const newLoc = new Array(loc.length);

    for (let i = 0; i < newLoc.length; i++) {
      newLoc[i] = loc[perm[i]];
    }

    const newIndex = _tfjsCore.util.locToIndex(newLoc, xRank, newStrides);

    result[newIndex] = xVals[i];
  }

  return result;
}
},{"@tensorflow/tfjs-core":"kSBl"}],"zFLV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transpose = transpose;
exports.transposeConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _cpu_util = require("../cpu_util");

var _Transpose_impl = require("./Transpose_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transpose(args) {
  const {
    inputs,
    attrs,
    backend
  } = args;
  const {
    x
  } = inputs;
  const {
    perm
  } = attrs;
  (0, _cpu_util.assertNotComplex)(x, 'transpose');
  const xRank = x.shape.length;
  const newShape = new Array(xRank);

  for (let i = 0; i < newShape.length; i++) {
    newShape[i] = x.shape[perm[i]];
  }

  const values = backend.data.get(x.dataId).values;
  const result = (0, _Transpose_impl.transposeImpl)(values, x.shape, x.dtype, perm, newShape);
  const dataId = backend.write(result, newShape, x.dtype);
  return {
    dataId,
    shape: newShape,
    dtype: x.dtype
  };
}

const transposeConfig = {
  kernelName: _tfjsCore.Transpose,
  backendName: 'cpu',
  kernelFunc: transpose
};
exports.transposeConfig = transposeConfig;
},{"@tensorflow/tfjs-core":"kSBl","../cpu_util":"nVKy","./Transpose_impl":"fDvd"}],"us0k":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prodImpl = prodImpl;
exports.prod = prod;
exports.prodConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _cpu_util = require("../cpu_util");

var _Transpose = require("./Transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function prodImpl(xShape, xDtype, xVals, reductionAxes) {
  const [outShape, reduceShape] = _tfjsCore.backend_util.computeOutAndReduceShapes(xShape, reductionAxes);

  const outDtype = (0, _tfjsCore.upcastType)(xDtype, 'int32');

  const outVals = _tfjsCore.util.makeZerosTypedArray(_tfjsCore.util.sizeFromShape(outShape), outDtype);

  const reduceSize = _tfjsCore.util.sizeFromShape(reduceShape);

  for (let i = 0; i < outVals.length; ++i) {
    const offset = i * reduceSize;
    let prod = 1;

    for (let j = 0; j < reduceSize; ++j) {
      prod *= xVals[offset + j];
    }

    outVals[i] = prod;
  }

  return {
    outVals,
    outShape,
    outDtype
  };
}

function prod(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  (0, _cpu_util.assertNotComplex)(x, 'prod');
  const xRank = x.shape.length;

  const axes = _tfjsCore.util.parseAxisParam(axis, x.shape);

  const permutation = _tfjsCore.backend_util.getAxesPermutation(axes, xRank);

  let reductionAxes = axes;
  let permutedX = x;
  const intermediateTensorInfos = [];

  if (permutation != null) {
    permutedX = (0, _Transpose.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutation
      }
    });
    intermediateTensorInfos.push(permutedX);
    reductionAxes = _tfjsCore.backend_util.getInnerMostAxes(reductionAxes.length, xRank);
  }

  const xVals = backend.data.get(permutedX.dataId).values;
  const {
    outVals,
    outShape,
    outDtype
  } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);
  let resultShape = outShape;

  if (keepDims) {
    resultShape = _tfjsCore.backend_util.expandShapeToKeepDim(outShape, axes);
  }

  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return backend.makeTensorInfo(resultShape, outDtype, outVals);
}

const prodConfig = {
  kernelName: _tfjsCore.Prod,
  backendName: 'cpu',
  kernelFunc: prod
};
exports.prodConfig = prodConfig;
},{"@tensorflow/tfjs-core":"kSBl","../cpu_util":"nVKy","./Transpose":"zFLV"}],"m7wV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rangeImpl = rangeImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rangeImpl(start, stop, step, dtype) {
  const sameStartStop = start === stop;
  const increasingRangeNegativeStep = start < stop && step < 0;
  const decreasingRangePositiveStep = stop < start && step > 1;

  if (sameStartStop || increasingRangeNegativeStep || decreasingRangePositiveStep) {
    return _tfjsCore.util.makeZerosTypedArray(0, dtype);
  }

  const numElements = Math.abs(Math.ceil((stop - start) / step));

  const values = _tfjsCore.util.makeZerosTypedArray(numElements, dtype);

  if (stop < start && step === 1) {
    // Auto adjust the step's sign if it hasn't been set
    // (or was set to 1)
    step = -1;
  }

  values[0] = start;

  for (let i = 1; i < values.length; i++) {
    values[i] = values[i - 1] + step;
  }

  return values;
}
},{"@tensorflow/tfjs-core":"kSBl"}],"eSbP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rsqrtConfig = exports.rsqrt = exports.rsqrtImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _unary_impl = require("../utils/unary_impl");

var _unary_utils = require("../utils/unary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rsqrtImpl = (0, _unary_impl.createSimpleUnaryImpl)(xi => 1 / Math.sqrt(xi));
exports.rsqrtImpl = rsqrtImpl;
const rsqrt = (0, _unary_utils.unaryKernelFuncFromImpl)(_tfjsCore.Rsqrt, rsqrtImpl);
exports.rsqrt = rsqrt;
const rsqrtConfig = {
  kernelName: _tfjsCore.Rsqrt,
  backendName: 'cpu',
  kernelFunc: rsqrt
};
exports.rsqrtConfig = rsqrtConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/unary_impl":"FlCa","../utils/unary_utils":"kZAs"}],"i6mc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sliceImpl = sliceImpl;
exports.slice = slice;
exports.sliceConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _cpu_util = require("../cpu_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sliceImpl(vals, begin, size, shape, dtype) {
  const isContinous = _tfjsCore.slice_util.isSliceContinous(shape, begin, size);

  const length = _tfjsCore.util.sizeFromShape(size);

  const xStrides = _tfjsCore.util.computeStrides(shape);

  if (isContinous) {
    const flatOffset = _tfjsCore.slice_util.computeFlatOffset(begin, xStrides);

    if (dtype === 'string') {
      return vals.slice(flatOffset, flatOffset + length);
    }

    return vals.subarray(flatOffset, flatOffset + length);
  }

  const decodedData = dtype === 'string' ? _tfjsCore.backend_util.fromUint8ToStringArray(vals) : vals;
  const inBuf = (0, _tfjsCore.buffer)(shape, dtype, decodedData);
  const outBuf = (0, _tfjsCore.buffer)(size, dtype);

  for (let i = 0; i < outBuf.size; ++i) {
    const outLoc = outBuf.indexToLoc(i);
    const inLoc = outLoc.map((idx, j) => idx + begin[j]);
    outBuf.set(inBuf.get(...inLoc), ...outLoc);
  }

  if (dtype === 'string') {
    return _tfjsCore.backend_util.fromStringArrayToUint8(outBuf.values);
  }

  return outBuf.values;
}

function slice(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    begin,
    size
  } = attrs;
  (0, _cpu_util.assertNotComplex)(x, 'slice');

  const [$begin, $size] = _tfjsCore.slice_util.parseSliceParams(x, begin, size);

  _tfjsCore.slice_util.assertParamsValid(x, $begin, $size);

  const vals = backend.data.get(x.dataId).values;
  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);
  return backend.makeTensorInfo($size, x.dtype, outVals);
}

const sliceConfig = {
  kernelName: _tfjsCore.Slice,
  backendName: 'cpu',
  kernelFunc: slice
};
exports.sliceConfig = sliceConfig;
},{"@tensorflow/tfjs-core":"kSBl","../cpu_util":"nVKy"}],"vXdm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseFillEmptyRowsImpl = sparseFillEmptyRowsImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {
  const indicesCount = indicesShape[0];
  const denseRows = denseShape[0];
  const emptyRowIndicator = new Array(denseRows);
  const reverseIndexMap = new Array(indicesCount);
  const rank = indicesShape[1];

  if (denseRows === 0) {
    if (indicesCount !== 0) {
      throw new Error(`Received SparseTensor with denseShape[0] = 0 but
         indices.shape[0] = ${indicesCount}`);
    }

    const outputIndices = _tfjsCore.util.getArrayFromDType(indicesDType, 0);

    const outputValues = _tfjsCore.util.getArrayFromDType(valuesDType, 0);

    return [outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap];
  }

  let rowsAreOrdered = true;
  let lastIndicesRow = 0;
  const csrOffset = new Array(denseRows).fill(0);

  for (let i = 0; i < indicesCount; ++i) {
    // indices is a 2d tensor with shape of [N, rank]
    const row = indices[i * rank];

    if (row < 0) {
      throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);
    }

    if (row >= denseRows) {
      throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);
    }

    ++csrOffset[row];
    rowsAreOrdered = rowsAreOrdered && row >= lastIndicesRow;
    lastIndicesRow = row;
  }

  let allRowsFull = true;

  for (let row = 0; row < denseRows; ++row) {
    // csrOffset here describes the number of elements in this dense row
    const rowEmpty = csrOffset[row] === 0;
    emptyRowIndicator[row] = rowEmpty;
    allRowsFull = allRowsFull && !rowEmpty; // In filled version, each row has at least one element.

    csrOffset[row] = Math.max(csrOffset[row], 1); // Update csrOffset to represent the number of elements up to and
    // including denseRows + 1:
    //  csrOffset[0] == #{elements of row 0}
    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}
    //  ..
    //  csrOffset[i] == starting index for elements in row i + 1.

    if (row > 0) {
      csrOffset[row] += csrOffset[row - 1];
    }
  }

  if (allRowsFull && rowsAreOrdered) {
    const outputIndices = indices;
    const outputValues = values;

    for (let i = 0; i < indicesCount; ++i) {
      reverseIndexMap[i] = i;
    }

    return [outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator, reverseIndexMap];
  } else {
    const fullIndicesCount = csrOffset[denseRows - 1];

    const outputIndices = _tfjsCore.util.getArrayFromDType(indicesDType, fullIndicesCount * rank);

    const outputValues = _tfjsCore.util.getArrayFromDType(valuesDType, fullIndicesCount);

    const filledCount = new Array(denseRows).fill(0); // Fill in values for rows that are not missing

    for (let i = 0; i < indicesCount; ++i) {
      // indices is a 2d tensor with shape of [N, rank]
      const row = indices[i * rank];
      const offset = filledCount[row];
      const outputI = (row === 0 ? 0 : csrOffset[row - 1]) + offset;
      filledCount[row]++; // Increment the filled count for this row.

      for (let j = 0; j < rank; ++j) {
        // indices and outputIndices are 2d tensors with shape of [N, rank]
        outputIndices[outputI * rank + j] = indices[i * rank + j];
      }

      outputValues[outputI] = values[i]; // We'll need this reverse index map to backprop correctly.

      reverseIndexMap[i] = outputI;
    } // Fill in values for rows that are missing


    for (let row = 0; row < denseRows; ++row) {
      const rowCount = filledCount[row];

      if (rowCount === 0) {
        // We haven't filled this row
        const startingIndex = row === 0 ? 0 : csrOffset[row - 1]; // Remaining index values were set to zero already.
        // Just need to set the row index in the right location.
        // outputIndices is a 2d tensor with shape of [N, rank]

        outputIndices[startingIndex * rank + 0] = row;

        for (let col = 1; col < rank; ++col) {
          outputIndices[startingIndex * rank + col] = 0;
        }

        outputValues[startingIndex] = defaultValue;
      }
    }

    return [outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator, reverseIndexMap];
  }
}
},{"@tensorflow/tfjs-core":"kSBl"}],"LDTS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseReshapeImpl = sparseReshapeImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {
  const denseSize = _tfjsCore.util.sizeFromShape(inputShape);

  const nnz = inputIndicesShape[0];
  const outputRank = targetShape.length; // Compute the output shape. Determine product of specified dimensions, and
  // find the index of the unspecified one.

  const outputShape = [];
  let product = 1;
  let unknownIndex = -1;

  for (let d = 0; d < outputRank; ++d) {
    const size = targetShape[d];

    if (size === -1) {
      if (unknownIndex !== -1) {
        throw new Error(`only one output dimension may be -1, not both ${unknownIndex} and ${d}`);
      }

      unknownIndex = d;
      outputShape.push(1);
    } else {
      if (size < 0) {
        throw new Error(`size ${d} must be non-negative, not ${size}`);
      }

      product *= size;
      outputShape.push(size);
    }
  }

  if (unknownIndex !== -1) {
    if (product <= 0) {
      throw new Error('reshape cannot infer the missing ' + 'input size for an empty tensor unless all ' + 'specified input sizes are non-zero');
    }

    const missing = Math.trunc(denseSize / product);

    if (product * missing !== denseSize) {
      throw new Error(`Input to reshape is a SparseTensor with ${denseSize}
          dense values, but the requested shape requires a multiple of ${product}. inputShape=${inputShape} outputShape= ${outputShape}`);
    }

    outputShape[unknownIndex] = missing;
  }

  const outputSize = _tfjsCore.util.sizeFromShape(outputShape);

  if (outputSize !== denseSize) {
    throw new Error(`Input to reshape is a tensor with ${denseSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);
  }

  const inputRank = inputShape.length;
  const inputStrides = [];

  if (inputRank > 0) {
    inputStrides[inputRank - 1] = 1;

    for (let d = inputRank - 2; d >= 0; --d) {
      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];
    }
  }

  const outputStrides = [];

  if (outputRank > 0) {
    outputStrides[outputRank - 1] = 1;

    for (let d = outputRank - 2; d >= 0; --d) {
      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];
    }
  }

  const newIndices = _tfjsCore.util.getArrayFromDType(inputDType, nnz * outputRank);

  for (let i = 0; i < nnz; ++i) {
    let id = 0;

    for (let j = 0; j < inputRank; ++j) {
      // inputIndices is a 2d tensor with shape of [nnz, inputRank]
      id += inputIndices[i * inputRank + j] * inputStrides[j];
    }

    for (let j = 0; j < outputRank; ++j) {
      // newIndices is a 2d tensor with shape of [nnz, outputRank]
      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);
      id %= outputStrides[j];
    }
  }

  return [newIndices, [nnz, outputRank], outputShape];
}
},{"@tensorflow/tfjs-core":"kSBl"}],"XhXa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseSegmentReductionImpl = sparseSegmentReductionImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseSegmentReductionImpl(input, inputShape, inputDType, indices, segmentIds, isMean = false, defaultValue = 0) {
  const numIndices = indices.length;

  if (numIndices !== segmentIds.length) {
    throw new Error(`segmentIds and indices should have same size.`);
  } // Flatten the array to two dimensions


  const inputFlat = [inputShape[0], input.length / inputShape[0]];
  const numCol = inputFlat[1]; // Note that the current implementation assumes that segmentIds values are
  // sorted.

  const lastSegmentIdPlusOne = numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;
  const outputRows = lastSegmentIdPlusOne;

  if (outputRows < 0) {
    throw new Error(`segment ids must be >= 0`);
  }

  const outputShape = inputShape.slice();
  outputShape[0] = outputRows;
  const outputLength = outputShape.reduce((product, value) => product * value, 1); // Output array is initialized with the value 0 by default.

  const output = _tfjsCore.util.getArrayFromDType(inputDType, outputLength); // Note that we do not initialize the output buffer with a default value, so
  // we need to explicitly set missing indices to the default value.


  if (numIndices === 0) {
    if (outputRows > 0) {
      output.fill(defaultValue);
    }

    return [output, outputShape];
  }

  if (outputRows <= 0) {
    throw new Error(`segment ids must be >= 0`);
  }

  let start = 0,
      end = 1; // Index from which the output is not initialized.

  let uninitializedIndex = 0;
  let outIndex = segmentIds[start];

  while (true) {
    // We initialize nextIndex to 0 to avoid may be uninitialized warning
    let nextIndex = 0;

    if (end < numIndices) {
      nextIndex = segmentIds[end];

      if (outIndex === nextIndex) {
        ++end;
        continue;
      } // We have a new segment here.  Verify that the segment ids are growing.


      if (outIndex >= nextIndex) {
        throw new Error(`segment ids are not increasing`);
      }
    }

    if (outIndex < 0 || outIndex >= outputRows) {
      throw new Error(`Segment id ${outIndex} out of range [0, ${outputRows}), possibly because segmentIds input is not sorted.`);
    } // If there is a gap between two indices, we need to set that gap to the
    // default value.


    if (outIndex > uninitializedIndex) {
      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);
    }

    for (let i = start; i < end; ++i) {
      const index = indices[i];

      if (index < 0 || index >= inputFlat[0]) {
        throw new Error(`Bad: indices[${i}] == ${indices[i]} out of range [0, ${inputFlat[0]})`);
      }

      for (let j = 0; j < numCol; j++) {
        output[outIndex * numCol + j] += input[index * numCol + j];
      }
    }

    if (isMean) {
      for (let j = 0; j < numCol; j++) {
        output[outIndex * numCol + j] /= end - start;
      }
    }

    start = end;
    ++end;
    uninitializedIndex = outIndex + 1;
    outIndex = nextIndex;

    if (end > numIndices) {
      break;
    }
  } // Fill the gap at the end with the default value.


  if (uninitializedIndex < outputRows) {
    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);
  }

  return [output, outputShape];
}
},{"@tensorflow/tfjs-core":"kSBl"}],"p6Qg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squaredDifferenceConfig = exports.squaredDifference = exports.squaredDifferenceImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binary_impl = require("../utils/binary_impl");

var _binary_utils = require("../utils/binary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const squaredDifferenceImpl = (0, _binary_impl.createSimpleBinaryKernelImpl)((a, b) => {
  const diff = a - b;
  return diff * diff;
});
exports.squaredDifferenceImpl = squaredDifferenceImpl;
const squaredDifference = (0, _binary_utils.binaryKernelFunc)(_tfjsCore.SquaredDifference, squaredDifferenceImpl);
exports.squaredDifference = squaredDifference;
const squaredDifferenceConfig = {
  kernelName: _tfjsCore.SquaredDifference,
  backendName: 'cpu',
  kernelFunc: squaredDifference
};
exports.squaredDifferenceConfig = squaredDifferenceConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/binary_impl":"v0i6","../utils/binary_utils":"FLbP"}],"Jc0Z":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stridedSliceImpl = stridedSliceImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stridedSliceImpl(outShape, xBuf, strides, begin) {
  const outBuf = (0, _tfjsCore.buffer)(outShape, xBuf.dtype);

  for (let i = 0; i < outBuf.size; i++) {
    const loc = outBuf.indexToLoc(i);
    const newLoc = new Array(loc.length);

    for (let j = 0; j < newLoc.length; j++) {
      newLoc[j] = loc[j] * strides[j] + begin[j];
    }

    outBuf.set(xBuf.get(...newLoc), ...loc);
  }

  return outBuf;
}
},{"@tensorflow/tfjs-core":"kSBl"}],"CMu9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringNGramsImpl = stringNGramsImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * The StringNGramsOp class creates ngrams from ragged string data.
 * The constructor contains all attributes related to the operation such as
 * padding widths and strings, and the compute function can be used to
 * compute the ngrams for different ragged tensor inputs.
 */
class StringNGramsOp {
  constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {
    this.separator = _tfjsCore.util.encodeString(separator);
    this.nGramWidths = nGramWidths;
    this.leftPad = _tfjsCore.util.encodeString(leftPad);
    this.rightPad = _tfjsCore.util.encodeString(rightPad);
    this.padWidth = padWidth;
    this.preserveShort = preserveShortSequences;
  }

  getPadWidth(nGramWidth) {
    // Ngrams can be padded with either a fixed pad width or a dynamic pad
    // width depending on the 'padWidth' arg, but in no case should the padding
    // ever be wider than 'nGramWidth' - 1.
    return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);
  }

  getNumNGrams(length, nGramWidth) {
    const padWidth = this.getPadWidth(nGramWidth);
    return Math.max(0, length + 2 * padWidth - nGramWidth + 1);
  }

  createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {
    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {
      const padWidth = this.getPadWidth(nGramWidth);
      const leftPadding = Math.max(0, padWidth - nGramIndex);
      const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));
      const numTokens = nGramWidth - (leftPadding + rightPadding);
      const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth); // Calculate the total expected size of the nGram so we can reserve the
      // correct amount of space in the string.

      let nGramSize = 0; // Size of the left padding.

      nGramSize += leftPadding * this.leftPad.length; // Size of the tokens.

      for (let n = 0; n < numTokens; ++n) {
        nGramSize += data[dataStartIndex + n].length;
      } // Size of the right padding.


      nGramSize += rightPadding * this.rightPad.length; // Size of the separators.

      const numSeparators = leftPadding + rightPadding + numTokens - 1;
      nGramSize += numSeparators * this.separator.length; // Build the nGram.

      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);
      const nGram = output[outputStartIndex + nGramIndex];
      let nextNGramIndex = 0;

      const appendToNGram = str => str.forEach(value => nGram[nextNGramIndex++] = value);

      for (let n = 0; n < leftPadding; ++n) {
        appendToNGram(this.leftPad);
        appendToNGram(this.separator);
      } // Only output first numTokens - 1 pairs of data and separator


      for (let n = 0; n < numTokens - 1; ++n) {
        appendToNGram(data[dataStartIndex + n]);
        appendToNGram(this.separator);
      } // Handle case when there are no tokens or no right padding as these
      // can result in consecutive separators.


      if (numTokens > 0) {
        // If we have tokens, then output last and then pair each separator
        // with the right padding that follows, to ensure nGram ends either with
        // the token or with the right pad.
        appendToNGram(data[dataStartIndex + numTokens - 1]);

        for (let n = 0; n < rightPadding; ++n) {
          appendToNGram(this.separator);
          appendToNGram(this.rightPad);
        }
      } else {
        // If we don't have tokens, then the last item inserted into the nGram
        // has been the separator from the left padding loop above. Hence,
        // output right pad and separator and make sure to finish with a
        // padding, not a separator.
        for (let n = 0; n < rightPadding - 1; ++n) {
          appendToNGram(this.rightPad);
          appendToNGram(this.separator);
        }

        appendToNGram(this.rightPad);
      }
    }
  } // Data and splits together form the definition of the ragged tensor,
  // where data is 1 dimensional and contains the values of the tensor
  // and splits denotes the indices at which each row starts.


  compute(data, splits) {
    // Validate that the splits are valid indices into data, only if there are
    // splits specified.
    const inputDataSize = data.length;
    const splitsSize = splits.length;

    if (splitsSize > 0) {
      let prevSplit = splits[0];

      if (prevSplit !== 0) {
        throw new Error(`First split value must be 0, got ${prevSplit}`);
      }

      for (let i = 1; i < splitsSize; ++i) {
        let validSplits = splits[i] >= prevSplit;
        validSplits = validSplits && splits[i] <= inputDataSize;

        if (!validSplits) {
          throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);
        }

        prevSplit = splits[i];
      }

      if (prevSplit !== inputDataSize) {
        throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);
      }
    }

    const numBatchItems = splitsSize - 1;

    const nGramsSplits = _tfjsCore.util.getArrayFromDType('int32', splitsSize); // If there is no data or size, return an empty ragged tensor.


    if (inputDataSize === 0 || splitsSize === 0) {
      const empty = new Array(inputDataSize);

      for (let i = 0; i <= numBatchItems; ++i) {
        nGramsSplits[i] = 0;
      }

      return [empty, nGramsSplits];
    }

    nGramsSplits[0] = 0;

    for (let i = 1; i <= numBatchItems; ++i) {
      const length = splits[i] - splits[i - 1];
      let numNGrams = 0;
      this.nGramWidths.forEach(nGramWidth => {
        numNGrams += this.getNumNGrams(length, nGramWidth);
      });

      if (this.preserveShort && length > 0 && numNGrams === 0) {
        numNGrams = 1;
      }

      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;
    }

    const nGrams = new Array(nGramsSplits[numBatchItems]);

    for (let i = 0; i < numBatchItems; ++i) {
      const splitIndex = splits[i];
      let outputStartIdx = nGramsSplits[i];
      this.nGramWidths.forEach(nGramWidth => {
        const length = splits[i + 1] - splits[i];
        const numNGrams = this.getNumNGrams(length, nGramWidth);
        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);
        outputStartIdx += numNGrams;
      }); // If we're preserving short sequences, check to see if no sequence was
      // generated by comparing the current output start idx to the original
      // one (nGramSplitsdata). If no ngrams were generated, then they will
      // be equal (since we increment outputStartIdx by numNGrams every
      // time we create a set of ngrams.)

      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {
        const dataLength = splits[i + 1] - splits[i]; // One legitimate reason to not have any ngrams when this.preserveShort
        // is true is if the sequence itself is empty. In that case, move on.

        if (dataLength === 0) {
          continue;
        } // We don't have to worry about dynamic padding sizes here: if padding
        // was dynamic, every sequence would have had sufficient padding to
        // generate at least one nGram.


        const nGramWidth = dataLength + 2 * this.padWidth;
        const numNGrams = 1;
        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);
      }
    }

    return [nGrams, nGramsSplits];
  }

}

function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {
  return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences).compute(data, dataSplits);
}
},{"@tensorflow/tfjs-core":"kSBl"}],"opA2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringSplitImpl = stringSplitImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function split(str, delimiters, skipEmpty) {
  if (!str.length) {
    return [];
  } // When the delimiter is empty, the input is split into individual characters.


  if (delimiters.length === 0) {
    const result = new Array(str.length);

    for (let i = 0; i < str.length; ++i) {
      result[i] = str.subarray(i, i + 1);
    }

    return result;
  } // When there is one delimiter, the input is split only at that delimiter.


  if (delimiters.length === 1) {
    const delimiter = delimiters[0];
    const result = [];
    let f = str.indexOf(delimiter);

    while (f !== -1) {
      const token = str.subarray(0, f);

      if (!skipEmpty || token.length !== 0) {
        result.push(token);
      }

      str = str.subarray(f + 1);
      f = str.indexOf(delimiter);
    }

    if (!skipEmpty || str.length !== 0) {
      result.push(str);
    }

    return result;
  } // When there are multiple delimiters, the input is split at every instance
  // one of the delimiters appears.


  const result = [];
  let tokenStart = 0;

  for (let i = 0; i < str.length + 1; i++) {
    if (i === str.length || delimiters.indexOf(str[i]) !== -1) {
      const token = str.subarray(tokenStart, i);

      if (!skipEmpty || token.length !== 0) {
        result.push(token);
      }

      tokenStart = i + 1;
    }
  }

  return result;
}

function stringSplitImpl(input, delimiter, skipEmpty) {
  const batchSize = input.length; // Empty delimiter means split the input character by character.

  const tokens = [];
  let outputSize = 0;
  let maxNumEntries = 0;
  const numIndices = new Array(batchSize);

  for (let i = 0; i < batchSize; ++i) {
    const parts = split(input[i], delimiter, skipEmpty);
    const nEntries = parts.length;
    numIndices[i] = nEntries;
    outputSize += nEntries;
    maxNumEntries = Math.max(maxNumEntries, nEntries);
    tokens.push(...parts);
  }

  const indices = _tfjsCore.util.getArrayFromDType('int32', outputSize * 2);

  const values = new Array(outputSize);
  const shape = [batchSize, maxNumEntries];
  let c = 0;

  for (let i = 0; i < batchSize; ++i) {
    for (let j = 0; j < numIndices[i]; ++j) {
      // indices is a 2d tensor with shape of [outputSize, 2]
      indices[c * 2] = i;
      indices[c * 2 + 1] = j;
      values[c] = tokens[c];
      ++c;
    }
  }

  return [indices, values, shape];
}
},{"@tensorflow/tfjs-core":"kSBl"}],"KvpR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringToHashBucketFastImpl = stringToHashBucketFastImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringToHashBucketFastImpl(input, numBuckets) {
  const output = _tfjsCore.util.getArrayFromDType('int32', input.length);

  for (let i = 0; i < input.length; ++i) {
    output[i] = _tfjsCore.util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();
  }

  return output;
}
},{"@tensorflow/tfjs-core":"kSBl"}],"fBFg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subConfig = exports.sub = exports.subComplexImpl = exports.subImpl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binary_impl = require("../utils/binary_impl");

var _binary_utils = require("../utils/binary_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const subImpl = (0, _binary_impl.createSimpleBinaryKernelImpl)((aValue, bValue) => aValue - bValue);
exports.subImpl = subImpl;
const subComplexImpl = (0, _binary_utils.createComplexBinaryKernelImpl)((aReal, aImag, bReal, bImag) => {
  return {
    real: aReal - bReal,
    imag: aImag - bImag
  };
});
exports.subComplexImpl = subComplexImpl;
const sub = (0, _binary_utils.binaryKernelFunc)(_tfjsCore.Sub, subImpl, subComplexImpl);
exports.sub = sub;
const subConfig = {
  kernelName: _tfjsCore.Sub,
  backendName: 'cpu',
  kernelFunc: sub
};
exports.subConfig = subConfig;
},{"@tensorflow/tfjs-core":"kSBl","../utils/binary_impl":"v0i6","../utils/binary_utils":"FLbP"}],"W9Ei":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tileImpl = tileImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * An implementation of the tile kernel shared between webgl and cpu for string
 * tensors only.
 */
function tileImpl(xBuf, reps) {
  const newShape = new Array(xBuf.rank);

  for (let i = 0; i < newShape.length; i++) {
    newShape[i] = xBuf.shape[i] * reps[i];
  }

  const result = (0, _tfjsCore.buffer)(newShape, xBuf.dtype);

  for (let i = 0; i < result.values.length; ++i) {
    const newLoc = result.indexToLoc(i);
    const originalLoc = new Array(xBuf.rank);

    for (let j = 0; j < originalLoc.length; j++) {
      originalLoc[j] = newLoc[j] % xBuf.shape[j];
    }

    const originalIndex = xBuf.locToIndex(originalLoc);
    result.values[i] = xBuf.values[originalIndex];
  }

  return result;
}
},{"@tensorflow/tfjs-core":"kSBl"}],"iXMz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.topKImpl = topKImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/** An implementation of the TopK kernel shared between webgl and cpu. */
const comparePair = (a, b) => {
  const valueDiff = b.value - a.value;
  return valueDiff === 0 ? a.index - b.index : valueDiff;
};
/**
 * Partitions array where all elements smaller than the (k+1) smallest element
 * are found to the left of it, and all larger to the right of it.
 * Based on the Floyd-Rivest Algorithm, ref:
 * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm
 * @param array: Array to partition
 * @param left: Left index for the interval
 * @param right: Right index for the interval
 * @param k: Desired index value, where array[k] is the (k+1)th smallest element
 *           when left = 0
 */


function select(array, k, left = 0, right = array.length - 1) {
  while (right > left) {
    // Use select recursively to sample a smaller set of size s
    // the arbitrary constants 600 and 0.5 are used in the original
    // version to minimize execution time.
    if (right - left > 600) {
      const n = right - left + 1;
      const i = k - left + 1;
      const z = Math.log(n);
      const s = 0.5 * Math.exp(2 * z / 3);
      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);
      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));
      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));
      select(array, k, newLeft, newRight);
    } // partition the elements between left and right around t


    const t = array[k];
    let i = left;
    let j = right;

    _tfjsCore.util.swap(array, left, k);

    if (comparePair(array[right], t) > 0) {
      _tfjsCore.util.swap(array, left, right);
    }

    while (i < j) {
      _tfjsCore.util.swap(array, i, j);

      i++;
      j--;

      while (comparePair(array[i], t) < 0) {
        i = i + 1;
      }

      while (comparePair(array[j], t) > 0) {
        j = j - 1;
      }
    }

    if (comparePair(array[left], t) === 0) {
      _tfjsCore.util.swap(array, left, j);
    } else {
      j = j + 1;

      _tfjsCore.util.swap(array, j, right);
    } // Adjust left and right towards the boundaries of the subset
    // containing the (k - left + 1)th smallest element.


    if (j <= k) {
      left = j + 1;
    }

    if (k <= j) {
      right = j - 1;
    }
  }
}

function topKImpl(x, xShape, xDtype, k, sorted) {
  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.
  const lastDim = xShape[xShape.length - 1];
  const [batch, size] = [x.length / lastDim, lastDim];

  const allTopKVals = _tfjsCore.util.getTypedArrayFromDType(xDtype, batch * k);

  const allTopKIndices = _tfjsCore.util.getTypedArrayFromDType('int32', batch * k);

  for (let b = 0; b < batch; b++) {
    const offset = b * size;
    const vals = x.subarray(offset, offset + size);
    let valAndInd = new Array(vals.length);
    vals.forEach((value, index) => valAndInd[index] = {
      value,
      index
    });

    if (k < valAndInd.length) {
      select(valAndInd, k);
      valAndInd = valAndInd.slice(0, k);
    }

    if (sorted) {
      valAndInd.sort(comparePair);
    }

    const outOffset = b * k;
    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);
    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);

    for (let i = 0; i < k; i++) {
      topKVals[i] = valAndInd[i].value;
      topKIndices[i] = valAndInd[i].index;
    }
  } // Reshape back to the original input shape, except that the last
  // dimension is k.


  const outputShape = xShape.slice();
  outputShape[outputShape.length - 1] = k;
  return [(0, _tfjsCore.buffer)(outputShape, xDtype, allTopKVals), (0, _tfjsCore.buffer)(outputShape, 'int32', allTopKIndices)];
}
},{"@tensorflow/tfjs-core":"kSBl"}],"hHdG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uniqueImpl = uniqueImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uniqueImpl(values, axis, shape, dtype) {
  // Normalize and validate axis.
  const $axis = _tfjsCore.util.parseAxisParam(axis, shape)[0]; // Calculate the new shape that is suitable for extracting data along the
  // given axis.
  //
  // The rank is 3.
  // The size of the 1st dimension is the size of all the axes < the given axis.
  // The size of the 2nd dimension is the same as the size of the given axis.
  // The size of the 3rd dimension is the size of all the axes > the given axis.
  //
  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the
  // newShape would be: [2*3, 5, 4].
  //
  // Note that this is not the final output shape. This will be the shape for an
  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract
  // values along the given axis. To demonstrate how it works, consider the
  // following example:
  //
  // Input: a 3D tensor, with shape [1, 2, 3]
  // [
  //   [
  //      [1,2,3],
  //      [4,5,6]
  //   ]
  // ]
  // Axis: 2 (the last axis).
  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].
  //
  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from
  // 1*2. The re-shaped data would look like:
  //
  // [
  //   [
  //     [1], [2], [3]
  //   ],
  //   [
  //     [4], [5], [6]
  //   ]
  // ]
  //
  // Then, we can construct a 3-level nested loop by the following dimension
  // order to extract the values along the axis (dimension1):
  // i: dimension1       // 0,1,2 (newShape[1])
  //   m: dimension0     // 0,1   (newShape[0])
  //     n: dimension2   // 0     (newShape[2])
  //
  //                       m, i, n
  //                      ---------
  // Iteration 0: data at [0, 0, 0] => "1"
  // Iteration 1: data at [1, 0, 0] => "4"
  // We got [1,4].
  // Iteration 2: data at [0, 1, 0] => "2"
  // Iteration 3: data at [1, 1, 0] => "5"
  // We got [2,5].
  // Iteration 4: data at [0, 2, 0] => "3"
  // Iteration 5: data at [1, 2, 0] => "6"
  // We got [3,6].


  const newShape = [1, shape[0], 1];

  for (let i = 0; i < $axis; i++) {
    newShape[0] *= shape[i];
  }

  newShape[1] = shape[$axis];

  for (let i = $axis + 1; i < shape.length; i++) {
    newShape[2] *= shape[i];
  } // A map from unique elements (their string representations) to their values
  // in "indices" (below).


  const uniqueElements = {}; // The indices of each unique element in the original tensor along the given
  // axis. It is 1D and has the same size as the given axis.

  const indices = new Int32Array(shape[$axis]); // Create a buffer so we can easily extract value at a given location.

  const inputBuffer = new _tfjsCore.TensorBuffer(newShape, dtype, values); // The indices along the given axis that have unique elements. This is a
  // de-duped version of "indices" above.

  const uniqueIndices = [];
  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;

  for (let i = 0; i < shape[$axis]; i++) {
    // Extract values along the axis.
    let element;

    if (is1DTensor) {
      // Fast path for 1D tensor input.
      element = values[i].toString();
    } else {
      const axisValues = [];

      for (let m = 0; m < newShape[0]; m++) {
        for (let n = 0; n < newShape[2]; n++) {
          axisValues.push(inputBuffer.get(m, i, n));
        }
      }

      element = axisValues.join(',');
    } // Dedup and update various indices.


    if (uniqueElements[element] !== undefined) {
      indices[i] = uniqueElements[element];
    } else {
      const uniqueIndex = Object.keys(uniqueElements).length;
      uniqueElements[element] = uniqueIndex;
      indices[i] = uniqueIndex;
      uniqueIndices.push(i);
    }
  } // Now we know where each of the unique elements are located along the axis
  // (uniqueIndices). Extract them from input buffer and store them in the
  // output buffer.


  const outputTmpShape = newShape.slice();
  outputTmpShape[1] = Object.keys(uniqueElements).length;
  const outputBuffer = new _tfjsCore.TensorBuffer(outputTmpShape, dtype);
  uniqueIndices.forEach((uniqueElementIndex, i) => {
    for (let m = 0; m < newShape[0]; m++) {
      for (let n = 0; n < newShape[2]; n++) {
        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);
      }
    }
  }); // The output shape can be calculated from the input shape with the size of
  // the given axis replaced by the number of unique elements along that axis.

  const outputShape = shape.slice();
  outputShape[$axis] = outputTmpShape[1];
  return {
    outputValues: outputBuffer.values,
    outputShape,
    indices
  };
}
},{"@tensorflow/tfjs-core":"kSBl"}],"AxIp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "simpleAbsImpl", {
  enumerable: true,
  get: function () {
    return _Abs.simpleAbsImpl;
  }
});
Object.defineProperty(exports, "addImpl", {
  enumerable: true,
  get: function () {
    return _Add.addImpl;
  }
});
Object.defineProperty(exports, "bincountImpl", {
  enumerable: true,
  get: function () {
    return _Bincount_impl.bincountImpl;
  }
});
Object.defineProperty(exports, "bincountReduceImpl", {
  enumerable: true,
  get: function () {
    return _Bincount_impl.bincountReduceImpl;
  }
});
Object.defineProperty(exports, "ceilImpl", {
  enumerable: true,
  get: function () {
    return _Ceil.ceilImpl;
  }
});
Object.defineProperty(exports, "concatImpl", {
  enumerable: true,
  get: function () {
    return _Concat_impl.concatImpl;
  }
});
Object.defineProperty(exports, "equalImpl", {
  enumerable: true,
  get: function () {
    return _Equal.equalImpl;
  }
});
Object.defineProperty(exports, "expImpl", {
  enumerable: true,
  get: function () {
    return _Exp.expImpl;
  }
});
Object.defineProperty(exports, "expm1Impl", {
  enumerable: true,
  get: function () {
    return _Expm.expm1Impl;
  }
});
Object.defineProperty(exports, "floorImpl", {
  enumerable: true,
  get: function () {
    return _Floor.floorImpl;
  }
});
Object.defineProperty(exports, "gatherNdImpl", {
  enumerable: true,
  get: function () {
    return _GatherNd_Impl.gatherNdImpl;
  }
});
Object.defineProperty(exports, "gatherV2Impl", {
  enumerable: true,
  get: function () {
    return _GatherV2_impl.gatherV2Impl;
  }
});
Object.defineProperty(exports, "greaterImpl", {
  enumerable: true,
  get: function () {
    return _Greater.greaterImpl;
  }
});
Object.defineProperty(exports, "greaterEqualImpl", {
  enumerable: true,
  get: function () {
    return _GreaterEqual.greaterEqualImpl;
  }
});
Object.defineProperty(exports, "lessImpl", {
  enumerable: true,
  get: function () {
    return _Less.lessImpl;
  }
});
Object.defineProperty(exports, "lessEqualImpl", {
  enumerable: true,
  get: function () {
    return _LessEqual.lessEqualImpl;
  }
});
Object.defineProperty(exports, "linSpaceImpl", {
  enumerable: true,
  get: function () {
    return _LinSpace_impl.linSpaceImpl;
  }
});
Object.defineProperty(exports, "logImpl", {
  enumerable: true,
  get: function () {
    return _Log.logImpl;
  }
});
Object.defineProperty(exports, "maxImpl", {
  enumerable: true,
  get: function () {
    return _Max_impl.maxImpl;
  }
});
Object.defineProperty(exports, "maximumImpl", {
  enumerable: true,
  get: function () {
    return _Maximum.maximumImpl;
  }
});
Object.defineProperty(exports, "minimumImpl", {
  enumerable: true,
  get: function () {
    return _Minimum.minimumImpl;
  }
});
Object.defineProperty(exports, "multiplyImpl", {
  enumerable: true,
  get: function () {
    return _Multiply.multiplyImpl;
  }
});
Object.defineProperty(exports, "negImpl", {
  enumerable: true,
  get: function () {
    return _Neg.negImpl;
  }
});
Object.defineProperty(exports, "notEqualImpl", {
  enumerable: true,
  get: function () {
    return _NotEqual.notEqualImpl;
  }
});
Object.defineProperty(exports, "prodImpl", {
  enumerable: true,
  get: function () {
    return _Prod.prodImpl;
  }
});
Object.defineProperty(exports, "rangeImpl", {
  enumerable: true,
  get: function () {
    return _Range_impl.rangeImpl;
  }
});
Object.defineProperty(exports, "rsqrtImpl", {
  enumerable: true,
  get: function () {
    return _Rsqrt.rsqrtImpl;
  }
});
Object.defineProperty(exports, "sliceImpl", {
  enumerable: true,
  get: function () {
    return _Slice.sliceImpl;
  }
});
Object.defineProperty(exports, "sparseFillEmptyRowsImpl", {
  enumerable: true,
  get: function () {
    return _SparseFillEmptyRows_impl.sparseFillEmptyRowsImpl;
  }
});
Object.defineProperty(exports, "sparseReshapeImpl", {
  enumerable: true,
  get: function () {
    return _SparseReshape_impl.sparseReshapeImpl;
  }
});
Object.defineProperty(exports, "sparseSegmentReductionImpl", {
  enumerable: true,
  get: function () {
    return _SparseSegmentReduction_impl.sparseSegmentReductionImpl;
  }
});
Object.defineProperty(exports, "squaredDifferenceImpl", {
  enumerable: true,
  get: function () {
    return _SquaredDifference.squaredDifferenceImpl;
  }
});
Object.defineProperty(exports, "stridedSliceImpl", {
  enumerable: true,
  get: function () {
    return _StridedSlice_impl.stridedSliceImpl;
  }
});
Object.defineProperty(exports, "stringNGramsImpl", {
  enumerable: true,
  get: function () {
    return _StringNGrams_impl.stringNGramsImpl;
  }
});
Object.defineProperty(exports, "stringSplitImpl", {
  enumerable: true,
  get: function () {
    return _StringSplit_impl.stringSplitImpl;
  }
});
Object.defineProperty(exports, "stringToHashBucketFastImpl", {
  enumerable: true,
  get: function () {
    return _StringToHashBucketFast_impl.stringToHashBucketFastImpl;
  }
});
Object.defineProperty(exports, "subImpl", {
  enumerable: true,
  get: function () {
    return _Sub.subImpl;
  }
});
Object.defineProperty(exports, "tileImpl", {
  enumerable: true,
  get: function () {
    return _Tile_impl.tileImpl;
  }
});
Object.defineProperty(exports, "topKImpl", {
  enumerable: true,
  get: function () {
    return _TopK_impl.topKImpl;
  }
});
Object.defineProperty(exports, "transposeImpl", {
  enumerable: true,
  get: function () {
    return _Transpose_impl.transposeImpl;
  }
});
Object.defineProperty(exports, "uniqueImpl", {
  enumerable: true,
  get: function () {
    return _Unique_impl.uniqueImpl;
  }
});

var _Abs = require("./kernels/Abs");

var _Add = require("./kernels/Add");

var _Bincount_impl = require("./kernels/Bincount_impl");

var _Ceil = require("./kernels/Ceil");

var _Concat_impl = require("./kernels/Concat_impl");

var _Equal = require("./kernels/Equal");

var _Exp = require("./kernels/Exp");

var _Expm = require("./kernels/Expm1");

var _Floor = require("./kernels/Floor");

var _GatherNd_Impl = require("./kernels/GatherNd_Impl");

var _GatherV2_impl = require("./kernels/GatherV2_impl");

var _Greater = require("./kernels/Greater");

var _GreaterEqual = require("./kernels/GreaterEqual");

var _Less = require("./kernels/Less");

var _LessEqual = require("./kernels/LessEqual");

var _LinSpace_impl = require("./kernels/LinSpace_impl");

var _Log = require("./kernels/Log");

var _Max_impl = require("./kernels/Max_impl");

var _Maximum = require("./kernels/Maximum");

var _Minimum = require("./kernels/Minimum");

var _Multiply = require("./kernels/Multiply");

var _Neg = require("./kernels/Neg");

var _NotEqual = require("./kernels/NotEqual");

var _Prod = require("./kernels/Prod");

var _Range_impl = require("./kernels/Range_impl");

var _Rsqrt = require("./kernels/Rsqrt");

var _Slice = require("./kernels/Slice");

var _SparseFillEmptyRows_impl = require("./kernels/SparseFillEmptyRows_impl");

var _SparseReshape_impl = require("./kernels/SparseReshape_impl");

var _SparseSegmentReduction_impl = require("./kernels/SparseSegmentReduction_impl");

var _SquaredDifference = require("./kernels/SquaredDifference");

var _StridedSlice_impl = require("./kernels/StridedSlice_impl");

var _StringNGrams_impl = require("./kernels/StringNGrams_impl");

var _StringSplit_impl = require("./kernels/StringSplit_impl");

var _StringToHashBucketFast_impl = require("./kernels/StringToHashBucketFast_impl");

var _Sub = require("./kernels/Sub");

var _Tile_impl = require("./kernels/Tile_impl");

var _TopK_impl = require("./kernels/TopK_impl");

var _Transpose_impl = require("./kernels/Transpose_impl");

var _Unique_impl = require("./kernels/Unique_impl");
},{"./kernels/Abs":"WHC3","./kernels/Add":"ZBkJ","./kernels/Bincount_impl":"cUUF","./kernels/Ceil":"PT9Z","./kernels/Concat_impl":"axei","./kernels/Equal":"Qy3m","./kernels/Exp":"Q92g","./kernels/Expm1":"wiHC","./kernels/Floor":"KFD4","./kernels/GatherNd_Impl":"kXTU","./kernels/GatherV2_impl":"Ea37","./kernels/Greater":"QWdt","./kernels/GreaterEqual":"gfwn","./kernels/Less":"x95l","./kernels/LessEqual":"N5Qh","./kernels/LinSpace_impl":"BmUg","./kernels/Log":"ipxn","./kernels/Max_impl":"Db4x","./kernels/Maximum":"DbCK","./kernels/Minimum":"pZXl","./kernels/Multiply":"N9Eb","./kernels/Neg":"NnAL","./kernels/NotEqual":"VkjO","./kernels/Prod":"us0k","./kernels/Range_impl":"m7wV","./kernels/Rsqrt":"eSbP","./kernels/Slice":"i6mc","./kernels/SparseFillEmptyRows_impl":"vXdm","./kernels/SparseReshape_impl":"LDTS","./kernels/SparseSegmentReduction_impl":"XhXa","./kernels/SquaredDifference":"p6Qg","./kernels/StridedSlice_impl":"Jc0Z","./kernels/StringNGrams_impl":"CMu9","./kernels/StringSplit_impl":"opA2","./kernels/StringToHashBucketFast_impl":"KvpR","./kernels/Sub":"fBFg","./kernels/Tile_impl":"W9Ei","./kernels/TopK_impl":"iXMz","./kernels/Transpose_impl":"fDvd","./kernels/Unique_impl":"hHdG"}],"cNPH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uniqueImplCPU = exports.transposeImplCPU = exports.topKImplCPU = exports.tileImplCPU = exports.rsqrtImplCPU = exports.rangeImplCPU = exports.subImplCPU = exports.stringToHashBucketFastImplCPU = exports.stringSplitImplCPU = exports.stringNGramsImplCPU = exports.stridedSliceImplCPU = exports.sparseSegmentReductionImplCPU = exports.sparseReshapeImplCPU = exports.sparseFillEmptyRowsImplCPU = exports.sliceImplCPU = exports.simpleAbsImplCPU = exports.prodImplCPU = exports.notEqualImplCPU = exports.negImplCPU = exports.multiplyImplCPU = exports.minimumImplCPU = exports.maximumImplCPU = exports.maxImplCPU = exports.logImplCPU = exports.linSpaceImplCPU = exports.lessImplCPU = exports.lessEqualImplCPU = exports.greaterImplCPU = exports.greaterEqualImplCPU = exports.gatherV2ImplCPU = exports.gatherNdImplCPU = exports.floorImplCPU = exports.expm1ImplCPU = exports.expImplCPU = exports.equalImplCPU = exports.concatImplCPU = exports.ceilImplCPU = exports.bincountReduceImplCPU = exports.bincountImplCPU = exports.addImplCPU = void 0;

var shared = _interopRequireWildcard(require("@tensorflow/tfjs-backend-cpu/dist/shared"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Import shared functionality from tfjs-backend-cpu without triggering
// side effects.
// tslint:disable-next-line: no-imports-from-dist
const {
  addImpl: addImplCPU,
  bincountImpl: bincountImplCPU,
  bincountReduceImpl: bincountReduceImplCPU,
  ceilImpl: ceilImplCPU,
  concatImpl: concatImplCPU,
  equalImpl: equalImplCPU,
  expImpl: expImplCPU,
  expm1Impl: expm1ImplCPU,
  floorImpl: floorImplCPU,
  gatherNdImpl: gatherNdImplCPU,
  gatherV2Impl: gatherV2ImplCPU,
  greaterImpl: greaterImplCPU,
  greaterEqualImpl: greaterEqualImplCPU,
  lessImpl: lessImplCPU,
  lessEqualImpl: lessEqualImplCPU,
  linSpaceImpl: linSpaceImplCPU,
  logImpl: logImplCPU,
  maxImpl: maxImplCPU,
  maximumImpl: maximumImplCPU,
  minimumImpl: minimumImplCPU,
  multiplyImpl: multiplyImplCPU,
  negImpl: negImplCPU,
  notEqualImpl: notEqualImplCPU,
  prodImpl: prodImplCPU,
  rangeImpl: rangeImplCPU,
  rsqrtImpl: rsqrtImplCPU,
  simpleAbsImpl: simpleAbsImplCPU,
  sliceImpl: sliceImplCPU,
  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,
  sparseReshapeImpl: sparseReshapeImplCPU,
  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,
  stridedSliceImpl: stridedSliceImplCPU,
  stringNGramsImpl: stringNGramsImplCPU,
  stringSplitImpl: stringSplitImplCPU,
  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,
  subImpl: subImplCPU,
  tileImpl: tileImplCPU,
  topKImpl: topKImplCPU,
  transposeImpl: transposeImplCPU,
  uniqueImpl: uniqueImplCPU
} = shared;
exports.uniqueImplCPU = uniqueImplCPU;
exports.transposeImplCPU = transposeImplCPU;
exports.topKImplCPU = topKImplCPU;
exports.tileImplCPU = tileImplCPU;
exports.subImplCPU = subImplCPU;
exports.stringToHashBucketFastImplCPU = stringToHashBucketFastImplCPU;
exports.stringSplitImplCPU = stringSplitImplCPU;
exports.stringNGramsImplCPU = stringNGramsImplCPU;
exports.stridedSliceImplCPU = stridedSliceImplCPU;
exports.sparseSegmentReductionImplCPU = sparseSegmentReductionImplCPU;
exports.sparseReshapeImplCPU = sparseReshapeImplCPU;
exports.sparseFillEmptyRowsImplCPU = sparseFillEmptyRowsImplCPU;
exports.sliceImplCPU = sliceImplCPU;
exports.simpleAbsImplCPU = simpleAbsImplCPU;
exports.rsqrtImplCPU = rsqrtImplCPU;
exports.rangeImplCPU = rangeImplCPU;
exports.prodImplCPU = prodImplCPU;
exports.notEqualImplCPU = notEqualImplCPU;
exports.negImplCPU = negImplCPU;
exports.multiplyImplCPU = multiplyImplCPU;
exports.minimumImplCPU = minimumImplCPU;
exports.maximumImplCPU = maximumImplCPU;
exports.maxImplCPU = maxImplCPU;
exports.logImplCPU = logImplCPU;
exports.linSpaceImplCPU = linSpaceImplCPU;
exports.lessEqualImplCPU = lessEqualImplCPU;
exports.lessImplCPU = lessImplCPU;
exports.greaterEqualImplCPU = greaterEqualImplCPU;
exports.greaterImplCPU = greaterImplCPU;
exports.gatherV2ImplCPU = gatherV2ImplCPU;
exports.gatherNdImplCPU = gatherNdImplCPU;
exports.floorImplCPU = floorImplCPU;
exports.expm1ImplCPU = expm1ImplCPU;
exports.expImplCPU = expImplCPU;
exports.equalImplCPU = equalImplCPU;
exports.concatImplCPU = concatImplCPU;
exports.ceilImplCPU = ceilImplCPU;
exports.bincountReduceImplCPU = bincountReduceImplCPU;
exports.bincountImplCPU = bincountImplCPU;
exports.addImplCPU = addImplCPU;
},{"@tensorflow/tfjs-backend-cpu/dist/shared":"AxIp"}],"BqvU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVecChannels = getVecChannels;
exports.getChannels = getChannels;
exports.getSourceCoords = getSourceCoords;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getVecChannels(name, rank) {
  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);
}

function getChannels(name, rank) {
  if (rank === 1) {
    return [name];
  }

  return getVecChannels(name, rank);
}

function getSourceCoords(rank, dims) {
  if (rank === 1) {
    return 'rc';
  }

  let coords = '';

  for (let i = 0; i < rank; i++) {
    coords += dims[i];

    if (i < rank - 1) {
      coords += ',';
    }
  }

  return coords;
}
},{}],"tySX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PackProgram = void 0;

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PackProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = false;
    this.packedOutput = true; // Only input / output 3D tensors.

    this.outputShape = outputShape;
    const rank = outputShape.length;

    if (rank === 0) {
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    } else {
      const channels = (0, _packing_util.getChannels)('rc', rank);
      const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
      const outOfBoundsCondition = getOutOfBoundsCondition(rank, outputShape, channels);
      const setup = getSetup(rank, outputShape[outputShape.length - 1], outputShape[outputShape.length - 2], channels);
      const output = getOutput(outputShape, channels);
      this.userCode = `
        void main() {
          ${dtype} rc = getOutputCoords();

          if(${outOfBoundsCondition}) {
            setOutput(vec4(0));
          } else {
            ${setup}

            setOutput(vec4(${output}));
          }
        }
      `;
    }
  }

}

exports.PackProgram = PackProgram;

function getSourceCoordsArr(rank, dims) {
  const coords = [];

  for (let row = 0; row <= 1; row++) {
    for (let col = 0; col <= 1; col++) {
      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;

      for (let d = 2; d < rank; d++) {
        coord = `${dims[dims.length - 1 - d]},` + coord;
      }

      coords.push(coord);
    }
  }

  return coords;
}

function getOutOfBoundsCondition(rank, shape, dims) {
  if (rank === 1) {
    return `rc > ${shape[0]}`;
  }

  let cond = '';

  for (let i = rank - 2; i < rank; i++) {
    cond += `${dims[i]} >= ${shape[i]}`;

    if (i < rank - 1) {
      cond += '||';
    }
  }

  return cond;
}

function getSetup(rank, cols, rows, dims) {
  if (rank === 1) {
    return '';
  }

  const innerDims = dims.slice(-2);
  return `
    int r = ${innerDims[0]};
    int c = ${innerDims[1]};
    int rp1 = r + 1;
    int cp1 = c + 1;

    bool cEdge = cp1 >= ${cols};
    bool rEdge = rp1 >= ${rows};
  `;
}

function getOutput(shape, dims) {
  const rank = shape.length;
  const sourceCoords = getSourceCoordsArr(rank, dims);

  if (rank === 1) {
    return `getA(rc),
            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),
            0, 0`;
  }

  return `getA(${sourceCoords[0]}),
          cEdge ? 0. : getA(${sourceCoords[1]}),
          rEdge ? 0. : getA(${sourceCoords[2]}),
          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;
}
},{"./packing_util":"BqvU","./shader_compiler":"xhhc"}],"qDuX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReshapePackedProgram = void 0;

var shader_util = _interopRequireWildcard(require("./shader_compiler_util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ReshapePackedProgram {
  constructor(outputShape, inputShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = outputShape;
    let mainLoop = ``;

    for (let i = 0; i < 4; i++) {
      let thisRC = `thisRC = rc;`;

      if (i % 2 === 1) {
        thisRC += `thisRC.z += 1;`;
      }

      if (i > 1) {
        thisRC += `thisRC.y += 1;`;
      }

      mainLoop += `
        ${thisRC}
        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${i}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${i > 0 ? '}' : ''}
      `;
    }

    this.userCode = `
      ${getReshapedInputCoords(inputShape)}
      ${shader_util.getFlatIndexFrom3D(outputShape)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${outputShape[1]};
        int cols = ${outputShape[2]};

        ${mainLoop}

        setOutput(result);
      }
    `;
  }

}

exports.ReshapePackedProgram = ReshapePackedProgram;

function getReshapedInputCoords(shape) {
  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${coordsFromIndexSnippet}
      return ivec3(r, c, d);
    }
  `;
}
},{"./shader_compiler_util":"tjqy"}],"yk4C":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeBytes = computeBytes;
exports.TextureManager = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _gpgpu_util = require("./gpgpu_util");

var _tex_util = require("./tex_util");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TextureManager {
  constructor(gpgpu) {
    this.gpgpu = gpgpu;
    this.numUsedTextures = 0;
    this.numFreeTextures = 0;
    this._numBytesAllocated = 0;
    this._numBytesFree = 0; // How many bytes that have been allocated
    // are available for reuse.

    this.freeTextures = {};
    this.logEnabled = false;
    this.usedTextures = {};
  }

  acquireTexture(shapeRC, usage, isPacked) {
    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);
    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);

    if (!(shapeKey in this.freeTextures)) {
      this.freeTextures[shapeKey] = [];
    }

    if (!(shapeKey in this.usedTextures)) {
      this.usedTextures[shapeKey] = [];
    }

    const texBytes = computeBytes(shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);

    if (this.freeTextures[shapeKey].length > 0) {
      this.numFreeTextures--;
      this.numUsedTextures++;
      this._numBytesFree -= texBytes;
      this.log();
      const newTexture = this.freeTextures[shapeKey].shift();
      this.usedTextures[shapeKey].push(newTexture);
      return newTexture;
    }

    let newTexture;

    if (physicalTexType === _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT32) {
      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);
    } else if (physicalTexType === _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT16) {
      newTexture = this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);
    } else if (physicalTexType === _tex_util.PhysicalTextureType.UNPACKED_FLOAT32) {
      newTexture = this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);
    } else if (physicalTexType === _tex_util.PhysicalTextureType.UNPACKED_FLOAT16) {
      newTexture = this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);
    } else if (physicalTexType === _tex_util.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {
      newTexture = this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);
    }

    this.usedTextures[shapeKey].push(newTexture);
    this.numUsedTextures++;
    this._numBytesAllocated += texBytes;
    this.log();
    return newTexture;
  }

  releaseTexture(texture, shape, logicalTexType, isPacked) {
    if (this.freeTextures == null) {
      // Already disposed.
      return;
    }

    const physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);
    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);

    if (!(shapeKey in this.freeTextures)) {
      this.freeTextures[shapeKey] = [];
    }

    const texBytes = computeBytes(shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);
    const deleteTexThreshold = (0, _tfjsCore.env)().get('WEBGL_DELETE_TEXTURE_THRESHOLD');

    if (deleteTexThreshold !== -1 && this._numBytesAllocated > deleteTexThreshold) {
      this.gpgpu.deleteMatrixTexture(texture);
      this._numBytesAllocated -= texBytes;
    } else {
      this.freeTextures[shapeKey].push(texture);
      this.numFreeTextures++;
      this._numBytesFree += texBytes;
    }

    this.numUsedTextures--;
    const texList = this.usedTextures[shapeKey];
    const texIndex = texList.indexOf(texture);

    if (texIndex < 0) {
      throw new Error('Cannot release a texture that was never provided by this ' + 'texture manager');
    }

    texList.splice(texIndex, 1);
    this.log();
  }

  log() {
    if (!this.logEnabled) {
      return;
    }

    const total = this.numFreeTextures + this.numUsedTextures;
    console.log('Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${total})`);
    const freeRatio = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`);
    console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * freeRatio)}%)`);
  }

  get numBytesAllocated() {
    return this._numBytesAllocated;
  }

  get numBytesFree() {
    return this._numBytesFree;
  }

  getNumUsedTextures() {
    return this.numUsedTextures;
  }

  getNumFreeTextures() {
    return this.numFreeTextures;
  }

  dispose() {
    if (this.freeTextures == null) {
      // Already disposed.
      return;
    }

    for (const texShape in this.freeTextures) {
      this.freeTextures[texShape].forEach(tex => {
        this.gpgpu.deleteMatrixTexture(tex);
      });
    }

    for (const texShape in this.usedTextures) {
      this.usedTextures[texShape].forEach(tex => {
        this.gpgpu.deleteMatrixTexture(tex);
      });
    }

    this.freeTextures = null;
    this.usedTextures = null;
    this.numUsedTextures = 0;
    this.numFreeTextures = 0;
    this._numBytesAllocated = 0;
    this._numBytesFree = 0;
  }

}

exports.TextureManager = TextureManager;

function numBytesForInternalFormat(gl, internalFormat) {
  // tslint:disable-next-line:no-any
  const glany = gl;

  if (internalFormat === glany.R32F) {
    return 4;
  } else if (internalFormat === glany.R16F) {
    return 2;
  } else if (internalFormat === glany.RGBA32F) {
    return 16;
  } else if (internalFormat === gl.RGBA) {
    return 16;
  } else if (internalFormat === glany.RGBA16F) {
    return 8;
  }

  throw new Error(`Unknown internal format ${internalFormat}`);
}

function computeBytes(shape, physicalTexType, gl, textureConfig, isPacked) {
  // It is not possible to infer packed status from the texture type because
  // depending on the textureConfig, different  texture types may resolve to the
  // same internal format (e.g. in WebGL1, the internal format for
  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`
  // explicitly.
  const internalFormat = internalFormatForPhysicalTexType(physicalTexType, textureConfig);
  let numElements;

  if (isPacked) {
    const [packedWidth, packedHeight] = (0, _tex_util.getPackedMatrixTextureShapeWidthHeight)(shape[0], shape[1]);
    numElements = packedWidth * packedHeight;
  } else {
    const [width, height] = (0, _tex_util.getUnpackedMatrixTextureShapeWidthHeight)(shape[0], shape[1]);
    numElements = width * height;
  }

  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);
  return numElements * bytesPerElement;
}

function internalFormatForPhysicalTexType(physicalTexType, textureConfig) {
  switch (physicalTexType) {
    case _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT32:
      return (0, _gpgpu_util.getInternalFormatForPackedMatrixTexture)(textureConfig);

    case _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT16:
      return (0, _gpgpu_util.getInternalFormatForFloat16PackedMatrixTexture)(textureConfig);

    case _tex_util.PhysicalTextureType.UNPACKED_FLOAT32:
      return (0, _gpgpu_util.getInternalFormatForFloat32MatrixTexture)(textureConfig);

    case _tex_util.PhysicalTextureType.UNPACKED_FLOAT16:
      return (0, _gpgpu_util.getInternalFormatForFloat16MatrixTexture)(textureConfig);

    case _tex_util.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:
      return (0, _gpgpu_util.getInternalFormatForUnsignedBytesMatrixTexture)(textureConfig);

    default:
      throw new Error(`Unknown physical texture type ${physicalTexType}`);
  }
}

function getPhysicalTextureForRendering(isPacked) {
  if ((0, _tfjsCore.env)().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {
    if (isPacked) {
      return _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT32;
    }

    return _tex_util.PhysicalTextureType.UNPACKED_FLOAT32;
  }

  if (isPacked) {
    return _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT16;
  }

  return _tex_util.PhysicalTextureType.UNPACKED_FLOAT16;
}

function getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {
  if (logicalTexType === _tex_util.TextureUsage.UPLOAD) {
    return _tex_util.PhysicalTextureType.PACKED_2X2_FLOAT32;
  } else if (logicalTexType === _tex_util.TextureUsage.RENDER || logicalTexType == null) {
    return getPhysicalTextureForRendering(isPacked);
  } else if (logicalTexType === _tex_util.TextureUsage.DOWNLOAD || logicalTexType === _tex_util.TextureUsage.PIXELS) {
    return _tex_util.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;
  }

  throw new Error(`Unknown logical texture type ${logicalTexType}`);
}

function getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {
  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;
}
},{"@tensorflow/tfjs-core":"kSBl","./gpgpu_util":"jgbg","./tex_util":"jAWT"}],"CK3x":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STEP = STEP;
exports.SIGMOID = exports.CLONE = exports.RELU6 = exports.RELU = exports.ELU = exports.ABS = exports.LINEAR = exports.CHECK_NAN_SNIPPET = exports.UnaryOpProgram = void 0;

var _gpgpu_math = require("./gpgpu_math");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class UnaryOpProgram {
  constructor(aShape, opSnippet) {
    this.variableNames = ['A'];
    this.outputShape = aShape;
    this.enableShapeUniforms = (0, _gpgpu_math.useShapeUniforms)(this.outputShape.length);
    this.userCode = `
      float unaryOperation(float x) {
        ${opSnippet}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }

}

exports.UnaryOpProgram = UnaryOpProgram;
const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;
exports.CHECK_NAN_SNIPPET = CHECK_NAN_SNIPPET;
const LINEAR = `return x;`;
exports.LINEAR = LINEAR;
const ABS = `return abs(x);`;
exports.ABS = ABS;

function STEP(alpha = 0.0) {
  return CHECK_NAN_SNIPPET + `
    return x > 0.0 ? 1.0 : float(${alpha});
  `;
}

const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;
exports.ELU = ELU;
const RELU = CHECK_NAN_SNIPPET + `
  return (x < 0.0) ? 0.0 : x;
`;
exports.RELU = RELU;
const RELU6 = CHECK_NAN_SNIPPET + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
exports.RELU6 = RELU6;
const CLONE = 'return x;';
exports.CLONE = CLONE;
const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;
exports.SIGMOID = SIGMOID;
},{"./gpgpu_math":"eeKH"}],"zBLd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnaryOpPackedProgram = exports.SIGMOID = exports.RELU6 = exports.RELU = exports.ELU = exports.LINEAR = void 0;

var _gpgpu_math = require("./gpgpu_math");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LINEAR = `return x;`;
exports.LINEAR = LINEAR;
const ELU = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
exports.ELU = ELU;
const RELU = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
exports.RELU = RELU;
const RELU6 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
exports.RELU6 = RELU6;
const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;
exports.SIGMOID = SIGMOID;

class UnaryOpPackedProgram {
  constructor(aShape, opSnippet) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = aShape;
    this.enableShapeUniforms = (0, _gpgpu_math.useShapeUniforms)(this.outputShape.length);
    this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${opSnippet}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }

}

exports.UnaryOpPackedProgram = UnaryOpPackedProgram;
},{"./gpgpu_math":"eeKH"}],"boI6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnpackProgram = void 0;

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class UnpackProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = false;
    this.outputShape = outputShape;
    const rank = outputShape.length;
    const channels = (0, _packing_util.getChannels)('rc', rank);
    const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
    const sourceCoords = (0, _packing_util.getSourceCoords)(rank, channels);
    const innerDims = channels.slice(-2);
    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;
    this.userCode = `
      void main() {
        ${dtype} rc = getOutputCoords();
        vec4 packedInput = getA(${sourceCoords});

        setOutput(getChannel(packedInput, ${coords}));
      }
    `;
  }

}

exports.UnpackProgram = UnpackProgram;
},{"./packing_util":"BqvU","./shader_compiler":"xhhc"}],"DXeN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBinaryCache = getBinaryCache;
exports.MathBackendWebGL = exports.EPSILON_FLOAT16 = exports.EPSILON_FLOAT32 = void 0;

require("./flags_webgl");

var _tfjsCore = require("@tensorflow/tfjs-core");

var _canvas_util = require("./canvas_util");

var _decode_matrix_gpu = require("./decode_matrix_gpu");

var _decode_matrix_packed_gpu = require("./decode_matrix_packed_gpu");

var _encode_float_gpu = require("./encode_float_gpu");

var _encode_float_packed_gpu = require("./encode_float_packed_gpu");

var _encode_matrix_gpu = require("./encode_matrix_gpu");

var _encode_matrix_packed_gpu = require("./encode_matrix_packed_gpu");

var _gpgpu_context = require("./gpgpu_context");

var gpgpu_math = _interopRequireWildcard(require("./gpgpu_math"));

var _shared = require("./kernel_utils/shared");

var _pack_gpu = require("./pack_gpu");

var _reshape_packed_gpu = require("./reshape_packed_gpu");

var tex_util = _interopRequireWildcard(require("./tex_util"));

var _texture_manager = require("./texture_manager");

var unary_op = _interopRequireWildcard(require("./unaryop_gpu"));

var _unaryop_packed_gpu = require("./unaryop_packed_gpu");

var _unpack_gpu = require("./unpack_gpu");

var webgl_util = _interopRequireWildcard(require("./webgl_util"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Import webgl flags.
const whereImpl = _tfjsCore.kernel_impls.whereImpl;
const EPSILON_FLOAT32 = 1e-7;
exports.EPSILON_FLOAT32 = EPSILON_FLOAT32;
const EPSILON_FLOAT16 = 1e-4;
exports.EPSILON_FLOAT16 = EPSILON_FLOAT16;
const binaryCaches = {};

function getBinaryCache(webGLVersion) {
  if (webGLVersion in binaryCaches) {
    return binaryCaches[webGLVersion];
  }

  binaryCaches[webGLVersion] = {};
  return binaryCaches[webGLVersion];
} // Empirically determined constant used to determine size threshold for handing
// off execution to the CPU.


const CPU_HANDOFF_SIZE_THRESHOLD = (0, _tfjsCore.env)().getNumber('CPU_HANDOFF_SIZE_THRESHOLD'); // Empirically determined constant used to decide the number of MB on GPU
// before we warn about high memory use. The MB are this constant * screen area
// * dpi / 1024 / 1024.

const BEFORE_PAGING_CONSTANT = 600;

function numMBBeforeWarning() {
  if ((0, _tfjsCore.env)().global.screen == null) {
    return 1024; // 1 GB.
  }

  return (0, _tfjsCore.env)().global.screen.height * (0, _tfjsCore.env)().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;
}

class MathBackendWebGL extends _tfjsCore.KernelBackend {
  constructor(gpgpu) {
    super(); // Maps data ids that have a pending read operation, to list of subscribers.

    this.pendingRead = new WeakMap(); // List of data ids that are scheduled for disposal, but are waiting on a
    // pending read operation.

    this.pendingDisposal = new WeakSet(); // Used to count the number of 'shallow' sliced tensors that point to the
    // same data id.

    this.dataRefCount = new WeakMap();
    this.numBytesInGPU = 0; // Accumulated time spent (including blocking) in uploading data to webgl.

    this.uploadWaitMs = 0; // Accumulated time spent (including blocking in downloading data from webgl.

    this.downloadWaitMs = 0; // record the last manual GL Flush time.

    this.lastGlFlushTime = 0;
    this.warnedAboutMemory = false;
    this.pendingDeletes = 0;
    this.disposed = false;

    if (!(0, _tfjsCore.env)().getBool('HAS_WEBGL')) {
      throw new Error('WebGL is not supported on this device');
    }

    if (gpgpu == null) {
      const gl = (0, _canvas_util.getWebGLContext)((0, _tfjsCore.env)().getNumber('WEBGL_VERSION'));
      this.binaryCache = getBinaryCache((0, _tfjsCore.env)().getNumber('WEBGL_VERSION'));
      this.gpgpu = new _gpgpu_context.GPGPUContext(gl);
      this.canvas = gl.canvas;
      this.gpgpuCreatedLocally = true;
    } else {
      this.gpgpu = gpgpu;
      this.binaryCache = {};
      this.gpgpuCreatedLocally = false;
      this.canvas = gpgpu.gl.canvas;
    }

    this.textureManager = new _texture_manager.TextureManager(this.gpgpu);
    this.numMBBeforeWarning = numMBBeforeWarning();
    this.texData = new _tfjsCore.DataStorage(this, (0, _tfjsCore.engine)());
  }

  nextDataId() {
    return MathBackendWebGL.nextDataId++;
  }

  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }

  write(values, shape, dtype) {
    if ((0, _tfjsCore.env)().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || (0, _tfjsCore.env)().getBool('DEBUG')) {
      this.checkNumericalProblems(values);
    }

    if (dtype === 'complex64' && values != null) {
      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);
    }

    const dataId = {
      id: this.nextDataId()
    };
    this.texData.set(dataId, {
      shape,
      dtype,
      values,
      usage: tex_util.TextureUsage.UPLOAD,
      refCount: 1
    });
    return dataId;
  }
  /** Return refCount of a `TensorData`. */


  refCount(dataId) {
    if (this.texData.has(dataId)) {
      const tensorData = this.texData.get(dataId);
      return tensorData.refCount;
    }

    return 0;
  }
  /** Increase refCount of a `TextureData`. */


  incRef(dataId) {
    const texData = this.texData.get(dataId);
    texData.refCount++;
  }
  /** Decrease refCount of a `TextureData`. */


  decRef(dataId) {
    if (this.texData.has(dataId)) {
      const texData = this.texData.get(dataId);
      texData.refCount--;
    }
  }

  move(dataId, values, shape, dtype, refCount) {
    if ((0, _tfjsCore.env)().getBool('DEBUG')) {
      this.checkNumericalProblems(values);
    }

    if (dtype === 'complex64') {
      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);
    }

    this.texData.set(dataId, {
      shape,
      dtype,
      values,
      usage: tex_util.TextureUsage.UPLOAD,
      refCount
    });
  }

  disposeIntermediateTensorInfo(tensorInfo) {
    this.disposeData(tensorInfo.dataId);
  }

  readSync(dataId) {
    const texData = this.texData.get(dataId);
    const {
      values,
      dtype,
      complexTensorInfos,
      slice,
      shape,
      isPacked
    } = texData; // The presence of `slice` indicates this tensor is a shallow slice of a
    // different tensor, and is using that original tensor's texture. Run
    // `clone` in order to copy that texture and read from it.

    if (slice != null) {
      let program;

      if (isPacked) {
        program = new _unaryop_packed_gpu.UnaryOpPackedProgram(shape, unary_op.CLONE);
      } else {
        program = new unary_op.UnaryOpProgram(shape, unary_op.CLONE);
      }

      const res = this.runWebGLProgram(program, [{
        dataId,
        shape,
        dtype
      }], dtype);
      const data = this.readSync(res.dataId);
      this.disposeIntermediateTensorInfo(res);
      return data;
    }

    if (values != null) {
      return this.convertAndCacheOnCPU(dataId);
    }

    if (dtype === 'string') {
      return values;
    }

    const shouldTimeProgram = this.activeTimers != null;
    let start;

    if (shouldTimeProgram) {
      start = _tfjsCore.util.now();
    }

    let result;

    if (dtype === 'complex64') {
      const realValues = this.readSync(complexTensorInfos.real.dataId);
      const imagValues = this.readSync(complexTensorInfos.imag.dataId);
      result = _tfjsCore.backend_util.mergeRealAndImagArrays(realValues, imagValues);
    } else {
      result = this.getValuesFromTexture(dataId);
    }

    if (shouldTimeProgram) {
      this.downloadWaitMs += _tfjsCore.util.now() - start;
    }

    return this.convertAndCacheOnCPU(dataId, result);
  }

  async read(dataId) {
    if (this.pendingRead.has(dataId)) {
      const subscribers = this.pendingRead.get(dataId);
      return new Promise(resolve => subscribers.push(resolve));
    }

    const texData = this.texData.get(dataId);
    const {
      values,
      shape,
      slice,
      dtype,
      complexTensorInfos,
      isPacked
    } = texData; // The presence of `slice` indicates this tensor is a shallow slice of a
    // different tensor, and is using that original tensor's texture. Run
    // `clone` in order to copy that texture and read from it.

    if (slice != null) {
      let program;

      if (isPacked) {
        program = new _unaryop_packed_gpu.UnaryOpPackedProgram(shape, unary_op.CLONE);
      } else {
        program = new unary_op.UnaryOpProgram(shape, unary_op.CLONE);
      }

      const res = this.runWebGLProgram(program, [{
        dataId,
        shape,
        dtype
      }], dtype);
      const data = this.read(res.dataId);
      this.disposeIntermediateTensorInfo(res);
      return data;
    }

    if (values != null) {
      return this.convertAndCacheOnCPU(dataId);
    }

    if (!(0, _tfjsCore.env)().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && (0, _tfjsCore.env)().getNumber('WEBGL_VERSION') === 2) {
      throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` + `WEBGL_VERSION=2 not yet supported.`);
    }

    let buffer = null;
    let tmpDownloadTarget;

    if (dtype !== 'complex64' && (0, _tfjsCore.env)().get('WEBGL_BUFFER_SUPPORTED')) {
      // Possibly copy the texture into a buffer before inserting a fence.
      tmpDownloadTarget = this.decode(dataId);
      const tmpData = this.texData.get(tmpDownloadTarget.dataId);
      buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));
    }

    this.pendingRead.set(dataId, []);

    if (dtype !== 'complex64') {
      // Create a fence and wait for it to resolve.
      await this.gpgpu.createAndWaitForFence();
    } // Download the values from the GPU.


    let vals;

    if (dtype === 'complex64') {
      const ps = await Promise.all([this.read(complexTensorInfos.real.dataId), this.read(complexTensorInfos.imag.dataId)]);
      const realValues = ps[0];
      const imagValues = ps[1];
      vals = _tfjsCore.backend_util.mergeRealAndImagArrays(realValues, imagValues);
    } else if (buffer == null) {
      vals = this.getValuesFromTexture(dataId);
    } else {
      const size = _tfjsCore.util.sizeFromShape(shape);

      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);
    }

    if (tmpDownloadTarget != null) {
      this.disposeIntermediateTensorInfo(tmpDownloadTarget);
    }

    if (buffer != null) {
      const gl = this.gpgpu.gl;
      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));
    }

    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);
    const subscribers = this.pendingRead.get(dataId);
    this.pendingRead.delete(dataId); // Notify all pending reads.

    subscribers.forEach(resolve => resolve(dTypeVals));

    if (this.pendingDisposal.has(dataId)) {
      this.pendingDisposal.delete(dataId);

      if (this.disposeData(dataId)) {
        (0, _tfjsCore.engine)().removeDataId(dataId, this);
      }

      this.pendingDeletes--;
    }

    return dTypeVals;
  }

  bufferSync(t) {
    const data = this.readSync(t.dataId);
    let decodedData = data;

    if (t.dtype === 'string') {
      try {
        // Decode the bytes into string.
        decodedData = data.map(d => _tfjsCore.util.decodeString(d));
      } catch (_a) {
        throw new Error('Failed to decode encoded string bytes into utf-8');
      }
    }

    return (0, _tfjsCore.buffer)(t.shape, t.dtype, decodedData);
  }

  checkNumericalProblems(values) {
    if (values == null) {
      return;
    }

    for (let i = 0; i < values.length; i++) {
      const num = values[i];

      if (!webgl_util.canBeRepresented(num)) {
        if ((0, _tfjsCore.env)().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {
          throw Error(`The value ${num} cannot be represented with your ` + `current settings. Consider enabling float32 rendering: ` + `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);
        }

        throw Error(`The value ${num} cannot be represented on this device.`);
      }
    }
  }

  getValuesFromTexture(dataId) {
    const {
      shape,
      dtype,
      isPacked
    } = this.texData.get(dataId);

    const size = _tfjsCore.util.sizeFromShape(shape);

    if ((0, _tfjsCore.env)().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {
      const tmpTarget = this.decode(dataId);
      const tmpData = this.texData.get(tmpTarget.dataId);
      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape)).subarray(0, size);
      this.disposeIntermediateTensorInfo(tmpTarget);
      return vals;
    }

    const shouldUsePackedProgram = (0, _tfjsCore.env)().getBool('WEBGL_PACK') && isPacked === true;
    const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;
    const program = shouldUsePackedProgram ? new _encode_float_packed_gpu.EncodeFloatPackedProgram(outputShape) : new _encode_float_gpu.EncodeFloatProgram(outputShape);
    const output = this.runWebGLProgram(program, [{
      shape: outputShape,
      dtype,
      dataId
    }], 'float32');
    const tmpData = this.texData.get(output.dataId);
    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);
    this.disposeIntermediateTensorInfo(output);
    return vals;
  }

  timerAvailable() {
    return (0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;
  }

  async time(f) {
    const oldActiveTimers = this.activeTimers;
    const newActiveTimers = [];
    let outerMostTime = false;

    if (this.programTimersStack == null) {
      this.programTimersStack = newActiveTimers;
      outerMostTime = true;
    } else {
      this.activeTimers.push(newActiveTimers);
    }

    this.activeTimers = newActiveTimers;
    f(); // needing to split these up because util.flatten only accepts certain types

    const flattenedActiveTimerQueries = _tfjsCore.util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);

    const flattenedActiveTimerNames = _tfjsCore.util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);

    this.activeTimers = oldActiveTimers;

    if (outerMostTime) {
      this.programTimersStack = null;
    }

    const res = {
      uploadWaitMs: this.uploadWaitMs,
      downloadWaitMs: this.downloadWaitMs,
      kernelMs: null,
      wallMs: null // will be filled by the engine

    };

    if ((0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
      const kernelMs = await Promise.all(flattenedActiveTimerQueries);
      res['kernelMs'] = _tfjsCore.util.sum(kernelMs);

      res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({
        name: flattenedActiveTimerNames[i],
        ms: d
      })).map(d => `${d.name}: ${d.ms}`).join(', ');
    } else {
      res['kernelMs'] = {
        error: 'WebGL query timers are not supported in this environment.'
      };
    }

    this.uploadWaitMs = 0;
    this.downloadWaitMs = 0;
    return res;
  }

  memory() {
    return {
      unreliable: false,
      numBytesInGPU: this.numBytesInGPU,
      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
      numBytesInGPUFree: this.textureManager.numBytesFree
    };
  }

  startTimer() {
    if ((0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
      return this.gpgpu.beginQuery();
    }

    return {
      startMs: _tfjsCore.util.now(),
      endMs: null
    };
  }

  endTimer(query) {
    if ((0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
      this.gpgpu.endQuery();
      return query;
    }

    query.endMs = _tfjsCore.util.now();
    return query;
  }

  async getQueryTime(query) {
    if ((0, _tfjsCore.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
      return this.gpgpu.waitForQueryAndGetTime(query);
    }

    const timerQuery = query;
    return timerQuery.endMs - timerQuery.startMs;
  }
  /**
   * Decrease the RefCount on the dataId and dispose the memory if the dataId
   * has 0 refCount. If there are pending read on the data, the disposal would
   * added to the pending delete queue. Return true if the dataId is removed
   * from backend or the backend does not contain the dataId, false if the
   * dataId is not removed. Memory may or may not be released even when dataId
   * is removed, which also depends on dataRefCount, see `releaseGPU`.
   * @param dataId
   * @oaram force Optional, remove the data regardless of refCount
   */


  disposeData(dataId, force = false) {
    if (this.pendingDisposal.has(dataId)) {
      return false;
    } // No-op if already disposed.


    if (!this.texData.has(dataId)) {
      return true;
    } // if force flag is set, change refCount to 0, this would ensure disposal
    // when added to the pendingDisposal queue. Memory may or may not be
    // released, which also depends on dataRefCount, see `releaseGPU`.


    if (force) {
      this.texData.get(dataId).refCount = 0;
    } else {
      this.texData.get(dataId).refCount--;
    }

    if (!force && this.texData.get(dataId).refCount > 0) {
      return false;
    }

    if (this.pendingRead.has(dataId)) {
      this.pendingDisposal.add(dataId);
      this.pendingDeletes++;
      return false;
    }

    this.releaseGPUData(dataId);
    const {
      complexTensorInfos
    } = this.texData.get(dataId);

    if (complexTensorInfos != null) {
      this.disposeData(complexTensorInfos.real.dataId, force);
      this.disposeData(complexTensorInfos.imag.dataId, force);
    }

    this.texData.delete(dataId);
    return true;
  }

  releaseGPUData(dataId) {
    const {
      texture,
      dtype,
      texShape,
      usage,
      isPacked,
      slice
    } = this.texData.get(dataId);
    const key = slice && slice.origDataId || dataId;
    const refCount = this.dataRefCount.get(key);

    if (refCount > 1) {
      this.dataRefCount.set(key, refCount - 1);
    } else {
      this.dataRefCount.delete(key);

      if (texture != null) {
        this.numBytesInGPU -= this.computeBytes(texShape, dtype);
        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);
      }
    }

    const texData = this.texData.get(dataId);
    texData.texture = null;
    texData.texShape = null;
    texData.isPacked = false;
    texData.slice = null;
  }

  getTexture(dataId) {
    this.uploadToGPU(dataId);
    return this.texData.get(dataId).texture;
  }
  /**
   * Returns internal information for the specific data bucket. Used in unit
   * tests.
   */


  getDataInfo(dataId) {
    return this.texData.get(dataId);
  }
  /*
  Tests whether all the inputs to an op are small and on the CPU. This heuristic
  determines when it would be faster to execute a kernel on the CPU. WebGL
  kernels opt into running this check and forwarding when appropriate.
  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more
  sustainable strategy for optimizing backend execution of ops.
   */


  shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {
    return (0, _tfjsCore.env)().getBool('WEBGL_CPU_FORWARD') && inputs.every(input => this.texData.get(input.dataId).texture == null && _tfjsCore.util.sizeFromShape(input.shape) < sizeThreshold);
  }

  getGPGPUContext() {
    return this.gpgpu;
  }

  where(condition) {
    _tfjsCore.backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');

    const condVals = condition.dataSync();
    return whereImpl(condition.shape, condVals);
  }

  packedUnaryOp(x, op, dtype) {
    const program = new _unaryop_packed_gpu.UnaryOpPackedProgram(x.shape, op);
    const outInfo = this.compileAndRun(program, [x], dtype);
    return (0, _tfjsCore.engine)().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);
  } // TODO(msoulanille) remove this once the backend has been modularized
  // a copy is needed here to break a circular dependency.
  // Also remove the op from unary_op.


  abs(x) {
    // TODO: handle cases when x is complex.
    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {
      const outValues = (0, _shared.simpleAbsImplCPU)(this.texData.get(x.dataId).values);
      return this.makeOutput(x.shape, x.dtype, outValues);
    }

    if ((0, _tfjsCore.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
      return this.packedUnaryOp(x, unary_op.ABS, x.dtype);
    }

    const program = new unary_op.UnaryOpProgram(x.shape, unary_op.ABS);
    const outInfo = this.compileAndRun(program, [x]);
    return (0, _tfjsCore.engine)().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);
  }

  makeTensorInfo(shape, dtype, values) {
    let dataId;

    if (dtype === 'string' && values != null && values.length > 0 && _tfjsCore.util.isString(values[0])) {
      const encodedValues = values.map(d => _tfjsCore.util.encodeString(d));
      dataId = this.write(encodedValues, shape, dtype);
    } else {
      dataId = this.write(values, shape, dtype);
    }

    this.texData.get(dataId).usage = null;
    return {
      dataId,
      shape,
      dtype
    };
  }

  makeOutput(shape, dtype, values) {
    const {
      dataId
    } = this.makeTensorInfo(shape, dtype, values);
    return (0, _tfjsCore.engine)().makeTensorFromDataId(dataId, shape, dtype, this);
  }

  unpackTensor(input) {
    const program = new _unpack_gpu.UnpackProgram(input.shape);
    return this.runWebGLProgram(program, [input], input.dtype);
  }

  packTensor(input) {
    const program = new _pack_gpu.PackProgram(input.shape);
    const preventEagerUnpackingOutput = true;
    return this.runWebGLProgram(program, [input], input.dtype, null
    /* customUniformValues */
    , preventEagerUnpackingOutput);
  }

  packedReshape(input, afterShape) {
    const input3DShape = [webgl_util.getBatchDim(input.shape), ...webgl_util.getRowsCols(input.shape)];
    const input3D = {
      dtype: input.dtype,
      shape: input3DShape,
      dataId: input.dataId
    };
    const afterShapeAs3D = [webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)];
    const program = new _reshape_packed_gpu.ReshapePackedProgram(afterShapeAs3D, input3DShape);
    const preventEagerUnpackingOfOutput = true;
    const output = this.runWebGLProgram(program, [input3D], input.dtype, null
    /* customUniformValues */
    , preventEagerUnpackingOfOutput);
    return {
      dataId: output.dataId,
      shape: afterShape,
      dtype: output.dtype
    };
  }

  decode(dataId) {
    const texData = this.texData.get(dataId);
    const {
      isPacked,
      shape,
      dtype
    } = texData;
    const shapeAs3D = webgl_util.getShapeAs3D(shape);
    let program;

    if (isPacked) {
      program = new _decode_matrix_packed_gpu.DecodeMatrixPackedProgram(shapeAs3D);
    } else {
      program = new _decode_matrix_gpu.DecodeMatrixProgram(shapeAs3D);
    }

    const preventEagerUnpackingOfOutput = true;
    const out = this.runWebGLProgram(program, [{
      shape: shapeAs3D,
      dtype,
      dataId
    }], dtype, null
    /* customUniformValues */
    , preventEagerUnpackingOfOutput);
    return {
      dtype,
      shape,
      dataId: out.dataId
    };
  }

  runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {
    const output = this.makeTensorInfo(program.outputShape, outputDtype);
    const outData = this.texData.get(output.dataId);

    if (program.packedOutput) {
      outData.isPacked = true;
    }

    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {
      const texelShape = tex_util.getDenseTexShape(program.outputShape); // For a densely packed output, we explicitly set texShape
      // so it doesn't get assigned later according to our typical packing
      // scheme wherein a single texel can only contain values from adjacent
      // rows/cols.

      outData.texShape = texelShape.map(d => d * 2);
    }

    if (program.outTexUsage != null) {
      outData.usage = program.outTexUsage;
    }

    if (_tfjsCore.util.sizeFromShape(output.shape) === 0) {
      // Short-circuit the computation since the result is empty (has 0 in its
      // shape).
      outData.values = _tfjsCore.util.getTypedArrayFromDType(output.dtype, 0);
      return output;
    }

    const dataToDispose = [];
    const inputsData = inputs.map(input => {
      if (input.dtype === 'complex64') {
        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);
      }

      let texData = this.texData.get(input.dataId);

      if (texData.texture == null) {
        if (!program.packedInputs && _tfjsCore.util.sizeFromShape(input.shape) <= (0, _tfjsCore.env)().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {
          // Upload small tensors that live on the CPU as uniforms, not as
          // textures. Do this only when the environment supports 32bit floats
          // due to problems when comparing 16bit floats with 32bit floats.
          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it
          // possible for packed shaders to sample from uniforms.
          return {
            shape: input.shape,
            texData: null,
            isUniform: true,
            uniformValues: texData.values
          };
        } // This ensures that if a packed program's inputs have not yet been
        // uploaded to the GPU, they get uploaded as packed right off the bat.


        if (program.packedInputs) {
          texData.isPacked = true;
          texData.shape = input.shape;
        }
      } else if (!!texData.isPacked !== !!program.packedInputs) {
        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);
        dataToDispose.push(input);
        texData = this.texData.get(input.dataId);
      } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {
        // This is a special case where a texture exists for a tensor
        // but the shapes are incompatible (due to packing constraints) because
        // the tensor did not have a chance to go through the packed reshape
        // shader. This only happens when we reshape the *same* tensor to form
        // *distinct* inputs to an op, e.g. dotting a vector with itself. This
        // case will disappear once packed uploading is the default.
        const savedInput = input;
        const targetShape = input.shape;
        input.shape = texData.shape;
        input = this.packedReshape(input, targetShape);
        dataToDispose.push(input);
        texData = this.texData.get(input.dataId);
        savedInput.shape = targetShape;
      }

      this.uploadToGPU(input.dataId);
      return {
        shape: input.shape,
        texData,
        isUniform: false
      };
    });
    this.uploadToGPU(output.dataId);
    const outputData = {
      shape: output.shape,
      texData: outData,
      isUniform: false
    };
    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);
    const binary = this.getAndSaveBinary(key, () => {
      return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);
    });
    const shouldTimeProgram = this.activeTimers != null;
    let query;

    if (shouldTimeProgram) {
      query = this.startTimer();
    }

    gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);
    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));

    if (shouldTimeProgram) {
      query = this.endTimer(query);
      this.activeTimers.push({
        name: program.constructor.name,
        query: this.getQueryTime(query)
      });
    }

    const glFlushThreshold = (0, _tfjsCore.env)().get('WEBGL_FLUSH_THRESHOLD'); // Manually GL flush requested

    if (glFlushThreshold > 0) {
      const time = _tfjsCore.util.now();

      if (time - this.lastGlFlushTime > glFlushThreshold) {
        this.gpgpu.gl.flush();
        this.lastGlFlushTime = time;
      }
    }

    if (!(0, _tfjsCore.env)().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {
      const unpacked = this.unpackTensor(output);
      this.disposeIntermediateTensorInfo(output);
      return unpacked;
    }

    return output;
  }

  compileAndRun(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {
    outputDtype = outputDtype || inputs[0].dtype;
    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);
    return outInfo;
  }

  getAndSaveBinary(key, getBinary) {
    if (!(key in this.binaryCache)) {
      this.binaryCache[key] = getBinary();
    }

    return this.binaryCache[key];
  }

  getTextureManager() {
    return this.textureManager;
  }

  dispose() {
    if (this.disposed) {
      return;
    } // Avoid disposing the compiled webgl programs during unit testing because
    // it slows down test execution.


    if (!(0, _tfjsCore.env)().getBool('IS_TEST')) {
      const allKeys = Object.keys(this.binaryCache);
      allKeys.forEach(key => {
        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);
        delete this.binaryCache[key];
      });
    }

    this.textureManager.dispose();

    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {
      this.canvas.remove();
    } else {
      this.canvas = null;
    }

    if (this.gpgpuCreatedLocally) {
      this.gpgpu.program = null;
      this.gpgpu.dispose();
    }

    this.disposed = true;
  }

  floatPrecision() {
    if (this.floatPrecisionValue == null) {
      this.floatPrecisionValue = (0, _tfjsCore.tidy)(() => {
        if (!(0, _tfjsCore.env)().get('WEBGL_RENDER_FLOAT32_ENABLED')) {
          // Momentarily switching DEBUG flag to false so we don't throw an
          // error trying to upload a small value.
          const debugFlag = (0, _tfjsCore.env)().getBool('DEBUG');
          (0, _tfjsCore.env)().set('DEBUG', false);
          const underflowCheckValue = this.abs((0, _tfjsCore.scalar)(1e-8)).dataSync()[0];
          (0, _tfjsCore.env)().set('DEBUG', debugFlag);

          if (underflowCheckValue > 0) {
            return 32;
          }
        }

        return 16;
      });
    }

    return this.floatPrecisionValue;
  }
  /** Returns the smallest representable number.  */


  epsilon() {
    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
  }

  uploadToGPU(dataId) {
    const texData = this.texData.get(dataId);
    const {
      shape,
      dtype,
      values,
      texture,
      usage,
      isPacked
    } = texData;

    if (texture != null) {
      // Array is already on GPU. No-op.
      return;
    }

    const shouldTimeProgram = this.activeTimers != null;
    let start;

    if (shouldTimeProgram) {
      start = _tfjsCore.util.now();
    }

    let texShape = texData.texShape;

    if (texShape == null) {
      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);
      texData.texShape = texShape;
    }

    if (values != null) {
      const shapeAs3D = webgl_util.getShapeAs3D(shape);
      let program;
      let width = texShape[1],
          height = texShape[0];
      const isByteArray = values instanceof Uint8Array;

      if (isPacked) {
        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);
        program = new _encode_matrix_packed_gpu.EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);
      } else {
        program = new _encode_matrix_gpu.EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);
      }

      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);

      if (isByteArray) {
        this.texData.get(tempDenseInputHandle.dataId).usage = tex_util.TextureUsage.PIXELS;
      } else {
        this.texData.get(tempDenseInputHandle.dataId).usage = tex_util.TextureUsage.UPLOAD;
      }

      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values); // We want the output to remain packed regardless of the value of
      // WEBGL_PACK.

      const preventEagerUnpacking = true;
      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking); // Have the original texture assume the identity of the encoded output.

      const outputTexData = this.texData.get(encodedOutputTarget.dataId);
      texData.texture = outputTexData.texture;
      texData.texShape = outputTexData.texShape;
      texData.isPacked = outputTexData.isPacked;
      texData.usage = outputTexData.usage;
      this.disposeIntermediateTensorInfo(tempDenseInputHandle);
      this.texData.delete(encodedOutputTarget.dataId); // Once uploaded, don't store the values on cpu.

      texData.values = null;

      if (shouldTimeProgram) {
        this.uploadWaitMs += _tfjsCore.util.now() - start;
      }
    } else {
      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);
      texData.texture = newTexture;
    }
  }

  convertAndCacheOnCPU(dataId, float32Values) {
    const texData = this.texData.get(dataId);
    const {
      dtype
    } = texData;
    this.releaseGPUData(dataId);

    if (float32Values != null) {
      texData.values = float32ToTypedArray(float32Values, dtype);
    }

    return texData.values;
  }

  acquireTexture(texShape, texType, dtype, isPacked) {
    this.numBytesInGPU += this.computeBytes(texShape, dtype);

    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = true;
      console.warn(`High memory usage in GPU: ${mb} MB, ` + `most likely due to a memory leak`);
    }

    return this.textureManager.acquireTexture(texShape, texType, isPacked);
  }

  computeBytes(shape, dtype) {
    return shape[0] * shape[1] * _tfjsCore.util.bytesPerElement(dtype);
  }

}

exports.MathBackendWebGL = MathBackendWebGL;
MathBackendWebGL.nextDataId = 0;

function float32ToTypedArray(a, dtype) {
  if (dtype === 'float32' || dtype === 'complex64') {
    return a;
  } else if (dtype === 'int32' || dtype === 'bool') {
    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);

    for (let i = 0; i < result.length; ++i) {
      result[i] = Math.round(a[i]);
    }

    return result;
  } else {
    throw new Error(`Unknown dtype ${dtype}`);
  }
}
},{"./flags_webgl":"K5Ex","@tensorflow/tfjs-core":"kSBl","./canvas_util":"xuCv","./decode_matrix_gpu":"JMCa","./decode_matrix_packed_gpu":"RChy","./encode_float_gpu":"oHaq","./encode_float_packed_gpu":"r0NW","./encode_matrix_gpu":"o0jj","./encode_matrix_packed_gpu":"UZCK","./gpgpu_context":"GZkx","./gpgpu_math":"eeKH","./kernel_utils/shared":"cNPH","./pack_gpu":"tySX","./reshape_packed_gpu":"qDuX","./tex_util":"jAWT","./texture_manager":"yk4C","./unaryop_gpu":"CK3x","./unaryop_packed_gpu":"zBLd","./unpack_gpu":"boI6","./webgl_util":"u1ML"}],"RDer":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forceHalfFloat = forceHalfFloat;
Object.defineProperty(exports, "MathBackendWebGL", {
  enumerable: true,
  get: function () {
    return _backend_webgl.MathBackendWebGL;
  }
});
Object.defineProperty(exports, "setWebGLContext", {
  enumerable: true,
  get: function () {
    return _canvas_util.setWebGLContext;
  }
});
Object.defineProperty(exports, "GPGPUContext", {
  enumerable: true,
  get: function () {
    return _gpgpu_context.GPGPUContext;
  }
});
exports.webgl_util = exports.gpgpu_util = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var gpgpu_util = _interopRequireWildcard(require("./gpgpu_util"));

exports.gpgpu_util = gpgpu_util;

var webgl_util = _interopRequireWildcard(require("./webgl_util"));

exports.webgl_util = webgl_util;

var _backend_webgl = require("./backend_webgl");

var _canvas_util = require("./canvas_util");

var _gpgpu_context = require("./gpgpu_context");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// WebGL specific utils.

/**
 * Enforce use of half precision textures if available on the platform.
 *
 * @doc {heading: 'Environment', namespace: 'webgl'}
 */
function forceHalfFloat() {
  (0, _tfjsCore.env)().set('WEBGL_FORCE_F16_TEXTURES', true);
}
},{"@tensorflow/tfjs-core":"kSBl","./gpgpu_util":"jgbg","./webgl_util":"u1ML","./backend_webgl":"DXeN","./canvas_util":"xuCv","./gpgpu_context":"GZkx"}],"We8e":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  webgl: true,
  version_webgl: true
};
Object.defineProperty(exports, "version_webgl", {
  enumerable: true,
  get: function () {
    return _version.version;
  }
});
exports.webgl = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _backend_webgl = require("./backend_webgl");

var _version = require("./version");

var _webgl = require("./webgl");

Object.keys(_webgl).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _webgl[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _webgl[key];
    }
  });
});

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// base.ts is the webgl backend without auto kernel registration.
if (_tfjsCore.device_util.isBrowser()) {
  (0, _tfjsCore.registerBackend)('webgl', () => new _backend_webgl.MathBackendWebGL(), 2
  /* priority */
  );
} // Export webgl utilities


const webgl = {
  forceHalfFloat: _webgl.forceHalfFloat
};
exports.webgl = webgl;
},{"@tensorflow/tfjs-core":"kSBl","./backend_webgl":"DXeN","./version":"KPnh","./webgl":"RDer"}],"wbV2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BinaryOpProgram = exports.SQUARED_DIFFERENCE = exports.CHECK_NAN_SNIPPET = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _gpgpu_math = require("./gpgpu_math");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CHECK_NAN_SNIPPET = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
exports.CHECK_NAN_SNIPPET = CHECK_NAN_SNIPPET;
const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';
exports.SQUARED_DIFFERENCE = SQUARED_DIFFERENCE;

class BinaryOpProgram {
  constructor(op, aShape, bShape) {
    this.variableNames = ['A', 'B'];
    this.outputShape = _tfjsCore.backend_util.assertAndGetBroadcastShape(aShape, bShape);
    this.enableShapeUniforms = (0, _gpgpu_math.useShapeUniforms)(this.outputShape.length);
    this.userCode = `
      float binaryOperation(float a, float b) {
        ${op}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }

}

exports.BinaryOpProgram = BinaryOpProgram;
},{"@tensorflow/tfjs-core":"kSBl","./gpgpu_math":"eeKH"}],"mFR1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BinaryOpPackedProgram = exports.NOT_EQUAL = exports.ELU_DER = exports.CHECK_NAN_SNIPPET = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _gpgpu_math = require("./gpgpu_math");

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CHECK_NAN_SNIPPET = `
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;
exports.CHECK_NAN_SNIPPET = CHECK_NAN_SNIPPET;
const ELU_DER = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`;
exports.ELU_DER = ELU_DER;
const NOT_EQUAL = `
  return vec4(notEqual(a, b));
`;
exports.NOT_EQUAL = NOT_EQUAL;

class BinaryOpPackedProgram {
  constructor(op, aShape, bShape, checkOutOfBounds = false) {
    this.variableNames = ['A', 'B'];
    this.supportsBroadcasting = true;
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = _tfjsCore.backend_util.assertAndGetBroadcastShape(aShape, bShape);
    const rank = this.outputShape.length;
    this.enableShapeUniforms = (0, _gpgpu_math.useShapeUniforms)(rank);
    let checkOutOfBoundsString = '';

    if (checkOutOfBounds) {
      if (rank === 0 || _tfjsCore.util.sizeFromShape(this.outputShape) === 1) {
        checkOutOfBoundsString = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      } else {
        const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
        checkOutOfBoundsString = `
          ${dtype} coords = getOutputCoords();
        `;

        if (rank === 1) {
          if (this.enableShapeUniforms) {
            checkOutOfBoundsString += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
          } else {
            checkOutOfBoundsString += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
          }
        } else {
          const channels = (0, _packing_util.getChannels)('coords', rank);

          if (this.enableShapeUniforms) {
            checkOutOfBoundsString += `
            bool nextRowOutOfBounds =
              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];
            bool nextColOutOfBounds =
              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
          } else {
            checkOutOfBoundsString += `
            bool nextRowOutOfBounds =
              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};
            bool nextColOutOfBounds =
              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
          }
        }
      }
    }

    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${op}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${checkOutOfBoundsString}

        setOutput(result);
      }
    `;
  }

}

exports.BinaryOpPackedProgram = BinaryOpPackedProgram;
},{"@tensorflow/tfjs-core":"kSBl","./gpgpu_math":"eeKH","./packing_util":"BqvU","./shader_compiler":"xhhc"}],"LUQG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.identity = identity;
exports.identityConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function identity(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  backend.incRef(x.dataId);
  return {
    dataId: x.dataId,
    shape: x.shape,
    dtype: x.dtype
  };
}

const identityConfig = {
  kernelName: _tfjsCore.Identity,
  backendName: 'webgl',
  kernelFunc: identity
};
exports.identityConfig = identityConfig;
},{"@tensorflow/tfjs-core":"kSBl"}],"BU0Z":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.complex = complex;
exports.complexConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Identity = require("./Identity");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * In WebGL data is stored in GPU textures which can't be efficiently copied, so
 * complex tensors share data with their real and imaginary components. Complex
 * tensors' reference to the components is tracked by refCount on the individual
 * component. The refCounts are increased by the identity call.
 *
 * When a complex tensor is disposed, it will reduce the refCount on the
 * components by calling disposeData on each.
 */
function complex(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    real,
    imag
  } = inputs;
  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');
  const complex = backend.texData.get(complexInfo.dataId);
  const realTensorInfo = (0, _Identity.identity)({
    inputs: {
      x: real
    },
    backend
  });
  const imagTensorInfo = (0, _Identity.identity)({
    inputs: {
      x: imag
    },
    backend
  });
  complex.complexTensorInfos = {
    real: realTensorInfo,
    imag: imagTensorInfo
  };
  return complexInfo;
}

const complexConfig = {
  kernelName: _tfjsCore.Complex,
  backendName: 'webgl',
  kernelFunc: complex
};
exports.complexConfig = complexConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Identity":"LUQG"}],"kZ3p":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.leakyRelu = leakyRelu;
exports.leakyReluConfig = exports.LEAKYRELU_PACKED = exports.LEAKYRELU = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binaryop_gpu = require("../binaryop_gpu");

var _binaryop_packed_gpu = require("../binaryop_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LEAKYRELU = `return (a < 0.) ? b * a : a;`;
exports.LEAKYRELU = LEAKYRELU;
const LEAKYRELU_PACKED = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
exports.LEAKYRELU_PACKED = LEAKYRELU_PACKED;

function leakyRelu(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    alpha
  } = attrs;
  const $alpha = backend.makeTensorInfo([], 'float32', _tfjsCore.util.createScalarValue(alpha, 'float32'));
  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new _binaryop_packed_gpu.BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) : new _binaryop_gpu.BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);
  const result = backend.runWebGLProgram(program, [x, $alpha], x.dtype);
  backend.disposeIntermediateTensorInfo($alpha);
  return result;
}

const leakyReluConfig = {
  kernelName: _tfjsCore.LeakyRelu,
  backendName: 'webgl',
  kernelFunc: leakyRelu
};
exports.leakyReluConfig = leakyReluConfig;
},{"@tensorflow/tfjs-core":"kSBl","../binaryop_gpu":"wbV2","../binaryop_packed_gpu":"mFR1"}],"wxXh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prelu = prelu;
exports.preluConfig = exports.PRELU_PACKED = exports.PRELU = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binaryop_gpu = require("../binaryop_gpu");

var _binaryop_packed_gpu = require("../binaryop_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PRELU = `return (a < 0.) ? b * a : a;`;
exports.PRELU = PRELU;
const PRELU_PACKED = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
exports.PRELU_PACKED = PRELU_PACKED;

function prelu(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x,
    alpha
  } = inputs;
  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new _binaryop_packed_gpu.BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) : new _binaryop_gpu.BinaryOpProgram(PRELU, x.shape, alpha.shape);
  return backend.runWebGLProgram(program, [x, alpha], x.dtype);
}

const preluConfig = {
  kernelName: _tfjsCore.Prelu,
  backendName: 'webgl',
  kernelFunc: prelu
};
exports.preluConfig = preluConfig;
},{"@tensorflow/tfjs-core":"kSBl","../binaryop_gpu":"wbV2","../binaryop_packed_gpu":"mFR1"}],"ciwP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unaryKernelFunc = unaryKernelFunc;
exports.binaryKernelFunc = binaryKernelFunc;
exports.mapActivationToShaderProgram = mapActivationToShaderProgram;
exports.CHECK_NAN_SNIPPET_BINARY_PACKED = exports.CHECK_NAN_SNIPPET_BINARY = exports.CHECK_NAN_SNIPPET_UNARY = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binaryop_gpu = require("../binaryop_gpu");

var _binaryop_packed_gpu = require("../binaryop_packed_gpu");

var _Complex = require("../kernels/Complex");

var _LeakyRelu = require("../kernels/LeakyRelu");

var _Prelu = require("../kernels/Prelu");

var unary_op = _interopRequireWildcard(require("../unaryop_gpu"));

var unary_packed_op = _interopRequireWildcard(require("../unaryop_packed_gpu"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;
exports.CHECK_NAN_SNIPPET_UNARY = CHECK_NAN_SNIPPET_UNARY;
const CHECK_NAN_SNIPPET_BINARY = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
exports.CHECK_NAN_SNIPPET_BINARY = CHECK_NAN_SNIPPET_BINARY;
const CHECK_NAN_SNIPPET_BINARY_PACKED = `
  result.r = isNaN.r > 0. ? NAN : result.r;
  result.g = isNaN.g > 0. ? NAN : result.g;
  result.b = isNaN.b > 0. ? NAN : result.b;
  result.a = isNaN.a > 0. ? NAN : result.a;
`;
/**
 * Template that creates a `KernelFunc` for unary ops.
 * @param opSnippet Op snippet to create `UnaryOpProgram`.
 * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the first input. This is mainly used in
 *     comparison kernels, such as Equal, Less, Greater, etc.
 */

exports.CHECK_NAN_SNIPPET_BINARY_PACKED = CHECK_NAN_SNIPPET_BINARY_PACKED;

function unaryKernelFunc({
  opSnippet,
  packedOpSnippet,
  cpuKernelImpl,
  dtype
}) {
  return ({
    inputs,
    backend
  }) => {
    const {
      x
    } = inputs;
    const webglBackend = backend;
    const $dtype = dtype || x.dtype;

    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {
      const xData = webglBackend.texData.get(x.dataId);
      const outValues = cpuKernelImpl(xData.values, $dtype);
      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);
    }

    const shouldUsePackedProgram = (0, _tfjsCore.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;
    let program;

    if (shouldUsePackedProgram) {
      program = new unary_packed_op.UnaryOpPackedProgram(x.shape, packedOpSnippet);
    } else {
      program = new unary_op.UnaryOpProgram(x.shape, opSnippet);
    }

    return webglBackend.runWebGLProgram(program, [x], $dtype);
  };
}
/**
 * Template that creates a `KernelFunc` for binary ops.
 * @param opSnippet Op snippet to create `BinaryOpProgram`.
 * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.
 * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true
 *     when creating BinaryOpPackedProgram.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the first input. This is mainly used in
 *     comparison kernels, such as Equal, Less, Greater, etc.
 */


function binaryKernelFunc({
  opSnippet,
  packedOpSnippet,
  checkOutOfBounds = false,
  supportsComplex = false,
  cpuKernelImpl,
  dtype
}) {
  return ({
    inputs,
    backend
  }) => {
    const {
      a,
      b
    } = inputs;
    const webglBackend = backend;

    if (supportsComplex && a.dtype === 'complex64') {
      const aData = webglBackend.texData.get(a.dataId);
      const bData = webglBackend.texData.get(b.dataId);
      const [real, imag] = [[aData.complexTensorInfos.real, bData.complexTensorInfos.real], [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]].map(complexParts => {
        const [aPart, bPart] = complexParts;
        const aHandle = {
          dataId: aPart.dataId,
          dtype: aPart.dtype,
          shape: a.shape
        };
        const bHandle = {
          dataId: bPart.dataId,
          dtype: bPart.dtype,
          shape: b.shape
        };
        const program = new _binaryop_gpu.BinaryOpProgram(opSnippet, a.shape, b.shape);
        return webglBackend.runWebGLProgram(program, [aHandle, bHandle], (0, _tfjsCore.upcastType)(aPart.dtype, bPart.dtype));
      });
      const complexOutput = (0, _Complex.complex)({
        inputs: {
          real,
          imag
        },
        backend: webglBackend
      });
      webglBackend.disposeIntermediateTensorInfo(real);
      webglBackend.disposeIntermediateTensorInfo(imag); // TODO(annxingyuan): Implement CPU forwarding for complex inputs.

      return complexOutput;
    }

    const $dtype = dtype || (0, _tfjsCore.upcastType)(a.dtype, b.dtype);

    if ((a.dtype === 'string' || b.dtype === 'string' || webglBackend.shouldExecuteOnCPU([a, b])) && cpuKernelImpl != null) {
      const aVals = webglBackend.texData.get(a.dataId).values;
      const bVals = webglBackend.texData.get(b.dataId).values;
      const decodedAVals = a.dtype === 'string' ? // tslint:disable-next-line: no-any
      _tfjsCore.backend_util.fromUint8ToStringArray(aVals) : aVals;
      const decodedBVals = a.dtype === 'string' ? // tslint:disable-next-line: no-any
      _tfjsCore.backend_util.fromUint8ToStringArray(bVals) : bVals;
      const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);
      const out = webglBackend.makeTensorInfo(outShape, $dtype);
      const outData = webglBackend.texData.get(out.dataId);
      outData.values = outValues;
      return out;
    }

    const shouldUsePackedProgram = (0, _tfjsCore.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') && packedOpSnippet != null;
    let program;

    if (shouldUsePackedProgram) {
      program = new _binaryop_packed_gpu.BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);
    } else {
      program = new _binaryop_gpu.BinaryOpProgram(opSnippet, a.shape, b.shape);
    }

    return webglBackend.runWebGLProgram(program, [a, b], $dtype);
  };
}

function mapActivationToShaderProgram(activation, packed = false) {
  if (activation === 'linear') {
    if (packed) {
      return unary_packed_op.LINEAR;
    }

    return unary_op.LINEAR;
  } else if (activation === 'relu') {
    if (packed) {
      return unary_packed_op.RELU;
    }

    return unary_op.RELU;
  } else if (activation === 'elu') {
    if (packed) {
      return unary_packed_op.ELU;
    }

    return unary_op.ELU;
  } else if (activation === 'relu6') {
    if (packed) {
      return unary_packed_op.RELU6;
    }

    return unary_op.RELU6;
  } else if (activation === 'prelu') {
    if (packed) {
      return _Prelu.PRELU_PACKED;
    }

    return _Prelu.PRELU;
  } else if (activation === 'leakyrelu') {
    if (packed) {
      return _LeakyRelu.LEAKYRELU_PACKED;
    }

    return _LeakyRelu.LEAKYRELU;
  } else if (activation === 'sigmoid') {
    if (packed) {
      return unary_packed_op.SIGMOID;
    }

    return unary_op.SIGMOID;
  }

  throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);
}
},{"@tensorflow/tfjs-core":"kSBl","../binaryop_gpu":"wbV2","../binaryop_packed_gpu":"mFR1","../kernels/Complex":"BU0Z","../kernels/LeakyRelu":"kZ3p","../kernels/Prelu":"wxXh","../unaryop_gpu":"CK3x","../unaryop_packed_gpu":"zBLd"}],"QKYo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatMulPackedProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MatMulPackedProgram {
  constructor(aShape, bShape, outputShape, transposeA = false, transposeB = false, addBias = false, activation = null, hasPreluActivation = false, hasLeakyreluActivation = false) {
    this.variableNames = ['matrixA', 'matrixB'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = outputShape;
    const sharedDim = transposeA ? aShape[1] : aShape[2];
    const sharedDimensionPacked = Math.ceil(sharedDim / 2);
    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';
    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';
    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];
    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];
    let activationSnippet = '',
        applyActivationSnippet = '';

    if (activation) {
      if (hasPreluActivation) {
        activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
      } else if (hasLeakyreluActivation) {
        activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${activation}
        }`;
      } else {
        activationSnippet = `vec4 activation(vec4 x) {
          ${activation}
        }`;
      }

      applyActivationSnippet = `result = activation(result);`;
    }

    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';

    if (addBias) {
      this.variableNames.push('bias');
    }

    if (hasPreluActivation) {
      this.variableNames.push('preluActivationWeights');
    }

    if (hasLeakyreluActivation) {
      this.variableNames.push('leakyreluAlpha');
    }

    let batchASnippet = 'rc.x';
    let batchBSnippet = 'rc.x';

    if (aShape[0] < bShape[0]) {
      batchASnippet = `int(min(float(rc.x), ${aShape[0] - 1}.))`;
    } else if (bShape[0] < aShape[0]) {
      batchBSnippet = `int(min(float(rc.x), ${bShape[0] - 1}.))`;
    }

    this.userCode = `
      ${activationSnippet}

      const float sharedDimension = ${sharedDimensionPacked}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${sharedDimensionPacked}; i++) {
          int batchA = ${batchASnippet};
          int batchB = ${batchBSnippet};
          vec4 a = getMatrixA(batchA, ${aSample});
          vec4 b = getMatrixB(batchB, ${bSample});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${aSwizzle[0]} * ${bSwizzle[0]});
          result += (${aSwizzle[1]} * ${bSwizzle[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${addBiasSnippet}

        ${applyActivationSnippet}

        setOutput(result);
      }
    `;
  }

}

exports.MatMulPackedProgram = MatMulPackedProgram;
},{}],"obKl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BinaryOpComplexProgram = exports.COMPLEX_MULTIPLY = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// (Ar + Ai)(Br + Bi) =
// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr
// Yr = ArBr - AB
// Yi = ArBi + AiBr
const COMPLEX_MULTIPLY = {
  REAL: 'return areal * breal - aimag * bimag;',
  IMAG: 'return areal * bimag + aimag * breal;'
};
exports.COMPLEX_MULTIPLY = COMPLEX_MULTIPLY;

class BinaryOpComplexProgram {
  constructor(op, aShape, bShape) {
    this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];
    this.outputShape = _tfjsCore.backend_util.assertAndGetBroadcastShape(aShape, bShape);
    this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${op}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }

}

exports.BinaryOpComplexProgram = BinaryOpComplexProgram;
},{"@tensorflow/tfjs-core":"kSBl"}],"xWNx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiply = multiply;
exports.multiplyConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var binaryop_complex_gpu = _interopRequireWildcard(require("../binaryop_complex_gpu"));

var _binaryop_gpu = require("../binaryop_gpu");

var _binaryop_packed_gpu = require("../binaryop_packed_gpu");

var _shared = require("../kernel_utils/shared");

var _Complex = require("./Complex");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MUL = 'return a * b;';

function multiply(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    a,
    b
  } = inputs;

  const dtype = _tfjsCore.backend_util.upcastType(a.dtype, b.dtype);

  if (a.dtype === 'complex64') {
    const aData = backend.texData.get(a.dataId);
    const bData = backend.texData.get(b.dataId);
    const realProgram = new binaryop_complex_gpu.BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);
    const imagProgram = new binaryop_complex_gpu.BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);
    const inputs = [{
      dataId: aData.complexTensorInfos.real.dataId,
      dtype: aData.complexTensorInfos.real.dtype,
      shape: a.shape
    }, {
      dataId: aData.complexTensorInfos.imag.dataId,
      dtype: aData.complexTensorInfos.imag.dtype,
      shape: a.shape
    }, {
      dataId: bData.complexTensorInfos.real.dataId,
      dtype: bData.complexTensorInfos.real.dtype,
      shape: b.shape
    }, {
      dataId: bData.complexTensorInfos.imag.dataId,
      dtype: bData.complexTensorInfos.imag.dtype,
      shape: b.shape
    }];
    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');
    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');
    const complexOutput = (0, _Complex.complex)({
      inputs: {
        real: realPart,
        imag: imagPart
      },
      backend
    });
    backend.disposeIntermediateTensorInfo(realPart);
    backend.disposeIntermediateTensorInfo(imagPart); // TODO(annxingyuan): CPU forwarding for complex inputs.

    return complexOutput;
  }

  if (backend.shouldExecuteOnCPU([a, b])) {
    const aData = backend.texData.get(a.dataId);
    const bData = backend.texData.get(b.dataId);
    const [outValues, outShape] = (0, _shared.multiplyImplCPU)(a.shape, b.shape, aData.values, bData.values, dtype);
    const out = backend.makeTensorInfo(outShape, dtype);
    const outData = backend.texData.get(out.dataId);
    outData.values = outValues;
    return out;
  }

  let program;

  if ((0, _tfjsCore.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
    program = new _binaryop_packed_gpu.BinaryOpPackedProgram(MUL, a.shape, b.shape);
  } else {
    program = new _binaryop_gpu.BinaryOpProgram(MUL, a.shape, b.shape);
  }

  return backend.runWebGLProgram(program, [a, b], dtype);
}

const multiplyConfig = {
  kernelName: _tfjsCore.Multiply,
  backendName: 'webgl',
  kernelFunc: multiply
};
exports.multiplyConfig = multiplyConfig;
},{"@tensorflow/tfjs-core":"kSBl","../binaryop_complex_gpu":"obKl","../binaryop_gpu":"wbV2","../binaryop_packed_gpu":"mFR1","../kernel_utils/shared":"cNPH","./Complex":"BU0Z"}],"ZJ8p":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packedReshape = packedReshape;

var _reshape_packed_gpu = require("../reshape_packed_gpu");

var _webgl_util = require("../webgl_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function packedReshape(input, afterShape, backend) {
  const input3DShape = [(0, _webgl_util.getBatchDim)(input.shape), ...(0, _webgl_util.getRowsCols)(input.shape)];
  const input3D = {
    dtype: input.dtype,
    shape: input3DShape,
    dataId: input.dataId
  };
  const afterShapeAs3D = [(0, _webgl_util.getBatchDim)(afterShape), ...(0, _webgl_util.getRowsCols)(afterShape)];
  const program = new _reshape_packed_gpu.ReshapePackedProgram(afterShapeAs3D, input3DShape);
  const preventEagerUnpackingOfOutput = true;
  const output = backend.runWebGLProgram(program, [input3D], input.dtype, null
  /* customSetup */
  , preventEagerUnpackingOfOutput);
  return {
    dataId: output.dataId,
    shape: afterShape,
    dtype: output.dtype
  };
}
},{"../reshape_packed_gpu":"qDuX","../webgl_util":"u1ML"}],"OCN8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reshape = reshape;
exports.reshapeConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _reshape = require("../kernel_utils/reshape");

var _webgl_util = require("../webgl_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function reshape(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    shape
  } = attrs;
  const webglBackend = backend;

  const xSize = _tfjsCore.util.sizeFromShape(x.shape);

  const $shape = _tfjsCore.util.inferFromImplicitShape(shape, xSize);

  const $xSize = _tfjsCore.util.sizeFromShape($shape);

  _tfjsCore.util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` + `shape (${x.shape}) has ${xSize} elements. The new shape and old ` + `shape must have the same number of elements.`);

  const xTexData = webglBackend.texData.get(x.dataId);

  if (xTexData.isPacked && !(0, _webgl_util.isReshapeFree)(x.shape, $shape) && !(xTexData.texture !== null && (0, _webgl_util.isReshapeFree)(xTexData.shape, $shape))) {
    return (0, _reshape.packedReshape)(x, $shape, webglBackend);
  }

  webglBackend.incRef(x.dataId);
  return {
    dataId: x.dataId,
    shape: $shape,
    dtype: x.dtype
  };
}

const reshapeConfig = {
  kernelName: _tfjsCore.Reshape,
  backendName: 'webgl',
  kernelFunc: reshape
};
exports.reshapeConfig = reshapeConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/reshape":"ZJ8p","../webgl_util":"u1ML"}],"ZMTc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MeanProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MeanProgram {
  constructor(reduceInfo, divisor) {
    this.variableNames = ['x'];
    const {
      windowSize,
      batchSize,
      inSize,
      outSize
    } = reduceInfo;
    this.outputShape = [batchSize, outSize];
    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
    const windowSizeVec4Remainder = windowSize % 4;
    let updateSnippet = `sumValue += dot(values, ones);`;

    if (divisor != null) {
      const denominator = 1 / divisor;
      updateSnippet = `sumValue += dot(values * ${_tfjsCore.util.isInt(denominator) ? denominator.toPrecision(2) : denominator}, ones);`;
    }

    let checkOutOfBounds = '';

    if (inSize % windowSize > 0) {
      checkOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return 0.0;
        }
      `;
    }

    this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${checkOutOfBounds}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${windowSize};

        float sumValue = 0.0;

        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${updateSnippet}
        }

        int inIdx = inOffset + ${windowSizeNearestVec4};
        if (${windowSizeVec4Remainder === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${updateSnippet}
        }
        setOutput(sumValue);
      }
    `;
  }

}

exports.MeanProgram = MeanProgram;
},{"@tensorflow/tfjs-core":"kSBl"}],"dCKU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReduceProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ReduceProgram {
  constructor(reduceInfo, reduceType) {
    this.variableNames = ['x'];
    const {
      windowSize,
      batchSize,
      inSize,
      outSize
    } = reduceInfo;
    this.outputShape = [batchSize, outSize];
    let initializationValue = '0.0';
    let compareOp = ``;

    if (reduceType === 'prod') {
      initializationValue = '1.0';
    } else if (reduceType === 'min') {
      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
      initializationValue = '1.0 / 1e-20';
      compareOp = `min`;
    } else if (reduceType === 'max') {
      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
      initializationValue = '-1.0 / 1e-20';
      compareOp = `max`;
    }

    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';

    if (reduceType === 'sum') {
      returnValue = `sumValue`;
    } else if (reduceType === 'prod') {
      returnValue = `prodValue`;
    } else if (reduceType === 'all') {
      returnValue = `allValue`;
    } else if (reduceType === 'any') {
      returnValue = `anyValue`;
    }

    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
    const windowSizeVec4Remainder = windowSize % 4;
    let updateSnippet = `
      if (${reduceType === 'sum'}) {
        sumValue += dot(values, ones);
      } else if (${reduceType === 'prod'}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${compareOp}(values, minMaxValue);
        if (${reduceType === 'min'} || ${reduceType === 'max'}) {
          minMaxValue = ${compareOp}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `;
    let vecType = `vec4`;

    if (reduceType === 'all') {
      initializationValue = '1.0';
      updateSnippet = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `;
      vecType = `bvec4`;
    } else if (reduceType === 'any') {
      initializationValue = '0.0';
      updateSnippet = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `;
      vecType = `bvec4`;
    }

    let checkOutOfBounds = '';

    if (inSize % windowSize > 0) {
      checkOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return initializationValue;
        }
      `;
    }

    this.userCode = `
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${checkOutOfBounds}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${windowSize};

        vec4 minMaxValue = vec4(${initializationValue});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {
          int inIdx = inOffset + i;
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${updateSnippet}
        }

        int inIdx = inOffset + ${windowSizeNearestVec4};
        if (${windowSizeVec4Remainder === 1}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 2}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 3}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${updateSnippet}
        }
        setOutput(${returnValue});
      }
    `;
  }

}

exports.ReduceProgram = ReduceProgram;
},{}],"tZI5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reduce = reduce;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _mean_gpu = require("../mean_gpu");

var _reduce_gpu = require("../reduce_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Returns an array of configuration objects that describe each stage of the
// reduction.
function getReductionStages(inShape) {
  const stages = [];

  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {
    const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];

    const windowSize = _tfjsCore.backend_util.computeOptimalWindowSize(outSize);

    stages.push({
      inSize: outSize,
      windowSize,
      outSize: Math.ceil(outSize / windowSize)
    });
  }

  return stages;
}

function reduce(x, dtype, reductionType, backend) {
  const reductionStages = getReductionStages(x.shape);
  let result = x;

  for (let i = 0; i < reductionStages.length; i++) {
    const {
      inSize,
      windowSize,
      outSize
    } = reductionStages[i];
    let program;
    let previousResult;

    if (reductionType === 'mean') {
      program = i === 0 ? new _mean_gpu.MeanProgram({
        windowSize,
        inSize,
        batchSize: x.shape[0],
        outSize
      }, inSize) : new _mean_gpu.MeanProgram({
        windowSize,
        inSize,
        batchSize: x.shape[0],
        outSize
      });
    } else {
      program = new _reduce_gpu.ReduceProgram({
        windowSize,
        inSize,
        batchSize: x.shape[0],
        outSize
      }, reductionType);
    }

    previousResult = result;
    result = backend.runWebGLProgram(program, [result], dtype);

    if (previousResult.dataId !== x.dataId) {
      backend.disposeIntermediateTensorInfo(previousResult);
    }
  }

  return result;
}
},{"@tensorflow/tfjs-core":"kSBl","../mean_gpu":"ZMTc","../reduce_gpu":"dCKU"}],"zMPc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransposeProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TransposeProgram {
  constructor(aShape, newDim) {
    this.variableNames = ['A'];
    const outputShape = new Array(aShape.length);

    for (let i = 0; i < outputShape.length; i++) {
      outputShape[i] = aShape[newDim[i]];
    }

    this.outputShape = outputShape;
    this.rank = outputShape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
    const switched = getSwitchedCoords(newDim);
    this.userCode = `
    void main() {
      ${dtype} resRC = getOutputCoords();
      setOutput(getA(${switched}));
    }
    `;
  }

}

exports.TransposeProgram = TransposeProgram;

function getSwitchedCoords(newDim) {
  const rank = newDim.length;

  if (rank > 6) {
    throw Error(`Transpose for rank ${rank} is not yet supported`);
  }

  const originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];
  const switchedCoords = new Array(rank);

  for (let i = 0; i < newDim.length; i++) {
    switchedCoords[newDim[i]] = originalOrder[i];
  }

  return switchedCoords.join();
}
},{"./shader_compiler":"xhhc"}],"UyJE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransposePackedProgram = void 0;

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TransposePackedProgram {
  constructor(aShape, newDim) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    const outputShape = new Array(aShape.length);

    for (let i = 0; i < outputShape.length; i++) {
      outputShape[i] = aShape[newDim[i]];
    }

    this.outputShape = outputShape;
    this.rank = outputShape.length;

    if (this.rank > 6) {
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    }

    const dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
    const outputOrder = (0, _packing_util.getVecChannels)('rc', this.rank);
    const switchedOrder = new Array(this.rank);

    for (let i = 0; i < newDim.length; i++) {
      switchedOrder[newDim[i]] = outputOrder[i];
    }

    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;
    const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;
    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;
    this.userCode = `
    void main() {
      ${dtype} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${getc};
      if(${nextColumn}) {
        result[1] = ${getc};
      }
      --${outputOrder[this.rank - 1]};
      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {
        result[2] = ${getc};
        if(${nextColumn}) {
          result[3] = ${getc};
        }
      }
      setOutput(result);
    }
    `;
  }

}

exports.TransposePackedProgram = TransposePackedProgram;
},{"./packing_util":"BqvU","./shader_compiler":"xhhc"}],"VG4U":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transposeImpl = transposeImpl;
Object.defineProperty(exports, "transposeImplCPU", {
  enumerable: true,
  get: function () {
    return _shared.transposeImplCPU;
  }
});

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

var _transpose_gpu = require("../transpose_gpu");

var _transpose_packed_gpu = require("../transpose_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transposeImpl(x, perm, backend) {
  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _transpose_packed_gpu.TransposePackedProgram(x.shape, perm) : new _transpose_gpu.TransposeProgram(x.shape, perm);
  return backend.runWebGLProgram(program, [x], x.dtype);
}
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH","../transpose_gpu":"zMPc","../transpose_packed_gpu":"UyJE"}],"YiBb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sumImpl = sumImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _reduce = require("../kernel_utils/reduce");

var _Reshape = require("./Reshape");

var _Transpose_impl = require("./Transpose_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sumImpl(x, axis, keepDims, backend) {
  const reductionIndices = axis;
  const xRank = x.shape.length;

  const origAxes = _tfjsCore.util.parseAxisParam(reductionIndices, x.shape);

  let axes = origAxes;

  const permutedAxes = _tfjsCore.backend_util.getAxesPermutation(axes, xRank);

  const sumInputIsTransposed = permutedAxes != null;
  let sumInput = x;

  if (sumInputIsTransposed) {
    sumInput = (0, _Transpose_impl.transposeImpl)(x, permutedAxes, backend);
    axes = _tfjsCore.backend_util.getInnerMostAxes(axes.length, xRank);
  }

  _tfjsCore.backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);

  const [sumOutShape, reduceShape] = _tfjsCore.backend_util.computeOutAndReduceShapes(sumInput.shape, axes);

  let outShape = sumOutShape;

  if (keepDims) {
    // rather than reshape at the end, set the target shape here.
    outShape = _tfjsCore.backend_util.expandShapeToKeepDim(sumOutShape, origAxes);
  }

  const inSize = _tfjsCore.util.sizeFromShape(reduceShape);

  const xSize = _tfjsCore.util.sizeFromShape(x.shape);

  const batchSize = xSize / inSize;
  const reshapedInput = (0, _Reshape.reshape)({
    inputs: {
      x: sumInput
    },
    attrs: {
      shape: [batchSize, inSize]
    },
    backend
  });
  const outType = (0, _tfjsCore.sumOutType)(x.dtype);
  const reduced = (0, _reduce.reduce)(reshapedInput, outType, 'sum', backend);
  const out = (0, _Reshape.reshape)({
    inputs: {
      x: reduced
    },
    attrs: {
      shape: outShape
    },
    backend
  });
  backend.disposeIntermediateTensorInfo(reshapedInput);
  backend.disposeIntermediateTensorInfo(reduced);

  if (sumInputIsTransposed) {
    backend.disposeIntermediateTensorInfo(sumInput);
  }

  return out;
}
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/reduce":"tZI5","./Reshape":"OCN8","./Transpose_impl":"VG4U"}],"FqPw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sum = sum;
exports.sumConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Sum_impl = require("./Sum_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sum(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  return (0, _Sum_impl.sumImpl)(x, axis, keepDims, backend);
}

const sumConfig = {
  kernelName: _tfjsCore.Sum,
  backendName: 'webgl',
  kernelFunc: sum
};
exports.sumConfig = sumConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Sum_impl":"YiBb"}],"ukag":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transpose = transpose;
exports.transposeConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Transpose_impl = require("./Transpose_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transpose(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    perm
  } = attrs;
  const webglBackend = backend;
  const xRank = x.shape.length;
  const newShape = new Array(xRank);

  for (let i = 0; i < newShape.length; i++) {
    newShape[i] = x.shape[perm[i]];
  }

  let out;

  if (webglBackend.shouldExecuteOnCPU([x])) {
    const xTexData = webglBackend.texData.get(x.dataId);
    const values = xTexData.values;
    const outValues = (0, _Transpose_impl.transposeImplCPU)(values, x.shape, x.dtype, perm, newShape);
    out = webglBackend.makeTensorInfo(newShape, x.dtype);
    const outData = webglBackend.texData.get(out.dataId);
    outData.values = outValues;
  } else {
    out = (0, _Transpose_impl.transposeImpl)(x, perm, webglBackend);
  }

  return out;
}

const transposeConfig = {
  kernelName: _tfjsCore.Transpose,
  backendName: 'webgl',
  kernelFunc: transpose
};
exports.transposeConfig = transposeConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Transpose_impl":"VG4U"}],"kzNd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchMatMulImpl = batchMatMulImpl;
exports.MATMUL_SHARED_DIM_THRESHOLD = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _mulmat_packed_gpu = require("../mulmat_packed_gpu");

var _Multiply = require("./Multiply");

var _Reshape = require("./Reshape");

var _Sum = require("./Sum");

var _Transpose = require("./Transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Empirically determined minimal shared dimension in matmul before we forward
// to a.mul(b).sum() in order to take advantage of GPU parallelism. See
// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.
const MATMUL_SHARED_DIM_THRESHOLD = 1000;
exports.MATMUL_SHARED_DIM_THRESHOLD = MATMUL_SHARED_DIM_THRESHOLD;

function batchMatMulImpl({
  a,
  b,
  transposeA,
  transposeB,
  backend,
  bias = null,
  preluActivationWeights = null,
  leakyreluAlpha = 0,
  activation = null
}) {
  const aRank = a.shape.length;
  const bRank = b.shape.length;
  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];
  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];
  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];
  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];
  const outerDimsA = a.shape.slice(0, -2);
  const outerDimsB = b.shape.slice(0, -2);

  const batchDimA = _tfjsCore.util.sizeFromShape(outerDimsA);

  const batchDimB = _tfjsCore.util.sizeFromShape(outerDimsB);

  const batchDimsCompatible = batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;

  _tfjsCore.util.assert(aRank >= 2 && bRank >= 2 && batchDimsCompatible, () => `Error in matMul: the input batch dimensions must either be the ` + `same or at least one input batch dimension must be 1. Got input ` + `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);

  const outShapeOuterDims = batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);
  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);

  _tfjsCore.util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${a.shape} and ` + `${b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);

  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] : [batchDimA, outerShapeA, innerShapeA];
  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] : [batchDimB, innerShapeB, outerShapeB]; // The rest of the implementation is designed to operate on rank-3 tensors

  const a3d = (0, _Reshape.reshape)({
    inputs: {
      x: a
    },
    backend,
    attrs: {
      shape: a3dShape
    }
  });
  const b3d = (0, _Reshape.reshape)({
    inputs: {
      x: b
    },
    backend,
    attrs: {
      shape: b3dShape
    }
  });
  const intermediates = [a3d, b3d];
  const batchDim = Math.max(batchDimA, batchDimB);
  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];
  const hasBias = bias != null;
  const hasPreluActivationWeights = preluActivationWeights != null;
  const hasLeakyreluAlpha = activation === 'leakyrelu';
  const fusedActivation = activation != null ? (0, _kernel_funcs_utils.mapActivationToShaderProgram)(activation, true) : null;
  const containsFusedOps = hasBias || hasPreluActivationWeights || hasLeakyreluAlpha || fusedActivation != null;
  let out; // Since the matrices are vectors, it is faster to call mul().sum()
  // because sum() is O(sqrt(N)) due to divide-and-conquer.

  if ((outerShapeA === 1 || outerShapeB === 1) && sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {
    let aVec = a3d;
    let bVec = b3d;

    if (transposeA) {
      aVec = (0, _Transpose.transpose)({
        inputs: {
          x: a3d
        },
        backend,
        attrs: {
          perm: [0, 2, 1]
        }
      });
      intermediates.push(aVec);
    }

    if (transposeB) {
      bVec = (0, _Transpose.transpose)({
        inputs: {
          x: b3d
        },
        backend,
        attrs: {
          perm: [0, 2, 1]
        }
      });
      intermediates.push(bVec);
    }

    const shouldReshapeA = outerShapeB !== 1;
    const shouldReshapeB = outerShapeB === 1;
    let aVec3d = aVec;

    if (shouldReshapeA) {
      aVec3d = (0, _Reshape.reshape)({
        inputs: {
          x: aVec
        },
        backend,
        attrs: {
          shape: [batchDim, sharedDim, 1]
        }
      });
      intermediates.push(aVec3d);
    }

    const axis = outerShapeB === 1 ? 2 : 1;
    let bVec3d = bVec;

    if (shouldReshapeB) {
      bVec3d = (0, _Reshape.reshape)({
        inputs: {
          x: bVec
        },
        backend,
        attrs: {
          shape: [batchDim, 1, sharedDim]
        }
      });
      intermediates.push(bVec3d);
    }

    const product = (0, _Multiply.multiply)({
      inputs: {
        a: aVec3d,
        b: bVec3d
      },
      backend
    });
    out = (0, _Sum.sum)({
      inputs: {
        x: product
      },
      backend,
      attrs: {
        axis,
        keepDims: true
      }
    });
    intermediates.push(product);
  } else {
    const dtype = (0, _tfjsCore.upcastType)(a.dtype, b.dtype);
    const program = new _mulmat_packed_gpu.MatMulPackedProgram(a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
    const inputs = [a3d, b3d];

    if (bias != null) {
      inputs.push(bias);
    }

    if (hasPreluActivationWeights) {
      inputs.push(preluActivationWeights);
    }

    if (hasLeakyreluAlpha) {
      const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', _tfjsCore.util.createScalarValue(leakyreluAlpha, 'float32'));
      inputs.push($leakyreluAlpha);
      intermediates.push($leakyreluAlpha);
    }

    out = backend.runWebGLProgram(program, inputs, dtype);
  }

  const outReshaped = (0, _Reshape.reshape)({
    inputs: {
      x: out
    },
    backend,
    attrs: {
      shape: outShape
    }
  });
  intermediates.push(out);

  for (const i of intermediates) {
    backend.disposeIntermediateTensorInfo(i);
  }

  return outReshaped;
}
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../mulmat_packed_gpu":"QKYo","./Multiply":"xWNx","./Reshape":"OCN8","./Sum":"FqPw","./Transpose":"ukag"}],"QEU7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._fusedMatMul = _fusedMatMul;
exports._fusedMatMulConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _BatchMatMul_impl = require("./BatchMatMul_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _fusedMatMul(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    a,
    b,
    bias,
    preluActivationWeights
  } = inputs;
  const {
    transposeA,
    transposeB,
    activation,
    leakyreluAlpha
  } = attrs;
  return (0, _BatchMatMul_impl.batchMatMulImpl)({
    a,
    b,
    transposeA,
    transposeB,
    backend,
    bias,
    preluActivationWeights,
    leakyreluAlpha,
    activation
  });
}

const _fusedMatMulConfig = {
  kernelName: _tfjsCore._FusedMatMul,
  backendName: 'webgl',
  kernelFunc: _fusedMatMul
};
exports._fusedMatMulConfig = _fusedMatMulConfig;
},{"@tensorflow/tfjs-core":"kSBl","./BatchMatMul_impl":"kzNd"}],"ovwb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.abs = abs;
exports.absConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

var _unaryop_gpu = require("../unaryop_gpu");

var _unaryop_packed_gpu = require("../unaryop_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ABS = `return abs(x);`;

function abs(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs; // TODO: handle cases when x is complex. Once the cpu implementation
  // can handle complex values, refactor to use unaryKernelFunc.

  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {
    const xData = backend.texData.get(x.dataId);
    const outValues = (0, _shared.simpleAbsImplCPU)(xData.values);
    return backend.makeTensorInfo(x.shape, x.dtype, outValues);
  }

  let program;

  if ((0, _tfjsCore.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
    program = new _unaryop_packed_gpu.UnaryOpPackedProgram(x.shape, ABS);
  } else {
    program = new _unaryop_gpu.UnaryOpProgram(x.shape, ABS);
  }

  return backend.runWebGLProgram(program, [x], x.dtype);
}

const absConfig = {
  kernelName: _tfjsCore.Abs,
  backendName: 'webgl',
  kernelFunc: abs
};
exports.absConfig = absConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH","../unaryop_gpu":"CK3x","../unaryop_packed_gpu":"zBLd"}],"Olb2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acosConfig = exports.acos = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _unaryop_gpu = require("../unaryop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ACOS = _unaryop_gpu.CHECK_NAN_SNIPPET + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`;
const acos = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: ACOS
});
exports.acos = acos;
const acosConfig = {
  kernelName: _tfjsCore.Acos,
  backendName: 'webgl',
  kernelFunc: acos
};
exports.acosConfig = acosConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../unaryop_gpu":"CK3x"}],"wCgD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acoshConfig = exports.acosh = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _unaryop_gpu = require("../unaryop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ACOSH = _unaryop_gpu.CHECK_NAN_SNIPPET + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`;
const acosh = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: ACOSH
});
exports.acosh = acosh;
const acoshConfig = {
  kernelName: _tfjsCore.Acosh,
  backendName: 'webgl',
  kernelFunc: acosh
};
exports.acoshConfig = acoshConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../unaryop_gpu":"CK3x"}],"lyYz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addConfig = exports.addKernelFunc = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ADD = 'return a + b;';
const addKernelFunc = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: ADD,
  packedOpSnippet: ADD,
  supportsComplex: true,
  cpuKernelImpl: _shared.addImplCPU
});
exports.addKernelFunc = addKernelFunc;
const addConfig = {
  kernelName: _tfjsCore.Add,
  backendName: 'webgl',
  kernelFunc: addKernelFunc
};
exports.addConfig = addConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"a1NC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddNProgram = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AddNProgram {
  constructor(outputShape, shapes) {
    this.outputShape = [];
    this.outputShape = outputShape;
    this.variableNames = shapes.map((_, i) => `T${i}`);
    const snippets = []; // Get target elements from every input tensor.

    this.variableNames.forEach(variable => {
      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);
    }); // Calculate the sum of all elements.

    const operation = this.variableNames.map(variable => {
      return `v${variable}`;
    }).join(' + ');
    this.userCode = `
      void main() {
        ${snippets.join('\n        ')}

        float result = ${operation};
        setOutput(result);
      }
    `;
  }

}

exports.AddNProgram = AddNProgram;
},{}],"dN0g":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddNPackedProgram = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AddNPackedProgram {
  constructor(outputShape, shapes) {
    this.outputShape = [];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = outputShape;
    this.variableNames = shapes.map((_, i) => `T${i}`);
    const snippets = []; // Get target elements from every input tensor.

    this.variableNames.forEach(variable => {
      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);
    }); // Calculate the sum of all elements.

    const operation = this.variableNames.map(variable => {
      return `v${variable}`;
    }).join(' + ');
    this.userCode = `
      void main() {
        ${snippets.join('\n        ')}

        vec4 result = ${operation};
        setOutput(result);
      }
    `;
  }

}

exports.AddNPackedProgram = AddNPackedProgram;
},{}],"SS4q":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addN = addN;
exports.addNConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _addn_gpu = require("../addn_gpu");

var _addn_packed_gpu = require("../addn_packed_gpu");

var _Identity = require("./Identity");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function addN(args) {
  const {
    inputs,
    backend
  } = args;
  const tensors = inputs;

  if (tensors.length === 1) {
    return (0, _Identity.identity)({
      inputs: {
        x: tensors[0]
      },
      backend
    });
  } // Limit the number of uploaded textures for optimization.


  if (tensors.length > (0, _tfjsCore.env)().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {
    const midIndex = Math.floor(tensors.length / 2);
    const leftSide = addN({
      inputs: tensors.slice(0, midIndex),
      backend
    });
    const rightSide = addN({
      inputs: tensors.slice(midIndex),
      backend
    });
    return addN({
      inputs: [leftSide, rightSide],
      backend
    });
  }

  const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => (0, _tfjsCore.upcastType)(d1, d2));
  const shapes = tensors.map(t => t.shape); // We can make sure shapes are identical in op level.

  const usePackedOp = (0, _tfjsCore.env)().getBool('WEBGL_PACK');
  const program = usePackedOp ? new _addn_packed_gpu.AddNPackedProgram(tensors[0].shape, shapes) : new _addn_gpu.AddNProgram(tensors[0].shape, shapes);
  return backend.runWebGLProgram(program, tensors, dtype);
}

const addNConfig = {
  kernelName: _tfjsCore.AddN,
  backendName: 'webgl',
  kernelFunc: addN
};
exports.addNConfig = addNConfig;
},{"@tensorflow/tfjs-core":"kSBl","../addn_gpu":"a1NC","../addn_packed_gpu":"dN0g","./Identity":"LUQG"}],"JMnO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.all = all;
exports.allConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _reduce = require("../kernel_utils/reduce");

var _Reshape = require("./Reshape");

var _Transpose = require("./Transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function all(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  const xRank = x.shape.length;

  const origAxes = _tfjsCore.util.parseAxisParam(axis, x.shape);

  let axes = origAxes;

  const permutedAxes = _tfjsCore.backend_util.getAxesPermutation(axes, xRank);

  let permutedX = x;

  if (permutedAxes != null) {
    permutedX = (0, _Transpose.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    axes = _tfjsCore.backend_util.getInnerMostAxes(axes.length, xRank);
  }

  _tfjsCore.backend_util.assertAxesAreInnerMostDims('all', axes, xRank);

  const [outShape, reduceShape] = _tfjsCore.backend_util.computeOutAndReduceShapes(permutedX.shape, axes);

  const inSize = _tfjsCore.util.sizeFromShape(reduceShape);

  const a2D = (0, _Reshape.reshape)({
    inputs: {
      x: permutedX
    },
    backend,
    attrs: {
      shape: [-1, inSize]
    }
  });
  const reduced = (0, _reduce.reduce)(a2D, a2D.dtype, 'all', backend);
  let res;

  if (keepDims) {
    const newShape = _tfjsCore.backend_util.expandShapeToKeepDim(outShape, origAxes);

    res = (0, _Reshape.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: newShape
      }
    });
  } else {
    res = (0, _Reshape.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
  }

  backend.disposeIntermediateTensorInfo(a2D);
  backend.disposeIntermediateTensorInfo(reduced);

  if (permutedAxes != null) {
    backend.disposeIntermediateTensorInfo(permutedX);
  }

  return res;
}

const allConfig = {
  kernelName: _tfjsCore.All,
  backendName: 'webgl',
  kernelFunc: all
};
exports.allConfig = allConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/reduce":"tZI5","./Reshape":"OCN8","./Transpose":"ukag"}],"KErF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.any = any;
exports.anyConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _reduce = require("../kernel_utils/reduce");

var _Reshape = require("./Reshape");

var _Transpose = require("./Transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function any(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  const xRank = x.shape.length;

  const origAxes = _tfjsCore.util.parseAxisParam(axis, x.shape);

  let axes = origAxes;

  const permutedAxes = _tfjsCore.backend_util.getAxesPermutation(axes, xRank);

  let permutedX = x;

  if (permutedAxes != null) {
    permutedX = (0, _Transpose.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    axes = _tfjsCore.backend_util.getInnerMostAxes(axes.length, xRank);
  }

  _tfjsCore.backend_util.assertAxesAreInnerMostDims('any', axes, xRank);

  const [outShape, reduceShape] = _tfjsCore.backend_util.computeOutAndReduceShapes(permutedX.shape, axes);

  const inSize = _tfjsCore.util.sizeFromShape(reduceShape);

  const a2D = (0, _Reshape.reshape)({
    inputs: {
      x: permutedX
    },
    backend,
    attrs: {
      shape: [-1, inSize]
    }
  });
  const reduced = (0, _reduce.reduce)(a2D, a2D.dtype, 'any', backend);
  let res;

  if (keepDims) {
    const newShape = _tfjsCore.backend_util.expandShapeToKeepDim(outShape, origAxes);

    res = (0, _Reshape.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: newShape
      }
    });
  } else {
    res = (0, _Reshape.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
  }

  backend.disposeIntermediateTensorInfo(a2D);
  backend.disposeIntermediateTensorInfo(reduced);

  if (permutedAxes != null) {
    backend.disposeIntermediateTensorInfo(permutedX);
  }

  return res;
}

const anyConfig = {
  kernelName: _tfjsCore.Any,
  backendName: 'webgl',
  kernelFunc: any
};
exports.anyConfig = anyConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/reduce":"tZI5","./Reshape":"OCN8","./Transpose":"ukag"}],"VKTJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArgMinMaxProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ArgMinMaxProgram {
  constructor(reduceInfo, op, firstPass) {
    this.variableNames = ['A'];
    const {
      windowSize,
      batchSize,
      outSize
    } = reduceInfo;

    if (!firstPass) {
      this.variableNames.push('bestIndicesA');
    }

    this.outputShape = [batchSize, outSize];
    const compOp = op === 'max' ? '>' : '<';
    const indexSnippet = firstPass ? 'inOffset + i;' : 'round(getBestIndicesA(batch, inOffset + i));';
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${windowSize};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${windowSize}; i++) {
          int inIdx = ${indexSnippet};
          float candidate = getA(batch, inIdx);
          if (candidate ${compOp} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }

}

exports.ArgMinMaxProgram = ArgMinMaxProgram;
},{}],"gzgT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArgMinMaxPackedProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ArgMinMaxPackedProgram {
  constructor(shape, windowSize, op, firstPass) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;

    _tfjsCore.util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() + op.slice(1)} supports only inputs with rank above 2.`);

    const inSize = shape[shape.length - 1];
    const outSize = Math.ceil(inSize / windowSize);
    this.outputShape = shape.slice(0, -1);

    if (outSize > 1) {
      this.outputShape.push(outSize);
    }

    if (!firstPass) {
      this.variableNames.push('bestIndicesA');
    }

    const outShape = this.outputShape;
    const rank = outShape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
    const coords = (0, _packing_util.getChannels)('coords', rank);
    let sourceLocSetup;
    let sourceRank;

    if (outSize === 1) {
      sourceRank = rank + 1;
      const sourceLocDType = (0, _shader_compiler.getCoordsDataType)(sourceRank);
      sourceLocSetup = `
        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);
        ++${coords[rank - 1]};
        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);
        ++${coords[rank - 2]};
        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);
        --${coords[rank - 1]};
        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);
        --${coords[rank - 2]};`;
    } else {
      sourceRank = rank;
      sourceLocSetup = `
        ${dtype} sourceLocR = coords;
        ++${coords[rank - 1]};
        ${dtype} sourceLocG = coords;
        ++${coords[rank - 2]};
        ${dtype} sourceLocA = coords;
        --${coords[rank - 1]};
        ${dtype} sourceLocB = coords;
        --${coords[rank - 2]};`;
    }

    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);
    const inChannel = '.' + channels[sourceRank - 1]; // e.g. ".b" for rank 3.

    const intChannels = channels.map(x => 'int ' + x);
    const srcRCoords = (0, _packing_util.getChannels)('sourceLocR', sourceRank - 1).concat('inIdx.r');
    const srcGCoords = (0, _packing_util.getChannels)('sourceLocG', sourceRank - 1).concat('inIdx.g');
    const srcBCoords = (0, _packing_util.getChannels)('sourceLocB', sourceRank - 1).concat('inIdx.b');
    const srcACoords = (0, _packing_util.getChannels)('sourceLocA', sourceRank - 1).concat('inIdx.a');
    const compOp = op === 'max' ? 'greaterThan' : 'lessThan';
    const fetchCandidateIdx = firstPass ? '' : `
          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),
                             getBestIndicesAChannel(${srcGCoords.join()}),
                             getBestIndicesAChannel(${srcBCoords.join()}),
                             getBestIndicesAChannel(${srcACoords.join()})));`;
    const fetchValue = `vec4(
            getAChannel(${srcRCoords.join()}),
            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,
            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;
    const getBestIndicesAChannelSnippet = firstPass ? '' : `
      float getBestIndicesAChannel(${intChannels.join()}) {
        return getChannel(getBestIndicesA(${channels.join()}),
                                          vec2(${channels.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${intChannels.join()}) {
        return getChannel(getA(${channels.join()}),
                               vec2(${channels.slice(-2).join()}));
      }
      ${getBestIndicesAChannelSnippet}
      void main() {
        ${dtype} coords = getOutputCoords();
        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};
        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};
        ${sourceLocSetup}
        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},
          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${fetchValue};

        for (int i = 0; i < ${windowSize}; i++) {
          inIdx = srcIdx;
          ${fetchCandidateIdx}
          vec4 candidate = ${fetchValue};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }

}

exports.ArgMinMaxPackedProgram = ArgMinMaxPackedProgram;
},{"@tensorflow/tfjs-core":"kSBl","./packing_util":"BqvU","./shader_compiler":"xhhc"}],"miTP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argMinMaxReduce = argMinMaxReduce;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _argminmax_gpu = require("../argminmax_gpu");

var _argminmax_packed_gpu = require("../argminmax_packed_gpu");

var _Reshape = require("../kernels/Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function argReduce(backend, x, reduceType, bestIndicesA = null) {
  let batchSize = x.shape[0];
  let inSize = x.shape[1];

  if (bestIndicesA != null) {
    batchSize = bestIndicesA.shape[0];
    inSize = bestIndicesA.shape[1];
  }

  const windowSize = _tfjsCore.backend_util.computeOptimalWindowSize(inSize);

  const reduceInfo = {
    windowSize,
    inSize,
    batchSize,
    outSize: Math.ceil(inSize / windowSize)
  };
  const program = new _argminmax_gpu.ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);
  const inputs = [x];

  if (bestIndicesA != null) {
    inputs.push(bestIndicesA);
  }

  const output = backend.runWebGLProgram(program, inputs, 'int32'); // No need to run another GPGPU program.

  if (output.shape[1] === 1) {
    return output;
  }

  const result = argReduce(backend, x, reduceType, output);
  backend.disposeIntermediateTensorInfo(output);
  return result;
}

function argReducePacked(backend, x, reduceType, bestIndicesA = null) {
  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;
  const inSize = inShape[inShape.length - 1];

  const windowSize = _tfjsCore.backend_util.computeOptimalWindowSize(inSize);

  const program = new _argminmax_packed_gpu.ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);
  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];
  const output = backend.runWebGLProgram(program, inputs, 'int32');

  if (output.shape.length === x.shape.length) {
    const result = argReducePacked(backend, x, reduceType, output);
    backend.disposeIntermediateTensorInfo(output);
    return result;
  }

  return output;
}

function argMinMaxReduce(backend, x, axis, reduceType) {
  const axes = [axis];

  _tfjsCore.backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);

  if (!(0, _tfjsCore.env)().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {
    const intermediateTensorInfos = [];

    const [outShape, reduceShape] = _tfjsCore.backend_util.computeOutAndReduceShapes(x.shape, axes);

    const inSize = _tfjsCore.util.sizeFromShape(reduceShape);

    const a2D = (0, _Reshape.reshape)({
      inputs: {
        x
      },
      backend,
      attrs: {
        shape: [-1, inSize]
      }
    });
    intermediateTensorInfos.push(a2D);
    const reduced = argReduce(backend, a2D, reduceType);
    intermediateTensorInfos.push(reduced);
    const reshaped = (0, _Reshape.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
    return reshaped;
  }

  return argReducePacked(backend, x, reduceType);
}
},{"@tensorflow/tfjs-core":"kSBl","../argminmax_gpu":"VKTJ","../argminmax_packed_gpu":"gzgT","../kernels/Reshape":"OCN8"}],"x2EH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argMax = argMax;
exports.argMaxConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _arg_min_max = require("../kernel_utils/arg_min_max");

var _Transpose = require("./Transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function argMax(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis
  } = attrs;

  let axes = _tfjsCore.util.parseAxisParam(axis, x.shape);

  const permutedAxes = _tfjsCore.backend_util.getAxesPermutation(axes, x.shape.length);

  let $x = x;
  const intermediateTensorInfos = [];

  if (permutedAxes != null) {
    $x = (0, _Transpose.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    intermediateTensorInfos.push($x);
    axes = _tfjsCore.backend_util.getInnerMostAxes(axes.length, $x.shape.length);
  }

  _tfjsCore.backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);

  const out = (0, _arg_min_max.argMinMaxReduce)(backend, $x, axes[0], 'max');
  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return out;
}

const argMaxConfig = {
  kernelName: _tfjsCore.ArgMax,
  backendName: 'webgl',
  kernelFunc: argMax
};
exports.argMaxConfig = argMaxConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/arg_min_max":"miTP","./Transpose":"ukag"}],"hkwZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argMin = argMin;
exports.argMinConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _arg_min_max = require("../kernel_utils/arg_min_max");

var _Transpose = require("./Transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function argMin(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis
  } = attrs;

  let axes = _tfjsCore.util.parseAxisParam(axis, x.shape);

  const permutedAxes = _tfjsCore.backend_util.getAxesPermutation(axes, x.shape.length);

  let $x = x;
  const intermediateTensorInfos = [];

  if (permutedAxes != null) {
    $x = (0, _Transpose.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    intermediateTensorInfos.push($x);
    axes = _tfjsCore.backend_util.getInnerMostAxes(axes.length, $x.shape.length);
  }

  _tfjsCore.backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);

  const out = (0, _arg_min_max.argMinMaxReduce)(backend, $x, axes[0], 'min');
  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return out;
}

const argMinConfig = {
  kernelName: _tfjsCore.ArgMin,
  backendName: 'webgl',
  kernelFunc: argMin
};
exports.argMinConfig = argMinConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/arg_min_max":"miTP","./Transpose":"ukag"}],"OFJK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asinConfig = exports.asin = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _unaryop_gpu = require("../unaryop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ASIN = _unaryop_gpu.CHECK_NAN_SNIPPET + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`;
const asin = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: ASIN
});
exports.asin = asin;
const asinConfig = {
  kernelName: _tfjsCore.Asin,
  backendName: 'webgl',
  kernelFunc: asin
};
exports.asinConfig = asinConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../unaryop_gpu":"CK3x"}],"Z5zC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asinhConfig = exports.asinh = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _unaryop_gpu = require("../unaryop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ASINH = _unaryop_gpu.CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;
const asinh = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: ASINH
});
exports.asinh = asinh;
const asinhConfig = {
  kernelName: _tfjsCore.Asinh,
  backendName: 'webgl',
  kernelFunc: asinh
};
exports.asinhConfig = asinhConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../unaryop_gpu":"CK3x"}],"OiG7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atanConfig = exports.atan = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _unaryop_gpu = require("../unaryop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ATAN = _unaryop_gpu.CHECK_NAN_SNIPPET + `
  return atan(x);
`;
const atan = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: ATAN
});
exports.atan = atan;
const atanConfig = {
  kernelName: _tfjsCore.Atan,
  backendName: 'webgl',
  kernelFunc: atan
};
exports.atanConfig = atanConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../unaryop_gpu":"CK3x"}],"nymv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atan2Config = exports.atan2 = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ATAN2 = _kernel_funcs_utils.CHECK_NAN_SNIPPET_BINARY + `
  return atan(a, b);
`;
const ATAN2_PACKED = `
  vec4 result = atan(a, b);
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + _kernel_funcs_utils.CHECK_NAN_SNIPPET_BINARY_PACKED + `
  return result;
`;
const atan2 = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: ATAN2,
  packedOpSnippet: ATAN2_PACKED
});
exports.atan2 = atan2;
const atan2Config = {
  kernelName: _tfjsCore.Atan2,
  backendName: 'webgl',
  kernelFunc: atan2
};
exports.atan2Config = atan2Config;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"vHhq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atanhConfig = exports.atanh = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _unaryop_gpu = require("../unaryop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ATANH = _unaryop_gpu.CHECK_NAN_SNIPPET + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;
const atanh = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: ATANH
});
exports.atanh = atanh;
const atanhConfig = {
  kernelName: _tfjsCore.Atanh,
  backendName: 'webgl',
  kernelFunc: atanh
};
exports.atanhConfig = atanhConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../unaryop_gpu":"CK3x"}],"QOnm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pool3DProgram = exports.Pool2DProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Pool2DProgram {
  constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {
    this.variableNames = ['x'];

    if (poolType === 'avg' && computePositions) {
      throw new Error('Cannot compute positions for average pool.');
    }

    const filterWidth = convInfo.filterWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    this.outputShape = convInfo.outShape;
    const isAvgPool = poolType === 'avg';
    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;
    const flattenPositionStr = `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;
    let initializationValue = '0.0';

    if (!isAvgPool) {
      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
      initializationValue = '-1.0 / 1e-20';
    }

    if (computePositions) {
      const compareOp = '>=';
      this.userCode = `
        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
        const ivec2 pads = ivec2(${padTop}, ${padLeft});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${compareOp} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${flattenPositions ? includeBatchInIndex ? batchFlattenPositionStr : flattenPositionStr : `wR * ${effectiveFilterWidth} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }

    const compareOp = 'max';
    let returnValue = `${poolType}(${poolType}(${poolType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';

    if (poolType === 'avg') {
      returnValue = `avgValue / count`;
    }

    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
    const filterWidthVec4Remainder = filterWidth % 4;
    const updateSnippet = `
      if (${isAvgPool}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${compareOp}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${convInfo.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${initializationValue});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${convInfo.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {
            int xC = xCCorner + wC * ${dilationWidth};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),
              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)
            );

            ${updateSnippet}
          }

          int xC = xCCorner + ${filterWidthNearestVec4};
          if (${filterWidthVec4Remainder === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${updateSnippet}
          } else if (${filterWidthVec4Remainder === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              initializationValue,
              initializationValue
            );

            ${updateSnippet}
          } else if (${filterWidthVec4Remainder === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),
              initializationValue
            );

            ${updateSnippet}
          }
        }
        setOutput(${returnValue});
      }
    `;
  }

}

exports.Pool2DProgram = Pool2DProgram;

class Pool3DProgram {
  constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {
    this.variableNames = ['x'];

    if (poolType === 'avg' && computePositions) {
      throw new Error('Cannot compute positions for average pool.');
    }

    const filterWidth = convInfo.filterWidth;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterDepth = convInfo.effectiveFilterDepth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padFront = convInfo.padInfo.front;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    this.outputShape = convInfo.outShape;
    const isAvgPool = poolType === 'avg';
    let initializationValue = '0.0';

    if (!isAvgPool) {
      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
      initializationValue = '-1.0 / 1e-20';
    }

    if (computePositions) {
      const compareOp = '>=';
      this.userCode = `
        const ivec3 strides =
            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${effectiveFilterDepth};
              wD += ${dilationDepth}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${convInfo.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${effectiveFilterHeight};
                wR += ${dilationHeight}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${convInfo.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${effectiveFilterWidth};
                  wC += ${dilationWidth}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${convInfo.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${compareOp} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${flattenPositions ? includeBatchInIndex ? `(((batch * ${convInfo.inDepth} + xD) * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` : `((xD * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` : `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +
                      wR * ${effectiveFilterWidth} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }

    const compareOp = 'max';
    let returnValue = `${poolType}(${poolType}(${poolType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';

    if (poolType === 'avg') {
      returnValue = `avgValue / count`;
    }

    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
    const filterWidthVec4Remainder = filterWidth % 4;
    const updateSnippet = `
      if (${isAvgPool}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${compareOp}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${convInfo.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${initializationValue});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
            wD += ${dilationDepth}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${convInfo.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {
              int xC = xCCorner + wC * ${dilationWidth};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)
              );

              ${updateSnippet}
            }

            int xC = xCCorner + ${filterWidthNearestVec4};
            if (${filterWidthVec4Remainder === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${updateSnippet}
            } else if (${filterWidthVec4Remainder === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                initializationValue,
                initializationValue
              );

              ${updateSnippet}
            } else if (${filterWidthVec4Remainder === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),
                initializationValue
              );

              ${updateSnippet}
            }
          }
          setOutput(${returnValue});
        }
      }
    `;
  }

}

exports.Pool3DProgram = Pool3DProgram;
},{}],"x8sT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.avgPool = avgPool;
exports.avgPoolConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _pool_gpu = require("../pool_gpu");

var _webgl_util = require("../webgl_util");

var _Identity = require("./Identity");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPool(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  (0, _webgl_util.assertNotComplex)(x, 'avgPool');
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  const dilations = 1;

  _tfjsCore.util.assert(_tfjsCore.backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);

  const convInfo = _tfjsCore.backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);

  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && _tfjsCore.util.arraysEqual(convInfo.inShape, convInfo.outShape)) {
    return (0, _Identity.identity)({
      inputs: {
        x
      },
      backend
    });
  }

  const avgPoolProgram = new _pool_gpu.Pool2DProgram(convInfo, 'avg', false);
  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');
}

const avgPoolConfig = {
  kernelName: _tfjsCore.AvgPool,
  backendName: 'webgl',
  kernelFunc: avgPool
};
exports.avgPoolConfig = avgPoolConfig;
},{"@tensorflow/tfjs-core":"kSBl","../pool_gpu":"QOnm","../webgl_util":"u1ML","./Identity":"LUQG"}],"rMW3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.avgPool3D = avgPool3D;
exports.avgPool3DConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _pool_gpu = require("../pool_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPool3D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode,
    dataFormat
  } = attrs;
  const dilations = [1, 1, 1];

  const convInfo = _tfjsCore.backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);

  const avgPoolProgram = new _pool_gpu.Pool3DProgram(convInfo, 'avg', false);
  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');
}

const avgPool3DConfig = {
  kernelName: _tfjsCore.AvgPool3D,
  backendName: 'webgl',
  kernelFunc: avgPool3D
};
exports.avgPool3DConfig = avgPool3DConfig;
},{"@tensorflow/tfjs-core":"kSBl","../pool_gpu":"QOnm"}],"ro1H":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvgPool3DBackpropProgram = exports.AvgPool2DBackpropProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AvgPool2DBackpropProgram {
  constructor(convInfo) {
    this.variableNames = ['dy'];
    this.outputShape = convInfo.inShape;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const avgMultiplier = 1 / (filterHeight * filterWidth);
    this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});
      const float avgMultiplier = float(${avgMultiplier});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${effectiveFilterWidth};
            wC+= ${dilationWidth}) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.AvgPool2DBackpropProgram = AvgPool2DBackpropProgram;

class AvgPool3DBackpropProgram {
  constructor(convInfo) {
    this.variableNames = ['dy'];
    this.outputShape = convInfo.inShape;
    const filterDepth = convInfo.filterDepth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterDepth = convInfo.effectiveFilterDepth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);
    this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});
      const float avgMultiplier = float(${avgMultiplier});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
            wD += ${dilationDepth}) {
          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;

          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.AvgPool3DBackpropProgram = AvgPool3DBackpropProgram;
},{}],"rSf2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.avgPool3DGrad = avgPool3DGrad;
exports.avgPoolGrad3DConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _avg_pool_backprop_gpu = require("../avg_pool_backprop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPool3DGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    input
  } = inputs;
  const x = input;
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  const dilations = [1, 1, 1];

  const convInfo = _tfjsCore.backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);

  const avgPoolBackpropProgram = new _avg_pool_backprop_gpu.AvgPool3DBackpropProgram(convInfo);
  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);
}

const avgPoolGrad3DConfig = {
  kernelName: _tfjsCore.AvgPool3DGrad,
  backendName: 'webgl',
  kernelFunc: avgPool3DGrad
};
exports.avgPoolGrad3DConfig = avgPoolGrad3DConfig;
},{"@tensorflow/tfjs-core":"kSBl","../avg_pool_backprop_gpu":"ro1H"}],"GujH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.avgPoolGrad = avgPoolGrad;
exports.avgPoolGradConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _avg_pool_backprop_gpu = require("../avg_pool_backprop_gpu");

var _webgl_util = require("../webgl_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function avgPoolGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    input
  } = inputs;
  const x = input;
  (0, _webgl_util.assertNotComplex)([dy, input], 'avgPoolGrad');
  const {
    filterSize,
    strides,
    pad
  } = attrs;

  const convInfo = _tfjsCore.backend_util.computePool2DInfo(x.shape, filterSize, strides, 1
  /* dilations */
  , pad);

  const avgPoolBackpropProgram = new _avg_pool_backprop_gpu.AvgPool2DBackpropProgram(convInfo);
  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);
}

const avgPoolGradConfig = {
  kernelName: _tfjsCore.AvgPoolGrad,
  backendName: 'webgl',
  kernelFunc: avgPoolGrad
};
exports.avgPoolGradConfig = avgPoolGradConfig;
},{"@tensorflow/tfjs-core":"kSBl","../avg_pool_backprop_gpu":"ro1H","../webgl_util":"u1ML"}],"oT54":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchMatMul = batchMatMul;
exports.batchMatMulConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _BatchMatMul_impl = require("./BatchMatMul_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function batchMatMul(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    a,
    b
  } = inputs;
  const {
    transposeA,
    transposeB
  } = attrs;
  return (0, _BatchMatMul_impl.batchMatMulImpl)({
    a,
    b,
    transposeA,
    transposeB,
    backend
  });
}

const batchMatMulConfig = {
  kernelName: _tfjsCore.BatchMatMul,
  backendName: 'webgl',
  kernelFunc: batchMatMul
};
exports.batchMatMulConfig = batchMatMulConfig;
},{"@tensorflow/tfjs-core":"kSBl","./BatchMatMul_impl":"kzNd"}],"hGmP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BatchNormProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class BatchNormProgram {
  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {
    this.outputShape = [];
    this.variableNames = ['x', 'mean', 'variance'];

    _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, meanShape);

    _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, varianceShape);

    let offsetSnippet = '0.0';

    if (offsetShape != null) {
      _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, offsetShape);

      this.variableNames.push('offset');
      offsetSnippet = 'getOffsetAtOutCoords()';
    }

    let scaleSnippet = '1.0';

    if (scaleShape != null) {
      _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, scaleShape);

      this.variableNames.push('scale');
      scaleSnippet = 'getScaleAtOutCoords()';
    }

    this.outputShape = xShape;
    this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${offsetSnippet};
        float scale = ${scaleSnippet};
        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }

}

exports.BatchNormProgram = BatchNormProgram;
},{"@tensorflow/tfjs-core":"kSBl"}],"oHWE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BatchNormPackedProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class BatchNormPackedProgram {
  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {
    this.packedInputs = true;
    this.packedOutput = true;
    this.variableNames = ['x', 'mean', 'variance'];

    _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, meanShape);

    _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, varianceShape);

    let offsetSnippet = 'vec4(0.0)';

    if (offsetShape != null) {
      _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, offsetShape);

      this.variableNames.push('offset');
      offsetSnippet = 'getOffsetAtOutCoords()';
    }

    let scaleSnippet = 'vec4(1.0)';

    if (scaleShape != null) {
      _tfjsCore.backend_util.assertAndGetBroadcastShape(xShape, scaleShape);

      this.variableNames.push('scale');
      scaleSnippet = 'getScaleAtOutCoords()';
    }

    this.outputShape = xShape;
    this.userCode = `
      void main() {
        vec4 offset = ${offsetSnippet};
        vec4 scale = ${scaleSnippet};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }

}

exports.BatchNormPackedProgram = BatchNormPackedProgram;
},{"@tensorflow/tfjs-core":"kSBl"}],"g2b2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchNormConfig = exports.batchNorm = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _batchnorm_gpu = require("../batchnorm_gpu");

var _batchnorm_packed_gpu = require("../batchnorm_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const batchNorm = ({
  inputs,
  backend,
  attrs
}) => {
  const {
    x,
    mean,
    variance,
    offset,
    scale
  } = inputs;

  _tfjsCore.util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');

  _tfjsCore.util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');

  _tfjsCore.util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');

  let {
    varianceEpsilon
  } = attrs;

  if (varianceEpsilon == null) {
    varianceEpsilon = 0.001;
  }

  const finalInputs = [x, mean, variance];
  let offsetShape = null;

  if (offset != null) {
    offsetShape = offset.shape;
    finalInputs.push(offset);
  }

  let scaleShape = null;

  if (scale != null) {
    scaleShape = scale.shape;
    finalInputs.push(scale);
  }

  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_NORMALIZATION') ? new _batchnorm_packed_gpu.BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) : new _batchnorm_gpu.BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);
  const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);
  return output;
};

exports.batchNorm = batchNorm;
const batchNormConfig = {
  kernelName: _tfjsCore.FusedBatchNorm,
  backendName: 'webgl',
  kernelFunc: batchNorm
};
exports.batchNormConfig = batchNormConfig;
},{"@tensorflow/tfjs-core":"kSBl","../batchnorm_gpu":"hGmP","../batchnorm_packed_gpu":"oHWE"}],"utcd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SliceProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SliceProgram {
  constructor(destSize) {
    this.variableNames = ['source'];
    this.outputShape = destSize;
    this.rank = destSize.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
    this.customUniforms = [{
      name: 'start',
      arrayIndex: this.rank,
      type: 'int'
    }];
    const sourceCoords = getCoords(this.rank);
    let body;
    const coordSum = destSize.map((_, i) => {
      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;
    });
    body = `
        ${dtype} sourceLoc;
        ${dtype} coords = getOutputCoords();
        ${coordSum.join('\n')}
      `;
    this.userCode = `
      void main() {
        ${body}
        setOutput(getSource(${sourceCoords}));
      }
    `;
  }

}

exports.SliceProgram = SliceProgram;
const coords = ['x', 'y', 'z', 'w', 'u', 'v'];

function getCoords(rank) {
  if (rank === 1) {
    return 'sourceLoc';
  } else if (rank <= 6) {
    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');
  } else {
    throw Error(`Slicing for rank ${rank} is not yet supported`);
  }
}
},{"./shader_compiler":"xhhc"}],"z2Lk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SlicePackedProgram = void 0;

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SlicePackedProgram {
  constructor(destSize) {
    this.variableNames = ['source'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = destSize;
    this.rank = destSize.length;
    this.customUniforms = [{
      name: 'start',
      arrayIndex: this.rank,
      type: 'int'
    }];
    const dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
    const coords = (0, _packing_util.getChannels)('coords', this.rank);
    const sourceLoc = (0, _packing_util.getChannels)('sourceLoc', this.rank);
    const innerDims = this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;
    const getChannel = `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;
    const upperRow = `
      result.x = ${getChannel};
      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {
        ++${sourceLoc[this.rank - 1]};
        result.y = ${getChannel};
        --${sourceLoc[this.rank - 1]};
      }
    `;
    const lowerRow = this.rank === 1 ? '' : `
      --${coords[this.rank - 1]};
      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {
        ++${sourceLoc[this.rank - 2]};
        result.z = ${getChannel};
        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {
          ++${sourceLoc[this.rank - 1]};
          result.w = ${getChannel};
        }
      }
    `;
    const sourceLocSetup = this.rank <= 4 ? `sourceLoc = coords +
            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` : destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`).join('\n');
    this.userCode = `
      void main() {
        ${dtype} coords = getOutputCoords();
        ${dtype} sourceLoc;
        ${sourceLocSetup}
        vec4 result = vec4(0.);
        ${upperRow}
        ${lowerRow}
        setOutput(result);
      }
    `;
  }

}

exports.SlicePackedProgram = SlicePackedProgram;
},{"./packing_util":"BqvU","./shader_compiler":"xhhc"}],"i5TP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = slice;
exports.sliceConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

var _slice_gpu = require("../slice_gpu");

var _slice_packed_gpu = require("../slice_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function shallowSlice(x, begin, size, backend) {
  const xTexData = backend.texData.get(x.dataId);
  const t = backend.makeTensorInfo(size, x.dtype);
  const newTexData = backend.texData.get(t.dataId); // Copy texture data from the original tensor.

  Object.assign(newTexData, xTexData);
  newTexData.refCount = 1;
  newTexData.shape = size;
  newTexData.dtype = x.dtype;

  let flatOffset = _tfjsCore.slice_util.computeFlatOffset(begin, _tfjsCore.util.computeStrides(x.shape));

  if (xTexData.slice) {
    // We are slicing an already sliced tensor, so we have to accumulate
    // the offset.
    flatOffset += xTexData.slice.flatOffset;
  }

  newTexData.slice = {
    flatOffset,
    // Point to the original dataId, which is used to do ref counting.
    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId
  }; // Increase the ref count for that data bucket.

  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;
  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);
  return t;
}

function slice(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    begin,
    size
  } = attrs;

  const [$begin, $size] = _tfjsCore.slice_util.parseSliceParams(x, begin, size);

  _tfjsCore.slice_util.assertParamsValid(x, $begin, $size);

  if (_tfjsCore.util.sizeFromShape($size) === 0) {
    return backend.makeTensorInfo($size, x.dtype, []);
  } // Run on cpu if dtype is string. For string, the backend represents it
  // as Uint8Array[], where each Uint8Array is a character. Given that the
  // computation is only on the outer array, uploading the whole data onto
  // gpu is wasteful. Also, currently webgl doesn't have a design to
  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we
  // just run the kernel on cpu if dtype is string.


  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {
    const xTexData = backend.texData.get(x.dataId);
    const outValues = (0, _shared.sliceImplCPU)(xTexData.values, $begin, $size, x.shape, x.dtype);
    return backend.makeTensorInfo($size, x.dtype, outValues);
  }

  const {
    isPacked
  } = backend.texData.get(x.dataId);

  const isContinous = _tfjsCore.slice_util.isSliceContinous(x.shape, $begin, $size);

  if (isPacked || !isContinous) {
    const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _slice_packed_gpu.SlicePackedProgram($size) : new _slice_gpu.SliceProgram($size);
    const customValues = [$begin];
    return backend.runWebGLProgram(program, [x], x.dtype, customValues);
  }

  backend.uploadToGPU(x.dataId);
  return shallowSlice(x, $begin, $size, backend);
}

const sliceConfig = {
  kernelName: _tfjsCore.Slice,
  backendName: 'webgl',
  kernelFunc: slice
};
exports.sliceConfig = sliceConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH","../slice_gpu":"utcd","../slice_packed_gpu":"z2Lk"}],"Tq84":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batchToSpaceNDConfig = exports.batchToSpaceND = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Reshape = require("./Reshape");

var _Slice = require("./Slice");

var _Transpose = require("./Transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const batchToSpaceND = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    blockShape,
    crops
  } = attrs;

  _tfjsCore.util.assert(x.shape.length <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' + 'implemented yet');

  const prod = blockShape.reduce((a, b) => a * b);

  const reshaped = _tfjsCore.backend_util.getReshaped(x.shape, blockShape, prod);

  const permuted = _tfjsCore.backend_util.getPermuted(reshaped.length, blockShape.length);

  const reshapedPermuted = _tfjsCore.backend_util.getReshapedPermuted(x.shape, blockShape, prod);

  const sliceBeginCoords = _tfjsCore.backend_util.getSliceBeginCoords(crops, blockShape.length);

  const sliceSize = _tfjsCore.backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);

  const toDispose = [];
  const reshapedIntermediate = (0, _Reshape.reshape)({
    inputs: {
      x
    },
    backend,
    attrs: {
      shape: reshaped
    }
  });
  const transposedIntermediate = (0, _Transpose.transpose)({
    inputs: {
      x: reshapedIntermediate
    },
    backend,
    attrs: {
      perm: permuted
    }
  });
  const reshapedIntermediate2 = (0, _Reshape.reshape)({
    inputs: {
      x: transposedIntermediate
    },
    backend,
    attrs: {
      shape: reshapedPermuted
    }
  });
  const sliced = (0, _Slice.slice)({
    inputs: {
      x: reshapedIntermediate2
    },
    backend,
    attrs: {
      begin: sliceBeginCoords,
      size: sliceSize
    }
  });
  toDispose.push(reshapedIntermediate);
  toDispose.push(transposedIntermediate);
  toDispose.push(reshapedIntermediate2);
  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return sliced;
};

exports.batchToSpaceND = batchToSpaceND;
const batchToSpaceNDConfig = {
  kernelName: _tfjsCore.BatchToSpaceND,
  backendName: 'webgl',
  kernelFunc: batchToSpaceND
};
exports.batchToSpaceNDConfig = batchToSpaceNDConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Reshape":"OCN8","./Slice":"i5TP","./Transpose":"ukag"}],"ZZuu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bincount = bincount;
exports.bincountConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bincount(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    weights
  } = inputs;
  const {
    size
  } = attrs;
  const xVals = backend.readSync(x.dataId);
  const weightsVals = backend.readSync(weights.dataId);
  const outVals = (0, _shared.bincountImplCPU)(xVals, weightsVals, weights.dtype, weights.shape, size);
  return backend.makeTensorInfo([size], weights.dtype, outVals);
}

const bincountConfig = {
  kernelName: _tfjsCore.Bincount,
  backendName: 'webgl',
  kernelFunc: bincount
};
exports.bincountConfig = bincountConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH"}],"Fgvd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.notEqualConfig = exports.notEqual = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NOT_EQUAL = `return float(a != b);`;
const notEqual = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: NOT_EQUAL,
  cpuKernelImpl: _shared.notEqualImplCPU,
  dtype: 'bool'
});
exports.notEqual = notEqual;
const notEqualConfig = {
  kernelName: _tfjsCore.NotEqual,
  backendName: 'webgl',
  kernelFunc: notEqual
};
exports.notEqualConfig = notEqualConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"Jbfj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.real = real;
exports.realConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Identity = require("./Identity");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function real(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    input
  } = inputs;
  const inputData = backend.texData.get(input.dataId);
  return (0, _Identity.identity)({
    inputs: {
      x: inputData.complexTensorInfos.real
    },
    backend
  });
}

const realConfig = {
  kernelName: _tfjsCore.Real,
  backendName: 'webgl',
  kernelFunc: real
};
exports.realConfig = realConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Identity":"LUQG"}],"obtE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.int = int;

var _unaryop_gpu = require("../unaryop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TO_INT = `return float(int(x));`;

function int(input, backend) {
  const program = new _unaryop_gpu.UnaryOpProgram(input.shape, TO_INT);
  const output = backend.runWebGLProgram(program, [input], 'int32');
  return {
    dataId: output.dataId,
    shape: output.shape,
    dtype: output.dtype
  };
}
},{"../unaryop_gpu":"CK3x"}],"Yp2K":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cast = cast;
exports.castConfig = void 0;

var tf = _interopRequireWildcard(require("@tensorflow/tfjs-core"));

var _Complex = require("./Complex");

var _Identity = require("./Identity");

var _NotEqual = require("./NotEqual");

var _Real = require("./Real");

var _int = require("../kernel_utils/int");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cast(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    dtype
  } = attrs; // Casting to complex64.

  if (dtype === 'complex64') {
    if (x.dtype === 'complex64') {
      return (0, _Identity.identity)({
        inputs: {
          x
        },
        backend
      });
    } // TODO(annxingyuan): Import kernel function once zeros is modularized.


    const zerosTensor = tf.zeros(x.shape);
    const floatX = cast({
      inputs: {
        x
      },
      backend,
      attrs: {
        dtype: 'float32'
      }
    });
    const result = (0, _Complex.complex)({
      inputs: {
        real: floatX,
        imag: zerosTensor
      },
      backend
    });
    zerosTensor.dispose();
    backend.disposeIntermediateTensorInfo(floatX);
    return result;
  } // Casting from complex64


  if (x.dtype === 'complex64') {
    const realPart = (0, _Real.real)({
      inputs: {
        input: x
      },
      backend
    });
    const result = cast({
      inputs: {
        x: realPart
      },
      backend,
      attrs: {
        dtype
      }
    });
    backend.disposeIntermediateTensorInfo(realPart);
    return result;
  }

  if (!tf.util.hasEncodingLoss(x.dtype, dtype)) {
    // We don't change the underlying data, since we cast to higher
    // precision.
    const result = (0, _Identity.identity)({
      inputs: {
        x
      },
      backend
    });
    return {
      dataId: result.dataId,
      shape: result.shape,
      dtype
    };
  }

  if (dtype === 'int32') {
    return (0, _int.int)(x, backend);
  }

  if (dtype === 'bool') {
    const zerosTensorInfo = backend.makeTensorInfo([], 'bool', tf.util.getTypedArrayFromDType('bool', 1));
    const binaryInputs = {
      a: x,
      b: zerosTensorInfo
    };
    const result = (0, _NotEqual.notEqual)({
      inputs: binaryInputs,
      backend
    });
    backend.disposeIntermediateTensorInfo(zerosTensorInfo);
    return result;
  }

  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);
}

const castConfig = {
  kernelName: tf.Cast,
  backendName: 'webgl',
  kernelFunc: cast
};
exports.castConfig = castConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Complex":"BU0Z","./Identity":"LUQG","./NotEqual":"Fgvd","./Real":"Jbfj","../kernel_utils/int":"obtE"}],"RdSo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ceilConfig = exports.ceil = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CEIL = `return ceil(x);`;
const ceil = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: CEIL,
  packedOpSnippet: CEIL,
  cpuKernelImpl: _shared.ceilImplCPU
});
exports.ceil = ceil;
const ceilConfig = {
  kernelName: _tfjsCore.Ceil,
  backendName: 'webgl',
  kernelFunc: ceil
};
exports.ceilConfig = ceilConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"TBVD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClipProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ClipProgram {
  constructor(aShape) {
    this.variableNames = ['A'];
    this.customUniforms = [{
      name: 'minVal',
      type: 'float'
    }, {
      name: 'maxVal',
      type: 'float'
    }];
    this.outputShape = aShape;
    this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }

}

exports.ClipProgram = ClipProgram;
},{}],"ShEb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClipPackedProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ClipPackedProgram {
  constructor(aShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.customUniforms = [{
      name: 'minVal',
      type: 'float'
    }, {
      name: 'maxVal',
      type: 'float'
    }];
    this.outputShape = aShape;
    this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }

}

exports.ClipPackedProgram = ClipPackedProgram;
},{}],"uqpD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clipByValue = clipByValue;
exports.clipByValueConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _clip_gpu = require("../clip_gpu");

var _clip_packed_gpu = require("../clip_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function clipByValue(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    clipValueMin,
    clipValueMax
  } = attrs;
  let program;

  if ((0, _tfjsCore.env)().getBool('WEBGL_PACK_CLIP')) {
    program = new _clip_packed_gpu.ClipPackedProgram(x.shape);
  } else {
    program = new _clip_gpu.ClipProgram(x.shape);
  }

  const customValues = [[clipValueMin], [clipValueMax]];
  return backend.runWebGLProgram(program, [x], x.dtype, customValues);
}

const clipByValueConfig = {
  kernelName: _tfjsCore.ClipByValue,
  backendName: 'webgl',
  kernelFunc: clipByValue
};
exports.clipByValueConfig = clipByValueConfig;
},{"@tensorflow/tfjs-core":"kSBl","../clip_gpu":"TBVD","../clip_packed_gpu":"ShEb"}],"NIhf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComplexAbsProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ComplexAbsProgram {
  constructor(shape) {
    this.variableNames = ['real', 'imag'];
    this.outputShape = shape;
    this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }

}

exports.ComplexAbsProgram = ComplexAbsProgram;
},{}],"fzhf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.complexAbs = complexAbs;
exports.complexAbsConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _complex_abs_gpu = require("../complex_abs_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Returns a TensorInfo with the complex shape and the dataId of the
// underlying part. We need to do this because a reshaped complex tensor is
// not reflected in its parts.
function makeComplexComponentTensorInfo(complexTensor, complexPart) {
  return {
    dataId: complexPart.dataId,
    dtype: complexPart.dtype,
    shape: complexTensor.shape
  };
}

function complexAbs(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  const xData = backend.texData.get(x.dataId);
  const program = new _complex_abs_gpu.ComplexAbsProgram(x.shape);
  const programInputs = [makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real), makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag)];
  return backend.runWebGLProgram(program, programInputs, programInputs[0].dtype);
}

const complexAbsConfig = {
  kernelName: _tfjsCore.ComplexAbs,
  backendName: 'webgl',
  kernelFunc: complexAbs
};
exports.complexAbsConfig = complexAbsConfig;
},{"@tensorflow/tfjs-core":"kSBl","../complex_abs_gpu":"NIhf"}],"mfXa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConcatProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ConcatProgram {
  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().
  constructor(shapes) {
    this.outputShape = [];
    this.outputShape = _tfjsCore.backend_util.computeOutShape(shapes, 1
    /* axis */
    );
    this.variableNames = shapes.map((_, i) => `T${i}`);
    const offsets = new Array(shapes.length - 1);
    offsets[0] = shapes[0][1];

    for (let i = 1; i < offsets.length; i++) {
      offsets[i] = offsets[i - 1] + shapes[i][1];
    }

    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];

    for (let i = 1; i < offsets.length; i++) {
      const shift = offsets[i - 1];
      snippets.push(`else if (yC < ${offsets[i]}) ` + `setOutput(getT${i}(yR, yC-${shift}));`);
    }

    const lastIndex = offsets.length;
    const lastShift = offsets[offsets.length - 1];
    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${snippets.join('\n        ')}
      }
    `;
  }

}

exports.ConcatProgram = ConcatProgram;
},{"@tensorflow/tfjs-core":"kSBl"}],"F0l2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConcatPackedProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ConcatPackedProgram {
  constructor(shapes, axis) {
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = [];
    this.outputShape = _tfjsCore.backend_util.computeOutShape(shapes, axis);
    const shape = this.outputShape;
    const rank = shape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
    const coords = (0, _packing_util.getChannels)('coords', rank);
    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);
    this.variableNames = shapes.map((_, i) => `T${i}`);
    const offsets = new Array(shapes.length - 1);
    offsets[0] = shapes[0][axis];

    for (let i = 1; i < offsets.length; i++) {
      offsets[i] = offsets[i - 1] + shapes[i][axis];
    }

    const channel = channels[axis];
    const lastChannels = channels.slice(-2);
    const allChannels = channels.join();
    let getValueSnippet = `if (${channel} < ${offsets[0]}) {
        return getChannel(
            getT0(${allChannels}), vec2(${lastChannels.join()}));
        }`;

    for (let i = 1; i < offsets.length; i++) {
      const shift = offsets[i - 1]; // Note: the >= comparison below may seem unnecessary given the check
      // above but is needed to workaround branch execution issues on some
      // devices. It makes all the conditions exclusive without relying on
      // execution order.

      getValueSnippet += `
        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {
          return getChannel(
            getT${i}(${shiftedChannels(channels, channel, shift)}),
            vec2(${shiftedChannels(lastChannels, channel, shift)}));
        }`;
    }

    const lastIndex = offsets.length;
    const shift = offsets[offsets.length - 1];
    getValueSnippet += `
        return getChannel(
          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),
          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;
    this.userCode = `
      float getValue(${channels.map(x => 'int ' + x)}) {
        ${getValueSnippet}
      }

      void main() {
        ${dtype} coords = getOutputCoords();
        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);

        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;
        if (${coords[rank - 1]} < ${shape[rank - 1]}) {
          result.g = getValue(${coords});
        }

        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;
        if (${coords[rank - 2]} < ${shape[rank - 2]}) {
          result.a = getValue(${coords});
        }

        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;
        if (${coords[rank - 2]} < ${shape[rank - 2]} &&
            ${coords[rank - 1]} < ${shape[rank - 1]}) {
          result.b = getValue(${coords});
        }
        setOutput(result);
      }
    `;
  }

}
/**
 * Return an expression for coordinates into a vector where a given channel
 * will be offset by [shift].
 *
 * @param channels the channels to consider
 * @param channel the channel we want shifted
 * @param shift  the amount to subtract from the channel.
 *
 * @returns a string of the form 'x, y-[shift], z' where any one channel can
 * have the shift applied.
 */


exports.ConcatPackedProgram = ConcatPackedProgram;

function shiftedChannels(channels, channel, shift) {
  const channelIdx = channels.indexOf(channel);
  const res = channels.map((c, idx) => {
    if (idx === channelIdx) {
      return `${c} - ${shift}`;
    } else {
      return c;
    }
  });
  return res.join();
}
},{"@tensorflow/tfjs-core":"kSBl","./packing_util":"BqvU","./shader_compiler":"xhhc"}],"uHuu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.imag = imag;
exports.imagConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Identity = require("./Identity");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function imag(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    input
  } = inputs;
  const inputData = backend.texData.get(input.dataId);
  return (0, _Identity.identity)({
    inputs: {
      x: inputData.complexTensorInfos.imag
    },
    backend
  });
}

const imagConfig = {
  kernelName: _tfjsCore.Imag,
  backendName: 'webgl',
  kernelFunc: imag
};
exports.imagConfig = imagConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Identity":"LUQG"}],"T7u8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatImpl = concatImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _concat_gpu = require("../concat_gpu");

var _concat_packed_gpu = require("../concat_packed_gpu");

var _shared = require("../kernel_utils/shared");

var _Complex = require("./Complex");

var _Imag = require("./Imag");

var _Real = require("./Real");

var _Reshape = require("./Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function concatImpl(inputs, axis, backend) {
  const dtype = inputs[0].dtype;

  if (dtype === 'complex64') {
    const reals = inputs.map(t => (0, _Real.real)({
      inputs: {
        input: t
      },
      backend
    }));
    const imags = inputs.map(t => (0, _Imag.imag)({
      inputs: {
        input: t
      },
      backend
    }));
    const realConcated = concatImpl(reals, axis, backend);
    const imagConcated = concatImpl(imags, axis, backend);
    const result = (0, _Complex.complex)({
      inputs: {
        real: realConcated,
        imag: imagConcated
      },
      backend
    });
    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));
    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));
    backend.disposeIntermediateTensorInfo(realConcated);
    backend.disposeIntermediateTensorInfo(imagConcated);
    return result;
  }

  let runOnCpu = backend.shouldExecuteOnCPU(inputs); // Run on cpu if dtype is string. For string, the backend represents it
  // as Uint8Array[], where each Uint8Array is a character. Given that the
  // computation is only on the outer array, uploading the whole data onto
  // gpu is wasteful. Also, currently webgl doesn't have a design to
  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we
  // just run the kernel on cpu if dtype is string.

  if (dtype === 'string') {
    runOnCpu = true;
  }

  if (runOnCpu) {
    // Any concat of n-dimensional tensors across any axis can be reduced to
    // a concatenation of two-dimensional tensors across the axis 1 by first
    // partitioning the axes of the original tensors into those less than the
    // axis to be concatenated and the rest. Then reshape the tensors
    // into a two-dimensional tensor by collapsing these two sets of axes and
    // concatenate the resulting matrices across the axis 1, finally reshaping
    // the result to have the proper shape.
    const tensors2D = inputs.map(t => {
      const innerSize = _tfjsCore.util.sizeFromShape(t.shape.slice(axis));

      const shape = [-1, innerSize];
      return (0, _Reshape.reshape)({
        inputs: {
          x: t
        },
        backend,
        attrs: {
          shape
        }
      });
    });
    const inputsValShapes = tensors2D.map(t => {
      return {
        vals: backend.readSync(t.dataId),
        shape: t.shape
      };
    }); // Concats 2d tensors along axis=1.

    const outShape = _tfjsCore.backend_util.computeOutShape(tensors2D.map(t => t.shape), 1
    /* axis */
    );

    const simplyConcat = tensors2D[0].shape[0] === 1;
    const outVals = (0, _shared.concatImplCPU)(inputsValShapes, outShape, dtype, simplyConcat);

    const finalOutShape = _tfjsCore.backend_util.computeOutShape(inputs.map(t => t.shape), axis);

    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);
    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));
    return outInfo;
  }

  if (inputs.length > (0, _tfjsCore.env)().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {
    const midIndex = Math.floor(inputs.length / 2);
    const leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);
    const rightSide = concatImpl(inputs.slice(midIndex), axis, backend);
    const result = concatImpl([leftSide, rightSide], axis, backend);
    backend.disposeIntermediateTensorInfo(leftSide);
    backend.disposeIntermediateTensorInfo(rightSide);
    return result;
  }

  if ((0, _tfjsCore.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && inputs[0].shape.length > 1) {
    const program = new _concat_packed_gpu.ConcatPackedProgram(inputs.map(t => t.shape), axis);
    return backend.runWebGLProgram(program, inputs, dtype);
  }

  const {
    tensors2D,
    outShape
  } = computeTensors2D(inputs, axis, backend);
  const program = new _concat_gpu.ConcatProgram(tensors2D.map(t => t.shape));
  const result = backend.runWebGLProgram(program, tensors2D, dtype);
  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));
  const reshapedResult = (0, _Reshape.reshape)({
    inputs: {
      x: result
    },
    attrs: {
      shape: outShape
    },
    backend
  });
  backend.disposeIntermediateTensorInfo(result);
  return reshapedResult;
}

function computeTensors2D(inputs, axis, backend) {
  // Any concat of n-dimensional tensors across any axis can be reduced to
  // a concatenation of two-dimensional tensors across the axis 1 by first
  // partitioning the axes of the original tensors into those less than the
  // axis to be concatenated and the rest. Then reshape the tensors
  // into a two-dimensional tensor by collapsing these two sets of axes and
  // concatenate the resulting matrices across the axis 1, finally reshaping
  // the result to have the proper shape.
  const outShape = _tfjsCore.backend_util.computeOutShape(inputs.map(t => t.shape), axis);

  const tensors2D = inputs.map(x => (0, _Reshape.reshape)({
    inputs: {
      x
    },
    attrs: {
      shape: [-1, _tfjsCore.util.sizeFromShape(x.shape.slice(axis))]
    },
    backend
  }));
  return {
    tensors2D,
    outShape
  };
}
},{"@tensorflow/tfjs-core":"kSBl","../concat_gpu":"mfXa","../concat_packed_gpu":"F0l2","../kernel_utils/shared":"cNPH","./Complex":"BU0Z","./Imag":"uHuu","./Real":"Jbfj","./Reshape":"OCN8"}],"sjik":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat = concat;
exports.concatConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Concat_impl = require("./Concat_impl");

var _Identity = require("./Identity");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function concat(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    axis
  } = attrs;

  const $axis = _tfjsCore.util.parseAxisParam(axis, inputs[0].shape)[0];

  const outShape = _tfjsCore.backend_util.computeOutShape(inputs.map(t => t.shape), $axis);

  if (_tfjsCore.util.sizeFromShape(outShape) === 0) {
    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);
  } // Keep only non-empty tensors (ignore tensors with 0 in their shape).


  const $inputs = inputs.filter(t => _tfjsCore.util.sizeFromShape(t.shape) > 0);

  if ($inputs.length === 1) {
    return (0, _Identity.identity)({
      inputs: {
        x: $inputs[0]
      },
      backend
    });
  }

  const shapes = $inputs.map(t => t.shape);

  _tfjsCore.backend_util.assertParamsConsistent(shapes, $axis);

  return (0, _Concat_impl.concatImpl)($inputs, $axis, backend);
}

const concatConfig = {
  kernelName: _tfjsCore.Concat,
  backendName: 'webgl',
  kernelFunc: concat
};
exports.concatConfig = concatConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Concat_impl":"T7u8","./Identity":"LUQG"}],"viLo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Conv3DProgram = exports.Conv2DProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Conv2DProgram {
  constructor(convInfo, addBias = false, activation = null, hasPreluActivationWeights = false, hasLeakyreluAlpha = false) {
    this.variableNames = ['x', 'W'];
    this.outputShape = convInfo.outShape;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
    const inputDepthVec4Remainder = convInfo.inChannels % 4;
    const isChannelsLast = convInfo.dataFormat === 'channelsLast';
    const rowDim = isChannelsLast ? 1 : 2;
    const colDim = isChannelsLast ? 2 : 3;
    const channelDim = isChannelsLast ? 3 : 1;
    let activationSnippet = '',
        applyActivationSnippet = '';

    if (activation) {
      if (hasPreluActivationWeights) {
        activationSnippet = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
      } else if (hasLeakyreluAlpha) {
        activationSnippet = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${activation}
        }`;
      } else {
        activationSnippet = `
          float activation(float x) {
            ${activation}
          }
        `;
      }

      applyActivationSnippet = `result = activation(result);`;
    }

    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';

    if (addBias) {
      this.variableNames.push('bias');
    }

    if (hasPreluActivationWeights) {
      this.variableNames.push('preluActivationWeights');
    }

    if (hasLeakyreluAlpha) {
      this.variableNames.push('leakyreluAlpha');
    }

    this.userCode = `
      ${activationSnippet}

      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${channelDim}];

        ivec2 xRCCorner =
            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          int xR = xRCorner + wR * ${dilationHeight};

          if (xR < 0 || xR >= ${convInfo.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            int xC = xCCorner + wC * ${dilationWidth};

            if (xC < 0 || xC >= ${convInfo.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${isChannelsLast}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${inputDepthVec4Remainder === 1}) {

              if (${isChannelsLast}) {
                dotProd +=
                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *
                    getW(wR, wC, ${inputDepthNearestVec4}, d2);
              } else {
                dotProd +=
                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *
                    getW(wR, wC, ${inputDepthNearestVec4}, d2);
              }

            } else if (${inputDepthVec4Remainder === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${inputDepthNearestVec4}, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)
              );

              if (${isChannelsLast}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${inputDepthNearestVec4}, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${inputDepthVec4Remainder === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${inputDepthNearestVec4}, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)
              );

              if (${isChannelsLast}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${inputDepthNearestVec4}, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
  }

}

exports.Conv2DProgram = Conv2DProgram;

class Conv3DProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'W'];
    this.outputShape = convInfo.outShape;
    const padFront = convInfo.padInfo.front;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const filterDepth = convInfo.filterDepth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
    const inputDepthVec4Remainder = convInfo.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${filterDepth}; wF++) {
          int xF = xFCorner + wF * ${dilationDepth};

          if (xF < 0 || xF >= ${convInfo.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${filterHeight}; wR++) {
            int xR = xRCorner + wR * ${dilationHeight};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${filterWidth}; wC++) {
              int xC = xCCorner + wC * ${dilationWidth};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${inputDepthVec4Remainder === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);
              } else if (${inputDepthVec4Remainder === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${inputDepthVec4Remainder === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.Conv3DProgram = Conv3DProgram;
},{}],"bI75":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Im2ColPackedProgram = void 0;

var _glsl_version = require("./glsl_version");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Im2ColPackedProgram {
  constructor(outputShape, inputShape, convInfo) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = outputShape;
    const {
      filterWidth,
      inChannels,
      strideWidth,
      strideHeight,
      padInfo,
      outWidth,
      dilationWidth,
      dilationHeight,
      dataFormat
    } = convInfo;
    const {
      left,
      top
    } = padInfo;
    const itemsPerBlockRow = inChannels * filterWidth;
    const glsl = (0, _glsl_version.getGlslDifferences)();
    const isChannelsLast = dataFormat === 'channelsLast';
    const rowDim = isChannelsLast ? 0 : 1;
    const colDim = isChannelsLast ? 1 : 2;
    let unrolled = ``;

    for (let row = 0; row <= 1; row++) {
      for (let col = 0; col <= 1; col++) {
        unrolled += `
          blockIndex = rc.y + ${col};
          pos = rc.x + ${row};

          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {
            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${top};
            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});

            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {

              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${strideWidth}. - ${left}.);
              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${itemsPerBlockRow}.) / ${inChannels}.));

              if(d1 < ${inputShape[colDim]} && d1 >= 0) {

                ch = int(mod(float(pos), ${inChannels}.));

                if (${isChannelsLast}) {
                  innerDims = vec2(d1, ch);
                  result[${row * 2 + col}] = getChannel(
                    getA(d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${row * 2 + col}] = getChannel(
                    getA(ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
      }
    }

    this.userCode = `
      void main() {
        ivec2 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${unrolled}

        ${glsl.output} = result;
      }
    `;
  }

}

exports.Im2ColPackedProgram = Im2ColPackedProgram;
},{"./glsl_version":"fXvw"}],"CtO4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2dByMatMul = conv2dByMatMul;
exports.conv2dWithIm2Row = conv2dWithIm2Row;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _im2col_packed_gpu = require("../im2col_packed_gpu");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _mulmat_packed_gpu = require("../mulmat_packed_gpu");

var webgl_util = _interopRequireWildcard(require("../webgl_util"));

var _BatchMatMul_impl = require("./BatchMatMul_impl");

var _Identity = require("./Identity");

var _Reshape = require("./Reshape");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// For 1x1 kernels that iterate through every point in the input, convolution
// can be expressed as matrix multiplication (without need for memory
// remapping).
function conv2dByMatMul({
  x,
  filter,
  convInfo,
  backend,
  bias = null,
  preluActivationWeights = null,
  leakyreluAlpha = 0,
  activation = null
}) {
  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the
  // result from 2D to 4D.
  const xShape = x.shape;
  const xTexData = backend.texData.get(x.dataId);
  const sharedMatMulDim = convInfo.inChannels;
  const outerShapeX = xShape[0] * xShape[1] * xShape[2];
  const outerShapeFilter = convInfo.outChannels;
  const isChannelsLast = convInfo.dataFormat === 'channelsLast';
  const transposeA = false;
  const transposeB = false;
  let out;
  const intermediates = []; // TODO: Once reduction ops are packed, batchMatMul will always be packed
  // and we can remove this condition.

  const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) && sharedMatMulDim > _BatchMatMul_impl.MATMUL_SHARED_DIM_THRESHOLD;
  const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;

  if (batchMatMulWillBeUnpacked || !(0, _tfjsCore.env)().getBool('WEBGL_LAZILY_UNPACK') || !(0, _tfjsCore.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') || !reshapeWillBeExpensive) {
    const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] : xShape[0] * xShape[2] * xShape[3];
    const xReshaped = (0, _Reshape.reshape)({
      inputs: {
        x
      },
      backend,
      attrs: {
        shape: [1, targetShape, convInfo.inChannels]
      }
    });
    const filterReshaped = (0, _Reshape.reshape)({
      inputs: {
        x: filter
      },
      backend,
      attrs: {
        shape: [1, convInfo.inChannels, convInfo.outChannels]
      }
    });
    const result = (0, _BatchMatMul_impl.batchMatMulImpl)({
      a: xReshaped,
      b: filterReshaped,
      transposeA,
      transposeB,
      backend,
      bias,
      activation,
      preluActivationWeights,
      leakyreluAlpha
    });
    out = (0, _Reshape.reshape)({
      inputs: {
        x: result
      },
      backend,
      attrs: {
        shape: convInfo.outShape
      }
    });
    intermediates.push(xReshaped);
    intermediates.push(filterReshaped);
    intermediates.push(result);
  } else {
    // Following optimization is specific to packed |x| with odd row count
    // (For example, in channelLast mode, 'row count' refers to x.shape[2]):
    // we avoid expensive packed 2x2 reshape by padding row count to next,
    // even number. When x.shape[2] is odd, the result of packed batchMatMul is
    // the same (has the same texture layout and and values in the texture) as
    // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like
    // even-rows tensor before the operation and, after the batchMatMul,
    // fix the even-rows result to have odd number of rows.
    const targetShape = isChannelsLast ? xShape[0] * xShape[1] * (xShape[2] + 1) : xShape[0] * xShape[2] * (xShape[3] + 1);
    const xReshaped = {
      dataId: x.dataId,
      shape: [1, targetShape, convInfo.inChannels],
      dtype: x.dtype
    }; // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.
    // Decrementing row count, after batchMatMul->...->compileProgram leads to
    // invalid row count within the reference in GPGPUBinary.inShapeInfos.
    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos
    // in compileProgram method, but that would affect compilation of all
    // programs - instead, provide a copy here, with even row count, before
    // calling batchMatMul->...->compileProgram and after that, the original
    // xTexData.shape is restored.

    const originalXTexDataShape = xTexData.shape;
    xTexData.shape = xTexData.shape.slice();
    xTexData.shape[xTexData.shape.length - 2]++;

    _tfjsCore.util.assert(webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);

    const filterReshaped = (0, _Reshape.reshape)({
      inputs: {
        x: filter
      },
      backend,
      attrs: {
        shape: [1, convInfo.inChannels, convInfo.outChannels]
      }
    });
    intermediates.push(filterReshaped);
    const pointwiseConv = (0, _BatchMatMul_impl.batchMatMulImpl)({
      a: xReshaped,
      b: filterReshaped,
      backend,
      transposeA,
      transposeB,
      bias,
      activation,
      preluActivationWeights,
      leakyreluAlpha
    });
    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);

    _tfjsCore.util.assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed'); // Restore the input shape to original.


    xTexData.shape = originalXTexDataShape; // Set the output shape - there is no need for expensive reshape as data
    // layout is already correct.

    pointwiseConvTexData.shape = convInfo.outShape;
    out = (0, _Identity.identity)({
      inputs: {
        x: pointwiseConv
      },
      backend
    });
    out.shape = convInfo.outShape;
    intermediates.push(pointwiseConv);
  }

  for (const i of intermediates) {
    backend.disposeIntermediateTensorInfo(i);
  }

  return out;
} // Implements the im2row algorithm as outlined in "High Performance
// Convolutional Neural Networks for Document Processing" (Suvisoft, 2006)


function conv2dWithIm2Row({
  x,
  filter,
  convInfo,
  backend,
  bias = null,
  preluActivationWeights = null,
  leakyreluAlpha = 0,
  activation = null
}) {
  // Rearranges conv2d input so each block to be convolved over forms the
  // column of a new matrix with shape [filterWidth * filterHeight *
  // inChannels, outHeight * outWidth]. The filter is also rearranged so each
  // output channel forms a row of a new matrix with shape [outChannels,
  // filterWidth * filterHeight * inChannels]. The convolution is then
  // computed by multiplying these matrices and reshaping the result.
  const {
    filterWidth,
    filterHeight,
    inChannels,
    outWidth,
    outHeight,
    dataFormat
  } = convInfo;
  const isChannelsLast = dataFormat === 'channelsLast';
  const sharedDim = filterWidth * filterHeight * inChannels;
  const numCols = outHeight * outWidth;
  const x2ColShape = [sharedDim, numCols];
  const transposeA = true;
  const transposeB = false;
  const intermediates = [];
  const xSqueezed = (0, _Reshape.reshape)({
    inputs: {
      x
    },
    backend,
    attrs: {
      shape: x.shape.slice(1)
    }
  });
  const w2Row = (0, _Reshape.reshape)({
    inputs: {
      x: filter
    },
    backend,
    attrs: {
      shape: [1, sharedDim, _tfjsCore.util.sizeFromShape(filter.shape) / sharedDim]
    }
  });
  intermediates.push(xSqueezed);
  intermediates.push(w2Row);
  const im2ColProgram = new _im2col_packed_gpu.Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);
  const im2Col = backend.runWebGLProgram(im2ColProgram, [xSqueezed], 'float32');
  const im2ColReshaped = (0, _Reshape.reshape)({
    inputs: {
      x: im2Col
    },
    backend,
    attrs: {
      shape: [1, x2ColShape[0], x2ColShape[1]]
    }
  });
  intermediates.push(im2Col);
  intermediates.push(im2ColReshaped);
  const hasBias = bias != null;
  const hasPreluActivationWeights = preluActivationWeights != null;
  const hasLeakyreluAlpha = activation === 'leakyrelu';
  const fusedActivation = activation ? (0, _kernel_funcs_utils.mapActivationToShaderProgram)(activation, true) : null;
  const matmulProgram = new _mulmat_packed_gpu.MatMulPackedProgram(im2ColReshaped.shape, w2Row.shape, [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
  const inputs = [im2ColReshaped, w2Row];

  if (bias) {
    inputs.push(bias);
  }

  if (hasPreluActivationWeights) {
    inputs.push(preluActivationWeights);
  }

  if (hasLeakyreluAlpha) {
    const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', _tfjsCore.util.createScalarValue(leakyreluAlpha, 'float32'));
    inputs.push($leakyreluAlpha);
    intermediates.push($leakyreluAlpha);
  }

  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');
  const outShape = isChannelsLast ? [1, outHeight, outWidth, convInfo.outChannels] : [1, convInfo.outChannels, outHeight, outWidth];
  const out = (0, _Reshape.reshape)({
    inputs: {
      x: product
    },
    backend,
    attrs: {
      shape: outShape
    }
  });
  intermediates.push(product);

  for (const i of intermediates) {
    backend.disposeIntermediateTensorInfo(i);
  }

  return out;
}
},{"@tensorflow/tfjs-core":"kSBl","../im2col_packed_gpu":"bI75","../kernel_utils/kernel_funcs_utils":"ciwP","../mulmat_packed_gpu":"QKYo","../webgl_util":"u1ML","./BatchMatMul_impl":"kzNd","./Identity":"LUQG","./Reshape":"OCN8"}],"UXwB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2d = conv2d;
exports.conv2DConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _conv_gpu = require("../conv_gpu");

var _Conv2D_impl = require("./Conv2D_impl");

var _Reshape = require("./Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv2d(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter
  } = inputs;
  const {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode
  } = attrs;

  const $dataFormat = _tfjsCore.backend_util.convertConv2DDataFormat(dataFormat);

  const convInfo = _tfjsCore.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false
  /* depthwise */
  , $dataFormat);

  let out;

  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {
    out = (0, _Conv2D_impl.conv2dByMatMul)({
      x,
      filter,
      convInfo,
      backend
    });
  } else if ((0, _tfjsCore.env)().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {
    out = (0, _Conv2D_impl.conv2dWithIm2Row)({
      x,
      filter,
      convInfo,
      backend
    });
  } else {
    const program = new _conv_gpu.Conv2DProgram(convInfo);
    out = backend.runWebGLProgram(program, [x, filter], 'float32');
  }

  const outReshaped = (0, _Reshape.reshape)({
    inputs: {
      x: out
    },
    backend,
    attrs: {
      shape: convInfo.outShape
    }
  });
  backend.disposeIntermediateTensorInfo(out);
  return outReshaped;
}

const conv2DConfig = {
  kernelName: _tfjsCore.Conv2D,
  backendName: 'webgl',
  kernelFunc: conv2d
};
exports.conv2DConfig = conv2DConfig;
},{"@tensorflow/tfjs-core":"kSBl","../conv_gpu":"viLo","./Conv2D_impl":"CtO4","./Reshape":"OCN8"}],"J5U2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Conv3DDerInputProgram = exports.Conv3DDerFilterProgram = exports.Conv2DDerInputProgram = exports.Conv2DDerFilterProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Conv2DDerFilterProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'dy'];
    this.outputShape = convInfo.filterShape;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const isChannelsLast = convInfo.dataFormat === 'channelsLast';
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
            int xR = wR + yR * ${strideHeight} - ${padTop};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
              int xC = wC + yC * ${strideWidth} - ${padLeft};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              if (${isChannelsLast}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.Conv2DDerFilterProgram = Conv2DDerFilterProgram;

class Conv2DDerInputProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'W'];
    this.outputShape = convInfo.inShape;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const isChannelsLast = convInfo.dataFormat === 'channelsLast';
    const padTop = filterHeight - 1 - convInfo.padInfo.top;
    const padLeft = filterWidth - 1 - convInfo.padInfo.left;
    const rowDim = isChannelsLast ? 1 : 2;
    const colDim = isChannelsLast ? 2 : 3;
    const channelDim = isChannelsLast ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${channelDim}];

        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${filterHeight} - 1 - wR;

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${filterWidth} - 1 - wC;

            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {

              if (${isChannelsLast}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.Conv2DDerInputProgram = Conv2DDerInputProgram;

class Conv3DDerFilterProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'dy'];
    this.outputShape = convInfo.filterShape;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padFront = convInfo.padInfo.front;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {
            int xF = wF + yF * ${strideDepth} - ${padFront};

            if (xF < 0 || xF >= ${convInfo.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
              int xR = wR + yR * ${strideHeight} - ${padTop};

              if (xR < 0 || xR >= ${convInfo.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
                int xC = wC + yC * ${strideWidth} - ${padLeft};

                if (xC < 0 || xC >= ${convInfo.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.Conv3DDerFilterProgram = Conv3DDerFilterProgram;

class Conv3DDerInputProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'W'];
    this.outputShape = convInfo.inShape;
    const filterDepth = convInfo.filterDepth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padFront = filterDepth - 1 - convInfo.padInfo.front;
    const padTop = filterHeight - 1 - convInfo.padInfo.top;
    const padLeft = filterWidth - 1 - convInfo.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${filterDepth}; wF++) {
          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;

          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${filterDepth} - 1 - wF;

          for (int wR = 0; wR < ${filterHeight}; wR++) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${filterHeight} - 1 - wR;

            for (int wC = 0; wC < ${filterWidth}; wC++) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${filterWidth} - 1 - wC;

              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.Conv3DDerInputProgram = Conv3DDerInputProgram;
},{}],"LTFn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2DBackpropFilter = conv2DBackpropFilter;
exports.conv2DBackpropFilterConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _conv_backprop_gpu = require("../conv_backprop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv2DBackpropFilter(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    dy
  } = inputs;
  const {
    strides,
    pad,
    dataFormat,
    dimRoundingMode,
    filterShape
  } = attrs;

  const $dataFormat = _tfjsCore.backend_util.convertConv2DDataFormat(dataFormat);

  const convInfo = _tfjsCore.backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1
  /* dilations */
  , pad, dimRoundingMode, false
  /* depthwise */
  , $dataFormat);

  const program = new _conv_backprop_gpu.Conv2DDerFilterProgram(convInfo);
  return backend.runWebGLProgram(program, [x, dy], 'float32');
}

const conv2DBackpropFilterConfig = {
  kernelName: _tfjsCore.Conv2DBackpropFilter,
  backendName: 'webgl',
  kernelFunc: conv2DBackpropFilter
};
exports.conv2DBackpropFilterConfig = conv2DBackpropFilterConfig;
},{"@tensorflow/tfjs-core":"kSBl","../conv_backprop_gpu":"J5U2"}],"x6Y6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv2DBackpropInput = conv2DBackpropInput;
exports.conv2DBackpropInputConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _conv_backprop_gpu = require("../conv_backprop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv2DBackpropInput(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    filter
  } = inputs;
  const {
    inputShape,
    strides,
    pad,
    dataFormat,
    dimRoundingMode
  } = attrs;

  const $dataFormat = _tfjsCore.backend_util.convertConv2DDataFormat(dataFormat);

  const convInfo = _tfjsCore.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1
  /* dilations */
  , pad, dimRoundingMode, false, $dataFormat);

  const program = new _conv_backprop_gpu.Conv2DDerInputProgram(convInfo);
  return backend.runWebGLProgram(program, [dy, filter], 'float32');
}

const conv2DBackpropInputConfig = {
  kernelName: _tfjsCore.Conv2DBackpropInput,
  backendName: 'webgl',
  kernelFunc: conv2DBackpropInput
};
exports.conv2DBackpropInputConfig = conv2DBackpropInputConfig;
},{"@tensorflow/tfjs-core":"kSBl","../conv_backprop_gpu":"J5U2"}],"oJAB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv3D = conv3D;
exports.conv3DConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _conv_gpu = require("../conv_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv3D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter
  } = inputs;
  const {
    strides,
    pad,
    dilations
  } = attrs;

  const convInfo = _tfjsCore.backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);

  const program = new _conv_gpu.Conv3DProgram(convInfo);
  return backend.runWebGLProgram(program, [x, filter], 'float32');
}

const conv3DConfig = {
  kernelName: _tfjsCore.Conv3D,
  backendName: 'webgl',
  kernelFunc: conv3D
};
exports.conv3DConfig = conv3DConfig;
},{"@tensorflow/tfjs-core":"kSBl","../conv_gpu":"viLo"}],"O5Li":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv3DBackpropFilterV2 = conv3DBackpropFilterV2;
exports.conv3DBackpropFilterV2Config = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _conv_backprop_gpu = require("../conv_backprop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv3DBackpropFilterV2(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    dy
  } = inputs;
  const {
    strides,
    pad,
    filterShape
  } = attrs;

  const convInfo = _tfjsCore.backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1
  /* dilations */
  , pad);

  const program = new _conv_backprop_gpu.Conv3DDerFilterProgram(convInfo);
  return backend.runWebGLProgram(program, [x, dy], 'float32');
}

const conv3DBackpropFilterV2Config = {
  kernelName: _tfjsCore.Conv3DBackpropFilterV2,
  backendName: 'webgl',
  kernelFunc: conv3DBackpropFilterV2
};
exports.conv3DBackpropFilterV2Config = conv3DBackpropFilterV2Config;
},{"@tensorflow/tfjs-core":"kSBl","../conv_backprop_gpu":"J5U2"}],"CNdb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conv3DBackpropInput = conv3DBackpropInput;
exports.conv3DBackpropInputConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _conv_backprop_gpu = require("../conv_backprop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function conv3DBackpropInput(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    filter
  } = inputs;
  const {
    pad,
    strides,
    inputShape
  } = attrs;

  const convInfo = _tfjsCore.backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1
  /* dilations */
  , pad);

  const program = new _conv_backprop_gpu.Conv3DDerInputProgram(convInfo);
  return backend.runWebGLProgram(program, [dy, filter], 'float32');
}

const conv3DBackpropInputConfig = {
  kernelName: _tfjsCore.Conv3DBackpropInputV2,
  backendName: 'webgl',
  kernelFunc: conv3DBackpropInput
};
exports.conv3DBackpropInputConfig = conv3DBackpropInputConfig;
},{"@tensorflow/tfjs-core":"kSBl","../conv_backprop_gpu":"J5U2"}],"mMLU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cosConfig = exports.cos = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const COS = _kernel_funcs_utils.CHECK_NAN_SNIPPET_UNARY + `
  return cos(x);
`;
const cos = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: COS
});
exports.cos = cos;
const cosConfig = {
  kernelName: _tfjsCore.Cos,
  backendName: 'webgl',
  kernelFunc: cos
};
exports.cosConfig = cosConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"GsRh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coshConfig = exports.cosh = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const COSH = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`;
const cosh = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: COSH
});
exports.cosh = cosh;
const coshConfig = {
  kernelName: _tfjsCore.Cosh,
  backendName: 'webgl',
  kernelFunc: cosh
};
exports.coshConfig = coshConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"F9Be":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CropAndResizeProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class CropAndResizeProgram {
  constructor(imageShape, boxShape, cropSize, method, extrapolationValue) {
    this.variableNames = ['Image', 'Boxes', 'BoxInd'];
    this.outputShape = [];
    const [batch, imageHeight, imageWidth, depth] = imageShape;
    const [numBoxes] = boxShape;
    const [cropHeight, cropWidth] = cropSize;
    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];
    const methodId = method === 'bilinear' ? 1 : 0;
    const [inputHeightFloat, inputWidthFloat] = [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];
    const [heightRatio, heightScale, inY] = cropHeight > 1 ? [`${(imageHeight - 1) / (cropHeight - 1)}`, '(y2-y1) * height_ratio', `y1*${inputHeightFloat} + float(y)*(height_scale)`] : ['0.0', '0.0', `0.5 * (y1+y2) * ${inputHeightFloat}`];
    const [widthRatio, widthScale, inX] = cropWidth > 1 ? [`${(imageWidth - 1) / (cropWidth - 1)}`, '(x2-x1) * width_ratio', `x1*${inputWidthFloat} + float(x)*(width_scale)`] : ['0.0', '0.0', `0.5 * (x1+x2) * ${inputWidthFloat}`]; // Reference implementation
    // tslint:disable-next-line:max-line-length
    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc

    this.userCode = `
      const float height_ratio = float(${heightRatio});
      const float width_ratio = float(${widthRatio});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${batch}) {
          return;
        }

        float height_scale = ${heightScale};
        float width_scale = ${widthScale};

        float in_y = ${inY};
        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {
          setOutput(float(${extrapolationValue}));
          return;
        }
        float in_x = ${inX};
        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {
          setOutput(float(${extrapolationValue}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${methodId} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }

}

exports.CropAndResizeProgram = CropAndResizeProgram;
},{}],"mjLq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cropAndResizeConfig = exports.cropAndResize = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _crop_and_resize_gpu = require("../crop_and_resize_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cropAndResize = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    image,
    boxes,
    boxInd
  } = inputs;
  const {
    cropSize,
    method,
    extrapolationValue
  } = attrs;
  const program = new _crop_and_resize_gpu.CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);
  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');
};

exports.cropAndResize = cropAndResize;
const cropAndResizeConfig = {
  kernelName: _tfjsCore.CropAndResize,
  backendName: 'webgl',
  kernelFunc: cropAndResize
};
exports.cropAndResizeConfig = cropAndResizeConfig;
},{"@tensorflow/tfjs-core":"kSBl","../crop_and_resize_gpu":"F9Be"}],"hyyT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CumSumProgram = void 0;

var _shader_compiler = require("./shader_compiler");

class CumSumProgram {
  constructor(shape, exclusive, reverse) {
    this.variableNames = ['x'];
    this.customUniforms = [{
      name: 'index',
      type: 'float'
    }];
    this.outputShape = shape;
    const rank = shape.length;
    const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;
    const length = shape[shape.length - 1];
    let condition = '';
    let idxString = ''; // When exclusive is set, the cumsum op becomes roll op that copies the
    // value from the previous index based on the direction specified by the
    // reverse flag.

    if (exclusive) {
      condition = reverse ? `end != ${length - 1}` : 'end != 0';
      idxString = reverse ? 'end + 1' : 'end - 1';
    } else {
      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';
      idxString = reverse ? 'end + pow2' : 'end - pow2';
    }

    this.userCode = `
      void main() {
        ${(0, _shader_compiler.getCoordsDataType)(rank)} coords = getOutputCoords();
        int end = ${getFinalCoord(rank, 'coords')};
        float val = ${val};
        int pow2 = int(pow(2.0, index));
        if (${condition}) {
          int idx = ${idxString};
          ${getFinalCoord(rank, 'coords')} = idx;
          val += getX(${getCoords(rank, 'coords')});
        }
        setOutput(val);
      }
    `;
  }

}

exports.CumSumProgram = CumSumProgram;

function getCoords(rank, name) {
  if (rank === 1) {
    return `${name}`;
  } else if (rank === 2) {
    return `${name}.x, ${name}.y`;
  } else if (rank === 3) {
    return `${name}.x, ${name}.y, ${name}.z`;
  } else if (rank === 4) {
    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;
  } else {
    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);
  }
}

function getFinalCoord(rank, name) {
  if (rank === 1) {
    return `${name}`;
  } else if (rank === 2) {
    return `${name}.y`;
  } else if (rank === 3) {
    return `${name}.z`;
  } else if (rank === 4) {
    return `${name}.w`;
  } else {
    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);
  }
}
},{"./shader_compiler":"xhhc"}],"DR3A":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cumsum = cumsum;
exports.cumsumConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _cumsum_gpu = require("../cumsum_gpu");

var _Identity = require("./Identity");

var _Transpose = require("./Transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cumsum(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    exclusive,
    reverse
  } = attrs;
  const xRank = x.shape.length;

  const permutation = _tfjsCore.backend_util.getAxesPermutation([axis], xRank);

  let permutedX = x;

  if (permutation != null) {
    permutedX = (0, _Transpose.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutation
      }
    });
  }

  const permutedAxis = _tfjsCore.backend_util.getInnerMostAxes(1, xRank)[0];

  if (permutedAxis !== xRank - 1) {
    throw new Error(`WebGL cumsum shader expects an inner-most axis=${x.shape.length - 1} ` + `but got axis=${axis}`);
  }

  const size = permutedX.shape[permutedAxis];
  let result = (0, _Identity.identity)({
    inputs: {
      x: permutedX
    },
    backend
  }); // Use cumsum parallel algorithm, ref:
  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda

  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {
    const program = new _cumsum_gpu.CumSumProgram(permutedX.shape, false, reverse);
    const customValues = [[i]];
    const prevResult = result;
    result = backend.runWebGLProgram(program, [result], result.dtype, customValues);
    backend.disposeIntermediateTensorInfo(prevResult);
  } // For exclusive cumsum, shift the end result in the direction of sum
  // and add 0 to the front index.


  if (exclusive) {
    const program = new _cumsum_gpu.CumSumProgram(permutedX.shape, exclusive, reverse);
    const prevResult = result;
    result = backend.runWebGLProgram(program, [result], result.dtype);
    backend.disposeIntermediateTensorInfo(prevResult);
  }

  if (permutation != null) {
    const reversePermutation = _tfjsCore.backend_util.getUndoAxesPermutation(permutation);

    const reverseTransposedResult = (0, _Transpose.transpose)({
      inputs: {
        x: result
      },
      backend,
      attrs: {
        perm: reversePermutation
      }
    });
    backend.disposeIntermediateTensorInfo(result);
    backend.disposeIntermediateTensorInfo(permutedX);
    return reverseTransposedResult;
  }

  return result;
}

const cumsumConfig = {
  kernelName: _tfjsCore.Cumsum,
  backendName: 'webgl',
  kernelFunc: cumsum
};
exports.cumsumConfig = cumsumConfig;
},{"@tensorflow/tfjs-core":"kSBl","../cumsum_gpu":"hyyT","./Identity":"LUQG","./Transpose":"ukag"}],"M9Zz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.denseBincount = denseBincount;
exports.denseBincountConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function denseBincount(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    weights
  } = inputs;
  const {
    size,
    binaryOutput
  } = attrs;

  if (x.shape.length === 1) {
    const xVals = backend.readSync(x.dataId);
    const weightsVals = backend.readSync(weights.dataId);
    const outVals = (0, _shared.bincountImplCPU)(xVals, weightsVals, weights.dtype, weights.shape, size);
    return backend.makeTensorInfo([size], weights.dtype, outVals);
  } else if (x.shape.length === 2) {
    const xBuf = backend.bufferSync(x);
    const weightsBuf = backend.bufferSync(weights);
    const outBuf = (0, _shared.bincountReduceImplCPU)(xBuf, weightsBuf, size, binaryOutput);
    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);
  }

  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` + `${x.shape.length}.`);
}

const denseBincountConfig = {
  kernelName: _tfjsCore.DenseBincount,
  backendName: 'webgl',
  kernelFunc: denseBincount
};
exports.denseBincountConfig = denseBincountConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH"}],"MLa2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DepthToSpaceProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthToSpaceProgram {
  constructor(outputShape, blockSize, dataFormat) {
    this.variableNames = ['x'];
    this.outputShape = [];
    this.outputShape = outputShape;
    this.blockSize = blockSize;
    this.dataFormat = dataFormat;
    this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${blockSize};
      int offset_h = imod(h, ${blockSize});
      int in_w = w / ${blockSize};
      int offset_w = imod(w, ${blockSize});
      int offset_d = (offset_h * ${blockSize} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }

  getHeightCoordString() {
    if (this.dataFormat === 'NHWC') {
      return `coords[1]`;
    } else {
      return `coords[2]`;
    }
  }

  getWidthCoordString() {
    if (this.dataFormat === 'NHWC') {
      return `coords[2]`;
    } else {
      return `coords[3]`;
    }
  }

  getDepthCoordString() {
    if (this.dataFormat === 'NHWC') {
      return `coords[3]`;
    } else {
      return `coords[1]`;
    }
  }

  getOutputDepthSize() {
    if (this.dataFormat === 'NHWC') {
      return this.outputShape[3];
    } else {
      return this.outputShape[1];
    }
  }

  getInputSamplingString() {
    if (this.dataFormat === 'NHWC') {
      return `getX(b, in_h, in_w, in_d)`;
    } else {
      return `getX(b, in_d, in_h, in_w)`;
    }
  }

}

exports.DepthToSpaceProgram = DepthToSpaceProgram;
},{}],"xZ5c":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthToSpace = depthToSpace;
exports.depthToSpaceConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _depth_to_space_gpu = require("../depth_to_space_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthToSpace(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    blockSize,
    dataFormat
  } = attrs;

  _tfjsCore.util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);

  const batchSize = x.shape[0];
  const inputHeight = dataFormat === 'NHWC' ? x.shape[1] : x.shape[2];
  const inputWidth = dataFormat === 'NHWC' ? x.shape[2] : x.shape[3];
  const inputDepth = dataFormat === 'NHWC' ? x.shape[3] : x.shape[1];
  const outputHeight = inputHeight * blockSize;
  const outputWidth = inputWidth * blockSize;
  const outputDepth = inputDepth / (blockSize * blockSize);
  const outputShape = dataFormat === 'NHWC' ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];
  const program = new _depth_to_space_gpu.DepthToSpaceProgram(outputShape, blockSize, dataFormat);
  return backend.runWebGLProgram(program, [x], x.dtype);
}

const depthToSpaceConfig = {
  kernelName: _tfjsCore.DepthToSpace,
  backendName: 'webgl',
  kernelFunc: depthToSpace
};
exports.depthToSpaceConfig = depthToSpaceConfig;
},{"@tensorflow/tfjs-core":"kSBl","../depth_to_space_gpu":"MLa2"}],"ONBM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DepthwiseConv2DProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthwiseConv2DProgram {
  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {
    this.variableNames = ['x', 'W'];
    this.outputShape = convInfo.outShape;
    const xNumRows = convInfo.inHeight;
    const xNumCols = convInfo.inWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const channelMul = convInfo.outChannels / convInfo.inChannels;
    let activationSnippet = '',
        applyActivationSnippet = '';

    if (activation) {
      if (hasPreluActivation) {
        activationSnippet = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
      } else if (hasLeakyReluAlpha) {
        activationSnippet = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${activation}
        }`;
      } else {
        activationSnippet = `
          float activation(float x) {
            ${activation}
          }
        `;
      }

      applyActivationSnippet = `result = activation(result);`;
    }

    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';

    if (addBias) {
      this.variableNames.push('bias');
    }

    if (hasPreluActivation) {
      this.variableNames.push('preluActivationWeights');
    }

    if (hasLeakyReluAlpha) {
      this.variableNames.push('leakyreluAlpha');
    }

    this.userCode = `
      ${activationSnippet}

      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${channelMul};
        int q = d2 - d1 * ${channelMul};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          int xR = xRCorner + wR * ${dilationHeight};

          if (xR < 0 || xR >= ${xNumRows}) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            int xC = xCCorner + wC * ${dilationWidth};

            if (xC < 0 || xC >= ${xNumCols}) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
  }

}

exports.DepthwiseConv2DProgram = DepthwiseConv2DProgram;
},{}],"s3KE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DepthwiseConvPacked2DProgram = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthwiseConvPacked2DProgram {
  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {
    this.variableNames = ['x', 'W'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = convInfo.outShape;
    const channelMul = convInfo.outChannels / convInfo.inChannels;
    const xNumRows = convInfo.inHeight;
    const xNumCols = convInfo.inWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const texelsAcross = filterWidth;
    let mainLoop = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;

    for (let c = 0; c < filterWidth; c++) {
      mainLoop += `
          vec4 xTexelC${c * 2};
          int xTexelC${c * 2}Ready;
          vec4 xTexelC${c * 2 + 1};
          int xTexelC${c * 2 + 1}Ready;
          vec4 xC${c};`;
    }
    /**
     * This vectorized implementation works by gathering the values needed for
     * each output channel's dot product into vec4's and then multiplying them
     * all together (this happens in the final double for-loop below). Most of
     * the main loop consists of constructing these vec4's with the minimum
     * number of texture2D calls, which means making use of all four returned
     * values from a texture2D call at once.
     */


    for (let r = 0; r < filterHeight; r++) {
      for (let c = 0; c < filterWidth; c++) {
        mainLoop += `
          xTexelC${c * 2} = vec4(0.0);
          xTexelC${c * 2}Ready = 0;
          xTexelC${c * 2 + 1} = vec4(0.0);
          xTexelC${c * 2 + 1}Ready = 0;
          xC${c} = vec4(0.0);`;
      }

      mainLoop += `
        xR = xRCorner + ${r * dilationHeight};
        if (xR >=0 && xR < ${xNumRows}) {
      `;

      for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {
        const colIndex = texelC * 2;
        const c = colIndex * dilationWidth;
        mainLoop += `
          xC = xCCorner + ${c};
          `;

        if (strideWidth === 1) {
          if (colIndex < filterWidth) {
            // If padding is odd, the outer texels have to be composed.
            if (padLeft % 2 === 1) {
              // TODO: Ensure vec4 previous does not result in redundant sample,
              // and avoid setting xTexelRC's that exceed the boundary in the
              // first place rather than resetting them to vec4(0)).
              // To compute xCOffset:
              // - If padding is odd, we must add 1 to ensure we ask for an
              // even-numbered row.
              // - We subtract 2 to access the previous texel.
              mainLoop += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${colIndex}Ready == 0) {
                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= ${xNumCols}) {
                    xTexelC${colIndex}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex}Ready = 1;
                }
              `; // This texel has been read in previous iteration if the dilation
              // is 1.

              if (dilationWidth === 1 && c > 0) {
                mainLoop += `
                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${colIndex}.xy);
                `;
              } else {
                mainLoop += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < ${xNumCols}) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= ${xNumCols}) {
                      previous.zw = vec2(0.0);
                    }

                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);
                  } else {
                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);
                  }
                  `;
              }
            } else {
              // Padding is even, so xRC corresponds to a single texel.
              mainLoop += `
                if (xC >= 0 && xC < ${xNumCols} && xTexelC${colIndex}Ready == 0) {
                  xTexelC${colIndex} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= ${xNumCols}) {
                    xTexelC${colIndex}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex}Ready = 1;
                }

                xC${colIndex} = xTexelC${colIndex};
                `;
            }

            if (c + 1 < filterWidth) {
              // If dilation is even, the second entry should match the first
              // (either both are composed or both are single samples). But if
              // dilation is odd, then the second entry should be the opposite
              // of the first (if the first is composed, the second is a single
              // sample, and vice versa.)
              const nextTexelOffset = padLeft % 2 === 0 ? _tfjsCore.util.nearestLargerEven(dilationWidth) : dilationWidth;

              if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {
                mainLoop += `
                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};

                  if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${colIndex + 1}Ready == 0) {
                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= ${xNumCols}) {
                      xTexelC${colIndex + 1}.zw = vec2(0.0);
                    }
                    xTexelC${colIndex + 1}Ready = 1;
                  }
                  `; // If dilation > 1 then the xRC's will not be able to share any
                // values, so each xRC will require two unique calls to getX.

                if (dilationWidth > 1) {
                  mainLoop += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${colIndex}Ready == 0) {
                      xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);
                      xTexelC${colIndex}Ready = 1;
                    }
                    `;
                }

                mainLoop += `
                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.xy);
                  `;
              } else {
                // If dilation is 1 and padding is odd, we have already read the
                // texel when constructing the previous x value. Here we can
                // simply skip the texture read.
                if (nextTexelOffset === 1) {
                  mainLoop += `
                    xC${colIndex + 1} = xTexelC${colIndex};
                    `;
                } else {
                  mainLoop += `
                    xCOffset = xC + ${nextTexelOffset};

                    if (xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${colIndex + 1}Ready == 0) {
                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= ${xNumCols}) {
                        xTexelC${colIndex + 1}.zw = vec2(0.0);
                      }
                      xTexelC${colIndex + 1}Ready = 1;
                    }

                    xC${colIndex + 1} = xTexelC${colIndex + 1};
                    `;
                }
              }
            }
          }
        } else {
          // stride === 2
          if (c < filterWidth) {
            // Depending on whether padLeft is even or odd, we want either the
            // xy or zw channels from X texels for xC${colIndex}. If padLeft is
            // even, xC${colIndex +1} is simply the zw channels of texels we've
            // already sampled. But if padLeft is odd, xC{$c + 1}.zw will
            // need to come from the xy channels of a new texel, hence the `
            // vec4
            // final` initialized below.
            if (padLeft % 2 === 1) {
              mainLoop += `
                xCOffset = xC + 1 - ${strideWidth};
                if(xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${colIndex}Ready == 0) {
                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= ${xNumCols}) {
                    xTexelC${colIndex}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < ${xNumCols} && xTexelC${colIndex + 1}Ready == 0) {
                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= ${xNumCols}) {
                    xTexelC${colIndex + 1}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex + 1}Ready = 1;
                }

                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);
              `;

              if (c + 1 < filterWidth) {
                mainLoop += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + ${strideWidth};
                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);
                `;
              }
            } else {
              mainLoop += `
                if(xC >= 0 && xC < ${xNumCols} && xTexelC${colIndex}Ready == 0) {
                  xTexelC${colIndex} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= ${xNumCols}) {
                    xTexelC${colIndex}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex}Ready = 1;
                }

                xCOffset = xC + ${strideWidth};
                if(xCOffset >= 0 && xCOffset < ${xNumCols} && xTexelC${colIndex + 1}Ready == 0) {
                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= ${xNumCols}) {
                    xTexelC${colIndex + 1}.zw = vec2(0.);
                  }
                  xTexelC${colIndex + 1}Ready = 1;
                }

                xC${colIndex} = vec4(
                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);
              `;

              if (c + 1 < filterWidth) {
                mainLoop += `
                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);
                `;
              }
            }
          }
        } // localize the dotProd accumulation within the loop, the theory is for
        // GPU with limited cache, accumulate sum across large amount of
        // veriables will cause lots of cache misses. (i.e. 5x5 filter will have
        // 50 variables)


        if (colIndex < filterWidth) {
          mainLoop += `
            wTexel = getW(${r}, ${c}, d1, q);
            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);
          `;

          if (c + 1 < filterWidth) {
            mainLoop += `
              wTexel = getW(${r}, ${c + 1}, d1, q);
              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);
            `;
          }
        }
      }

      mainLoop += `
        }
      `;
    }

    let activationSnippet = '',
        applyActivationSnippet = '';

    if (activation) {
      if (hasPreluActivation) {
        activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
      } else if (hasLeakyReluAlpha) {
        activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${activation}
        }`;
      } else {
        activationSnippet = `vec4 activation(vec4 x) {
          ${activation}
        }`;
      }

      applyActivationSnippet = `result = activation(result);`;
    }

    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';

    if (addBias) {
      this.variableNames.push('bias');
    }

    if (hasPreluActivation) {
      this.variableNames.push('preluActivationWeights');
    }

    if (hasLeakyReluAlpha) {
      this.variableNames.push('leakyreluAlpha');
    }

    this.userCode = `
      ${activationSnippet}

      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {

        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${channelMul};
        int q = d2 - d1 * ${channelMul};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${mainLoop}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
  }

}

exports.DepthwiseConvPacked2DProgram = DepthwiseConvPacked2DProgram;
},{"@tensorflow/tfjs-core":"kSBl"}],"hBFT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthwiseConv2dNative = depthwiseConv2dNative;
exports.depthwiseConv2dNativeConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _conv_gpu_depthwise = require("../conv_gpu_depthwise");

var _conv_packed_gpu_depthwise = require("../conv_packed_gpu_depthwise");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNative(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter
  } = inputs;
  const {
    strides,
    pad,
    dilations,
    dimRoundingMode
  } = attrs;
  let $dilations = dilations;

  if ($dilations == null) {
    $dilations = [1, 1];
  }

  _tfjsCore.util.assert(_tfjsCore.backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);

  const convInfo = _tfjsCore.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true
  /* depthwise */
  );

  let program;

  if ((0, _tfjsCore.env)().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1) {
    program = new _conv_packed_gpu_depthwise.DepthwiseConvPacked2DProgram(convInfo);
  } else {
    program = new _conv_gpu_depthwise.DepthwiseConv2DProgram(convInfo);
  }

  return backend.runWebGLProgram(program, [x, filter], 'float32');
}

const depthwiseConv2dNativeConfig = {
  kernelName: _tfjsCore.DepthwiseConv2dNative,
  backendName: 'webgl',
  kernelFunc: depthwiseConv2dNative
};
exports.depthwiseConv2dNativeConfig = depthwiseConv2dNativeConfig;
},{"@tensorflow/tfjs-core":"kSBl","../conv_gpu_depthwise":"ONBM","../conv_packed_gpu_depthwise":"s3KE"}],"zI4s":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DepthwiseConv2DDerInputProgram = exports.DepthwiseConv2DDerFilterProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthwiseConv2DDerFilterProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'dy'];
    this.outputShape = convInfo.filterShape;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const channelMul = convInfo.outChannels / convInfo.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${channelMul} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
            int xR = wR + yR * ${strideHeight} - ${padTop};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
              int xC = wC + yC * ${strideWidth} - ${padLeft};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.DepthwiseConv2DDerFilterProgram = DepthwiseConv2DDerFilterProgram;

class DepthwiseConv2DDerInputProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'W'];
    this.outputShape = convInfo.inShape;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padTop = filterHeight - 1 - convInfo.padInfo.top;
    const padLeft = filterWidth - 1 - convInfo.padInfo.left;
    const channelMul = convInfo.outChannels / convInfo.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${filterHeight}; wR++) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${filterHeight} - 1 - wR;

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${filterWidth} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${channelMul}; dm++) {
              int d2 = d1 * ${channelMul} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.DepthwiseConv2DDerInputProgram = DepthwiseConv2DDerInputProgram;
},{}],"OcXt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthwiseConv2dNativeBackpropFilter = depthwiseConv2dNativeBackpropFilter;
exports.depthwiseConv2dNativeBackpropFilterConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _conv_backprop_gpu_depthwise = require("../conv_backprop_gpu_depthwise");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNativeBackpropFilter(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    dy
  } = inputs;
  const {
    strides,
    dilations,
    pad,
    dimRoundingMode,
    filterShape
  } = attrs;

  const convInfo = _tfjsCore.backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true
  /* depthwise */
  );

  const program = new _conv_backprop_gpu_depthwise.DepthwiseConv2DDerFilterProgram(convInfo);
  return backend.runWebGLProgram(program, [x, dy], 'float32');
}

const depthwiseConv2dNativeBackpropFilterConfig = {
  kernelName: _tfjsCore.DepthwiseConv2dNativeBackpropFilter,
  backendName: 'webgl',
  kernelFunc: depthwiseConv2dNativeBackpropFilter
};
exports.depthwiseConv2dNativeBackpropFilterConfig = depthwiseConv2dNativeBackpropFilterConfig;
},{"@tensorflow/tfjs-core":"kSBl","../conv_backprop_gpu_depthwise":"zI4s"}],"BDt9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.depthwiseConv2dNativeBackpropInput = depthwiseConv2dNativeBackpropInput;
exports.depthwiseConv2dNativeBackpropInputConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _conv_backprop_gpu_depthwise = require("../conv_backprop_gpu_depthwise");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function depthwiseConv2dNativeBackpropInput(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    filter
  } = inputs;
  const {
    strides,
    dilations,
    pad,
    dimRoundingMode,
    inputShape
  } = attrs;

  const convInfo = _tfjsCore.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true
  /* depthwise */
  );

  const program = new _conv_backprop_gpu_depthwise.DepthwiseConv2DDerInputProgram(convInfo);
  return backend.runWebGLProgram(program, [dy, filter], 'float32');
}

const depthwiseConv2dNativeBackpropInputConfig = {
  kernelName: _tfjsCore.DepthwiseConv2dNativeBackpropInput,
  backendName: 'webgl',
  kernelFunc: depthwiseConv2dNativeBackpropInput
};
exports.depthwiseConv2dNativeBackpropInputConfig = depthwiseConv2dNativeBackpropInputConfig;
},{"@tensorflow/tfjs-core":"kSBl","../conv_backprop_gpu_depthwise":"zI4s"}],"Cg4e":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiagProgram = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DiagProgram {
  constructor(size) {
    this.variableNames = ['X'];
    this.outputShape = [size, size];
    this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }

}

exports.DiagProgram = DiagProgram;
},{}],"FBsW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diag = diag;
exports.diagConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _diag_gpu = require("../diag_gpu");

var _Reshape = require("./Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function diag(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  const outShape = [...x.shape, ...x.shape];

  const xSize = _tfjsCore.util.sizeFromShape(x.shape);

  const flat = (0, _Reshape.reshape)({
    inputs: {
      x
    },
    backend,
    attrs: {
      shape: [xSize]
    }
  });
  const program = new _diag_gpu.DiagProgram(xSize);
  const res = backend.runWebGLProgram(program, [flat], flat.dtype);
  const out = (0, _Reshape.reshape)({
    inputs: {
      x: res
    },
    backend,
    attrs: {
      shape: outShape
    }
  });
  backend.disposeIntermediateTensorInfo(flat);
  backend.disposeIntermediateTensorInfo(res);
  return out;
}

const diagConfig = {
  kernelName: _tfjsCore.Diag,
  backendName: 'webgl',
  kernelFunc: diag
};
exports.diagConfig = diagConfig;
},{"@tensorflow/tfjs-core":"kSBl","../diag_gpu":"Cg4e","./Reshape":"OCN8"}],"jHS7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dilation2DProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Dilation2DProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'W'];
    this.outputShape = convInfo.outShape;
    const {
      inHeight,
      inWidth,
      padInfo,
      strideHeight,
      strideWidth,
      filterHeight,
      filterWidth,
      dilationHeight,
      dilationWidth
    } = convInfo;
    const {
      top: padTop,
      left: padLeft
    } = padInfo;
    this.userCode = `
      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${filterHeight}; h++) {
          int hIn = hBeg + h * ${dilationHeight};

          if (hIn >= 0 && hIn < ${inHeight}) {
            for (int w = 0; w < ${filterWidth}; w++) {
              int wIn = wBeg + w * ${dilationWidth};

              if (wIn >= 0 && wIn < ${inWidth}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }

}

exports.Dilation2DProgram = Dilation2DProgram;
},{}],"X8vo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dilation2D = dilation2D;
exports.dilation2DConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _dilation_gpu = require("../dilation_gpu");

var _Reshape = require("./Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dilation2D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter
  } = inputs;
  const {
    strides,
    pad,
    dilations
  } = attrs;

  const convInfo = _tfjsCore.backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC'
  /* dataFormat */
  , dilations);

  let out;
  const program = new _dilation_gpu.Dilation2DProgram(convInfo);
  out = backend.runWebGLProgram(program, [x, filter], 'float32');
  const outReshaped = (0, _Reshape.reshape)({
    inputs: {
      x: out
    },
    backend,
    attrs: {
      shape: convInfo.outShape
    }
  });
  backend.disposeIntermediateTensorInfo(out);
  return outReshaped;
}

const dilation2DConfig = {
  kernelName: _tfjsCore.Dilation2D,
  backendName: 'webgl',
  kernelFunc: dilation2D
};
exports.dilation2DConfig = dilation2DConfig;
},{"@tensorflow/tfjs-core":"kSBl","../dilation_gpu":"jHS7","./Reshape":"OCN8"}],"q6qu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.einsum = einsum;
exports.einsumConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Multiply = require("./Multiply");

var _Reshape = require("./Reshape");

var _Sum = require("./Sum");

var _Transpose = require("./Transpose");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function einsum(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    equation
  } = attrs;
  const tensors = inputs;

  const {
    allDims,
    summedDims,
    idDims
  } = _tfjsCore.backend_util.decodeEinsumEquation(equation, tensors.length);

  _tfjsCore.backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);

  const {
    path,
    steps
  } = _tfjsCore.backend_util.getEinsumComputePath(summedDims, idDims);

  const nSteps = steps.length;
  let out = null;
  let numDimsRemaining = allDims.length;
  const tensorsToDispose = [];

  for (let i = 0; i < nSteps; ++i) {
    for (const idTerm of steps[i]) {
      const {
        permutationIndices: perm,
        expandDims: dimsToExpand
      } = _tfjsCore.backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);

      let x;

      if (_tfjsCore.backend_util.isIdentityPermutation(perm)) {
        x = tensors[idTerm];
      } else {
        x = (0, _Transpose.transpose)({
          inputs: {
            x: tensors[idTerm]
          },
          backend,
          attrs: {
            perm
          }
        });
        tensorsToDispose.push(x);
      }

      const targetShape = x.shape.slice();

      for (let k = 0; k < dimsToExpand.length; ++k) {
        targetShape.splice(dimsToExpand[k], 0, 1);
      }

      if (!_tfjsCore.util.arraysEqual(x.shape, targetShape)) {
        x = (0, _Reshape.reshape)({
          inputs: {
            x
          },
          backend,
          attrs: {
            shape: targetShape
          }
        });
        tensorsToDispose.push(x);
      }

      if (out === null) {
        out = x;
      } else {
        // tslint:disable-next-line: no-unnecessary-type-assertion
        out = (0, _Multiply.multiply)({
          inputs: {
            a: x,
            b: out
          },
          backend
        });
        tensorsToDispose.push(out);
      }
    }

    if (i < nSteps - 1) {
      if (path[i] >= 0) {
        out = (0, _Sum.sum)({
          inputs: {
            x: out
          },
          backend,
          attrs: {
            axis: path[i] - (allDims.length - numDimsRemaining),
            keepDims: false
          }
        });
        tensorsToDispose.push(out);
      }

      numDimsRemaining--;
    }
  } // Clean up intermediate tensors.


  for (const tensorInfo of tensorsToDispose) {
    if (tensorInfo === out) {
      continue;
    }

    backend.disposeIntermediateTensorInfo(tensorInfo);
  }

  return out;
}

const einsumConfig = {
  kernelName: _tfjsCore.Einsum,
  backendName: 'webgl',
  kernelFunc: einsum
};
exports.einsumConfig = einsumConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Multiply":"xWNx","./Reshape":"OCN8","./Sum":"FqPw","./Transpose":"ukag"}],"pPXB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eluConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;
const ELU_PACKED = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
const elu = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: ELU,
  packedOpSnippet: ELU_PACKED
});
const eluConfig = {
  kernelName: _tfjsCore.Elu,
  backendName: 'webgl',
  kernelFunc: elu
};
exports.eluConfig = eluConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"Oi5K":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eluGradConfig = exports.eluGrad = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binaryop_gpu = require("../binaryop_gpu");

var _binaryop_packed_gpu = require("../binaryop_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;
const ELU_DER_PACKED = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`;

const eluGrad = args => {
  const {
    inputs,
    backend
  } = args;
  const {
    dy,
    y
  } = inputs;
  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new _binaryop_packed_gpu.BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) : new _binaryop_gpu.BinaryOpProgram(ELU_DER, dy.shape, y.shape);
  return backend.runWebGLProgram(program, [dy, y], dy.dtype);
};

exports.eluGrad = eluGrad;
const eluGradConfig = {
  kernelName: _tfjsCore.EluGrad,
  backendName: 'webgl',
  kernelFunc: eluGrad
};
exports.eluGradConfig = eluGradConfig;
},{"@tensorflow/tfjs-core":"kSBl","../binaryop_gpu":"wbV2","../binaryop_packed_gpu":"mFR1"}],"CINd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalConfig = exports.equal = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PACKED_EQUAL = `
  return vec4(equal(a, b));
`;
const EQUAL = `return float(a == b);`;
const equal = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: EQUAL,
  packedOpSnippet: PACKED_EQUAL,
  dtype: 'bool',
  cpuKernelImpl: _shared.equalImplCPU
});
exports.equal = equal;
const equalConfig = {
  kernelName: _tfjsCore.Equal,
  backendName: 'webgl',
  kernelFunc: equal
};
exports.equalConfig = equalConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"Ksgq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.erfConfig = exports.erf = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ERF = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${_tfjsCore.backend_util.ERF_P};
  float a1 = ${_tfjsCore.backend_util.ERF_A1};
  float a2 = ${_tfjsCore.backend_util.ERF_A2};
  float a3 = ${_tfjsCore.backend_util.ERF_A3};
  float a4 = ${_tfjsCore.backend_util.ERF_A4};
  float a5 = ${_tfjsCore.backend_util.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`;
const erf = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: ERF
});
exports.erf = erf;
const erfConfig = {
  kernelName: _tfjsCore.Erf,
  backendName: 'webgl',
  kernelFunc: erf
};
exports.erfConfig = erfConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"zY0s":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expConfig = exports.exp = exports.EXP = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EXP = `return exp(x);`;
exports.EXP = EXP;
const exp = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: EXP,
  packedOpSnippet: EXP,
  cpuKernelImpl: _shared.expImplCPU
});
exports.exp = exp;
const expConfig = {
  kernelName: _tfjsCore.Exp,
  backendName: 'webgl',
  kernelFunc: exp
};
exports.expConfig = expConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"oL99":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expandDims = expandDims;
exports.expandDimsConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Reshape = require("./Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function expandDims(args) {
  const {
    inputs,
    attrs,
    backend
  } = args;
  const {
    dim
  } = attrs;
  const {
    input
  } = inputs;
  const inputRank = input.shape.length;
  const newShape = input.shape.slice();
  let $dim = dim;

  if (dim < 0) {
    // Negative value is counted from the tail of rank.
    _tfjsCore.util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);

    $dim = inputRank + dim + 1;
  }

  newShape.splice($dim, 0, 1);
  return (0, _Reshape.reshape)({
    inputs: {
      x: input
    },
    backend,
    attrs: {
      shape: newShape
    }
  });
}

const expandDimsConfig = {
  kernelName: _tfjsCore.ExpandDims,
  backendName: 'webgl',
  kernelFunc: expandDims
};
exports.expandDimsConfig = expandDimsConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Reshape":"OCN8"}],"VaYT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expm1Config = exports.expm1 = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EXPM1 = `return exp(x) - 1.0;`;
const expm1 = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: EXPM1,
  packedOpSnippet: EXPM1,
  cpuKernelImpl: _shared.expm1ImplCPU
});
exports.expm1 = expm1;
const expm1Config = {
  kernelName: _tfjsCore.Expm1,
  backendName: 'webgl',
  kernelFunc: expm1
};
exports.expm1Config = expm1Config;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"TApJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FFTProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FFTProgram {
  constructor(component, inputShape, inverse) {
    this.variableNames = ['real', 'imag'];
    const innerDim = inputShape[1];
    this.outputShape = inputShape;
    const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;
    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';
    let opString;

    if (component === 'real') {
      opString = 'return real * expR - imag * expI;';
    } else if (component === 'imag') {
      opString = 'return real * expI + imag * expR;';
    } else {
      throw new Error(`FFT component must be either "real" or "imag", got ${component}.`);
    }

    this.userCode = `
      const float exponentMultiplier = ${exponentMultiplierSnippet};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${opString}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${innerDim});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${innerDim}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }

}

exports.FFTProgram = FFTProgram;
},{}],"WmX5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fftImpl = fftImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _fft_gpu = require("../fft_gpu");

var _Complex = require("./Complex");

var _Reshape = require("./Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fftImpl(x, inverse, backend) {
  const xData = backend.texData.get(x.dataId);

  const inputSize = _tfjsCore.util.sizeFromShape(x.shape); // Collapse all outer dimensions to a single batch dimension.


  const innerDimensionSize = x.shape[x.shape.length - 1];
  const batch = inputSize / innerDimensionSize;
  const input2D = (0, _Reshape.reshape)({
    inputs: {
      x
    },
    backend,
    attrs: {
      shape: [batch, innerDimensionSize]
    }
  });
  const xShape = input2D.shape;
  const realProgram = new _fft_gpu.FFTProgram('real', xShape, inverse);
  const imagProgram = new _fft_gpu.FFTProgram('imag', xShape, inverse);
  const inputs = [{
    dataId: xData.complexTensorInfos.real.dataId,
    dtype: xData.complexTensorInfos.real.dtype,
    shape: xShape
  }, {
    dataId: xData.complexTensorInfos.imag.dataId,
    dtype: xData.complexTensorInfos.imag.dtype,
    shape: xShape
  }];
  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');
  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');
  const complexOutput = (0, _Complex.complex)({
    inputs: {
      real: realPart,
      imag: imagPart
    },
    backend
  });
  backend.disposeIntermediateTensorInfo(realPart);
  backend.disposeIntermediateTensorInfo(imagPart);
  const complexOutputReshaped = (0, _Reshape.reshape)({
    inputs: {
      x: complexOutput
    },
    backend,
    attrs: {
      shape: x.shape
    }
  });
  backend.disposeIntermediateTensorInfo(input2D);
  backend.disposeIntermediateTensorInfo(complexOutput);
  return complexOutputReshaped;
}
},{"@tensorflow/tfjs-core":"kSBl","../fft_gpu":"TApJ","./Complex":"BU0Z","./Reshape":"OCN8"}],"Kmz9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fft = fft;
exports.fftConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _FFT_impl = require("./FFT_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fft(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    input
  } = inputs;
  return (0, _FFT_impl.fftImpl)(input, false
  /* inverse */
  , backend);
}

const fftConfig = {
  kernelName: _tfjsCore.FFT,
  backendName: 'webgl',
  kernelFunc: fft
};
exports.fftConfig = fftConfig;
},{"@tensorflow/tfjs-core":"kSBl","./FFT_impl":"WmX5"}],"Y68Y":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FillProgram = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FillProgram {
  constructor(shape, value) {
    this.outputShape = [];
    this.customUniforms = [{
      name: 'value',
      type: 'float'
    }];
    this.variableNames = ['x'];
    this.outputShape = shape;
    this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }

}

exports.FillProgram = FillProgram;
},{}],"LGba":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fill = fill;
exports.fillConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _fill_gpu = require("../fill_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fill(args) {
  const {
    backend,
    attrs
  } = args;
  const {
    shape,
    value
  } = attrs;
  let {
    dtype
  } = attrs;
  dtype = dtype || _tfjsCore.util.inferDtype(value);

  if (dtype === 'string') {
    // String type should be handled in CPU memory.
    const values = _tfjsCore.util.getArrayFromDType(dtype, _tfjsCore.util.sizeFromShape(shape));

    values.fill(value);
    return backend.makeTensorInfo(shape, dtype, values);
  } else {
    const program = new _fill_gpu.FillProgram(shape, value);
    const customValues = [[value]];
    return backend.runWebGLProgram(program, [], dtype, customValues);
  }
}

const fillConfig = {
  kernelName: _tfjsCore.Fill,
  backendName: 'webgl',
  kernelFunc: fill
};
exports.fillConfig = fillConfig;
},{"@tensorflow/tfjs-core":"kSBl","../fill_gpu":"Y68Y"}],"i85L":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FlipLeftRightProgram = void 0;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FlipLeftRightProgram {
  constructor(imageShape) {
    this.variableNames = ['Image'];
    this.outputShape = [];
    const imageWidth = imageShape[2];
    this.outputShape = imageShape;
    this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${imageWidth} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${imageWidth}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }

}

exports.FlipLeftRightProgram = FlipLeftRightProgram;
},{}],"gC7C":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flipLeftRightConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _flip_left_right_gpu = require("../flip_left_right_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const flipLeftRightConfig = {
  kernelName: _tfjsCore.FlipLeftRight,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    backend
  }) => {
    const {
      image
    } = inputs;
    const webglBackend = backend;
    const program = new _flip_left_right_gpu.FlipLeftRightProgram(image.shape);
    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);
    return output;
  }
};
exports.flipLeftRightConfig = flipLeftRightConfig;
},{"@tensorflow/tfjs-core":"kSBl","../flip_left_right_gpu":"i85L"}],"SsfV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floorConfig = exports.floor = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FLOOR = `return floor(x);`;
const floor = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: FLOOR,
  packedOpSnippet: FLOOR,
  cpuKernelImpl: _shared.floorImplCPU
});
exports.floor = floor;
const floorConfig = {
  kernelName: _tfjsCore.Floor,
  backendName: 'webgl',
  kernelFunc: floor
};
exports.floorConfig = floorConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"UMGZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floorDivConfig = exports.floorDiv = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// We use native integer division to deal with floating point imprecision. Since
// we implement floor division and glsl implements truncated division, we
// correct for this by subtracting 1 from result when the result is negative and
// there is a remainder.
const INT_DIV = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`;
const INT_DIV_PACKED = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`;
const floorDiv = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: INT_DIV,
  packedOpSnippet: INT_DIV_PACKED,
  dtype: 'int32'
});
exports.floorDiv = floorDiv;
const floorDivConfig = {
  kernelName: _tfjsCore.FloorDiv,
  backendName: 'webgl',
  kernelFunc: floorDiv
};
exports.floorDivConfig = floorDivConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"mavs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FromPixelsProgram = void 0;

var _glsl_version = require("../../glsl_version");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FromPixelsProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    const glsl = (0, _glsl_version.getGlslDifferences)();
    const [height, width] = outputShape;
    this.outputShape = outputShape;
    this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);

        vec4 values = ${glsl.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }

}

exports.FromPixelsProgram = FromPixelsProgram;
},{"../../glsl_version":"fXvw"}],"XUB0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FromPixelsPackedProgram = void 0;

var _glsl_version = require("../../glsl_version");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FromPixelsPackedProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = false;
    this.packedOutput = true;
    const glsl = (0, _glsl_version.getGlslDifferences)();
    const [height, width] = outputShape;
    this.outputShape = outputShape;
    this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${width}.0, ${height}.0);
            vec4 values = ${glsl.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${glsl.output} = result;
      }
    `;
  }

}

exports.FromPixelsPackedProgram = FromPixelsPackedProgram;
},{"../../glsl_version":"fXvw"}],"ryYF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromPixelsConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _tex_util = require("../tex_util");

var _from_pixels_gpu = require("./FromPixels_utils/from_pixels_gpu");

var _from_pixels_packed_gpu = require("./FromPixels_utils/from_pixels_packed_gpu");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fromPixelsConfig = {
  kernelName: _tfjsCore.FromPixels,
  backendName: 'webgl',
  kernelFunc: fromPixels
};
exports.fromPixelsConfig = fromPixelsConfig;
let fromPixels2DContext;

function fromPixels(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  let {
    pixels
  } = inputs;
  const {
    numChannels
  } = attrs;
  const isVideo = typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement;
  const isImage = typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement;
  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];
  const texShape = [height, width];
  const outShape = [height, width, numChannels];

  if (isImage || isVideo) {
    if (fromPixels2DContext == null) {
      fromPixels2DContext = document.createElement('canvas').getContext('2d');
    }

    fromPixels2DContext.canvas.width = width;
    fromPixels2DContext.canvas.height = height;
    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);
    pixels = fromPixels2DContext.canvas;
  }

  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32'); // This is a byte texture with pixels.

  backend.texData.get(tempPixelHandle.dataId).usage = _tex_util.TextureUsage.PIXELS;
  backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);
  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK') ? new _from_pixels_packed_gpu.FromPixelsPackedProgram(outShape) : new _from_pixels_gpu.FromPixelsProgram(outShape);
  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');
  backend.disposeData(tempPixelHandle.dataId);
  return res;
}
},{"@tensorflow/tfjs-core":"kSBl","../tex_util":"jAWT","./FromPixels_utils/from_pixels_gpu":"mavs","./FromPixels_utils/from_pixels_packed_gpu":"XUB0"}],"wsrZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fusedConv2d = fusedConv2d;
exports.fusedConv2DConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _conv_gpu = require("../conv_gpu");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _Conv2D_impl = require("./Conv2D_impl");

var _Reshape = require("./Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fusedConv2d(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter,
    bias,
    preluActivationWeights
  } = inputs;
  const {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode,
    activation,
    leakyreluAlpha
  } = attrs;

  const $dataFormat = _tfjsCore.backend_util.convertConv2DDataFormat(dataFormat);

  const convInfo = _tfjsCore.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false
  /* depthwise */
  , $dataFormat);

  let out;
  const intermediates = [];

  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {
    out = (0, _Conv2D_impl.conv2dByMatMul)({
      x,
      filter,
      convInfo,
      backend,
      bias,
      activation,
      preluActivationWeights,
      leakyreluAlpha
    });
  } else if ((0, _tfjsCore.env)().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {
    out = (0, _Conv2D_impl.conv2dWithIm2Row)({
      x,
      filter,
      convInfo,
      backend,
      bias,
      activation,
      preluActivationWeights,
      leakyreluAlpha
    });
  } else {
    const hasBias = bias != null;
    const hasPreluActivationWeights = preluActivationWeights != null;
    const hasLeakyreluAlpha = activation === 'leakyrelu';
    const fusedActivation = activation ? (0, _kernel_funcs_utils.mapActivationToShaderProgram)(activation, false) : null;
    const program = new _conv_gpu.Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
    const inputs = [x, filter];

    if (bias) {
      inputs.push(bias);
    }

    if (preluActivationWeights) {
      inputs.push(preluActivationWeights);
    }

    if (hasLeakyreluAlpha) {
      const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', _tfjsCore.util.createScalarValue(leakyreluAlpha, 'float32'));
      inputs.push($leakyreluAlpha);
      intermediates.push($leakyreluAlpha);
    }

    out = backend.runWebGLProgram(program, inputs, 'float32');
  }

  const outReshaped = (0, _Reshape.reshape)({
    inputs: {
      x: out
    },
    backend,
    attrs: {
      shape: convInfo.outShape
    }
  });
  intermediates.push(out);
  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return outReshaped;
}

const fusedConv2DConfig = {
  kernelName: _tfjsCore.FusedConv2D,
  backendName: 'webgl',
  kernelFunc: fusedConv2d
};
exports.fusedConv2DConfig = fusedConv2DConfig;
},{"@tensorflow/tfjs-core":"kSBl","../conv_gpu":"viLo","../kernel_utils/kernel_funcs_utils":"ciwP","./Conv2D_impl":"CtO4","./Reshape":"OCN8"}],"FsyW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fusedDepthwiseConv2D = fusedDepthwiseConv2D;
exports.fusedDepthwiseConv2DConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _conv_gpu_depthwise = require("../conv_gpu_depthwise");

var _conv_packed_gpu_depthwise = require("../conv_packed_gpu_depthwise");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fusedDepthwiseConv2D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter,
    bias,
    preluActivationWeights
  } = inputs;
  const {
    strides,
    pad,
    dilations,
    dimRoundingMode,
    activation,
    leakyreluAlpha
  } = attrs;
  const intermediates = [];
  let $dilations = dilations;

  if ($dilations == null) {
    $dilations = [1, 1];
  }

  _tfjsCore.util.assert(_tfjsCore.backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);

  const convInfo = _tfjsCore.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true
  /* depthwise */
  );

  const shouldPackDepthwiseConv = (0, _tfjsCore.env)().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;
  const fusedActivation = activation ? (0, _kernel_funcs_utils.mapActivationToShaderProgram)(activation, shouldPackDepthwiseConv) : null;
  const programInputs = [x, filter];
  const hasBias = bias != null;
  const hasPreluActivationWeights = preluActivationWeights != null;
  const hasLeakyreluAlpha = activation === 'leakyrelu';

  if (hasBias) {
    programInputs.push(bias);
  }

  if (hasPreluActivationWeights) {
    programInputs.push(preluActivationWeights);
  }

  if (hasLeakyreluAlpha) {
    const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', _tfjsCore.util.createScalarValue(leakyreluAlpha, 'float32'));
    programInputs.push($leakyreluAlpha);
    intermediates.push($leakyreluAlpha);
  }

  let program;

  if (shouldPackDepthwiseConv) {
    program = new _conv_packed_gpu_depthwise.DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
  } else {
    program = new _conv_gpu_depthwise.DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
  }

  const result = backend.runWebGLProgram(program, programInputs, 'float32');
  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return result;
}

const fusedDepthwiseConv2DConfig = {
  kernelName: _tfjsCore.FusedDepthwiseConv2D,
  backendName: 'webgl',
  kernelFunc: fusedDepthwiseConv2D
};
exports.fusedDepthwiseConv2DConfig = fusedDepthwiseConv2DConfig;
},{"@tensorflow/tfjs-core":"kSBl","../conv_gpu_depthwise":"ONBM","../conv_packed_gpu_depthwise":"s3KE","../kernel_utils/kernel_funcs_utils":"ciwP"}],"uFxL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GatherNDProgram = void 0;

var _shader_compiler = require("./shader_compiler");

class GatherNDProgram {
  constructor(sliceDim, strides, shape) {
    this.sliceDim = sliceDim;
    this.strides = strides;
    this.variableNames = ['x', 'indices'];
    this.outputShape = shape;
    const stridesType = (0, _shader_compiler.getCoordsDataType)(strides.length);
    const dtype = (0, _shader_compiler.getCoordsDataType)(shape.length);
    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';
    this.userCode = `
        ${stridesType} strides = ${stridesType}(${this.strides});
         void main() {
          ${dtype} coords = getOutputCoords();
          int flattenIndex = 0;
          for (int j = 0; j < ${this.sliceDim}; j++) {
            int index = round(getIndices(coords[0], j));
            flattenIndex += index * ${strideString};
          }
          setOutput(getX(flattenIndex, coords[1]));
        }
      `;
  }

}

exports.GatherNDProgram = GatherNDProgram;
},{"./shader_compiler":"xhhc"}],"DXdr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gatherNd = gatherNd;
exports.gatherNdConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _gather_nd_gpu = require("../gather_nd_gpu");

var _shared = require("../kernel_utils/shared");

var _Reshape = require("./Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gatherNd(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    params,
    indices
  } = inputs;
  const indicesShape = indices.shape;
  const sliceRank = indicesShape[indicesShape.length - 1];

  const paramsSize = _tfjsCore.util.sizeFromShape(params.shape);

  const [resultShape, numSlices, sliceSize, strides] = _tfjsCore.backend_util.prepareAndValidate(params, indices);

  const flattenIndices = (0, _Reshape.reshape)({
    inputs: {
      x: indices
    },
    backend,
    attrs: {
      shape: [numSlices, sliceRank]
    }
  });
  const flattenX = (0, _Reshape.reshape)({
    inputs: {
      x: params
    },
    backend,
    attrs: {
      shape: [_tfjsCore.util.sizeFromShape(params.shape) / sliceSize, sliceSize]
    }
  });

  if (backend.shouldExecuteOnCPU([params, indices]) || params.dtype === 'string') {
    const indicesData = backend.readSync(indices.dataId);
    const paramsBuf = backend.bufferSync(params);
    const outValue = (0, _shared.gatherNdImplCPU)(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);
    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);
  }

  const program = new _gather_nd_gpu.GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);
  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);
  const reshaped = (0, _Reshape.reshape)({
    inputs: {
      x: res
    },
    backend,
    attrs: {
      shape: resultShape
    }
  });
  backend.disposeIntermediateTensorInfo(flattenIndices);
  backend.disposeIntermediateTensorInfo(flattenX);
  backend.disposeIntermediateTensorInfo(res);
  return reshaped;
}

const gatherNdConfig = {
  kernelName: _tfjsCore.GatherNd,
  backendName: 'webgl',
  kernelFunc: gatherNd
};
exports.gatherNdConfig = gatherNdConfig;
},{"@tensorflow/tfjs-core":"kSBl","../gather_nd_gpu":"uFxL","../kernel_utils/shared":"cNPH","./Reshape":"OCN8"}],"avEA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GatherProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class GatherProgram {
  constructor(aShape, outputShape) {
    this.variableNames = ['A', 'indices'];
    this.outputShape = outputShape;
    this.rank = outputShape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
    const sourceCoords = getSourceCoords(aShape, 2);
    this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        setOutput(getA(${sourceCoords}));
      }
    `;
  }

} // The input and output are always flattened into rank 4 tensors.


exports.GatherProgram = GatherProgram;

function getSourceCoords(aShape, axis) {
  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
  const sourceCoords = [];

  for (let i = 0; i < aShape.length; i++) {
    if (i === 2) {
      sourceCoords.push('int(getIndices(resRC.x, resRC.z))');
    } else {
      sourceCoords.push(`${currentCoords[i]}`);
    }
  }

  return sourceCoords.join();
}
},{"./shader_compiler":"xhhc"}],"SjQ7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gatherV2 = gatherV2;
exports.gatherV2Config = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _gather_gpu = require("../gather_gpu");

var _shared = require("../kernel_utils/shared");

var _Reshape = require("./Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gatherV2(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    indices
  } = inputs;
  const {
    axis,
    batchDims
  } = attrs;

  const parsedAxis = _tfjsCore.util.parseAxisParam(axis, x.shape)[0];

  const shapeInfo = _tfjsCore.backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);

  const indicesSize = _tfjsCore.util.sizeFromShape(indices.shape);

  const toDispose = [];
  const flattenX = (0, _Reshape.reshape)({
    inputs: {
      x
    },
    backend,
    attrs: {
      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]
    }
  });
  const flattenIndex = (0, _Reshape.reshape)({
    inputs: {
      x: indices
    },
    backend,
    attrs: {
      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]
    }
  });
  toDispose.push(flattenX);
  toDispose.push(flattenIndex);
  const flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];

  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {
    const indicesBuf = backend.bufferSync(flattenIndex);
    const xBuf = backend.bufferSync(flattenX);
    const outBuf = (0, _shared.gatherV2ImplCPU)(xBuf, indicesBuf, flattenOutputShape);
    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);
  }

  const program = new _gather_gpu.GatherProgram(flattenX.shape, flattenOutputShape);
  const res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);
  toDispose.push(res);
  const reshaped = (0, _Reshape.reshape)({
    inputs: {
      x: res
    },
    backend,
    attrs: {
      shape: shapeInfo.outputShape
    }
  });
  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return reshaped;
}

const gatherV2Config = {
  kernelName: _tfjsCore.GatherV2,
  backendName: 'webgl',
  kernelFunc: gatherV2
};
exports.gatherV2Config = gatherV2Config;
},{"@tensorflow/tfjs-core":"kSBl","../gather_gpu":"avEA","../kernel_utils/shared":"cNPH","./Reshape":"OCN8"}],"mJSN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.greaterConfig = exports.greater = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GREATER = `return float(a > b);`;
const GREATER_PACKED = `
  return vec4(greaterThan(a, b));
`;
const greater = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: GREATER,
  packedOpSnippet: GREATER_PACKED,
  cpuKernelImpl: _shared.greaterImplCPU,
  dtype: 'bool'
});
exports.greater = greater;
const greaterConfig = {
  kernelName: _tfjsCore.Greater,
  backendName: 'webgl',
  kernelFunc: greater
};
exports.greaterConfig = greaterConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"slmh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.greaterEqualConfig = exports.greaterEqual = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GREATER_EQUAL = `return float(a >= b);`;
const GREATER_EQUAL_PACKED = `
  return vec4(greaterThanEqual(a, b));
`;
const greaterEqual = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: GREATER_EQUAL,
  packedOpSnippet: GREATER_EQUAL_PACKED,
  dtype: 'bool',
  cpuKernelImpl: _shared.greaterEqualImplCPU
});
exports.greaterEqual = greaterEqual;
const greaterEqualConfig = {
  kernelName: _tfjsCore.GreaterEqual,
  backendName: 'webgl',
  kernelFunc: greaterEqual
};
exports.greaterEqualConfig = greaterEqualConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"fOWs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ifft = ifft;
exports.ifftConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _FFT_impl = require("./FFT_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ifft(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    input
  } = inputs;
  return (0, _FFT_impl.fftImpl)(input, true
  /* inverse */
  , backend);
}

const ifftConfig = {
  kernelName: _tfjsCore.IFFT,
  backendName: 'webgl',
  kernelFunc: ifft
};
exports.ifftConfig = ifftConfig;
},{"@tensorflow/tfjs-core":"kSBl","./FFT_impl":"WmX5"}],"ZxhQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFiniteConfig = exports.isFinite = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IS_FINITE = `return float(!isnan(x) && !isinf(x));`;
const isFinite = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: IS_FINITE,
  dtype: 'bool'
});
exports.isFinite = isFinite;
const isFiniteConfig = {
  kernelName: _tfjsCore.IsFinite,
  backendName: 'webgl',
  kernelFunc: isFinite
};
exports.isFiniteConfig = isFiniteConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"MgGt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isInfConfig = exports.isInf = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IS_INF = `return float(isinf(x));`;
const isInf = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: IS_INF,
  dtype: 'bool'
});
exports.isInf = isInf;
const isInfConfig = {
  kernelName: _tfjsCore.IsInf,
  backendName: 'webgl',
  kernelFunc: isInf
};
exports.isInfConfig = isInfConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"q4GM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNaNConfig = exports.isNaN = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IS_NAN = `return float(isnan(x));`;
const isNaN = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: IS_NAN,
  dtype: 'bool'
});
exports.isNaN = isNaN;
const isNaNConfig = {
  kernelName: _tfjsCore.IsNan,
  backendName: 'webgl',
  kernelFunc: isNaN
};
exports.isNaNConfig = isNaNConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"ddK3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lessConfig = exports.less = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LESS = `return float(a < b);`;
const LESS_PACKED = `
  return vec4(lessThan(a, b));
`;
const less = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: LESS,
  packedOpSnippet: LESS_PACKED,
  cpuKernelImpl: _shared.lessImplCPU,
  dtype: 'bool'
});
exports.less = less;
const lessConfig = {
  kernelName: _tfjsCore.Less,
  backendName: 'webgl',
  kernelFunc: less
};
exports.lessConfig = lessConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"Pgrg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lessEqualConfig = exports.lessEqual = exports.LESS_EQUAL_PACKED = exports.LESS_EQUAL = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LESS_EQUAL = `return float(a <= b);`;
exports.LESS_EQUAL = LESS_EQUAL;
const LESS_EQUAL_PACKED = `
  return vec4(lessThanEqual(a, b));
`;
exports.LESS_EQUAL_PACKED = LESS_EQUAL_PACKED;
const lessEqual = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: LESS_EQUAL,
  packedOpSnippet: LESS_EQUAL_PACKED,
  cpuKernelImpl: _shared.lessEqualImplCPU,
  dtype: 'bool'
});
exports.lessEqual = lessEqual;
const lessEqualConfig = {
  kernelName: _tfjsCore.LessEqual,
  backendName: 'webgl',
  kernelFunc: lessEqual
};
exports.lessEqualConfig = lessEqualConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"DW7C":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linSpace = linSpace;
exports.linSpaceConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function linSpace(args) {
  const {
    backend,
    attrs
  } = args;
  const {
    start,
    stop,
    num
  } = attrs; // TODO: Use CPU implementation due to the precision problem in Safari.

  const outVals = (0, _shared.linSpaceImplCPU)(start, stop, num);
  return backend.makeTensorInfo([outVals.length], 'float32', outVals);
}

const linSpaceConfig = {
  kernelName: _tfjsCore.LinSpace,
  backendName: 'webgl',
  kernelFunc: linSpace
};
exports.linSpaceConfig = linSpaceConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH"}],"QMgc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logConfig = exports.log = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LOG = `if (x < 0.0) return NAN;
  return log(x);`;
const LOG_PACKED = `
  vec4 result = log(x);
  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));
  result.r = isNaN.r == 1.0 ? NAN : result.r;
  result.g = isNaN.g == 1.0 ? NAN : result.g;
  result.b = isNaN.b == 1.0 ? NAN : result.b;
  result.a = isNaN.a == 1.0 ? NAN : result.a;

  return result;
`;
const log = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: LOG,
  packedOpSnippet: LOG_PACKED,
  cpuKernelImpl: _shared.logImplCPU
});
exports.log = log;
const logConfig = {
  kernelName: _tfjsCore.Log,
  backendName: 'webgl',
  kernelFunc: log
};
exports.logConfig = logConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"cToW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log1pConfig = exports.log1p = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LOG1P = `return log(1.0 + x);`;
const log1p = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: LOG1P
});
exports.log1p = log1p;
const log1pConfig = {
  kernelName: _tfjsCore.Log1p,
  backendName: 'webgl',
  kernelFunc: log1p
};
exports.log1pConfig = log1pConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"bfnB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logicalAndConfig = exports.logicalAnd = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;
const LOGICAL_AND_PACKED = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`;
const logicalAnd = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: LOGICAL_AND,
  packedOpSnippet: LOGICAL_AND_PACKED,
  dtype: 'bool'
});
exports.logicalAnd = logicalAnd;
const logicalAndConfig = {
  kernelName: _tfjsCore.LogicalAnd,
  backendName: 'webgl',
  kernelFunc: logicalAnd
};
exports.logicalAndConfig = logicalAndConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"crq9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logicalNotConfig = exports.logicalNot = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LOGICAL_NOT = `return float(!(x >= 1.0));`;
const logicalNot = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: LOGICAL_NOT
});
exports.logicalNot = logicalNot;
const logicalNotConfig = {
  kernelName: _tfjsCore.LogicalNot,
  backendName: 'webgl',
  kernelFunc: logicalNot
};
exports.logicalNotConfig = logicalNotConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"QPdQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logicalOrConfig = exports.logicalOr = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;
const LOGICAL_OR_PACKED = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`;
const logicalOr = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: LOGICAL_OR,
  packedOpSnippet: LOGICAL_OR_PACKED,
  dtype: 'bool'
});
exports.logicalOr = logicalOr;
const logicalOrConfig = {
  kernelName: _tfjsCore.LogicalOr,
  backendName: 'webgl',
  kernelFunc: logicalOr
};
exports.logicalOrConfig = logicalOrConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"UNBn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LRNProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LRNProgram {
  constructor(xShape, radius, bias, alpha, beta) {
    this.variableNames = ['x'];
    this.outputShape = [];
    const rad = radius;
    const maxD = xShape[3] - 1;
    this.outputShape = xShape; // optimize pow(bias + alpha * sum, -beta)
    // src: https://github.com/tensorflow/tensorflow/..
    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..
    // tensorflow/core/kernels/mkl_lrn_op.cc#L320

    let powOperator;
    const basis = `float(${bias}) + float(${alpha}) * sum`;

    if (beta === 0.5) {
      powOperator = `inversesqrt(${basis})`;
    } else if (beta === 1.0) {
      powOperator = `1.0/(${basis})`;
    } else {
      powOperator = `exp(log(${basis}) * float(-${beta}));`;
    }

    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${rad}; j <= ${rad}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${maxD}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${powOperator};
        setOutput(val);
      }
    `;
  }

}

exports.LRNProgram = LRNProgram;
},{}],"Ej1v":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LRNPackedProgram = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LRNPackedProgram {
  constructor(xShape, radius, bias, alpha, beta) {
    this.variableNames = ['x'];
    this.outputShape = [];
    this.packedInputs = true;
    this.packedOutput = true;
    const rad = radius;
    const maxD = xShape[3] - 1;
    this.outputShape = xShape; // optimize pow(bias + alpha * sum, -beta)
    // src: https://github.com/tensorflow/tensorflow/..
    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..
    // tensorflow/core/kernels/mkl_lrn_op.cc#L320

    let powOperator;
    const basis = `float(${bias}) + float(${alpha}) * sum`;

    if (beta === 0.5) {
      powOperator = `inversesqrt(${basis})`;
    } else if (beta === 1.0) {
      powOperator = `1.0/(${basis})`;
    } else {
      powOperator = `exp(log(${basis}) * float(-${beta}));`;
    }

    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${rad};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${rad}; j <= ${rad}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${powOperator};
        setOutput(result);
      }
    `;
  }

}

exports.LRNPackedProgram = LRNPackedProgram;
},{}],"LYtN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LRNConfig = exports.lrn = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _lrn_gpu = require("../lrn_gpu");

var _lrn_packed_gpu = require("../lrn_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lrn = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    depthRadius,
    bias,
    alpha,
    beta
  } = attrs;
  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_NORMALIZATION') ? new _lrn_packed_gpu.LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) : new _lrn_gpu.LRNProgram(x.shape, depthRadius, bias, alpha, beta);
  return backend.runWebGLProgram(program, [x], x.dtype);
}; // tslint:disable-next-line: variable-name


exports.lrn = lrn;
const LRNConfig = {
  kernelName: _tfjsCore.LRN,
  backendName: 'webgl',
  kernelFunc: lrn
};
exports.LRNConfig = LRNConfig;
},{"@tensorflow/tfjs-core":"kSBl","../lrn_gpu":"UNBn","../lrn_packed_gpu":"Ej1v"}],"SBA2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LRNGradProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LRNGradProgram {
  constructor(inputShape, depthRadius, bias, alpha, beta) {
    this.variableNames = ['inputImage', 'outputImage', 'dy'];
    this.outputShape = [];
    this.outputShape = inputShape;
    this.depth = inputShape[3];
    this.depthRadius = depthRadius;
    this.bias = bias;
    this.alpha = alpha;
    this.beta = beta;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${depthRadius})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${depthRadius} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${alpha}) * norm + float(${bias});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${alpha})
                * float(${beta})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${beta});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }

}

exports.LRNGradProgram = LRNGradProgram;
},{}],"axL9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LRNGradConfig = exports.lrnGrad = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _lrn_grad_gpu = require("../lrn_grad_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lrnGrad = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    y,
    dy
  } = inputs;
  const {
    depthRadius,
    bias,
    alpha,
    beta
  } = attrs;
  const program = new _lrn_grad_gpu.LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);
  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);
}; // tslint:disable-next-line: variable-name


exports.lrnGrad = lrnGrad;
const LRNGradConfig = {
  kernelName: _tfjsCore.LRNGrad,
  backendName: 'webgl',
  kernelFunc: lrnGrad
};
exports.LRNGradConfig = LRNGradConfig;
},{"@tensorflow/tfjs-core":"kSBl","../lrn_grad_gpu":"SBA2"}],"TnIL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxImpl = maxImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _reduce = require("../kernel_utils/reduce");

var _Reshape = require("../kernels/Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxImpl(x, reduceShape, outShape, backend) {
  const inSize = _tfjsCore.util.sizeFromShape(reduceShape);

  const xSize = _tfjsCore.util.sizeFromShape(x.shape);

  const batchSize = xSize / inSize;
  const reshapedInput = (0, _Reshape.reshape)({
    inputs: {
      x
    },
    attrs: {
      shape: [batchSize, inSize]
    },
    backend
  });
  const reduced = (0, _reduce.reduce)(reshapedInput, x.dtype, 'max', backend);
  const reshapedOutput = (0, _Reshape.reshape)({
    inputs: {
      x: reduced
    },
    attrs: {
      shape: outShape
    },
    backend
  });
  backend.disposeIntermediateTensorInfo(reshapedInput);
  backend.disposeIntermediateTensorInfo(reduced);
  return reshapedOutput;
}
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/reduce":"tZI5","../kernels/Reshape":"OCN8"}],"Scv7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.max = max;
exports.maxConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

var _Max_impl = require("./Max_impl");

var _Transpose_impl = require("./Transpose_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function max(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    reductionIndices,
    keepDims
  } = attrs;
  const xRank = x.shape.length;

  const origAxes = _tfjsCore.util.parseAxisParam(reductionIndices, x.shape);

  let axes = origAxes;

  const permutedAxes = _tfjsCore.backend_util.getAxesPermutation(axes, xRank);

  const maxInputIsTransposed = permutedAxes != null;
  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);
  let maxInput = x;

  if (maxInputIsTransposed) {
    if (shouldExecuteOnCPU) {
      const xTexData = backend.texData.get(maxInput.dataId);
      const values = xTexData.values;
      const newShape = new Array(xRank);

      for (let i = 0; i < newShape.length; i++) {
        newShape[i] = x.shape[permutedAxes[i]];
      }

      const maxInputValues = (0, _Transpose_impl.transposeImplCPU)(values, x.shape, x.dtype, permutedAxes, newShape);
      maxInput = backend.makeTensorInfo(newShape, x.dtype);
      const maxInputData = backend.texData.get(maxInput.dataId);
      maxInputData.values = maxInputValues;
    } else {
      maxInput = (0, _Transpose_impl.transposeImpl)(x, permutedAxes, backend);
    }

    axes = _tfjsCore.backend_util.getInnerMostAxes(axes.length, xRank);
  }

  _tfjsCore.backend_util.assertAxesAreInnerMostDims('max', axes, xRank);

  const [maxOutShape, reduceShape] = _tfjsCore.backend_util.computeOutAndReduceShapes(maxInput.shape, axes);

  let outShape = maxOutShape;

  if (keepDims) {
    // rather than reshape at the end, set the target shape here.
    outShape = _tfjsCore.backend_util.expandShapeToKeepDim(maxOutShape, origAxes);
  }

  let out;

  if (shouldExecuteOnCPU) {
    const xTexData = backend.texData.get(maxInput.dataId);
    const values = xTexData.values;
    const outValues = (0, _shared.maxImplCPU)(values, _tfjsCore.util.sizeFromShape(reduceShape), outShape, x.dtype);
    out = backend.makeTensorInfo(outShape, x.dtype);
    const outData = backend.texData.get(out.dataId);
    outData.values = outValues;
  } else {
    out = (0, _Max_impl.maxImpl)(maxInput, reduceShape, outShape, backend);
  }

  if (maxInputIsTransposed) {
    backend.disposeIntermediateTensorInfo(maxInput);
  }

  return out;
}

const maxConfig = {
  kernelName: _tfjsCore.Max,
  backendName: 'webgl',
  kernelFunc: max
};
exports.maxConfig = maxConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH","./Max_impl":"TnIL","./Transpose_impl":"VG4U"}],"G2Br":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maximumConfig = exports.maximum = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binaryop_gpu = require("../binaryop_gpu");

var _binaryop_packed_gpu = require("../binaryop_packed_gpu");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MAXIMUM = _binaryop_gpu.CHECK_NAN_SNIPPET + `
  return max(a, b);
`;
const MAXIMUM_PACKED = `
  vec4 result = vec4(max(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + _binaryop_packed_gpu.CHECK_NAN_SNIPPET + `
  return result;
`;
const maximum = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: MAXIMUM,
  packedOpSnippet: MAXIMUM_PACKED,
  cpuKernelImpl: _shared.maximumImplCPU
});
exports.maximum = maximum;
const maximumConfig = {
  kernelName: _tfjsCore.Maximum,
  backendName: 'webgl',
  kernelFunc: maximum
};
exports.maximumConfig = maximumConfig;
},{"@tensorflow/tfjs-core":"kSBl","../binaryop_gpu":"wbV2","../binaryop_packed_gpu":"mFR1","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"c3Fl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPool = maxPool;
exports.maxPoolConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _pool_gpu = require("../pool_gpu");

var _webgl_util = require("../webgl_util");

var _Identity = require("./Identity");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPool(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  (0, _webgl_util.assertNotComplex)(x, 'maxPool');
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  const dilations = 1;

  _tfjsCore.util.assert(_tfjsCore.backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);

  const convInfo = _tfjsCore.backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);

  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && _tfjsCore.util.arraysEqual(convInfo.inShape, convInfo.outShape)) {
    return (0, _Identity.identity)({
      inputs: {
        x
      },
      backend
    });
  }

  const maxPoolProgram = new _pool_gpu.Pool2DProgram(convInfo, 'max', false);
  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);
}

const maxPoolConfig = {
  kernelName: _tfjsCore.MaxPool,
  backendName: 'webgl',
  kernelFunc: maxPool
};
exports.maxPoolConfig = maxPoolConfig;
},{"@tensorflow/tfjs-core":"kSBl","../pool_gpu":"QOnm","../webgl_util":"u1ML","./Identity":"LUQG"}],"qMOV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPool3d = maxPool3d;
exports.maxPool3DConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _pool_gpu = require("../pool_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPool3d(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    filterSize,
    strides,
    pad,
    dataFormat,
    dimRoundingMode
  } = attrs;
  const dilations = [1, 1, 1];

  const convInfo = _tfjsCore.backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);

  const maxPoolProgram = new _pool_gpu.Pool3DProgram(convInfo, 'max', false);
  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);
}

const maxPool3DConfig = {
  kernelName: _tfjsCore.MaxPool3D,
  backendName: 'webgl',
  kernelFunc: maxPool3d
};
exports.maxPool3DConfig = maxPool3DConfig;
},{"@tensorflow/tfjs-core":"kSBl","../pool_gpu":"QOnm"}],"apKT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaxPool3DBackpropProgram = exports.MaxPool2DBackpropProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MaxPool2DBackpropProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'maxPos'];
    this.outputShape = convInfo.inShape;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${effectiveFilterHeight};
          wR += ${dilationHeight}) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${effectiveFilterWidth} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.MaxPool2DBackpropProgram = MaxPool2DBackpropProgram;

class MaxPool3DBackpropProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'maxPos'];
    this.outputShape = convInfo.inShape;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterDepth = convInfo.effectiveFilterDepth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
           wD += ${dilationDepth}) {
          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;

          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${lastIndex} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +
                  wR * ${effectiveFilterWidth} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }

}

exports.MaxPool3DBackpropProgram = MaxPool3DBackpropProgram;
},{}],"RXwg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPool3DGrad = maxPool3DGrad;
exports.maxPoolGrad3DConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _max_pool_backprop_gpu = require("../max_pool_backprop_gpu");

var _pool_gpu = require("../pool_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPool3DGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    input
  } = inputs;
  const x = input;
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  const dilations = [1, 1, 1];

  const convInfo = _tfjsCore.backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);

  const maxPool3dPositionsProgram = new _pool_gpu.Pool3DProgram(convInfo, 'max', true
  /* get positions */
  );
  const maxPool3dPositions = backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);
  const maxPoolBackpropProgram = new _max_pool_backprop_gpu.MaxPool3DBackpropProgram(convInfo);
  const result = backend.runWebGLProgram(maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);
  backend.disposeIntermediateTensorInfo(maxPool3dPositions);
  return result;
}

const maxPoolGrad3DConfig = {
  kernelName: _tfjsCore.MaxPool3DGrad,
  backendName: 'webgl',
  kernelFunc: maxPool3DGrad
};
exports.maxPoolGrad3DConfig = maxPoolGrad3DConfig;
},{"@tensorflow/tfjs-core":"kSBl","../max_pool_backprop_gpu":"apKT","../pool_gpu":"QOnm"}],"TmIQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPoolGrad = maxPoolGrad;
exports.maxPoolGradConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _max_pool_backprop_gpu = require("../max_pool_backprop_gpu");

var _pool_gpu = require("../pool_gpu");

var _webgl_util = require("../webgl_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPoolGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    input,
    output
  } = inputs;
  const x = input;
  (0, _webgl_util.assertNotComplex)([input, output], 'maxPoolGrad');
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;

  const convInfo = _tfjsCore.backend_util.computePool2DInfo(x.shape, filterSize, strides, 1
  /* dilations */
  , pad, dimRoundingMode);

  const getPositions = true;
  const maxPoolPositionsProgram = new _pool_gpu.Pool2DProgram(convInfo, 'max', getPositions);
  const maxPoolPositions = backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);
  const maxPoolBackPropProgram = new _max_pool_backprop_gpu.MaxPool2DBackpropProgram(convInfo);
  const result = backend.runWebGLProgram(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);
  backend.disposeIntermediateTensorInfo(maxPoolPositions);
  return result;
}

const maxPoolGradConfig = {
  kernelName: _tfjsCore.MaxPoolGrad,
  backendName: 'webgl',
  kernelFunc: maxPoolGrad
};
exports.maxPoolGradConfig = maxPoolGradConfig;
},{"@tensorflow/tfjs-core":"kSBl","../max_pool_backprop_gpu":"apKT","../pool_gpu":"QOnm","../webgl_util":"u1ML"}],"dXRA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPoolWithArgmaxImpl = maxPoolWithArgmaxImpl;

var _pool_gpu = require("../pool_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, backend) {
  let program = new _pool_gpu.Pool2DProgram(convInfo, 'max', false);
  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');
  program = new _pool_gpu.Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);
  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');
  return [poolOutput, indexOutput];
}
},{"../pool_gpu":"QOnm"}],"TNru":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxPoolWithArgmaxConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _MaxPoolWithArgmax_impl = require("./MaxPoolWithArgmax_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const maxPoolWithArgmaxConfig = {
  kernelName: _tfjsCore.MaxPoolWithArgmax,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      x
    } = inputs;
    const {
      filterSize,
      strides,
      pad,
      includeBatchInIndex
    } = attrs;
    const webglBackend = backend;

    _tfjsCore.util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);

    const dilations = [1, 1];

    _tfjsCore.util.assert(_tfjsCore.backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);

    const convInfo = _tfjsCore.backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);

    const [result, indexes] = (0, _MaxPoolWithArgmax_impl.maxPoolWithArgmaxImpl)(x, includeBatchInIndex, convInfo, webglBackend);
    return [result, indexes];
  }
};
exports.maxPoolWithArgmaxConfig = maxPoolWithArgmaxConfig;
},{"@tensorflow/tfjs-core":"kSBl","./MaxPoolWithArgmax_impl":"dXRA"}],"ct8E":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.meanImpl = meanImpl;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _reduce = require("../kernel_utils/reduce");

var _Reshape = require("../kernels/Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function meanImpl(x, reduceShape, outShape, backend) {
  const inSize = _tfjsCore.util.sizeFromShape(reduceShape);

  const xSize = _tfjsCore.util.sizeFromShape(x.shape);

  const batchSize = xSize / inSize;
  const reshapedInput = (0, _Reshape.reshape)({
    inputs: {
      x
    },
    attrs: {
      shape: [batchSize, inSize]
    },
    backend
  });
  const reduced = (0, _reduce.reduce)(reshapedInput, 'float32', 'mean', backend);
  const reshapedOutput = (0, _Reshape.reshape)({
    inputs: {
      x: reduced
    },
    attrs: {
      shape: outShape
    },
    backend
  });
  backend.disposeIntermediateTensorInfo(reshapedInput);
  backend.disposeIntermediateTensorInfo(reduced);
  return reshapedOutput;
}
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/reduce":"tZI5","../kernels/Reshape":"OCN8"}],"QecZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.meanConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Mean_impl = require("./Mean_impl");

var _Transpose_impl = require("./Transpose_impl");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const meanConfig = {
  kernelName: _tfjsCore.Mean,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      x
    } = inputs;
    const {
      keepDims,
      axis
    } = attrs;
    const webglBackend = backend;
    const xRank = x.shape.length;

    const origAxes = _tfjsCore.util.parseAxisParam(axis, x.shape);

    let axes = origAxes;

    const permutedAxes = _tfjsCore.backend_util.getAxesPermutation(axes, xRank);

    const meanInputIsTransposed = permutedAxes != null;
    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);
    const intermediates = [];
    let meanInput = x;

    if (meanInputIsTransposed) {
      if (shouldExecuteOnCPU) {
        const xTexData = webglBackend.texData.get(meanInput.dataId);
        const values = xTexData.values;
        const newShape = new Array(xRank);

        for (let i = 0; i < newShape.length; i++) {
          newShape[i] = x.shape[permutedAxes[i]];
        }

        const meanInputValues = (0, _Transpose_impl.transposeImplCPU)(values, x.shape, x.dtype, permutedAxes, newShape);
        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);
        const meanInputData = webglBackend.texData.get(meanInput.dataId);
        meanInputData.values = meanInputValues;
      } else {
        meanInput = (0, _Transpose_impl.transposeImpl)(x, permutedAxes, webglBackend);
      }

      intermediates.push(meanInput);
      axes = _tfjsCore.backend_util.getInnerMostAxes(axes.length, xRank);
    }

    _tfjsCore.backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);

    const [meanOutShape, reduceShape] = _tfjsCore.backend_util.computeOutAndReduceShapes(meanInput.shape, axes);

    let outShape = meanOutShape;

    if (keepDims) {
      // rather than reshape at the end, set the target shape here.
      outShape = _tfjsCore.backend_util.expandShapeToKeepDim(meanOutShape, origAxes);
    }

    const out = (0, _Mean_impl.meanImpl)(meanInput, reduceShape, outShape, webglBackend);

    for (const i of intermediates) {
      webglBackend.disposeIntermediateTensorInfo(i);
    }

    return out;
  }
};
exports.meanConfig = meanConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Mean_impl":"ct8E","./Transpose_impl":"VG4U"}],"X4RS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.min = min;
exports.minConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _reduce = require("../kernel_utils/reduce");

var _Reshape = require("./Reshape");

var _Transpose = require("./Transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function min(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  const xRank = x.shape.length;

  const origAxes = _tfjsCore.util.parseAxisParam(axis, x.shape);

  let axes = origAxes;

  const permutedAxes = _tfjsCore.backend_util.getAxesPermutation(axes, xRank);

  let permutedX = x;

  if (permutedAxes != null) {
    permutedX = (0, _Transpose.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    axes = _tfjsCore.backend_util.getInnerMostAxes(axes.length, x.shape.length);
  }

  _tfjsCore.backend_util.assertAxesAreInnerMostDims('min', axes, xRank);

  const [outShape, reduceShape] = _tfjsCore.backend_util.computeOutAndReduceShapes(permutedX.shape, axes);

  const inSize = _tfjsCore.util.sizeFromShape(reduceShape);

  const a2D = (0, _Reshape.reshape)({
    inputs: {
      x: permutedX
    },
    backend,
    attrs: {
      shape: [-1, inSize]
    }
  });
  const reduced = (0, _reduce.reduce)(a2D, a2D.dtype, 'min', backend);
  let res;

  if (keepDims) {
    const newShape = _tfjsCore.backend_util.expandShapeToKeepDim(outShape, origAxes);

    res = (0, _Reshape.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: newShape
      }
    });
  } else {
    res = (0, _Reshape.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
  }

  backend.disposeIntermediateTensorInfo(a2D);
  backend.disposeIntermediateTensorInfo(reduced);

  if (permutedAxes != null) {
    backend.disposeIntermediateTensorInfo(permutedX);
  }

  return res;
}

const minConfig = {
  kernelName: _tfjsCore.Min,
  backendName: 'webgl',
  kernelFunc: min
};
exports.minConfig = minConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/reduce":"tZI5","./Reshape":"OCN8","./Transpose":"ukag"}],"ew2v":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minimumConfig = exports.minimum = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binaryop_gpu = require("../binaryop_gpu");

var _binaryop_packed_gpu = require("../binaryop_packed_gpu");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MINIMUM = _binaryop_gpu.CHECK_NAN_SNIPPET + `
  return min(a, b);
`;
const MINIMUM_PACKED = `
  vec4 result = vec4(min(a, b));
  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));
  ` + _binaryop_packed_gpu.CHECK_NAN_SNIPPET + `
  return result;
`;
const minimum = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: MINIMUM,
  packedOpSnippet: MINIMUM_PACKED,
  cpuKernelImpl: _shared.minimumImplCPU
});
exports.minimum = minimum;
const minimumConfig = {
  kernelName: _tfjsCore.Minimum,
  backendName: 'webgl',
  kernelFunc: minimum
};
exports.minimumConfig = minimumConfig;
},{"@tensorflow/tfjs-core":"kSBl","../binaryop_gpu":"wbV2","../binaryop_packed_gpu":"mFR1","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"o7aC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MirrorPadProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MirrorPadProgram {
  constructor(xShape, paddings, mode) {
    this.variableNames = ['x'];
    this.outputShape = paddings.map((p, i) => p[0]
    /* beforePad */
    + xShape[i] + p[1]
    /* afterPad */
    );
    const rank = xShape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
    const start = paddings.map(p => p[0]).join(',');
    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
    const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);
    const offset = mode === 'reflect' ? 0 : 1;

    if (rank === 1) {
      this.userCode = `
        int start = ${start};
        int end = ${end};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${offset};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${offset};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }

    this.userCode = `
      ${dtype} start = ${dtype}(${start});
      ${dtype} end = ${dtype}(${end});

      void main() {
        ${dtype} outC = getOutputCoords();
        for (int i = 0; i < ${rank}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${offset};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};
          }
        }
        ${dtype} coords = outC - start;
        setOutput(getX(${unpackedCoords}));
      }
    `;
  }

}

exports.MirrorPadProgram = MirrorPadProgram;
},{"./shader_compiler":"xhhc"}],"j4rD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MirrorPadPackedProgram = void 0;

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Example shader code for
 * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`
 * ```
 *    const int start = int(2);
 *    const int end = int(5);
 *
 *    void main() {
 *       int outputLoc = getOutputCoords();
 *       vec4 result = vec4(0.);
 *
 *       int rc = outputLoc;
 *
 *       int source = rc;
 *       if (source < start) {
 *         source = start * 2 - source - 0;
 *       } else if (source >= end) {
 *         source = (end - 1) * 2 - source + 0;
 *       }
 *       source -= start;
 *
 *       result[0] = getChannel(getX(source), source);
 *       rc += 1;
 *       if(rc < 6) {
 *          int source = rc;
 *          if (source < start) {
 *            source = start * 2 - source - 0;
 *          } else if (source >= end) {
 *            source = (end - 1) * 2 - source + 0;
 *          }
 *          source -= start;
 *
 *         result[1] = getChannel(getX(source), source);
 *       }
 *
 *       setOutput(result);
 *     }
 * ```
 */
class MirrorPadPackedProgram {
  constructor(xShape, paddings, mode) {
    this.variableNames = ['x'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = paddings.map((p, i) => p[0]
    /* beforePad */
    + xShape[i] + p[1]
    /* afterPad */
    );
    const rank = xShape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
    const start = paddings.map(p => p[0]).join(',');
    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
    const coords = (0, _packing_util.getChannels)('rc', rank);
    const source = (0, _packing_util.getChannels)('source', rank);
    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;
    const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;
    const offset = mode === 'reflect' ? 0 : 1;
    let mainLoop = '';

    if (rank === 1) {
      const padSetup = `
        ${dtype} source = rc;
        if (source < start) {
          source = start * 2 - source - ${offset};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${offset};
        }
        source -= start;
      `;
      mainLoop = `
        ${dtype} rc = outputLoc;
        ${padSetup}
        result[0] = getChannel(getX(${source.join()}), ${innerDims});
        ${coords[rank - 1]} += 1;
        if(${cLimit}) {
          ${padSetup}
          result[1] = getChannel(getX(${source.join()}), ${innerDims});
        }
      `;
    } else {
      const padSetup = `
        ${dtype} source = rc;
        ${dtype} lt = ${dtype}(lessThan(source, start));
        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));
        ${dtype} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${offset}) +
                gte * ((end - 1) * 2 - source + ${offset});
        source -= start;
      `;
      mainLoop = `
        ${dtype} rc = outputLoc;
        ${padSetup}
        result[0] = getChannel(getX(${source.join()}), ${innerDims});
        ${coords[rank - 1]} += 1;
        if(${cLimit}) {
          ${padSetup}
          result[1] = getChannel(getX(${source.join()}), ${innerDims});
        }
        rc = outputLoc;
        ${coords[rank - 2]} += 1;
        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {
          ${padSetup}
          result[2] = getChannel(getX(${source.join()}), ${innerDims});
          ${coords[rank - 1]} += 1;
          if(${cLimit}) {
            ${padSetup}
            result[3] = getChannel(getX(${source.join()}), ${innerDims});
          }
        }
      `;
    }

    this.userCode = `
      const ${dtype} start = ${dtype}(${start});
      const ${dtype} end = ${dtype}(${end});

      void main() {
        ${dtype} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${mainLoop}
        setOutput(result);
      }
    `;
  }

}

exports.MirrorPadPackedProgram = MirrorPadPackedProgram;
},{"./packing_util":"BqvU","./shader_compiler":"xhhc"}],"vzVL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mirrorPadConfig = exports.mirrorPadKernelFunc = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _mirror_pad_gpu = require("../mirror_pad_gpu");

var _mirror_pad_packed_gpu = require("../mirror_pad_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mirrorPadKernelFunc = ({
  inputs,
  backend,
  attrs
}) => {
  const {
    x
  } = inputs;
  const {
    paddings,
    mode
  } = attrs;
  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _mirror_pad_packed_gpu.MirrorPadPackedProgram(x.shape, paddings, mode) : new _mirror_pad_gpu.MirrorPadProgram(x.shape, paddings, mode);
  const output = backend.runWebGLProgram(program, [x], x.dtype);
  return output;
};

exports.mirrorPadKernelFunc = mirrorPadKernelFunc;
const mirrorPadConfig = {
  kernelName: _tfjsCore.MirrorPad,
  backendName: 'webgl',
  kernelFunc: mirrorPadKernelFunc
};
exports.mirrorPadConfig = mirrorPadConfig;
},{"@tensorflow/tfjs-core":"kSBl","../mirror_pad_gpu":"o7aC","../mirror_pad_packed_gpu":"j4rD"}],"C4Ln":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.modConfig = exports.mod = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binaryop_packed_gpu = require("../binaryop_packed_gpu");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MOD = `if (b == 0.0) return NAN;
  return mod(a, b);`;
const MOD_PACKED = `
  vec4 result = mod(a, b);
  vec4 isNaN = vec4(equal(b, vec4(0.0)));
  ` + _binaryop_packed_gpu.CHECK_NAN_SNIPPET + `
  return result;
`;
const mod = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: MOD,
  packedOpSnippet: MOD_PACKED
});
exports.mod = mod;
const modConfig = {
  kernelName: _tfjsCore.Mod,
  backendName: 'webgl',
  kernelFunc: mod
};
exports.modConfig = modConfig;
},{"@tensorflow/tfjs-core":"kSBl","../binaryop_packed_gpu":"mFR1","../kernel_utils/kernel_funcs_utils":"ciwP"}],"oY6B":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultinomialProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MultinomialProgram {
  constructor(batchSize, numOutcomes, numSamples) {
    this.variableNames = ['probs'];
    this.customUniforms = [{
      name: 'seed',
      type: 'float'
    }];
    this.outputShape = [batchSize, numSamples];
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${numOutcomes - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${numOutcomes - 1}));
      }
    `;
  }

}

exports.MultinomialProgram = MultinomialProgram;
},{}],"URW8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.realDivConfig = exports.realDiv = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Without the equality check div produces 0.9999 for a = b, which when
// floored can cause errors.
const DIV = `
if (a == b) {
  return 1.0;
};
return a / b;`; // We do the same as in ./binaryop_gpu, with vec4 and ivec4.
// On Linux, the vectorized implementation produces NaNs when a and b are 0.

const DIV_PACKED = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`;
const realDiv = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: DIV,
  packedOpSnippet: DIV_PACKED,
  checkOutOfBounds: true
});
exports.realDiv = realDiv;
const realDivConfig = {
  kernelName: _tfjsCore.RealDiv,
  backendName: 'webgl',
  kernelFunc: realDiv
};
exports.realDivConfig = realDivConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"jvgb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subConfig = exports.sub = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SUB = 'return a - b;';
const sub = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: SUB,
  packedOpSnippet: SUB,
  supportsComplex: true,
  cpuKernelImpl: _shared.subImplCPU
});
exports.sub = sub;
const subConfig = {
  kernelName: _tfjsCore.Sub,
  backendName: 'webgl',
  kernelFunc: sub
};
exports.subConfig = subConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"GaSh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.softmax = softmax;
exports.softmaxConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Exp = require("./Exp");

var _Max = require("./Max");

var _RealDiv = require("./RealDiv");

var _Reshape = require("./Reshape");

var _Sub = require("./Sub");

var _Sum = require("./Sum");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function softmax(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    logits
  } = inputs;
  const {
    dim
  } = attrs;

  const axes = _tfjsCore.util.parseAxisParam([dim], logits.shape);

  const maxLogit = (0, _Max.max)({
    inputs: {
      x: logits
    },
    backend,
    attrs: {
      reductionIndices: axes,
      keepDims: false
    }
  });

  const expandedShape = _tfjsCore.backend_util.expandShapeToKeepDim(maxLogit.shape, axes);

  const maxLogitsReshaped = (0, _Reshape.reshape)({
    inputs: {
      x: maxLogit
    },
    backend,
    attrs: {
      shape: expandedShape
    }
  });
  const a = (0, _Sub.sub)({
    inputs: {
      a: logits,
      b: maxLogitsReshaped
    },
    backend
  });
  const b = (0, _Exp.exp)({
    inputs: {
      x: a
    },
    backend
  });
  const sumExp = (0, _Sum.sum)({
    inputs: {
      x: b
    },
    backend,
    attrs: {
      axis: axes,
      keepDims: false
    }
  });
  const sumExpReshaped = (0, _Reshape.reshape)({
    inputs: {
      x: sumExp
    },
    backend,
    attrs: {
      shape: expandedShape
    }
  });
  const res = (0, _RealDiv.realDiv)({
    inputs: {
      a: b,
      b: sumExpReshaped
    },
    backend
  });
  backend.disposeIntermediateTensorInfo(maxLogit);
  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);
  backend.disposeIntermediateTensorInfo(a);
  backend.disposeIntermediateTensorInfo(b);
  backend.disposeIntermediateTensorInfo(sumExp);
  backend.disposeIntermediateTensorInfo(sumExpReshaped);
  return res;
}

const softmaxConfig = {
  kernelName: _tfjsCore.Softmax,
  backendName: 'webgl',
  kernelFunc: softmax
};
exports.softmaxConfig = softmaxConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Exp":"zY0s","./Max":"Scv7","./RealDiv":"URW8","./Reshape":"OCN8","./Sub":"jvgb","./Sum":"FqPw"}],"YFUH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multinomial = multinomial;
exports.multinomialConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _multinomial_gpu = require("../multinomial_gpu");

var _Softmax = require("./Softmax");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function multinomial(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    logits
  } = inputs;
  const {
    numSamples,
    seed,
    normalized
  } = attrs;
  const probs = normalized ? logits : (0, _Softmax.softmax)({
    inputs: {
      logits
    },
    backend,
    attrs: {
      dim: logits.shape.length - 1
    }
  });
  const batchSize = probs.shape[0];
  const numOutcomes = probs.shape[1];
  const program = new _multinomial_gpu.MultinomialProgram(batchSize, numOutcomes, numSamples);
  const customValues = [[seed]];
  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);

  if (!normalized) {
    backend.disposeIntermediateTensorInfo(probs);
  }

  return res;
}

const multinomialConfig = {
  kernelName: _tfjsCore.Multinomial,
  backendName: 'webgl',
  kernelFunc: multinomial
};
exports.multinomialConfig = multinomialConfig;
},{"@tensorflow/tfjs-core":"kSBl","../multinomial_gpu":"oY6B","./Softmax":"GaSh"}],"DwHV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.neg = neg;
exports.negConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

var _unaryop_gpu = require("../unaryop_gpu");

var _unaryop_packed_gpu = require("../unaryop_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NEG = `return -x;`; // This doesn't use unaryKernelFunc because negImplCPU is not of type
// SimpleUnaryKernelImplCPU.

function neg(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;

  if (backend.shouldExecuteOnCPU([x])) {
    const xData = backend.texData.get(x.dataId);
    const [outValues, newShape] = (0, _shared.negImplCPU)(xData.values, x.shape, x.dtype);
    return backend.makeTensorInfo(newShape, x.dtype, outValues);
  }

  let program;

  if ((0, _tfjsCore.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
    program = new _unaryop_packed_gpu.UnaryOpPackedProgram(x.shape, NEG);
  } else {
    program = new _unaryop_gpu.UnaryOpProgram(x.shape, NEG);
  }

  return backend.runWebGLProgram(program, [x], x.dtype);
}

const negConfig = {
  kernelName: _tfjsCore.Neg,
  backendName: 'webgl',
  kernelFunc: neg
};
exports.negConfig = negConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH","../unaryop_gpu":"CK3x","../unaryop_packed_gpu":"zBLd"}],"qOiR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionV3 = nonMaxSuppressionV3;
exports.nonMaxSuppressionV3Config = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nonMaxSuppressionV3Impl = _tfjsCore.kernel_impls.nonMaxSuppressionV3Impl;

function nonMaxSuppressionV3(args) {
  _tfjsCore.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');

  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    boxes,
    scores
  } = inputs;
  const {
    maxOutputSize,
    iouThreshold,
    scoreThreshold
  } = attrs;
  const boxesVals = backend.readSync(boxes.dataId);
  const scoresVals = backend.readSync(scores.dataId);
  const {
    selectedIndices
  } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);
  return backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices));
}

const nonMaxSuppressionV3Config = {
  kernelName: _tfjsCore.NonMaxSuppressionV3,
  backendName: 'webgl',
  kernelFunc: nonMaxSuppressionV3
};
exports.nonMaxSuppressionV3Config = nonMaxSuppressionV3Config;
},{"@tensorflow/tfjs-core":"kSBl"}],"MHTf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionV4 = nonMaxSuppressionV4;
exports.nonMaxSuppressionV4Config = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nonMaxSuppressionV4Impl = _tfjsCore.kernel_impls.nonMaxSuppressionV4Impl;

function nonMaxSuppressionV4(args) {
  _tfjsCore.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');

  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    boxes,
    scores
  } = inputs;
  const {
    maxOutputSize,
    iouThreshold,
    scoreThreshold,
    padToMaxOutputSize
  } = attrs;
  const boxesVals = backend.readSync(boxes.dataId);
  const scoresVals = backend.readSync(scores.dataId);
  const {
    selectedIndices,
    validOutputs
  } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);
  return [backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)), backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))];
}

const nonMaxSuppressionV4Config = {
  kernelName: _tfjsCore.NonMaxSuppressionV4,
  backendName: 'webgl',
  kernelFunc: nonMaxSuppressionV4
};
exports.nonMaxSuppressionV4Config = nonMaxSuppressionV4Config;
},{"@tensorflow/tfjs-core":"kSBl"}],"AzqR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonMaxSuppressionV5 = nonMaxSuppressionV5;
exports.nonMaxSuppressionV5Config = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nonMaxSuppressionV5Impl = _tfjsCore.kernel_impls.nonMaxSuppressionV5Impl;

function nonMaxSuppressionV5(args) {
  _tfjsCore.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');

  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    boxes,
    scores
  } = inputs;
  const {
    maxOutputSize,
    iouThreshold,
    scoreThreshold,
    softNmsSigma
  } = attrs;
  const boxesVals = backend.readSync(boxes.dataId);
  const scoresVals = backend.readSync(scores.dataId);
  const maxOutputSizeVal = maxOutputSize;
  const iouThresholdVal = iouThreshold;
  const scoreThresholdVal = scoreThreshold;
  const softNmsSigmaVal = softNmsSigma;
  const {
    selectedIndices,
    selectedScores
  } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);
  return [backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)), backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))];
}

const nonMaxSuppressionV5Config = {
  kernelName: _tfjsCore.NonMaxSuppressionV5,
  backendName: 'webgl',
  kernelFunc: nonMaxSuppressionV5
};
exports.nonMaxSuppressionV5Config = nonMaxSuppressionV5Config;
},{"@tensorflow/tfjs-core":"kSBl"}],"cWUh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OneHotProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OneHotProgram {
  constructor(numIndices, depth, onValue, offValue) {
    this.variableNames = ['indices'];
    this.outputShape = [numIndices, depth];
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${offValue}), float(${onValue}),
                      float(index == coords.y)));
      }
    `;
  }

}

exports.OneHotProgram = OneHotProgram;
},{}],"qyTz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.oneHotConfig = exports.oneHot = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _onehot_gpu = require("../onehot_gpu");

var _Reshape = require("./Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oneHot = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    indices
  } = inputs;
  const {
    depth,
    onValue,
    offValue
  } = attrs;

  const indicesSize = _tfjsCore.util.sizeFromShape(indices.shape);

  const program = new _onehot_gpu.OneHotProgram(indicesSize, depth, onValue, offValue);
  const reshaped = (0, _Reshape.reshape)({
    inputs: {
      x: indices
    },
    backend,
    attrs: {
      shape: [indicesSize]
    }
  });
  const result = backend.runWebGLProgram(program, [reshaped], indices.dtype);
  backend.disposeIntermediateTensorInfo(reshaped);
  const outShape = [...indices.shape, depth];
  const out = (0, _Reshape.reshape)({
    inputs: {
      x: result
    },
    backend,
    attrs: {
      shape: outShape
    }
  });
  backend.disposeIntermediateTensorInfo(result);
  return out;
};

exports.oneHot = oneHot;
const oneHotConfig = {
  kernelName: _tfjsCore.OneHot,
  backendName: 'webgl',
  kernelFunc: oneHot
};
exports.oneHotConfig = oneHotConfig;
},{"@tensorflow/tfjs-core":"kSBl","../onehot_gpu":"cWUh","./Reshape":"OCN8"}],"Rmax":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zerosLike = zerosLike;
exports.zerosLikeConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Complex = require("./Complex");

var _Fill = require("./Fill");

var _Imag = require("./Imag");

var _Real = require("./Real");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zerosLike(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;

  if (x.dtype === 'complex64') {
    const realPart = (0, _Real.real)({
      inputs: {
        input: x
      },
      backend
    });
    const r = zerosLike({
      inputs: {
        x: realPart
      },
      backend
    });
    const imagPart = (0, _Imag.imag)({
      inputs: {
        input: x
      },
      backend
    });
    const i = zerosLike({
      inputs: {
        x: imagPart
      },
      backend
    });
    const result = (0, _Complex.complex)({
      inputs: {
        real: r,
        imag: i
      },
      backend
    });
    backend.disposeIntermediateTensorInfo(realPart);
    backend.disposeIntermediateTensorInfo(r);
    backend.disposeIntermediateTensorInfo(imagPart);
    backend.disposeIntermediateTensorInfo(i);
    return result;
  } else {
    return (0, _Fill.fill)({
      attrs: {
        shape: x.shape,
        dtype: x.dtype,
        value: x.dtype === 'string' ? '' : 0
      },
      backend
    });
  }
}

const zerosLikeConfig = {
  kernelName: _tfjsCore.ZerosLike,
  backendName: 'webgl',
  kernelFunc: zerosLike
};
exports.zerosLikeConfig = zerosLikeConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Complex":"BU0Z","./Fill":"LGba","./Imag":"uHuu","./Real":"Jbfj"}],"NxrP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onesLike = onesLike;
exports.onesLikeConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Complex = require("./Complex");

var _Fill = require("./Fill");

var _Imag = require("./Imag");

var _Real = require("./Real");

var _ZerosLike = require("./ZerosLike");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function onesLike(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;

  if (x.dtype === 'string') {
    throw new Error('onesLike is not supported under string dtype');
  } else if (x.dtype === 'complex64') {
    const realPart = (0, _Real.real)({
      inputs: {
        input: x
      },
      backend
    });
    const r = onesLike({
      inputs: {
        x: realPart
      },
      backend
    });
    const imagPart = (0, _Imag.imag)({
      inputs: {
        input: x
      },
      backend
    });
    const i = (0, _ZerosLike.zerosLike)({
      inputs: {
        x: imagPart
      },
      backend
    });
    const result = (0, _Complex.complex)({
      inputs: {
        real: r,
        imag: i
      },
      backend
    });
    backend.disposeIntermediateTensorInfo(realPart);
    backend.disposeIntermediateTensorInfo(r);
    backend.disposeIntermediateTensorInfo(imagPart);
    backend.disposeIntermediateTensorInfo(i);
    return result;
  } else {
    // TODO(cais, smilkov): Add WebGL shader for onesLike:
    //   https://github.com/tensorflow/tfjs/issues/1293
    return (0, _Fill.fill)({
      attrs: {
        shape: x.shape,
        dtype: x.dtype,
        value: 1
      },
      backend
    });
  }
}

const onesLikeConfig = {
  kernelName: _tfjsCore.OnesLike,
  backendName: 'webgl',
  kernelFunc: onesLike
};
exports.onesLikeConfig = onesLikeConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Complex":"BU0Z","./Fill":"LGba","./Imag":"uHuu","./Real":"Jbfj","./ZerosLike":"Rmax"}],"KYEF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pack = pack;
exports.packConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Concat = require("./Concat");

var _ExpandDims = require("./ExpandDims");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pack(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    axis
  } = attrs;

  if (inputs.length === 1) {
    return (0, _ExpandDims.expandDims)({
      inputs: {
        input: inputs[0]
      },
      backend,
      attrs: {
        dim: axis
      }
    });
  }

  const shape = inputs[0].shape;
  const dtype = inputs[0].dtype;
  inputs.forEach(t => {
    _tfjsCore.util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');

    _tfjsCore.util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');
  });
  const intermediateTensorInfos = [];
  const expandedTensors = inputs.map(t => {
    const expandedT = (0, _ExpandDims.expandDims)({
      inputs: {
        input: t
      },
      backend,
      attrs: {
        dim: axis
      }
    });
    intermediateTensorInfos.push(expandedT);
    return expandedT;
  });
  const result = (0, _Concat.concat)({
    inputs: expandedTensors,
    backend,
    attrs: {
      axis
    }
  });
  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return result;
}

const packConfig = {
  kernelName: _tfjsCore.Pack,
  backendName: 'webgl',
  kernelFunc: pack
};
exports.packConfig = packConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Concat":"sjik","./ExpandDims":"oL99"}],"RJlw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PadProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PadProgram {
  constructor(xShape, paddings, constantValue) {
    this.variableNames = ['x'];
    this.customUniforms = [{
      name: 'value',
      type: 'float'
    }];
    this.outputShape = paddings.map((p, i) => p[0]
    /* beforePad */
    + xShape[i] + p[1]
    /* afterPad */
    );
    const rank = xShape.length;
    const type = (0, _shader_compiler.getCoordsDataType)(rank);
    const start = paddings.map(p => p[0]).join(',');
    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
    const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);

    if (rank === 1) {
      this.userCode = `
        int start = ${start};
        int end = ${end};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }

    this.userCode = `
      ${type} start = ${type}(${start});
      ${type} end = ${type}(${end});

      void main() {
        ${type} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${type} coords = outC - start;
          setOutput(getX(${unpackedCoords}));
        }
      }
    `;
  }

}

exports.PadProgram = PadProgram;
},{"./shader_compiler":"xhhc"}],"Q15v":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PadPackedProgram = void 0;

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PadPackedProgram {
  constructor(xShape, paddings, constantValue) {
    this.variableNames = ['x'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.customUniforms = [{
      name: 'value',
      type: 'float'
    }];
    this.outputShape = paddings.map((p, i) => p[0]
    /* beforePad */
    + xShape[i] + p[1]
    /* afterPad */
    );
    const rank = xShape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
    const start = paddings.map(p => p[0]).join(',');
    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
    const coords = (0, _packing_util.getChannels)('rc', rank);
    const source = (0, _packing_util.getChannels)('source', rank);
    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;
    const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;
    const componentSetup = [`${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;
       if(${cLimit}) {
      `, rank === 1 ? '' : `}
       rc = outputLoc;
       ${coords[rank - 2]} += 1;
       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`, rank === 1 ? '' : `  ${coords[rank - 1]} += 1;
         if(${cLimit}) {`];
    const paddingArea = rank === 1 ? 'rc < start || rc >= end' : 'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';
    let mainLoop = '';

    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {
      mainLoop += `
        ${componentSetup[i]}
        if (${paddingArea}) {
          result[${i}] = float(value);
        } else {
          ${dtype} source = rc - start;
          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});
        }
      `;
    }

    mainLoop += rank === 1 ? `} ` : `}}`;
    this.userCode = `
      const ${dtype} start = ${dtype}(${start});
      const ${dtype} end = ${dtype}(${end});

      void main() {
        ${dtype} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${mainLoop}
        setOutput(result);
      }
    `;
  }

}

exports.PadPackedProgram = PadPackedProgram;
},{"./packing_util":"BqvU","./shader_compiler":"xhhc"}],"CzrI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.padV2Config = exports.padV2 = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _pad_gpu = require("../pad_gpu");

var _pad_packed_gpu = require("../pad_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const padV2 = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    paddings,
    constantValue
  } = attrs;
  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _pad_packed_gpu.PadPackedProgram(x.shape, paddings, constantValue) : new _pad_gpu.PadProgram(x.shape, paddings, constantValue);
  const customValues = [[constantValue]];
  return backend.runWebGLProgram(program, [x], x.dtype, customValues);
};

exports.padV2 = padV2;
const padV2Config = {
  kernelName: _tfjsCore.PadV2,
  backendName: 'webgl',
  kernelFunc: padV2
};
exports.padV2Config = padV2Config;
},{"@tensorflow/tfjs-core":"kSBl","../pad_gpu":"RJlw","../pad_packed_gpu":"Q15v"}],"i8M0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.powConfig = exports.pow = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _binaryop_packed_gpu = require("../binaryop_packed_gpu");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const POW = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`;
const POW_PACKED = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));
  ` + _binaryop_packed_gpu.CHECK_NAN_SNIPPET + `
  return result;
`;
const pow = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: POW,
  packedOpSnippet: POW_PACKED
});
exports.pow = pow;
const powConfig = {
  kernelName: _tfjsCore.Pow,
  backendName: 'webgl',
  kernelFunc: pow
};
exports.powConfig = powConfig;
},{"@tensorflow/tfjs-core":"kSBl","../binaryop_packed_gpu":"mFR1","../kernel_utils/kernel_funcs_utils":"ciwP"}],"RmdB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prod = prod;
exports.prodConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _reduce = require("../kernel_utils/reduce");

var _shared = require("../kernel_utils/shared");

var _Reshape = require("./Reshape");

var _Transpose = require("./Transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function prod(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  const xRank = x.shape.length;
  const toDispose = [];

  const origAxes = _tfjsCore.util.parseAxisParam(axis, x.shape);

  let axes = origAxes;

  const permutedAxes = _tfjsCore.backend_util.getAxesPermutation(axes, xRank);

  let permutedX = x;

  if (permutedAxes != null) {
    permutedX = (0, _Transpose.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    axes = _tfjsCore.backend_util.getInnerMostAxes(axes.length, xRank);
    toDispose.push(permutedX);
  }

  _tfjsCore.backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);

  let res;

  if (backend.shouldExecuteOnCPU([permutedX])) {
    const xVals = backend.texData.get(permutedX.dataId).values;
    const {
      outVals,
      outShape,
      outDtype
    } = (0, _shared.prodImplCPU)(permutedX.shape, permutedX.dtype, xVals, axes);
    res = backend.makeTensorInfo(outShape, outDtype, outVals);
  } else {
    const [outShape, reduceShape] = _tfjsCore.backend_util.computeOutAndReduceShapes(permutedX.shape, axes);

    const inSize = _tfjsCore.util.sizeFromShape(reduceShape);

    const a2D = (0, _Reshape.reshape)({
      inputs: {
        x: permutedX
      },
      backend,
      attrs: {
        shape: [-1, inSize]
      }
    });
    const outputDType = (0, _tfjsCore.sumOutType)(x.dtype);
    const reduced = (0, _reduce.reduce)(a2D, outputDType, 'prod', backend);
    res = (0, _Reshape.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
    toDispose.push(a2D);
    toDispose.push(reduced);
  }

  if (keepDims) {
    toDispose.push(res);

    const newShape = _tfjsCore.backend_util.expandShapeToKeepDim(res.shape, origAxes);

    res = (0, _Reshape.reshape)({
      inputs: {
        x: res
      },
      backend,
      attrs: {
        shape: newShape
      }
    });
  }

  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return res;
}

const prodConfig = {
  kernelName: _tfjsCore.Prod,
  backendName: 'webgl',
  kernelFunc: prod
};
exports.prodConfig = prodConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/reduce":"tZI5","../kernel_utils/shared":"cNPH","./Reshape":"OCN8","./Transpose":"ukag"}],"M4RM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rangeConfig = exports.range = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const range = args => {
  const {
    backend,
    attrs
  } = args;
  const {
    start,
    stop,
    step,
    dtype
  } = attrs;
  const values = (0, _shared.rangeImplCPU)(start, stop, step, dtype);
  return backend.makeTensorInfo([values.length], dtype, values);
};

exports.range = range;
const rangeConfig = {
  kernelName: _tfjsCore.Range,
  backendName: 'webgl',
  kernelFunc: range
};
exports.rangeConfig = rangeConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH"}],"GRla":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reciprocalConfig = exports.reciprocal = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RECIPROCAL = `return 1.0 / x;`;
const reciprocal = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: RECIPROCAL
});
exports.reciprocal = reciprocal;
const reciprocalConfig = {
  kernelName: _tfjsCore.Reciprocal,
  backendName: 'webgl',
  kernelFunc: reciprocal
};
exports.reciprocalConfig = reciprocalConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"VrOt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reluConfig = exports.relu = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _unaryop_gpu = require("../unaryop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RELU = _unaryop_gpu.CHECK_NAN_SNIPPET + `
  return (x < 0.0) ? 0.0 : x;
`;
const RELU_PACKED = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
const relu = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: RELU,
  packedOpSnippet: RELU_PACKED
});
exports.relu = relu;
const reluConfig = {
  kernelName: _tfjsCore.Relu,
  backendName: 'webgl',
  kernelFunc: relu
};
exports.reluConfig = reluConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../unaryop_gpu":"CK3x"}],"xsDV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.relu6Config = exports.relu6 = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _unaryop_gpu = require("../unaryop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RELU6 = _unaryop_gpu.CHECK_NAN_SNIPPET + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
const RELU6_PACKED = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
const relu6 = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: RELU6,
  packedOpSnippet: RELU6_PACKED
});
exports.relu6 = relu6;
const relu6Config = {
  kernelName: _tfjsCore.Relu6,
  backendName: 'webgl',
  kernelFunc: relu6
};
exports.relu6Config = relu6Config;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../unaryop_gpu":"CK3x"}],"WV0L":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeBilinearProgram = void 0;

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeBilinearProgram {
  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {
    this.variableNames = ['A'];
    this.outputShape = [];
    const [batch, oldHeight, oldWidth, depth] = inputShape;
    this.outputShape = [batch, newHeight, newWidth, depth];
    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];
    let sourceFracIndexRC;

    if (halfPixelCenters) {
      sourceFracIndexRC = `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` + ` - vec2(0.5)`;
    } else {
      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;
    }

    this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${sourceFracIndexRC};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }

}

exports.ResizeBilinearProgram = ResizeBilinearProgram;
},{}],"xogv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeBilinearPackedProgram = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeBilinearPackedProgram {
  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = [];
    const [batch, oldHeight, oldWidth, depth] = inputShape;
    this.outputShape = [batch, newHeight, newWidth, depth];
    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];
    let sourceFracIndexRC;

    if (halfPixelCenters) {
      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` + `effectiveInputOverOutputRatioRC - vec3(0.5)`;
    } else {
      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;
    }

    this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,
                                     ${oldWidth}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${sourceFracIndexRC};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${depth - 1};
        bool hasNextRow = coords.z < ${newWidth - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }

}

exports.ResizeBilinearPackedProgram = ResizeBilinearPackedProgram;
},{}],"zgo7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resizeBilinear = resizeBilinear;
exports.resizeBilinearConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _resize_bilinear_gpu = require("../resize_bilinear_gpu");

var _resize_bilinear_packed_gpu = require("../resize_bilinear_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeBilinear(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    images
  } = inputs;
  const {
    alignCorners,
    halfPixelCenters,
    size
  } = attrs;
  const [newHeight, newWidth] = size;
  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ? new _resize_bilinear_packed_gpu.ResizeBilinearPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) : new _resize_bilinear_gpu.ResizeBilinearProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);
  return backend.runWebGLProgram(program, [images], 'float32');
}

const resizeBilinearConfig = {
  kernelName: _tfjsCore.ResizeBilinear,
  backendName: 'webgl',
  kernelFunc: resizeBilinear
};
exports.resizeBilinearConfig = resizeBilinearConfig;
},{"@tensorflow/tfjs-core":"kSBl","../resize_bilinear_gpu":"WV0L","../resize_bilinear_packed_gpu":"xogv"}],"UnlZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeBilinearBackpropProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeBilinearBackpropProgram {
  constructor(dyShape, inputShape, alignCorners) {
    this.variableNames = ['dy'];
    this.outputShape = [];
    this.outputShape = inputShape;
    const [, xHeight, xWidth] = inputShape;
    const [, yHeight, yWidth] = dyShape; // In the backwards pass, we want to find the pixels that were generated for
    // each pixel in the input image the forward pass and add the corresponding
    // coefficient from dy to the gradient (with some interpolation).

    const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];
    const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];
    const heightScale = effectiveXSize[0] / effectiveYSize[0];
    const widthScale = effectiveXSize[1] / effectiveYSize[1];
    const invHeightScale = 1 / heightScale;
    const invWidthScale = 1 / widthScale; // This defines the size of the window of values around a particular
    // index in dy that we want to search for contributions to dx.

    const winHeight = Math.ceil(invHeightScale) * 2 + 2;
    const winWidth = Math.ceil(invWidthScale) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${heightScale});
        const float widthScale = float(${widthScale});

        const float invHeightScale = float(${invHeightScale});
        const float invWidthScale = float(${invWidthScale});

        const int winHeight = int(${winHeight});
        const int winWidth = int(${winWidth});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${yHeight}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${yWidth}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }

}

exports.ResizeBilinearBackpropProgram = ResizeBilinearBackpropProgram;
},{}],"KZl4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resizeBilinearGrad = resizeBilinearGrad;
exports.resizeBilinearGradConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _resize_bilinear_backprop_gpu = require("../resize_bilinear_backprop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeBilinearGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    images,
    dy
  } = inputs;
  const {
    alignCorners
  } = attrs;
  const program = new _resize_bilinear_backprop_gpu.ResizeBilinearBackpropProgram(dy.shape, images.shape, alignCorners);
  return backend.runWebGLProgram(program, [dy], dy.dtype);
}

const resizeBilinearGradConfig = {
  kernelName: _tfjsCore.ResizeBilinearGrad,
  backendName: 'webgl',
  kernelFunc: resizeBilinearGrad
};
exports.resizeBilinearGradConfig = resizeBilinearGradConfig;
},{"@tensorflow/tfjs-core":"kSBl","../resize_bilinear_backprop_gpu":"UnlZ"}],"TJbF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeNearestNeighborProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeNearestNeighborProgram {
  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {
    this.variableNames = ['A'];
    this.outputShape = [];
    const [batch, oldHeight, oldWidth, depth] = inputShape;
    this.outputShape = [batch, newHeight, newWidth, depth];
    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth]; // When align corners is false, we rounds the value with floor.

    const roundBase = alignCorners ? '0.5' : '0.0';
    let sourceFracIndexRC;

    if (halfPixelCenters) {
      sourceFracIndexRC = `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` + `, vec2(0.0))`;
    } else {
      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;
    }

    this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${sourceFracIndexRC};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }

}

exports.ResizeNearestNeighborProgram = ResizeNearestNeighborProgram;
},{}],"ioD1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeNearestNeighborPackedProgram = void 0;

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeNearestNeighborPackedProgram {
  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = [];
    const [batch, oldHeight, oldWidth, depth] = inputShape;
    this.outputShape = [batch, newHeight, newWidth, depth];
    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth]; // When align corners is false, we rounds the value with floor.

    const roundBase = alignCorners ? '0.5' : '0.0';
    let sourceFracIndexRC;

    if (halfPixelCenters) {
      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` + `effectiveInputOverOutputRatioRC, vec3(0.0))`;
    } else {
      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;
    }

    this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,
                                     ${oldWidth}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${sourceFracIndexRC};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${depth - 1};
        bool hasNextRow = coords.z < ${newWidth - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }

}

exports.ResizeNearestNeighborPackedProgram = ResizeNearestNeighborPackedProgram;
},{}],"acQQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resizeNearestNeighbor = resizeNearestNeighbor;
exports.resizeNearestNeighborConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _resize_nearest_neighbor_gpu = require("../resize_nearest_neighbor_gpu");

var _resize_nearest_neighbor_packed_gpu = require("../resize_nearest_neighbor_packed_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeNearestNeighbor(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    images
  } = inputs;
  const {
    alignCorners,
    halfPixelCenters,
    size
  } = attrs;
  const [newHeight, newWidth] = size;
  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ? new _resize_nearest_neighbor_packed_gpu.ResizeNearestNeighborPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) : new _resize_nearest_neighbor_gpu.ResizeNearestNeighborProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);
  return backend.runWebGLProgram(program, [images], images.dtype);
}

const resizeNearestNeighborConfig = {
  kernelName: _tfjsCore.ResizeNearestNeighbor,
  backendName: 'webgl',
  kernelFunc: resizeNearestNeighbor
};
exports.resizeNearestNeighborConfig = resizeNearestNeighborConfig;
},{"@tensorflow/tfjs-core":"kSBl","../resize_nearest_neighbor_gpu":"TJbF","../resize_nearest_neighbor_packed_gpu":"ioD1"}],"Ps4L":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeNearestNeigborBackpropProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeNearestNeigborBackpropProgram {
  constructor(dyShape, inputShape, alignCorners) {
    this.variableNames = ['dy'];
    this.outputShape = [];
    this.outputShape = inputShape;
    const [, xHeight, xWidth] = inputShape;
    const [, yHeight, yWidth] = dyShape; // In the backwards pass, we want to find the pixels that were generated for
    // each pixel in the input image the forward pass and add the corresponding
    // coefficient from dy to the gradient (with some interpolation).

    const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];
    const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];
    const heightScale = effectiveXSize[0] / effectiveYSize[0];
    const widthScale = effectiveXSize[1] / effectiveYSize[1];
    const invHeightScale = 1 / heightScale;
    const invWidthScale = 1 / widthScale; // This defines the size of the window of values around a particular
    // index in dy that we want to search for contributions to dx.

    const winHeight = Math.ceil(invHeightScale) * 2 + 2;
    const winWidth = Math.ceil(invWidthScale) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${heightScale});
        const float widthScale = float(${widthScale});

        const float invHeightScale = float(${invHeightScale});
        const float invWidthScale = float(${invWidthScale});

        const int winHeight = int(${winHeight});
        const int winWidth = int(${winWidth});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${yHeight}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${yWidth}) {
              continue;
            }

            float sourceFracRow =
              float(${effectiveXSize[0]}) *
                (float(dyR) / float(${effectiveYSize[0]}));

            float sourceFracCol =
                float(${effectiveXSize[1]}) *
                  (float(dyC) / float(${effectiveYSize[1]}));

            int sourceNearestRow = int(min(
                float(int(${xHeight}) - 1),
                ${alignCorners} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${xWidth}) - 1),
                ${alignCorners} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }

}

exports.ResizeNearestNeigborBackpropProgram = ResizeNearestNeigborBackpropProgram;
},{}],"hJ6K":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resizeNearestNeighborGrad = resizeNearestNeighborGrad;
exports.resizeNearestNeighborGradConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _resize_nearest_neighbor_backprop_gpu = require("../resize_nearest_neighbor_backprop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function resizeNearestNeighborGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    images,
    dy
  } = inputs;
  const {
    alignCorners
  } = attrs;
  const program = new _resize_nearest_neighbor_backprop_gpu.ResizeNearestNeigborBackpropProgram(dy.shape, images.shape, alignCorners);
  return backend.runWebGLProgram(program, [dy], dy.dtype);
}

const resizeNearestNeighborGradConfig = {
  kernelName: _tfjsCore.ResizeNearestNeighborGrad,
  backendName: 'webgl',
  kernelFunc: resizeNearestNeighborGrad
};
exports.resizeNearestNeighborGradConfig = resizeNearestNeighborGradConfig;
},{"@tensorflow/tfjs-core":"kSBl","../resize_nearest_neighbor_backprop_gpu":"Ps4L"}],"uIF6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReverseProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ReverseProgram {
  constructor(xShape, axis) {
    this.variableNames = ['x'];
    const rank = xShape.length;

    if (rank > 4) {
      throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);
    }

    this.outputShape = xShape;

    if (rank === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${xShape[0]} - coord - 1));
        }
      `;
      return;
    }

    const getInCoord = i => {
      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {
        return `${xShape[i]} - coords[${i}] - 1`;
      }

      return `coords[${i}]`;
    };

    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');
    const type = (0, _shader_compiler.getCoordsDataType)(rank);
    this.userCode = `
      void main() {
        ${type} coords = getOutputCoords();
        setOutput(getX(${inCoords}));
      }
    `;
  }

}

exports.ReverseProgram = ReverseProgram;
},{"./shader_compiler":"xhhc"}],"M4lQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReversePackedProgram = void 0;

var _packing_util = require("./packing_util");

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ReversePackedProgram {
  constructor(xShape, axis) {
    this.variableNames = ['x'];
    this.packedInputs = true;
    this.packedOutput = true;
    const rank = xShape.length;

    if (rank > 4) {
      throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);
    }

    this.outputShape = xShape;
    const channels = (0, _packing_util.getChannels)('rc', rank);
    const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;
    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;
    const type = (0, _shader_compiler.getCoordsDataType)(rank);

    if (rank === 1) {
      this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${xShape[0]} - rc - 1),
            ${xShape[0]} - rc - 1);
          if(${nextColumn}){
              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),
                ${xShape[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `;
    } else {
      this.userCode = `
        void main() {
          ${type} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${getR(channels.slice())};
          if(${nextColumn}){
            result.g = ${getG(channels.slice())};
          }
          if(${nextRow}) {
            result.b = ${getB(channels.slice())};
            if(${nextColumn}) {
              result.a = ${getA(channels.slice())};
            }
          }
          setOutput(result);
        }
    `;
    }

    function getR(channels) {
      return getChannel(channels);
    }

    function getG(channels) {
      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;
      return getChannel(channels);
    }

    function getB(channels) {
      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;
      return getChannel(channels);
    }

    function getA(channels) {
      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;
      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;
      return getChannel(channels);
    }

    function getChannel(channels) {
      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));
      const inCoords = inCoordsArray.join(',');
      const innerDims = inCoordsArray.slice(-2).join(',');
      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;
    }

    function getInCoord(i, channels1) {
      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {
        return `${xShape[i]} - ${channels1[i]} - 1`;
      } else {
        return `${channels1[i]}`;
      }
    }
  }

}

exports.ReversePackedProgram = ReversePackedProgram;
},{"./packing_util":"BqvU","./shader_compiler":"xhhc"}],"yvk0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reverse = reverse;
exports.reverseConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _reverse_gpu = require("../reverse_gpu");

var _reverse_packed_gpu = require("../reverse_packed_gpu");

var _Identity = require("./Identity");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function reverse(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    dims
  } = attrs;
  const xRank = x.shape.length;

  const $dims = _tfjsCore.util.parseAxisParam(dims, x.shape);

  if (xRank === 0) {
    return (0, _Identity.identity)({
      inputs: {
        x
      },
      backend
    });
  }

  const program = (0, _tfjsCore.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _reverse_packed_gpu.ReversePackedProgram(x.shape, $dims) : new _reverse_gpu.ReverseProgram(x.shape, $dims);
  return backend.runWebGLProgram(program, [x], x.dtype);
}

const reverseConfig = {
  kernelName: _tfjsCore.Reverse,
  backendName: 'webgl',
  kernelFunc: reverse
};
exports.reverseConfig = reverseConfig;
},{"@tensorflow/tfjs-core":"kSBl","../reverse_gpu":"uIF6","../reverse_packed_gpu":"M4lQ","./Identity":"LUQG"}],"eP3p":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RotateProgram = void 0;

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class RotateProgram {
  constructor(imageShape, fillValue) {
    this.variableNames = ['Image'];
    this.outputShape = [];
    this.customUniforms = [{
      name: 'params',
      type: 'vec4'
    }];
    const imageHeight = imageShape[1];
    const imageWidth = imageShape[2];
    this.outputShape = imageShape;
    let fillSnippet = '';

    if (typeof fillValue === 'number') {
      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;
    } else {
      fillSnippet = `
        vec3 fill = vec3(${fillValue.join(',')});
        float outputValue = fill[coords[3]];`;
    }

    this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${fillSnippet}
          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }

}

exports.RotateProgram = RotateProgram;
},{}],"voJu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rotateWithOffsetConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _rotate_gpu = require("../rotate_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rotateWithOffsetConfig = {
  kernelName: _tfjsCore.RotateWithOffset,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      image
    } = inputs;
    const {
      radians,
      fillValue,
      center
    } = attrs;
    const webglBackend = backend;
    const program = new _rotate_gpu.RotateProgram(image.shape, fillValue);

    const [centerX, centerY] = _tfjsCore.backend_util.getImageCenter(center, image.shape[1], image.shape[2]);

    const customValues = [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];
    const output = webglBackend.runWebGLProgram(program, [image], image.dtype, customValues);
    return output;
  }
};
exports.rotateWithOffsetConfig = rotateWithOffsetConfig;
},{"@tensorflow/tfjs-core":"kSBl","../rotate_gpu":"eP3p"}],"rl0C":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.roundConfig = exports.round = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ROUND = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`;
const round = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: ROUND
});
exports.round = round;
const roundConfig = {
  kernelName: _tfjsCore.Round,
  backendName: 'webgl',
  kernelFunc: round
};
exports.roundConfig = roundConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"YW4p":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rsqrtConfig = exports.rsqrt = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RSQRT = `return inversesqrt(x);`;
const rsqrt = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: RSQRT,
  cpuKernelImpl: _shared.rsqrtImplCPU
});
exports.rsqrt = rsqrt;
const rsqrtConfig = {
  kernelName: _tfjsCore.Rsqrt,
  backendName: 'webgl',
  kernelFunc: rsqrt
};
exports.rsqrtConfig = rsqrtConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP","../kernel_utils/shared":"cNPH"}],"vOJf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScatterProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ScatterProgram {
  constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {
    this.variableNames = ['updates', 'indices', 'defaultValue'];
    this.outputShape = shape;
    const stridesType = (0, _shader_compiler.getCoordsDataType)(strides.length);
    const dtype = (0, _shader_compiler.getCoordsDataType)(shape.length);
    let indicesString = '';

    if (indicesRank === 1) {
      indicesString = 'i';
    } else if (indicesRank === 2) {
      indicesString = 'i, j';
    }

    const indicesSnippet = `getIndices(${indicesString})`;
    let updatesString = '';

    if (updatesRank === 1) {
      updatesString = 'i';
    } else if (updatesRank === 2) {
      updatesString = 'i, coords[1]';
    }

    const updatesSnippet = `getUpdates(${updatesString})`;
    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';
    this.userCode = `
        ${stridesType} strides = ${stridesType}(${strides});

        void main() {
          ${dtype} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${updateSize}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${sliceDim}; j++) {
              int index = round(${indicesSnippet});
              flattenedIndex += index * ${strideString};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${updatesSnippet};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `;
  }

}

exports.ScatterProgram = ScatterProgram;
},{"./shader_compiler":"xhhc"}],"over":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scatterNd = scatterNd;
exports.scatterNdConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _scatter_gpu = require("../scatter_gpu");

var _Reshape = require("./Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function scatterNd(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    indices,
    updates
  } = inputs;
  const {
    shape
  } = attrs;

  const {
    sliceRank,
    numUpdates,
    sliceSize,
    strides,
    outputSize
  } = _tfjsCore.backend_util.calculateShapes(updates, indices, shape);

  const flattenShape = [outputSize / sliceSize, sliceSize];

  if (outputSize === 0) {
    return backend.makeTensorInfo(shape, indices.dtype);
  }

  const flattenIndices = (0, _Reshape.reshape)({
    inputs: {
      x: indices
    },
    backend,
    attrs: {
      shape: [numUpdates, sliceRank]
    }
  });
  const flattenX = (0, _Reshape.reshape)({
    inputs: {
      x: updates
    },
    backend,
    attrs: {
      shape: [numUpdates, sliceSize]
    }
  });
  const defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)

  const program = new _scatter_gpu.ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);
  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);
  const reshaped = (0, _Reshape.reshape)({
    inputs: {
      x: res
    },
    backend,
    attrs: {
      shape
    }
  });
  backend.disposeIntermediateTensorInfo(flattenIndices);
  backend.disposeIntermediateTensorInfo(flattenX);
  backend.disposeIntermediateTensorInfo(res);
  backend.disposeIntermediateTensorInfo(defaultValue);
  return reshaped;
}

const scatterNdConfig = {
  kernelName: _tfjsCore.ScatterNd,
  backendName: 'webgl',
  kernelFunc: scatterNd
};
exports.scatterNdConfig = scatterNdConfig;
},{"@tensorflow/tfjs-core":"kSBl","../scatter_gpu":"vOJf","./Reshape":"OCN8"}],"E1Yw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SelectProgram {
  constructor(cRank, shape, rank) {
    this.variableNames = ['c', 'a', 'b'];
    this.outputShape = shape;
    let cCoords;
    let abCoords;

    if (rank > 4) {
      throw Error(`Where for rank ${rank} is not yet supported`);
    }

    if (rank === 1) {
      abCoords = `resRC`;
      cCoords = `resRC`;
    } else {
      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
      const cCoordVars = [];
      const abCoordVars = [];

      for (let i = 0; i < shape.length; i++) {
        abCoordVars.push(`${currentCoords[i]}`);

        if (i < cRank) {
          cCoordVars.push(`${currentCoords[i]}`);
        }
      }

      cCoords = cCoordVars.join();
      abCoords = abCoordVars.join();
    }

    const dtype = (0, _shader_compiler.getCoordsDataType)(rank);
    this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        float cVal = getC(${cCoords});
        if (cVal >= 1.0) {
          setOutput(getA(${abCoords}));
        } else {
          setOutput(getB(${abCoords}));
        }
      }
    `;
  }

}

exports.SelectProgram = SelectProgram;
},{"./shader_compiler":"xhhc"}],"VO4x":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.select = select;
exports.selectConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _select_gpu = require("../select_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function select(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    condition,
    t,
    e
  } = inputs;
  const program = new _select_gpu.SelectProgram(condition.shape.length, t.shape, t.shape.length);
  return backend.runWebGLProgram(program, [condition, t, e], (0, _tfjsCore.upcastType)(t.dtype, e.dtype));
}

const selectConfig = {
  kernelName: _tfjsCore.Select,
  backendName: 'webgl',
  kernelFunc: select
};
exports.selectConfig = selectConfig;
},{"@tensorflow/tfjs-core":"kSBl","../select_gpu":"E1Yw"}],"iGiQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seluConfig = exports.selu = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SELU = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${_tfjsCore.backend_util.SELU_SCALEALPHA};
  float scale = ${_tfjsCore.backend_util.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`;
const selu = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: SELU
});
exports.selu = selu;
const seluConfig = {
  kernelName: _tfjsCore.Selu,
  backendName: 'webgl',
  kernelFunc: selu
};
exports.seluConfig = seluConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"Xsk6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sigmoidConfig = exports.sigmoid = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;
const sigmoid = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: SIGMOID
});
exports.sigmoid = sigmoid;
const sigmoidConfig = {
  kernelName: _tfjsCore.Sigmoid,
  backendName: 'webgl',
  kernelFunc: sigmoid
};
exports.sigmoidConfig = sigmoidConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"eg93":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signConfig = exports.sign = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Sign does not propagate NANs.
const SIGN = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`;
const sign = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: SIGN
});
exports.sign = sign;
const signConfig = {
  kernelName: _tfjsCore.Sign,
  backendName: 'webgl',
  kernelFunc: sign
};
exports.signConfig = signConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"XVYV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinConfig = exports.sin = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SIN = _kernel_funcs_utils.CHECK_NAN_SNIPPET_UNARY + `
  return sin(x);
`;
const sin = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: SIN
});
exports.sin = sin;
const sinConfig = {
  kernelName: _tfjsCore.Sin,
  backendName: 'webgl',
  kernelFunc: sin
};
exports.sinConfig = sinConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"mBz3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinhConfig = exports.sinh = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SINH = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`;
const sinh = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: SINH
});
exports.sinh = sinh;
const sinhConfig = {
  kernelName: _tfjsCore.Sinh,
  backendName: 'webgl',
  kernelFunc: sinh
};
exports.sinhConfig = sinhConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"ZBTw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.softplusConfig = exports.softplus = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SOFTPLUS = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`;
const softplus = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: SOFTPLUS
});
exports.softplus = softplus;
const softplusConfig = {
  kernelName: _tfjsCore.Softplus,
  backendName: 'webgl',
  kernelFunc: softplus
};
exports.softplusConfig = softplusConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"ZGig":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spaceToBatchNDConfig = exports.spaceToBatchND = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _PadV = require("./PadV2");

var _Reshape = require("./Reshape");

var _Transpose = require("./Transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const spaceToBatchND = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    blockShape,
    paddings
  } = attrs;

  _tfjsCore.util.assert(x.shape.length <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' + 'implemented yet');

  const prod = blockShape.reduce((a, b) => a * b);
  const completePaddings = [[0, 0]];
  completePaddings.push(...paddings);

  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {
    completePaddings.push([0, 0]);
  }

  const toDispose = [];
  const paddedX = (0, _PadV.padV2)({
    inputs: {
      x
    },
    backend,
    attrs: {
      paddings: completePaddings,
      constantValue: 0
    }
  });

  const reshapedPaddedShape = _tfjsCore.backend_util.getReshaped(paddedX.shape, blockShape, prod, false);

  const permutedReshapedPaddedPermutation = _tfjsCore.backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);

  const flattenShape = _tfjsCore.backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);

  const reshapedPaddedX = (0, _Reshape.reshape)({
    inputs: {
      x: paddedX
    },
    backend,
    attrs: {
      shape: reshapedPaddedShape
    }
  });
  const paddedXT = (0, _Transpose.transpose)({
    inputs: {
      x: reshapedPaddedX
    },
    backend,
    attrs: {
      perm: permutedReshapedPaddedPermutation
    }
  });
  const result = (0, _Reshape.reshape)({
    inputs: {
      x: paddedXT
    },
    backend,
    attrs: {
      shape: flattenShape
    }
  });
  toDispose.push(paddedX);
  toDispose.push(reshapedPaddedX);
  toDispose.push(paddedXT);
  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return result;
};

exports.spaceToBatchND = spaceToBatchND;
const spaceToBatchNDConfig = {
  kernelName: _tfjsCore.SpaceToBatchND,
  backendName: 'webgl',
  kernelFunc: spaceToBatchND
};
exports.spaceToBatchNDConfig = spaceToBatchNDConfig;
},{"@tensorflow/tfjs-core":"kSBl","./PadV2":"CzrI","./Reshape":"OCN8","./Transpose":"ukag"}],"eOf8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseFillEmptyRows = sparseFillEmptyRows;
exports.sparseFillEmptyRowsConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseFillEmptyRows(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    indices,
    values,
    denseShape,
    defaultValue
  } = inputs;

  if (denseShape.shape.length !== 1) {
    throw new Error(`Dense shape must be a vector, saw:
         ${denseShape.shape}`);
  }

  if (indices.shape.length !== 2) {
    throw new Error(`Indices must be a matrix, saw:
         ${indices.shape}`);
  }

  if (values.shape.length !== 1) {
    throw new Error(`Values must be a vector, saw:
         ${values.shape}`);
  }

  if (defaultValue.shape.length !== 0) {
    throw new Error(`Default value must be a scalar, saw:
        ${defaultValue.shape}`);
  }

  const $indices = backend.readSync(indices.dataId);
  const $values = backend.readSync(values.dataId);
  const $denseShape = backend.readSync(denseShape.dataId);
  const $defaultValue = backend.readSync(defaultValue.dataId)[0];
  const [outputIndices, outputIndicesShape, outputValues, emptyRowIndicator, reverseIndexMap] = (0, _shared.sparseFillEmptyRowsImplCPU)($indices, indices.shape, indices.dtype, $values, values.dtype, $denseShape, $defaultValue);
  return [backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices), backend.makeTensorInfo([outputIndicesShape[0]], values.dtype, outputValues), backend.makeTensorInfo([emptyRowIndicator.length], 'bool', new Uint8Array(emptyRowIndicator.map(value => Number(value)))), backend.makeTensorInfo([reverseIndexMap.length], indices.dtype, new Int32Array(reverseIndexMap))];
}

const sparseFillEmptyRowsConfig = {
  kernelName: _tfjsCore.SparseFillEmptyRows,
  backendName: 'webgl',
  kernelFunc: sparseFillEmptyRows
};
exports.sparseFillEmptyRowsConfig = sparseFillEmptyRowsConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH"}],"kviu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseReshape = sparseReshape;
exports.sparseReshapeConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseReshape(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    inputIndices,
    inputShape,
    newShape
  } = inputs;

  if (inputIndices.shape.length !== 2) {
    throw new Error(`Input indices should be a matrix but received shape ${inputIndices.shape}`);
  }

  if (inputShape.shape.length !== 1) {
    throw new Error(`Input shape should be a vector but received shape ${inputShape.shape}`);
  }

  if (newShape.shape.length !== 1) {
    throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);
  }

  const $inputShape = Array.from(backend.readSync(inputShape.dataId));
  const $inputIndices = backend.readSync(inputIndices.dataId);
  const targetShape = Array.from(backend.readSync(newShape.dataId));
  const [newIndices, indicesShape, outputShape] = (0, _shared.sparseReshapeImplCPU)($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);
  return [backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices), backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape))];
}

const sparseReshapeConfig = {
  kernelName: _tfjsCore.SparseReshape,
  backendName: 'webgl',
  kernelFunc: sparseReshape
};
exports.sparseReshapeConfig = sparseReshapeConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH"}],"fkXI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseSegmentMean = sparseSegmentMean;
exports.sparseSegmentMeanConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseSegmentMean(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    data,
    indices,
    segmentIds
  } = inputs;

  if (data.shape.length < 1) {
    throw new Error(`Data should be at least 1 dimensional but received scalar`);
  }

  if (indices.shape.length !== 1) {
    throw new Error(`Indices should be a vector but received shape
              ${indices.shape}`);
  }

  if (segmentIds.shape.length !== 1) {
    throw new Error(`Segment ids should be a vector but received shape
              ${segmentIds.shape}`);
  }

  const $data = backend.readSync(data.dataId);
  const $indices = backend.readSync(indices.dataId);
  const $segmentIds = backend.readSync(segmentIds.dataId);
  const [outputData, outputDataShape] = (0, _shared.sparseSegmentReductionImplCPU)($data, data.shape, data.dtype, $indices, $segmentIds, true);
  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);
}

const sparseSegmentMeanConfig = {
  kernelName: _tfjsCore.SparseSegmentMean,
  backendName: 'webgl',
  kernelFunc: sparseSegmentMean
};
exports.sparseSegmentMeanConfig = sparseSegmentMeanConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH"}],"p9WO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseSegmentSum = sparseSegmentSum;
exports.sparseSegmentSumConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseSegmentSum(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    data,
    indices,
    segmentIds
  } = inputs;

  if (data.shape.length < 1) {
    throw new Error(`Data should be at least 1 dimensional but received scalar`);
  }

  if (indices.shape.length !== 1) {
    throw new Error(`Indices should be a vector but received shape
             ${indices.shape}`);
  }

  if (segmentIds.shape.length !== 1) {
    throw new Error(`Segment ids should be a vector but received shape
             ${segmentIds.shape}`);
  }

  const $data = backend.readSync(data.dataId);
  const $indices = backend.readSync(indices.dataId);
  const $segmentIds = backend.readSync(segmentIds.dataId);
  const [outputData, outputDataShape] = (0, _shared.sparseSegmentReductionImplCPU)($data, data.shape, data.dtype, $indices, $segmentIds);
  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);
}

const sparseSegmentSumConfig = {
  kernelName: _tfjsCore.SparseSegmentSum,
  backendName: 'webgl',
  kernelFunc: sparseSegmentSum
};
exports.sparseSegmentSumConfig = sparseSegmentSumConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH"}],"orjd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseToDense = sparseToDense;
exports.sparseToDenseConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _scatter_gpu = require("../scatter_gpu");

var _Reshape = require("./Reshape");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sparseToDense(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    sparseIndices,
    sparseValues,
    defaultValue
  } = inputs;
  const {
    outputShape
  } = attrs;

  const {
    sliceRank,
    numUpdates,
    strides,
    outputSize
  } = _tfjsCore.backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);

  const sumDupeIndices = false;
  const program = new _scatter_gpu.ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);
  const res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);
  const reshaped = (0, _Reshape.reshape)({
    inputs: {
      x: res
    },
    backend,
    attrs: {
      shape: outputShape
    }
  });
  backend.disposeIntermediateTensorInfo(res);
  return reshaped;
}

const sparseToDenseConfig = {
  kernelName: _tfjsCore.SparseToDense,
  backendName: 'webgl',
  kernelFunc: sparseToDense
};
exports.sparseToDenseConfig = sparseToDenseConfig;
},{"@tensorflow/tfjs-core":"kSBl","../scatter_gpu":"vOJf","./Reshape":"OCN8"}],"eg0P":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitV = splitV;
exports.splitVConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Slice = require("./Slice");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function splitV(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    numOrSizeSplits,
    axis
  } = attrs;

  const $axis = _tfjsCore.util.parseAxisParam(axis, x.shape)[0];

  const splitSizes = _tfjsCore.backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);

  const xRank = x.shape.length;
  const begin = new Array(xRank).fill(0);
  const size = x.shape.slice();
  return splitSizes.map(s => {
    const sliceSize = [...size];
    sliceSize[$axis] = s;
    const sliceT = (0, _Slice.slice)({
      inputs: {
        x
      },
      backend,
      attrs: {
        begin,
        size: sliceSize
      }
    });
    begin[$axis] += s;
    return sliceT;
  });
}

const splitVConfig = {
  kernelName: _tfjsCore.SplitV,
  backendName: 'webgl',
  kernelFunc: splitV
};
exports.splitVConfig = splitVConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Slice":"i5TP"}],"XK1L":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sqrtConfig = exports.sqrt = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SQRT = `return sqrt(x);`;
const sqrt = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: SQRT
});
exports.sqrt = sqrt;
const sqrtConfig = {
  kernelName: _tfjsCore.Sqrt,
  backendName: 'webgl',
  kernelFunc: sqrt
};
exports.sqrtConfig = sqrtConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"ELIZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squareConfig = exports.square = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SQUARE = `return x * x;`;
const square = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: SQUARE
});
exports.square = square;
const squareConfig = {
  kernelName: _tfjsCore.Square,
  backendName: 'webgl',
  kernelFunc: square
};
exports.squareConfig = squareConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"fP4n":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squaredDifferenceConfig = exports.squaredDifference = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';
const squaredDifference = (0, _kernel_funcs_utils.binaryKernelFunc)({
  opSnippet: SQUARED_DIFFERENCE,
  packedOpSnippet: SQUARED_DIFFERENCE
});
exports.squaredDifference = squaredDifference;
const squaredDifferenceConfig = {
  kernelName: _tfjsCore.SquaredDifference,
  backendName: 'webgl',
  kernelFunc: squaredDifference
};
exports.squaredDifferenceConfig = squaredDifferenceConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"hUPU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.step = step;
exports.stepConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _unaryop_gpu = require("../unaryop_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function step({
  inputs,
  attrs,
  backend
}) {
  const {
    x
  } = inputs;
  const opSnippet = _unaryop_gpu.CHECK_NAN_SNIPPET + `
    return x > 0.0 ? 1.0 : float(${attrs.alpha});
  `;
  const program = new _unaryop_gpu.UnaryOpProgram(x.shape, opSnippet);
  return backend.runWebGLProgram(program, [x], x.dtype);
}

const stepConfig = {
  kernelName: _tfjsCore.Step,
  backendName: 'webgl',
  kernelFunc: step
};
exports.stepConfig = stepConfig;
},{"@tensorflow/tfjs-core":"kSBl","../unaryop_gpu":"CK3x"}],"ovHx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StridedSliceProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class StridedSliceProgram {
  constructor(begin, strides, size) {
    this.variableNames = ['x'];
    this.outputShape = size;
    const rank = size.length;
    const inputDtype = (0, _shader_compiler.getCoordsDataType)(size.length);
    const dtype = (0, _shader_compiler.getCoordsDataType)(size.length);
    let newCoords = '';

    if (rank === 1) {
      newCoords = 'coords * strides + begin';
    } else {
      let outputAxis = 0;
      newCoords = size.map((_, i) => {
        outputAxis++;
        return size.length === 1 ? `coords * strides[${i}] + begin[${i}]` : `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;
      }).join(',');
    }

    this.userCode = `
      ${inputDtype} begin = ${inputDtype}(${begin});
      ${inputDtype} strides = ${inputDtype}(${strides});

      void main() {
        ${dtype} coords = getOutputCoords();
        setOutput(getX(${newCoords}));
      }
    `;
  }

}

exports.StridedSliceProgram = StridedSliceProgram;
},{"./shader_compiler":"xhhc"}],"spAd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stridedSlice = stridedSlice;
exports.stridedSliceConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

var _strided_slice_gpu = require("../strided_slice_gpu");

var _Reshape = require("./Reshape");

var _Slice = require("./Slice");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stridedSlice(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    begin,
    end,
    strides,
    beginMask,
    endMask,
    ellipsisMask,
    newAxisMask,
    shrinkAxisMask
  } = attrs;

  const {
    nonStrided,
    $begin,
    $strides,
    size,
    newShape,
    outShape
  } = _tfjsCore.slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);

  const $x = (0, _Reshape.reshape)({
    inputs: {
      x
    },
    backend,
    attrs: {
      shape: newShape
    }
  });
  let result;

  if (nonStrided) {
    const sliced = (0, _Slice.slice)({
      inputs: {
        x: $x
      },
      backend,
      attrs: {
        begin: $begin,
        size
      }
    });
    result = (0, _Reshape.reshape)({
      inputs: {
        x: sliced
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
    backend.disposeIntermediateTensorInfo(sliced);
  } else if (outShape.some(axis => axis === 0)) {
    result = backend.makeTensorInfo(outShape, x.dtype, []);
  } else {
    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([$x]);

    if (shouldExecuteOnCPU) {
      const xTexData = backend.texData.get($x.dataId);
      const values = xTexData.values;
      const xBuf = (0, _tfjsCore.buffer)($x.shape, $x.dtype, values);
      const resultValues = (0, _shared.stridedSliceImplCPU)(outShape, xBuf, $strides, $begin);
      result = backend.makeTensorInfo(outShape, $x.dtype, resultValues.values);
    } else {
      const program = new _strided_slice_gpu.StridedSliceProgram($begin, $strides, outShape);
      result = backend.runWebGLProgram(program, [$x], $x.dtype);
    }
  }

  const resultReshaped = (0, _Reshape.reshape)({
    inputs: {
      x: result
    },
    backend,
    attrs: {
      shape: outShape
    }
  });
  backend.disposeIntermediateTensorInfo($x);
  backend.disposeIntermediateTensorInfo(result);
  return resultReshaped;
}

const stridedSliceConfig = {
  kernelName: _tfjsCore.StridedSlice,
  backendName: 'webgl',
  kernelFunc: stridedSlice
};
exports.stridedSliceConfig = stridedSliceConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH","../strided_slice_gpu":"ovHx","./Reshape":"OCN8","./Slice":"i5TP"}],"XlJk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringNGrams = stringNGrams;
exports.stringNGramsConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringNGrams(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    separator,
    nGramWidths,
    leftPad,
    rightPad,
    padWidth,
    preserveShortSequences
  } = attrs;
  const {
    data,
    dataSplits
  } = inputs;
  const $data = backend.readSync(data.dataId);
  const $dataSplits = backend.readSync(dataSplits.dataId);
  const [nGrams, nGramsSplits] = (0, _shared.stringNGramsImplCPU)($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);
  return [backend.makeTensorInfo([nGrams.length], 'string', nGrams), backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits)];
}

const stringNGramsConfig = {
  kernelName: _tfjsCore.StringNGrams,
  backendName: 'webgl',
  kernelFunc: stringNGrams
};
exports.stringNGramsConfig = stringNGramsConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH"}],"PlyH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringSplit = stringSplit;
exports.stringSplitConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringSplit(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    skipEmpty
  } = attrs;
  const {
    input,
    delimiter
  } = inputs;

  if (input.dtype !== 'string') {
    throw new Error('Input must be of datatype string');
  }

  if (input.shape.length !== 1) {
    throw new Error(`Input must be a vector, got shape: ${input.shape}`);
  }

  if (delimiter.shape.length !== 0) {
    throw new Error(`Delimiter must be a scalar, got shape: ${delimiter.shape}`);
  }

  const $input = backend.readSync(input.dataId);
  const $delimiter = backend.readSync(delimiter.dataId)[0];
  const [indices, values, shape] = (0, _shared.stringSplitImplCPU)($input, $delimiter, skipEmpty);
  const outputSize = values.length;
  return [backend.makeTensorInfo([outputSize, 2], 'int32', indices), backend.makeTensorInfo([outputSize], 'string', values), backend.makeTensorInfo([2], 'int32', new Int32Array(shape))];
}

const stringSplitConfig = {
  kernelName: _tfjsCore.StringSplit,
  backendName: 'webgl',
  kernelFunc: stringSplit
};
exports.stringSplitConfig = stringSplitConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH"}],"bPQd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringToHashBucketFast = stringToHashBucketFast;
exports.stringToHashBucketFastConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function stringToHashBucketFast(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    numBuckets
  } = attrs;
  const {
    input
  } = inputs;

  if (input.dtype !== 'string') {
    throw new Error('Input must be of datatype string');
  }

  if (numBuckets <= 0) {
    throw new Error(`Number of buckets must be at least 1`);
  }

  const $input = backend.readSync(input.dataId);
  const output = (0, _shared.stringToHashBucketFastImplCPU)($input, numBuckets);
  return backend.makeTensorInfo(input.shape, 'int32', output);
}

const stringToHashBucketFastConfig = {
  kernelName: _tfjsCore.StringToHashBucketFast,
  backendName: 'webgl',
  kernelFunc: stringToHashBucketFast
};
exports.stringToHashBucketFastConfig = stringToHashBucketFastConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH"}],"akym":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tanConfig = exports.tan = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TAN = `return tan(x);`;
const tan = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: TAN
});
exports.tan = tan;
const tanConfig = {
  kernelName: _tfjsCore.Tan,
  backendName: 'webgl',
  kernelFunc: tan
};
exports.tanConfig = tanConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"hn5V":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tanhConfig = exports.tanh = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _kernel_funcs_utils = require("../kernel_utils/kernel_funcs_utils");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TANH = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`;
const tanh = (0, _kernel_funcs_utils.unaryKernelFunc)({
  opSnippet: TANH
});
exports.tanh = tanh;
const tanhConfig = {
  kernelName: _tfjsCore.Tanh,
  backendName: 'webgl',
  kernelFunc: tanh
};
exports.tanhConfig = tanhConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/kernel_funcs_utils":"ciwP"}],"H2AH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TileProgram = void 0;

var _shader_compiler = require("./shader_compiler");

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TileProgram {
  constructor(aShape, reps) {
    this.variableNames = ['A'];
    const outputShape = new Array(aShape.length);

    for (let i = 0; i < outputShape.length; i++) {
      outputShape[i] = aShape[i] * reps[i];
    }

    this.outputShape = outputShape;
    this.rank = outputShape.length;
    const dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
    const sourceCoords = getSourceCoords(aShape);
    this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        setOutput(getA(${sourceCoords}));
      }
    `;
  }

}

exports.TileProgram = TileProgram;

function getSourceCoords(aShape) {
  const rank = aShape.length;

  if (rank > 5) {
    throw Error(`Tile for rank ${rank} is not yet supported`);
  }

  if (rank === 1) {
    return `imod(resRC, ${aShape[0]})`;
  }

  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];
  const sourceCoords = [];

  for (let i = 0; i < aShape.length; i++) {
    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);
  }

  return sourceCoords.join();
}
},{"./shader_compiler":"xhhc"}],"u848":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tile = tile;
exports.tileConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

var _tile_gpu = require("../tile_gpu");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tile(params) {
  const {
    inputs,
    backend,
    attrs
  } = params;
  const {
    x
  } = inputs;
  const {
    reps
  } = attrs; // tile gpu program cannot handle rank > 5 case.

  if (x.dtype === 'string' || x.shape.length > 5) {
    // Even thought string tensor is always on CPU, just to be consistent on how
    // to access tensor data.
    const data = backend.readSync(x.dataId);
    const value = x.dtype === 'string' ? data.map(d => _tfjsCore.util.decodeString(d)) : data;
    const buf = (0, _tfjsCore.buffer)(x.shape, x.dtype, value);
    const outBuf = (0, _shared.tileImplCPU)(buf, reps);
    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);
  }

  const program = new _tile_gpu.TileProgram(x.shape, reps);
  const output = backend.runWebGLProgram(program, [x], x.dtype);
  return output;
}

const tileConfig = {
  kernelName: _tfjsCore.Tile,
  backendName: 'webgl',
  kernelFunc: tile
};
exports.tileConfig = tileConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH","../tile_gpu":"H2AH"}],"s9hX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MergeProgram = exports.SwapProgram = void 0;

// Based on Algorithm 2 of Bitonic Top K, ref:
// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf
// The original algorithm is based on computing the top K only, however
// since for TFJS we require the indices of the top K values as well then the
// algorithm found here is a bit modified. Rather than producing the values
// at each step, the indices containing the top K are generated instead.
// The output values are not generated to reduce the number of outputs in the
// GPU, the values can easily be retrieved from the indices using a gather
// op.
class SwapProgram {
  /**
   * @param shape desired output shape (can be larger than input shape, output
   *                                    will be padded with -Infinity)
   */
  constructor(shape) {
    this.variableNames = ['x', 'indices']; // |n| Size of the original input of TopK.
    // |firstPass|indicates if this is the first time swap is being used which
    // means no indices input containing the top K is present yet.
    // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...

    this.customUniforms = [{
      name: 'n',
      type: 'int'
    }, {
      name: 'firstPass',
      type: 'int'
    }, {
      name: 'negativeInf',
      type: 'float'
    }, {
      name: 'dir',
      type: 'int'
    }, {
      name: 'inc',
      type: 'int'
    }];
    this.outputShape = shape;
    this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }

}

exports.SwapProgram = SwapProgram;

class MergeProgram {
  /**
   * @param shape desired output shape (must be half of the input size)
   */
  constructor(shape) {
    this.variableNames = ['x', 'indices']; // |n| Size of the original input of TopK
    // |firstPass| indicates if this is the first time swap is being used which
    // means no indices input containing the top K is present yet.
    // |k| Top k elements desired

    this.customUniforms = [{
      name: 'n',
      type: 'int'
    }, {
      name: 'firstPass',
      type: 'int'
    }, {
      name: 'k',
      type: 'int'
    }];
    this.outputShape = shape;
    this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }

}

exports.MergeProgram = MergeProgram;
},{}],"Chz9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.topK = topK;
exports.topKConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

var _top_k_gpu = require("../top_k_gpu");

var _Fill = require("./Fill");

var _GatherV = require("./GatherV2");

var _Reshape = require("./Reshape");

var _Slice = require("./Slice");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function disposeIntermediateTensorInfoOrNull(backend, tensorInfo) {
  if (tensorInfo !== null) {
    backend.disposeIntermediateTensorInfo(tensorInfo);
  }
}

function roundUpToPow2(num) {
  let pow2 = 1;

  while (pow2 < num) {
    pow2 *= 2;
  }

  return pow2;
} // Based on Algorithm 2 of Bitonic Top K, ref:
// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf


function topK(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    k,
    sorted
  } = attrs; // Empirically determined constant used to determine last dim threshold for
  // handing off execution to the CPU.

  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD = (0, _tfjsCore.env)().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD'); // Empirically determined constant used to determine k threshold for handing
  // off execution to the CPU.

  const TOPK_K_CPU_HANDOFF_THRESHOLD = (0, _tfjsCore.env)().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');
  const xShape = x.shape;
  const lastDim = xShape[xShape.length - 1];

  if (backend.shouldExecuteOnCPU([x]) || lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD || k > TOPK_K_CPU_HANDOFF_THRESHOLD) {
    const xVals = backend.readSync(x.dataId);
    const [allTopKVals, allTopKIndices] = (0, _shared.topKImplCPU)(xVals, xShape, x.dtype, k, sorted);
    return [backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values), backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)];
  }

  if (k === 0) {
    xShape[xShape.length - 1] = 0;
    return [backend.makeTensorInfo(xShape, x.dtype, []), backend.makeTensorInfo(xShape, 'int32', [])];
  }

  if (lastDim === 1
  /* firstPass */
  ) {
    return [x, (0, _Fill.fill)({
      attrs: {
        shape: xShape,
        dtype: 'int32',
        value: 0
      },
      backend
    })];
  } // Eagerly unpack x input since it is passed in to all the shaders which
  // require unpacked inputs.


  const xtexData = backend.texData.get(x.dataId);
  const xIsPacked = xtexData !== null && xtexData.isPacked;
  const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x; // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.

  const xSize = _tfjsCore.util.sizeFromShape(xShape);

  const batch = xSize / lastDim;
  const x2D = (0, _Reshape.reshape)({
    inputs: {
      x: xUnPacked
    },
    attrs: {
      shape: [batch, lastDim]
    },
    backend
  });

  if (xIsPacked) {
    disposeIntermediateTensorInfoOrNull(backend, xUnPacked);
  }

  const kPow2 = roundUpToPow2(k);
  const lastDimPow2 = roundUpToPow2(lastDim); // Only the indices containing the top K are kept at every step to reduce
  // number of outputs in the GPU algorithms, so once the final set of indices
  // is computed then gather is used to grab the corresponding values
  // from the original input.

  let indices = null; // GPU algorithm always takes in an indices input but this input is not used
  // on the first run of a GPU algorithm, therefore if indices is null we simply
  // pass in x2D instead of it but the value will not actually be used

  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];

  const runSwap = (dir, inc, shape) => {
    const inputs = getInputs();
    const program = new _top_k_gpu.SwapProgram(shape);
    const fistPass = indices === null ? 1 : 0;
    const customValues = [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];
    const prevIndices = indices;
    indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);
    disposeIntermediateTensorInfoOrNull(backend, prevIndices);
  }; // Step 1: local sort


  for (let len = 1; len < kPow2; len *= 2) {
    const dir = len * 2;

    for (let inc = len; inc >= 1; inc /= 2) {
      runSwap(dir, inc, [batch, lastDimPow2]);
    }
  } // Step 2: merge


  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {
    const inputs = getInputs();
    const mergeProgram = new _top_k_gpu.MergeProgram([batch, indicesSize / 2]);
    const firstPass = indices === null ? 1 : 0;
    const customValues = [[lastDim], [firstPass], [kPow2]];
    const prevIndices = indices;
    indices = backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);
    disposeIntermediateTensorInfoOrNull(backend, prevIndices); // Step 3: rebuild

    const len = kPow2 / 2;
    const dir = len * 2;

    for (let inc = len; inc >= 1; inc /= 2) {
      runSwap(dir, inc, indices.shape);
    }
  } // Keep only the requested top K results instead of kPow2


  let prevIndices = indices;
  indices = (0, _Slice.slice)({
    inputs: {
      x: indices
    },
    backend,
    attrs: {
      begin: 0,
      size: [batch, k]
    }
  });
  disposeIntermediateTensorInfoOrNull(backend, prevIndices); // Gather values on last dimension

  let values = (0, _GatherV.gatherV2)({
    inputs: {
      x: x2D,
      indices
    },
    backend,
    attrs: {
      axis: 1,
      batchDims: 1
    }
  });
  disposeIntermediateTensorInfoOrNull(backend, x2D); // Reshape back to the original input shape, except that the last
  // dimension is k.

  const newShape = xShape.slice(0, -1);
  newShape.push(k);
  prevIndices = indices;
  indices = (0, _Reshape.reshape)({
    inputs: {
      x: indices
    },
    attrs: {
      shape: newShape
    },
    backend
  });
  disposeIntermediateTensorInfoOrNull(backend, prevIndices);
  const prevValues = values;
  values = (0, _Reshape.reshape)({
    inputs: {
      x: values
    },
    attrs: {
      shape: newShape
    },
    backend
  });
  disposeIntermediateTensorInfoOrNull(backend, prevValues);
  return [values, indices];
}

const topKConfig = {
  kernelName: _tfjsCore.TopK,
  backendName: 'webgl',
  kernelFunc: topK
};
exports.topKConfig = topKConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH","../top_k_gpu":"s9hX","./Fill":"LGba","./GatherV2":"SjQ7","./Reshape":"OCN8","./Slice":"i5TP"}],"sALq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransformProgram = void 0;

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TransformProgram {
  constructor(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape) {
    this.variableNames = ['Image', 'Transforms'];
    this.outputShape = outShape;
    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;
    let fillModeId;

    switch (fillMode) {
      case 'constant':
        fillModeId = 1;
        break;

      case 'reflect':
        fillModeId = 2;
        break;

      case 'wrap':
        fillModeId = 3;
        break;

      case 'nearest':
        fillModeId = 4;
        break;

      default:
        fillModeId = 1;
        break;
    }

    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${fillModeId} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${fillModeId} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${fillModeId} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${fillValue});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${fillValue});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${imageWidth}));
                float mapY = mapCoord(inY, float(${imageHeight}));

                if (${interpolationModeId} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }

}

exports.TransformProgram = TransformProgram;
},{}],"DBVn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transform = transform;
exports.transformConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _transform_gpu = require("../transform_gpu");

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function transform(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    image,
    transforms
  } = inputs;
  const {
    interpolation,
    fillMode,
    fillValue,
    outputShape
  } = attrs;
  const [batch, imageHeight, imageWidth, numChannels] = image.shape;
  const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];
  const outShape = [batch, outHeight, outWidth, numChannels];
  const program = new _transform_gpu.TransformProgram(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);
  return backend.runWebGLProgram(program, [image, transforms], 'float32');
}

const transformConfig = {
  kernelName: _tfjsCore.Transform,
  backendName: 'webgl',
  kernelFunc: transform
};
exports.transformConfig = transformConfig;
},{"@tensorflow/tfjs-core":"kSBl","../transform_gpu":"sALq"}],"JvES":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unique = unique;
exports.uniqueConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _shared = require("../kernel_utils/shared");

var _webgl_util = require("../webgl_util");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function unique(args) {
  const {
    inputs,
    attrs,
    backend
  } = args;
  const {
    axis
  } = attrs;
  const {
    x
  } = inputs;
  (0, _webgl_util.assertNotComplex)(x, 'unique'); // For now, always forward calculation to the CPU backend.

  console.warn('WARNING: ', 'UI might be locked temporarily as data is being downloaded');
  const values = backend.readSync(x.dataId);
  const {
    outputValues,
    outputShape,
    indices
  } = (0, _shared.uniqueImplCPU)(values, axis, x.shape, x.dtype);
  return [backend.makeTensorInfo(outputShape, x.dtype, outputValues), backend.makeTensorInfo([indices.length], 'int32', indices)];
}

const uniqueConfig = {
  kernelName: _tfjsCore.Unique,
  backendName: 'webgl',
  kernelFunc: unique
};
exports.uniqueConfig = uniqueConfig;
},{"@tensorflow/tfjs-core":"kSBl","../kernel_utils/shared":"cNPH","../webgl_util":"u1ML"}],"qHku":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unpack = unpack;
exports.unpackConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _Reshape = require("./Reshape");

var _Slice = require("./Slice");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function unpack(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    value
  } = inputs;
  let {
    axis
  } = attrs;

  if (axis < 0) {
    axis += value.shape.length;
  }

  const x = value;
  const xRank = x.shape.length;
  const num = value.shape[axis];
  const outShape = new Array(xRank - 1);
  let outIndex = 0;

  for (let i = 0; i < xRank; i++) {
    if (i !== axis) {
      outShape[outIndex++] = x.shape[i];
    }
  }

  const toDispose = [];
  const begin = new Array(xRank).fill(0);
  const size = x.shape.slice();
  size[axis] = 1;
  const res = new Array(num);

  for (let i = 0; i < res.length; i++) {
    begin[axis] = i;
    const sliced = (0, _Slice.slice)({
      inputs: {
        x
      },
      backend,
      attrs: {
        begin,
        size
      }
    });
    const reshaped = (0, _Reshape.reshape)({
      inputs: {
        x: sliced
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
    res[i] = reshaped;
    toDispose.push(sliced);
  }

  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return res;
}

const unpackConfig = {
  kernelName: _tfjsCore.Unpack,
  backendName: 'webgl',
  kernelFunc: unpack
};
exports.unpackConfig = unpackConfig;
},{"@tensorflow/tfjs-core":"kSBl","./Reshape":"OCN8","./Slice":"i5TP"}],"pSCY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SegmentOpProgram = void 0;

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SegmentOpProgram {
  constructor(segOpInfo, segOpType) {
    this.variableNames = ['x', 'segmentIds'];
    const windowSize = segOpInfo.windowSize;
    const batchSize = segOpInfo.batchSize;
    const inSize = segOpInfo.inSize;
    const numSegments = segOpInfo.numSegments;
    const outSize = numSegments * Math.ceil(inSize / windowSize);
    this.outputShape = [batchSize, outSize];
    const initializationValue = '0.0';
    const returnValue = `sumValue`;
    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
    const windowSizeVec4Remainder = windowSize % 4;
    const updateSnippet = `
        sumValue += dot(values, segFilter);
    `;
    let checkValueOutOfBounds = '';

    if (inSize % windowSize > 0) {
      checkValueOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return initializationValue;
        }
      `;
    }

    let checkSegmentIdOutOfBounds = '';

    if (inSize % windowSize > 0) {
      checkSegmentIdOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return -1.0;
        }
      `;
    }

    this.userCode = `
      const float initializationValue = ${initializationValue};

      float getValue(int batch, int inIdx) {
        ${checkValueOutOfBounds}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${checkSegmentIdOutOfBounds}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${numSegments})) * float(${windowSize}));
        int currentSeg = int(mod(float(outIdx), float(${numSegments})));

        float sumValue = 0.0;

        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${updateSnippet}
        }

        int inIdx = inOffset + ${windowSizeNearestVec4};
        if (${windowSizeVec4Remainder === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${updateSnippet}
        }
        setOutput(${returnValue});
      }
    `;
  }

}

exports.SegmentOpProgram = SegmentOpProgram;
},{}],"Se2T":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unsortedSegmentSum = unsortedSegmentSum;
exports.unsortedSegmentSumConfig = void 0;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _segment_gpu = require("../segment_gpu");

var _Range = require("./Range");

var _Reshape = require("./Reshape");

var _Tile = require("./Tile");

var _Transpose = require("./Transpose");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function unsortedSegmentSum(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    segmentIds
  } = inputs;
  const {
    numSegments
  } = attrs;
  const xRank = x.shape.length;
  const toDispose = [];
  let axis = 0;

  const permutation = _tfjsCore.backend_util.getAxesPermutation([axis], xRank);

  let permutedX = x;

  if (permutation != null) {
    permutedX = (0, _Transpose.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutation
      }
    });
    toDispose.push(permutedX);
    axis = _tfjsCore.backend_util.getInnerMostAxes(1, xRank)[0];
  }

  const outShape = _tfjsCore.backend_util.segment_util.computeOutShape(permutedX.shape, axis, numSegments);

  const inSize = _tfjsCore.util.sizeFromShape([permutedX.shape[axis]]);

  const a2D = (0, _Reshape.reshape)({
    inputs: {
      x: permutedX
    },
    backend,
    attrs: {
      shape: [-1, inSize]
    }
  });
  toDispose.push(a2D);
  const outputDType = (0, _tfjsCore.sumOutType)(x.dtype);

  const segOpCompute = (x, segOpType, segmentIds, dtype, numSegments) => {
    const batchSize = x.shape[0];
    const inSize = x.shape[1];

    const windowSize = _tfjsCore.backend_util.segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);

    const segOpInfo = {
      windowSize,
      inSize,
      batchSize,
      numSegments
    };
    const program = new _segment_gpu.SegmentOpProgram(segOpInfo, segOpType);
    const output = backend.compileAndRun(program, [x, segmentIds], dtype);
    toDispose.push(output); // No need to run another GPGPU program.

    if (output.shape[1] === numSegments) {
      return output;
    }

    const rangeInfo = (0, _Range.range)({
      backend,
      attrs: {
        start: 0,
        stop: numSegments,
        step: 1,
        dtype: 'float32'
      }
    });
    const tileInfo = (0, _Tile.tile)({
      inputs: {
        x: rangeInfo
      },
      backend,
      attrs: {
        reps: [inSize / windowSize]
      }
    });
    toDispose.push(rangeInfo);
    toDispose.push(tileInfo);
    const result = segOpCompute(output, segOpType, tileInfo, dtype, numSegments);
    return result;
  };

  const segOpResult = segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);
  const reshaped = (0, _Reshape.reshape)({
    inputs: {
      x: segOpResult
    },
    backend,
    attrs: {
      shape: outShape
    }
  });
  let result = reshaped;

  if (permutation != null) {
    toDispose.push(reshaped);

    const perm = _tfjsCore.backend_util.getUndoAxesPermutation(permutation);

    result = (0, _Transpose.transpose)({
      inputs: {
        x: result
      },
      backend,
      attrs: {
        perm
      }
    });
  }

  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return result;
}

const unsortedSegmentSumConfig = {
  kernelName: _tfjsCore.UnsortedSegmentSum,
  backendName: 'webgl',
  kernelFunc: unsortedSegmentSum
};
exports.unsortedSegmentSumConfig = unsortedSegmentSumConfig;
},{"@tensorflow/tfjs-core":"kSBl","../segment_gpu":"pSCY","./Range":"M4RM","./Reshape":"OCN8","./Tile":"u848","./Transpose":"ukag"}],"Em4V":[function(require,module,exports) {
"use strict";

var _tfjsCore = require("@tensorflow/tfjs-core");

var _FusedMatMul = require("./kernels/_FusedMatMul");

var _Abs = require("./kernels/Abs");

var _Acos = require("./kernels/Acos");

var _Acosh = require("./kernels/Acosh");

var _Add = require("./kernels/Add");

var _AddN = require("./kernels/AddN");

var _All = require("./kernels/All");

var _Any = require("./kernels/Any");

var _ArgMax = require("./kernels/ArgMax");

var _ArgMin = require("./kernels/ArgMin");

var _Asin = require("./kernels/Asin");

var _Asinh = require("./kernels/Asinh");

var _Atan = require("./kernels/Atan");

var _Atan2 = require("./kernels/Atan2");

var _Atanh = require("./kernels/Atanh");

var _AvgPool = require("./kernels/AvgPool");

var _AvgPool3D = require("./kernels/AvgPool3D");

var _AvgPool3DGrad = require("./kernels/AvgPool3DGrad");

var _AvgPoolGrad = require("./kernels/AvgPoolGrad");

var _BatchMatMul = require("./kernels/BatchMatMul");

var _BatchNorm = require("./kernels/BatchNorm");

var _BatchToSpaceND = require("./kernels/BatchToSpaceND");

var _Bincount = require("./kernels/Bincount");

var _Cast = require("./kernels/Cast");

var _Ceil = require("./kernels/Ceil");

var _ClipByValue = require("./kernels/ClipByValue");

var _Complex = require("./kernels/Complex");

var _ComplexAbs = require("./kernels/ComplexAbs");

var _Concat = require("./kernels/Concat");

var _Conv2D = require("./kernels/Conv2D");

var _Conv2DBackpropFilter = require("./kernels/Conv2DBackpropFilter");

var _Conv2DBackpropInput = require("./kernels/Conv2DBackpropInput");

var _Conv3D = require("./kernels/Conv3D");

var _Conv3DBackpropFilterV = require("./kernels/Conv3DBackpropFilterV2");

var _Conv3DBackpropInputV = require("./kernels/Conv3DBackpropInputV2");

var _Cos = require("./kernels/Cos");

var _Cosh = require("./kernels/Cosh");

var _CropAndResize = require("./kernels/CropAndResize");

var _Cumsum = require("./kernels/Cumsum");

var _DenseBincount = require("./kernels/DenseBincount");

var _DepthToSpace = require("./kernels/DepthToSpace");

var _DepthwiseConv2dNative = require("./kernels/DepthwiseConv2dNative");

var _DepthwiseConv2dNativeBackpropFilter = require("./kernels/DepthwiseConv2dNativeBackpropFilter");

var _DepthwiseConv2dNativeBackpropInput = require("./kernels/DepthwiseConv2dNativeBackpropInput");

var _Diag = require("./kernels/Diag");

var _Dilation2D = require("./kernels/Dilation2D");

var _Einsum = require("./kernels/Einsum");

var _Elu = require("./kernels/Elu");

var _EluGrad = require("./kernels/EluGrad");

var _Equal = require("./kernels/Equal");

var _Erf = require("./kernels/Erf");

var _Exp = require("./kernels/Exp");

var _ExpandDims = require("./kernels/ExpandDims");

var _Expm = require("./kernels/Expm1");

var _FFT = require("./kernels/FFT");

var _Fill = require("./kernels/Fill");

var _FlipLeftRight = require("./kernels/FlipLeftRight");

var _Floor = require("./kernels/Floor");

var _FloorDiv = require("./kernels/FloorDiv");

var _FromPixels = require("./kernels/FromPixels");

var _FusedConv2D = require("./kernels/FusedConv2D");

var _FusedDepthwiseConv2D = require("./kernels/FusedDepthwiseConv2D");

var _GatherNd = require("./kernels/GatherNd");

var _GatherV = require("./kernels/GatherV2");

var _Greater = require("./kernels/Greater");

var _GreaterEqual = require("./kernels/GreaterEqual");

var _Identity = require("./kernels/Identity");

var _IFFT = require("./kernels/IFFT");

var _Imag = require("./kernels/Imag");

var _IsFinite = require("./kernels/IsFinite");

var _IsInf = require("./kernels/IsInf");

var _IsNaN = require("./kernels/IsNaN");

var _LeakyRelu = require("./kernels/LeakyRelu");

var _Less = require("./kernels/Less");

var _LessEqual = require("./kernels/LessEqual");

var _LinSpace = require("./kernels/LinSpace");

var _Log = require("./kernels/Log");

var _Log1p = require("./kernels/Log1p");

var _LogicalAnd = require("./kernels/LogicalAnd");

var _LogicalNot = require("./kernels/LogicalNot");

var _LogicalOr = require("./kernels/LogicalOr");

var _LRN = require("./kernels/LRN");

var _LRNGrad = require("./kernels/LRNGrad");

var _Max = require("./kernels/Max");

var _Maximum = require("./kernels/Maximum");

var _MaxPool = require("./kernels/MaxPool");

var _MaxPool3D = require("./kernels/MaxPool3D");

var _MaxPool3DGrad = require("./kernels/MaxPool3DGrad");

var _MaxPoolGrad = require("./kernels/MaxPoolGrad");

var _MaxPoolWithArgmax = require("./kernels/MaxPoolWithArgmax");

var _Mean = require("./kernels/Mean");

var _Min = require("./kernels/Min");

var _Minimum = require("./kernels/Minimum");

var _MirrorPad = require("./kernels/MirrorPad");

var _Mod = require("./kernels/Mod");

var _Multinomial = require("./kernels/Multinomial");

var _Multiply = require("./kernels/Multiply");

var _Neg = require("./kernels/Neg");

var _NonMaxSuppressionV = require("./kernels/NonMaxSuppressionV3");

var _NonMaxSuppressionV2 = require("./kernels/NonMaxSuppressionV4");

var _NonMaxSuppressionV3 = require("./kernels/NonMaxSuppressionV5");

var _NotEqual = require("./kernels/NotEqual");

var _OneHot = require("./kernels/OneHot");

var _OnesLike = require("./kernels/OnesLike");

var _Pack = require("./kernels/Pack");

var _PadV = require("./kernels/PadV2");

var _Pow = require("./kernels/Pow");

var _Prelu = require("./kernels/Prelu");

var _Prod = require("./kernels/Prod");

var _Range = require("./kernels/Range");

var _Real = require("./kernels/Real");

var _RealDiv = require("./kernels/RealDiv");

var _Reciprocal = require("./kernels/Reciprocal");

var _Relu = require("./kernels/Relu");

var _Relu2 = require("./kernels/Relu6");

var _Reshape = require("./kernels/Reshape");

var _ResizeBilinear = require("./kernels/ResizeBilinear");

var _ResizeBilinearGrad = require("./kernels/ResizeBilinearGrad");

var _ResizeNearestNeighbor = require("./kernels/ResizeNearestNeighbor");

var _ResizeNearestNeighborGrad = require("./kernels/ResizeNearestNeighborGrad");

var _Reverse = require("./kernels/Reverse");

var _RotateWithOffset = require("./kernels/RotateWithOffset");

var _Round = require("./kernels/Round");

var _Rsqrt = require("./kernels/Rsqrt");

var _ScatterNd = require("./kernels/ScatterNd");

var _Select = require("./kernels/Select");

var _Selu = require("./kernels/Selu");

var _Sigmoid = require("./kernels/Sigmoid");

var _Sign = require("./kernels/Sign");

var _Sin = require("./kernels/Sin");

var _Sinh = require("./kernels/Sinh");

var _Slice = require("./kernels/Slice");

var _Softmax = require("./kernels/Softmax");

var _Softplus = require("./kernels/Softplus");

var _SpaceToBatchND = require("./kernels/SpaceToBatchND");

var _SparseFillEmptyRows = require("./kernels/SparseFillEmptyRows");

var _SparseReshape = require("./kernels/SparseReshape");

var _SparseSegmentMean = require("./kernels/SparseSegmentMean");

var _SparseSegmentSum = require("./kernels/SparseSegmentSum");

var _SparseToDense = require("./kernels/SparseToDense");

var _SplitV = require("./kernels/SplitV");

var _Sqrt = require("./kernels/Sqrt");

var _Square = require("./kernels/Square");

var _SquaredDifference = require("./kernels/SquaredDifference");

var _Step = require("./kernels/Step");

var _StridedSlice = require("./kernels/StridedSlice");

var _StringNGrams = require("./kernels/StringNGrams");

var _StringSplit = require("./kernels/StringSplit");

var _StringToHashBucketFast = require("./kernels/StringToHashBucketFast");

var _Sub = require("./kernels/Sub");

var _Sum = require("./kernels/Sum");

var _Tan = require("./kernels/Tan");

var _Tanh = require("./kernels/Tanh");

var _Tile = require("./kernels/Tile");

var _TopK = require("./kernels/TopK");

var _Transform = require("./kernels/Transform");

var _Transpose = require("./kernels/Transpose");

var _Unique = require("./kernels/Unique");

var _Unpack = require("./kernels/Unpack");

var _UnsortedSegmentSum = require("./kernels/UnsortedSegmentSum");

var _ZerosLike = require("./kernels/ZerosLike");

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// List all kernel configs here
const kernelConfigs = [_LRN.LRNConfig, _LRNGrad.LRNGradConfig, _FusedMatMul._fusedMatMulConfig, _Abs.absConfig, _Acos.acosConfig, _Acosh.acoshConfig, _Add.addConfig, _AddN.addNConfig, _All.allConfig, _Any.anyConfig, _ArgMax.argMaxConfig, _ArgMin.argMinConfig, _Asin.asinConfig, _Asinh.asinhConfig, _Atan2.atan2Config, _Atan.atanConfig, _Atanh.atanhConfig, _AvgPool3D.avgPool3DConfig, _AvgPool.avgPoolConfig, _AvgPool3DGrad.avgPoolGrad3DConfig, _AvgPoolGrad.avgPoolGradConfig, _BatchMatMul.batchMatMulConfig, _BatchNorm.batchNormConfig, _BatchToSpaceND.batchToSpaceNDConfig, _Bincount.bincountConfig, _Cast.castConfig, _Ceil.ceilConfig, _ClipByValue.clipByValueConfig, _ComplexAbs.complexAbsConfig, _Complex.complexConfig, _Concat.concatConfig, _Conv2DBackpropFilter.conv2DBackpropFilterConfig, _Conv2DBackpropInput.conv2DBackpropInputConfig, _Conv2D.conv2DConfig, _Conv3DBackpropFilterV.conv3DBackpropFilterV2Config, _Conv3DBackpropInputV.conv3DBackpropInputConfig, _Conv3D.conv3DConfig, _Cos.cosConfig, _Cosh.coshConfig, _CropAndResize.cropAndResizeConfig, _Cumsum.cumsumConfig, _DenseBincount.denseBincountConfig, _DepthToSpace.depthToSpaceConfig, _DepthwiseConv2dNativeBackpropFilter.depthwiseConv2dNativeBackpropFilterConfig, _DepthwiseConv2dNativeBackpropInput.depthwiseConv2dNativeBackpropInputConfig, _DepthwiseConv2dNative.depthwiseConv2dNativeConfig, _Diag.diagConfig, _Dilation2D.dilation2DConfig, _Einsum.einsumConfig, _Elu.eluConfig, _EluGrad.eluGradConfig, _Equal.equalConfig, _Erf.erfConfig, _Exp.expConfig, _ExpandDims.expandDimsConfig, _Expm.expm1Config, _FFT.fftConfig, _Fill.fillConfig, _FlipLeftRight.flipLeftRightConfig, _Floor.floorConfig, _FloorDiv.floorDivConfig, _FromPixels.fromPixelsConfig, _FusedConv2D.fusedConv2DConfig, _FusedDepthwiseConv2D.fusedDepthwiseConv2DConfig, _GatherNd.gatherNdConfig, _GatherV.gatherV2Config, _Greater.greaterConfig, _GreaterEqual.greaterEqualConfig, _Identity.identityConfig, _IFFT.ifftConfig, _Imag.imagConfig, _IsFinite.isFiniteConfig, _IsInf.isInfConfig, _IsNaN.isNaNConfig, _LeakyRelu.leakyReluConfig, _Less.lessConfig, _LessEqual.lessEqualConfig, _LinSpace.linSpaceConfig, _Log1p.log1pConfig, _Log.logConfig, _LogicalAnd.logicalAndConfig, _LogicalNot.logicalNotConfig, _LogicalOr.logicalOrConfig, _Max.maxConfig, _MaxPool3D.maxPool3DConfig, _MaxPool.maxPoolConfig, _MaxPool3DGrad.maxPoolGrad3DConfig, _MaxPoolGrad.maxPoolGradConfig, _MaxPoolWithArgmax.maxPoolWithArgmaxConfig, _Maximum.maximumConfig, _Mean.meanConfig, _Min.minConfig, _Minimum.minimumConfig, _MirrorPad.mirrorPadConfig, _Mod.modConfig, _Multinomial.multinomialConfig, _Multiply.multiplyConfig, _Neg.negConfig, _NonMaxSuppressionV.nonMaxSuppressionV3Config, _NonMaxSuppressionV2.nonMaxSuppressionV4Config, _NonMaxSuppressionV3.nonMaxSuppressionV5Config, _NotEqual.notEqualConfig, _OneHot.oneHotConfig, _OnesLike.onesLikeConfig, _Pack.packConfig, _PadV.padV2Config, _Pow.powConfig, _Prelu.preluConfig, _Prod.prodConfig, _Range.rangeConfig, _Real.realConfig, _RealDiv.realDivConfig, _Reciprocal.reciprocalConfig, _Relu2.relu6Config, _Relu.reluConfig, _Reshape.reshapeConfig, _ResizeBilinear.resizeBilinearConfig, _ResizeBilinearGrad.resizeBilinearGradConfig, _ResizeNearestNeighbor.resizeNearestNeighborConfig, _ResizeNearestNeighborGrad.resizeNearestNeighborGradConfig, _Reverse.reverseConfig, _RotateWithOffset.rotateWithOffsetConfig, _Round.roundConfig, _Rsqrt.rsqrtConfig, _ScatterNd.scatterNdConfig, _Select.selectConfig, _Selu.seluConfig, _Sigmoid.sigmoidConfig, _Sign.signConfig, _Sin.sinConfig, _Sinh.sinhConfig, _Slice.sliceConfig, _Softmax.softmaxConfig, _Softplus.softplusConfig, _SpaceToBatchND.spaceToBatchNDConfig, _SparseFillEmptyRows.sparseFillEmptyRowsConfig, _SparseReshape.sparseReshapeConfig, _SparseSegmentMean.sparseSegmentMeanConfig, _SparseSegmentSum.sparseSegmentSumConfig, _SparseToDense.sparseToDenseConfig, _SplitV.splitVConfig, _Sqrt.sqrtConfig, _Square.squareConfig, _SquaredDifference.squaredDifferenceConfig, _Step.stepConfig, _StridedSlice.stridedSliceConfig, _StringNGrams.stringNGramsConfig, _StringSplit.stringSplitConfig, _StringToHashBucketFast.stringToHashBucketFastConfig, _Sub.subConfig, _Sum.sumConfig, _Tan.tanConfig, _Tanh.tanhConfig, _Tile.tileConfig, _TopK.topKConfig, _Transform.transformConfig, _Transpose.transposeConfig, _Unique.uniqueConfig, _Unpack.unpackConfig, _UnsortedSegmentSum.unsortedSegmentSumConfig, _ZerosLike.zerosLikeConfig];

for (const kernelConfig of kernelConfigs) {
  (0, _tfjsCore.registerKernel)(kernelConfig);
}
},{"@tensorflow/tfjs-core":"kSBl","./kernels/_FusedMatMul":"QEU7","./kernels/Abs":"ovwb","./kernels/Acos":"Olb2","./kernels/Acosh":"wCgD","./kernels/Add":"lyYz","./kernels/AddN":"SS4q","./kernels/All":"JMnO","./kernels/Any":"KErF","./kernels/ArgMax":"x2EH","./kernels/ArgMin":"hkwZ","./kernels/Asin":"OFJK","./kernels/Asinh":"Z5zC","./kernels/Atan":"OiG7","./kernels/Atan2":"nymv","./kernels/Atanh":"vHhq","./kernels/AvgPool":"x8sT","./kernels/AvgPool3D":"rMW3","./kernels/AvgPool3DGrad":"rSf2","./kernels/AvgPoolGrad":"GujH","./kernels/BatchMatMul":"oT54","./kernels/BatchNorm":"g2b2","./kernels/BatchToSpaceND":"Tq84","./kernels/Bincount":"ZZuu","./kernels/Cast":"Yp2K","./kernels/Ceil":"RdSo","./kernels/ClipByValue":"uqpD","./kernels/Complex":"BU0Z","./kernels/ComplexAbs":"fzhf","./kernels/Concat":"sjik","./kernels/Conv2D":"UXwB","./kernels/Conv2DBackpropFilter":"LTFn","./kernels/Conv2DBackpropInput":"x6Y6","./kernels/Conv3D":"oJAB","./kernels/Conv3DBackpropFilterV2":"O5Li","./kernels/Conv3DBackpropInputV2":"CNdb","./kernels/Cos":"mMLU","./kernels/Cosh":"GsRh","./kernels/CropAndResize":"mjLq","./kernels/Cumsum":"DR3A","./kernels/DenseBincount":"M9Zz","./kernels/DepthToSpace":"xZ5c","./kernels/DepthwiseConv2dNative":"hBFT","./kernels/DepthwiseConv2dNativeBackpropFilter":"OcXt","./kernels/DepthwiseConv2dNativeBackpropInput":"BDt9","./kernels/Diag":"FBsW","./kernels/Dilation2D":"X8vo","./kernels/Einsum":"q6qu","./kernels/Elu":"pPXB","./kernels/EluGrad":"Oi5K","./kernels/Equal":"CINd","./kernels/Erf":"Ksgq","./kernels/Exp":"zY0s","./kernels/ExpandDims":"oL99","./kernels/Expm1":"VaYT","./kernels/FFT":"Kmz9","./kernels/Fill":"LGba","./kernels/FlipLeftRight":"gC7C","./kernels/Floor":"SsfV","./kernels/FloorDiv":"UMGZ","./kernels/FromPixels":"ryYF","./kernels/FusedConv2D":"wsrZ","./kernels/FusedDepthwiseConv2D":"FsyW","./kernels/GatherNd":"DXdr","./kernels/GatherV2":"SjQ7","./kernels/Greater":"mJSN","./kernels/GreaterEqual":"slmh","./kernels/Identity":"LUQG","./kernels/IFFT":"fOWs","./kernels/Imag":"uHuu","./kernels/IsFinite":"ZxhQ","./kernels/IsInf":"MgGt","./kernels/IsNaN":"q4GM","./kernels/LeakyRelu":"kZ3p","./kernels/Less":"ddK3","./kernels/LessEqual":"Pgrg","./kernels/LinSpace":"DW7C","./kernels/Log":"QMgc","./kernels/Log1p":"cToW","./kernels/LogicalAnd":"bfnB","./kernels/LogicalNot":"crq9","./kernels/LogicalOr":"QPdQ","./kernels/LRN":"LYtN","./kernels/LRNGrad":"axL9","./kernels/Max":"Scv7","./kernels/Maximum":"G2Br","./kernels/MaxPool":"c3Fl","./kernels/MaxPool3D":"qMOV","./kernels/MaxPool3DGrad":"RXwg","./kernels/MaxPoolGrad":"TmIQ","./kernels/MaxPoolWithArgmax":"TNru","./kernels/Mean":"QecZ","./kernels/Min":"X4RS","./kernels/Minimum":"ew2v","./kernels/MirrorPad":"vzVL","./kernels/Mod":"C4Ln","./kernels/Multinomial":"YFUH","./kernels/Multiply":"xWNx","./kernels/Neg":"DwHV","./kernels/NonMaxSuppressionV3":"qOiR","./kernels/NonMaxSuppressionV4":"MHTf","./kernels/NonMaxSuppressionV5":"AzqR","./kernels/NotEqual":"Fgvd","./kernels/OneHot":"qyTz","./kernels/OnesLike":"NxrP","./kernels/Pack":"KYEF","./kernels/PadV2":"CzrI","./kernels/Pow":"i8M0","./kernels/Prelu":"wxXh","./kernels/Prod":"RmdB","./kernels/Range":"M4RM","./kernels/Real":"Jbfj","./kernels/RealDiv":"URW8","./kernels/Reciprocal":"GRla","./kernels/Relu":"VrOt","./kernels/Relu6":"xsDV","./kernels/Reshape":"OCN8","./kernels/ResizeBilinear":"zgo7","./kernels/ResizeBilinearGrad":"KZl4","./kernels/ResizeNearestNeighbor":"acQQ","./kernels/ResizeNearestNeighborGrad":"hJ6K","./kernels/Reverse":"yvk0","./kernels/RotateWithOffset":"voJu","./kernels/Round":"rl0C","./kernels/Rsqrt":"YW4p","./kernels/ScatterNd":"over","./kernels/Select":"VO4x","./kernels/Selu":"iGiQ","./kernels/Sigmoid":"Xsk6","./kernels/Sign":"eg93","./kernels/Sin":"XVYV","./kernels/Sinh":"mBz3","./kernels/Slice":"i5TP","./kernels/Softmax":"GaSh","./kernels/Softplus":"ZBTw","./kernels/SpaceToBatchND":"ZGig","./kernels/SparseFillEmptyRows":"eOf8","./kernels/SparseReshape":"kviu","./kernels/SparseSegmentMean":"fkXI","./kernels/SparseSegmentSum":"p9WO","./kernels/SparseToDense":"orjd","./kernels/SplitV":"eg0P","./kernels/Sqrt":"XK1L","./kernels/Square":"ELIZ","./kernels/SquaredDifference":"fP4n","./kernels/Step":"hUPU","./kernels/StridedSlice":"spAd","./kernels/StringNGrams":"XlJk","./kernels/StringSplit":"PlyH","./kernels/StringToHashBucketFast":"bPQd","./kernels/Sub":"jvgb","./kernels/Sum":"FqPw","./kernels/Tan":"akym","./kernels/Tanh":"hn5V","./kernels/Tile":"u848","./kernels/TopK":"Chz9","./kernels/Transform":"DBVn","./kernels/Transpose":"ukag","./kernels/Unique":"JvES","./kernels/Unpack":"qHku","./kernels/UnsortedSegmentSum":"Se2T","./kernels/ZerosLike":"Rmax"}],"gNVZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _base = require("./base");

Object.keys(_base).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _base[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _base[key];
    }
  });
});

require("./register_all_kernels");
},{"./base":"We8e","./register_all_kernels":"Em4V"}],"l8qd":[function(require,module,exports) {
var define;
/*!
* Proton v4.2.1
* https://github.com/drawcall/Proton
*
* Copyright 2013-2020, A-JIE
* Licensed under the MIT license
* http://www.opensource.org/licenses/mit-license
*
*/
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Proton=e()}(this,function(){"use strict";var e=3.1415926,s={PI:e,PIx2:2*e,PI_2:e/2,PI_180:e/180,N180_PI:180/e,Infinity:-999,isInfinity:function(t){return t===this.Infinity||t===1/0},randomAToB:function(t,e,i){return 2<arguments.length&&void 0!==i&&i?Math.floor(Math.random()*(e-t))+t:t+Math.random()*(e-t)},randomFloating:function(t,e,i){return this.randomAToB(t-e,t+e,i)},randomColor:function(){return"#"+("00000"+(16777216*Math.random()<<0).toString(16)).slice(-6)},randomZone:function(){},floor:function(t,e){e=1<arguments.length&&void 0!==e?e:4,e=Math.pow(10,e);return Math.floor(t*e)/e},degreeTransform:function(t){return t*e/180},toColor16:function(t){return"#"+t.toString(16)}},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},t=function(t,e,i){return e&&a(t.prototype,e),i&&a(t,i),t};function a(t,e){for(var i=0;i<e.length;i++){var a=e[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}function n(t,e,i){null===t&&(t=Function.prototype);var a=Object.getOwnPropertyDescriptor(t,e);if(void 0!==a){if("value"in a)return a.value;a=a.get;return void 0!==a?a.call(i):void 0}if(null!==(t=Object.getPrototypeOf(t)))return n(t,e,i)}var r=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},h=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},l=(t(u,[{key:"getValue",value:function(t){t=0<arguments.length&&void 0!==t&&t;return this.isArray?P.getRandFromArray(this.a):this.center?s.randomFloating(this.a,this.b,t):s.randomAToB(this.a,this.b,t)}}],[{key:"setSpanValue",value:function(t,e,i){return t instanceof u?t:void 0===e?new u(t):void 0===i?new u(t,e):new u(t,e,i)}},{key:"getSpanValue",value:function(t){return t instanceof u?t.getValue():t}}]),u);function u(t,e,i){o(this,u),P.isArray(t)?(this.isArray=!0,this.a=t):(this.isArray=!1,this.a=P.initValue(t,1),this.b=P.initValue(e,this.a),this.center=P.initValue(i,!1))}var c=function(t){--t;for(var e=1;e<32;e<<=1)t|=t>>e;return t+1},d=function(t,e){return[1,0,0,0,1,0,t,e,1]},y=function(t){var e=Math.cos(t),t=Math.sin(t);return[e,-t,0,t,e,0,0,0,1]},p=function(t,e){return[t,0,0,0,e,0,0,0,1]},f=function(t,e){var i=t[0],a=t[1],r=t[2],n=t[3],s=t[4],o=t[5],h=t[6],l=t[7],u=t[8],c=e[0],d=e[1],y=e[2],p=e[3],f=e[4],v=e[5],g=e[6],t=e[7],e=e[8];return[i*c+a*p+r*g,i*d+a*f+r*t,i*y+a*v+r*e,n*c+s*p+o*g,n*d+s*f+o*t,n*y+s*v+o*e,h*c+l*p+u*g,h*d+l*f+u*t,h*y+l*v+u*e]},v={createCanvas:function(t,e,i,a){var r=3<arguments.length&&void 0!==a?a:"absolute",a=document.createElement("canvas");return a.id=t,a.width=e,a.height=i,a.style.opacity=0,a.style.position=r,this.transform(a,-500,-500,0,0),a},createDiv:function(t,e,i){var a=document.createElement("div");return a.id=t,a.style.position="absolute",this.resize(a,e,i),a},resize:function(t,e,i){t.style.width=e+"px",t.style.height=i+"px",t.style.marginLeft=-e/2+"px",t.style.marginTop=-i/2+"px"},transform:function(t,e,i,a,r){t.style.willChange="transform";var n="translate("+e+"px, "+i+"px) scale("+a+") rotate("+r+"deg)";this.css3(t,"transform",n)},transform3d:function(t,e,i,a,r){t.style.willChange="transform";r="translate3d("+e+"px, "+i+"px, 0) scale("+a+") rotate("+r+"deg)";this.css3(t,"backfaceVisibility","hidden"),this.css3(t,"transform",r)},css3:function(t,e,i){var a=e.charAt(0).toUpperCase()+e.substr(1);t.style["Webkit"+a]=i,t.style["Moz"+a]=i,t.style["O"+a]=i,t.style["ms"+a]=i,t.style[""+e]=i}},g={},m={},b=0,_=function(t,e,i){t.drawImage(e,i.x,i.y);e=t.getImageData(i.x,i.y,i.width,i.height);return t.clearRect(i.x,i.y,i.width,i.height),e},x=function(t,e,i){var a="string"==typeof t?t:t.src;g[a]?e(g[a],i):((t=new Image).onload=function(t){g[a]=t.target,e(g[a],i)},t.src=a)},k=function(t,e,i){var a,r,n=t.src;return m[n]||(a=c(t.width),r=c(t.height),(r=v.createCanvas("proton_canvas_cache_"+ ++b,a,r)).getContext("2d").drawImage(t,0,0,t.width,t.height),m[n]=r),e&&e(m[n],i),m[n]},P={initValue:function(t,e){return t=null!=t?t:e},isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},emptyArray:function(t){t&&(t.length=0)},toArray:function(t){return this.isArray(t)?t:[t]},getRandFromArray:function(t){return t?t[Math.floor(t.length*Math.random())]:null},emptyObject:function(t,e){var i,a=1<arguments.length&&void 0!==e?e:null;for(i in t)a&&-1<a.indexOf(i)||delete t[i]},classApply:function(t,e){e=1<arguments.length&&void 0!==e?e:null;return new(e?t.bind.apply(t,[null].concat(e)):t)},setVectorVal:function(t,e){e=1<arguments.length&&void 0!==e?e:null;e&&(this.hasProp(e,"x")&&(t.p.x=e.x),this.hasProp(e,"y")&&(t.p.y=e.y),this.hasProp(e,"vx")&&(t.v.x=e.vx),this.hasProp(e,"vy")&&(t.v.y=e.vy),this.hasProp(e,"ax")&&(t.a.x=e.ax),this.hasProp(e,"ay")&&(t.a.y=e.ay),this.hasProp(e,"p")&&t.p.copy(e.p),this.hasProp(e,"v")&&t.v.copy(e.v),this.hasProp(e,"a")&&t.a.copy(e.a),this.hasProp(e,"position")&&t.p.copy(e.position),this.hasProp(e,"velocity")&&t.v.copy(e.velocity),this.hasProp(e,"accelerate")&&t.a.copy(e.accelerate))},hasProp:function(t,e){return!!t&&void 0!==t[e]},setProp:function(t,e){for(var i in e)t.hasOwnProperty(i)&&(t[i]=l.getSpanValue(e[i]));return t},getImageData:function(t,e,i){return _(t,e,i)},destroyAll:function(t,e){for(var i=1<arguments.length&&void 0!==e?e:null,a=t.length;a--;){try{t[a].destroy(i)}catch(t){}delete t[a]}t.length=0},assign:function(t,e){if("function"==typeof Object.assign)return Object.assign(t,e);for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}},E={},A={_index:0,_cache:{},id:function(t){return void 0!==E[t]&&null!==E[t]||(E[t]=0),t+"_"+E[t]++},getId:function(t){var e=this.getIdFromCache(t);return e||(e="PUID_"+this._index++,this._cache[e]=t,e)},getIdFromCache:function(t){var e,i=void 0;for(i in this._cache){if((e=this._cache[i])===t)return i;if(this.isBody(e,t)&&e.src===t.src)return i}return null},isBody:function(t,e){return"object"===(void 0===t?"undefined":i(t))&&"object"===(void 0===e?"undefined":i(e))&&t.isInner&&e.isInner},getTarget:function(t){return this._cache[t]}},T=(t(R,[{key:"get",value:function(t,e,i){var a=void 0;return i=i||t.__puid||A.getId(t),(a=this.cache[i]&&0<this.cache[i].length?this.cache[i].pop():this.createOrClone(t,e)).__puid=t.__puid||i,a}},{key:"expire",value:function(t){return this.getCache(t.__puid).push(t)}},{key:"createOrClone",value:function(t,e){return this.total++,this.create?this.create(t,e):"function"==typeof t?P.classApply(t,e):t.clone()}},{key:"getCount",value:function(){var t,e=0;for(t in this.cache)e+=this.cache[t].length;return e++}},{key:"destroy",value:function(){for(var t in this.cache)this.cache[t].length=0,delete this.cache[t]}},{key:"getCache",value:function(t){t=0<arguments.length&&void 0!==t?t:"default";return this.cache[t]||(this.cache[t]=[]),this.cache[t]}}]),R);function R(t){o(this,R),this.total=0,this.cache={}}var O=(t(w,[{key:"update",value:function(t,e){this.add(t,e);var i=this.getEmitter(),t=this.getRenderer(),e="";switch(this.type){case 2:e+="emitter:"+this.proton.emitters.length+"<br>",i&&(e+="em speed:"+i.emitSpeed+"<br>"),i&&(e+="pos:"+this.getEmitterPos(i));break;case 3:i&&(e+="initializes:"+i.initializes.length+"<br>"),i&&(e+='<span style="display:inline-block;">'+this.concatArr(i.initializes)+"</span><br>"),i&&(e+="behaviours:"+i.behaviours.length+"<br>"),i&&(e+='<span style="display:inline-block;">'+this.concatArr(i.behaviours)+"</span><br>");break;case 4:t&&(e+=t.name+"<br>"),t&&(e+="body:"+this.getCreatedNumber(t)+"<br>");break;default:e+="particles:"+this.proton.getCount()+"<br>",e+="pool:"+this.proton.pool.getCount()+"<br>",e+="total:"+this.proton.pool.total}this.container.innerHTML=e}},{key:"add",value:function(t,e){var i=this;if(!this.container){this.type=1,this.container=document.createElement("div"),this.container.style.cssText=["position:absolute;bottom:0px;left:0;cursor:pointer;","opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;","width:120px;height:50px;background-color:#002;color:#0ff;"].join(""),this.container.addEventListener("click",function(t){i.type++,4<i.type&&(i.type=1)},!1);var a=void 0,r=void 0;switch(t){case 2:a="#201",r="#f08";break;case 3:a="#020",r="#0f0";break;default:a="#002",r="#0ff"}this.container.style["background-color"]=a,this.container.style.color=r}this.container.parentNode||(e=e||this.body||document.body).appendChild(this.container)}},{key:"getEmitter",value:function(){return this.proton.emitters[this.emitterIndex]}},{key:"getRenderer",value:function(){return this.proton.renderers[this.rendererIndex]}},{key:"concatArr",value:function(t){var e="";if(!t||!t.length)return e;for(var i=0;i<t.length;i++)e+=(t[i].name||"").substr(0,1)+".";return e}},{key:"getCreatedNumber",value:function(t){return t.pool.total||t.cpool&&t.cpool.total||0}},{key:"getEmitterPos",value:function(t){return Math.round(t.p.x)+","+Math.round(t.p.y)}}]),w);function w(t){o(this,w),this.proton=t,this.container=null,this.type=1,this.emitterIndex=0,this.rendererIndex=0}var C=(t(S,[{key:"addEventListener",value:function(t,e){return this._listeners?this.removeEventListener(t,e):this._listeners={},this._listeners[t]||(this._listeners[t]=[]),this._listeners[t].push(e),e}},{key:"removeEventListener",value:function(t,e){if(this._listeners&&this._listeners[t])for(var i=this._listeners[t],a=i.length,r=0;r<a;r++)if(i[r]===e){1===a?delete this._listeners[t]:i.splice(r,1);break}}},{key:"removeAllEventListeners",value:function(t){t?this._listeners&&delete this._listeners[t]:this._listeners=null}},{key:"dispatchEvent",value:function(t,e){var i=!1,a=this._listeners;if(t&&a){var r=a[t];if(!r)return i;for(var n=void 0,s=r.length;s--;)n=r[s],i=i||n(e)}return!!i}},{key:"hasEventListener",value:function(t){var e=this._listeners;return!(!e||!e[t])}}],[{key:"bind",value:function(t){t.prototype.dispatchEvent=S.prototype.dispatchEvent,t.prototype.hasEventListener=S.prototype.hasEventListener,t.prototype.addEventListener=S.prototype.addEventListener,t.prototype.removeEventListener=S.prototype.removeEventListener,t.prototype.removeAllEventListeners=S.prototype.removeAllEventListeners}}]),S);function S(){o(this,S),this._listeners=null}var I=(t(D,[{key:"calculate",value:function(t,e,i){this.eulerIntegrate(t,e,i)}},{key:"eulerIntegrate",value:function(t,e,i){t.sleep||(t.old.p.copy(t.p),t.old.v.copy(t.v),t.a.multiplyScalar(1/t.mass),t.v.add(t.a.multiplyScalar(e)),t.p.add(t.old.v.multiplyScalar(e)),i&&t.v.multiplyScalar(i),t.a.clear())}}]),D);function D(t){o(this,D),this.type=t}var V=(t(M,[{key:"addRenderer",value:function(t){t.init(this),this.renderers.push(t)}},{key:"removeRenderer",value:function(t){var e=this.renderers.indexOf(t);this.renderers.splice(e,1),t.remove(this)}},{key:"addEmitter",value:function(t){this.emitters.push(t),(t.parent=this).dispatchEvent(M.EMITTER_ADDED,t)}},{key:"removeEmitter",value:function(t){var e=this.emitters.indexOf(t);this.emitters.splice(e,1),t.parent=null,this.dispatchEvent(M.EMITTER_REMOVED,t)}},{key:"update",value:function(){"auto"===this._fps?(this.dispatchEvent(M.PROTON_UPDATE),M.USE_CLOCK?(this.then||(this.then=(new Date).getTime()),this.now=(new Date).getTime(),this.elapsed=.001*(this.now-this.then),this.amendChangeTabsBug(),0<this.elapsed&&this.emittersUpdate(this.elapsed),this.then=this.now):this.emittersUpdate(M.DEFAULT_INTERVAL),this.dispatchEvent(M.PROTON_UPDATE_AFTER)):(this.then||(this.then=(new Date).getTime()),this.now=(new Date).getTime(),this.elapsed=.001*(this.now-this.then),this.elapsed>this._interval&&(this.dispatchEvent(M.PROTON_UPDATE),this.emittersUpdate(this._interval),this.then=this.now-this.elapsed%this._interval*1e3,this.dispatchEvent(M.PROTON_UPDATE_AFTER)))}},{key:"emittersUpdate",value:function(t){for(var e=this.emitters.length;e--;)this.emitters[e].update(t)}},{key:"amendChangeTabsBug",value:function(){M.amendChangeTabsBug&&.5<this.elapsed&&(this.then=(new Date).getTime(),this.elapsed=0)}},{key:"getCount",value:function(){for(var t=0,e=this.emitters.length;e--;)t+=this.emitters[e].particles.length;return t}},{key:"getAllParticles",value:function(){for(var t=[],e=this.emitters.length;e--;)t=t.concat(this.emitters[e].particles);return t}},{key:"destroyAllEmitters",value:function(){P.destroyAll(this.emitters)}},{key:"destroy",value:function(t){function e(){i.time=0,i.then=0,i.pool.destroy(),P.destroyAll(i.emitters),P.destroyAll(i.renderers,i.getAllParticles())}var i=this;0<arguments.length&&void 0!==t&&t?setTimeout(e,200):e()}},{key:"fps",set:function(t){this._fps=t,this._interval="auto"===t?M.DEFAULT_INTERVAL:s.floor(1/t,7)},get:function(){return this._fps}}]),M);function M(t){o(this,M),this.emitters=[],this.renderers=[],this.time=0,this.now=0,this.then=0,this.elapsed=0,this.stats=new O(this),this.pool=new T(80),this.integrationType=P.initValue(t,M.EULER),this.integrator=new I(this.integrationType),this._fps="auto",this._interval=M.DEFAULT_INTERVAL}V.USE_CLOCK=!1,V.MEASURE=100,V.EULER="euler",V.RK2="runge-kutta2",V.PARTICLE_CREATED="PARTICLE_CREATED",V.PARTICLE_UPDATE="PARTICLE_UPDATE",V.PARTICLE_SLEEP="PARTICLE_SLEEP",V.PARTICLE_DEAD="PARTICLE_DEAD",V.EMITTER_ADDED="EMITTER_ADDED",V.EMITTER_REMOVED="EMITTER_REMOVED",V.PROTON_UPDATE="PROTON_UPDATE",V.PROTON_UPDATE_AFTER="PROTON_UPDATE_AFTER",V.DEFAULT_INTERVAL=.0167,V.amendChangeTabsBug=!0,C.bind(V);var B=(t(L,[{key:"reset",value:function(){this.r=255,this.g=255,this.b=255}}]),L);function L(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:255,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:255,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:255;o(this,L),this.r=t,this.g=e,this.b=i}var U={easeLinear:function(t){return t},easeInQuad:function(t){return Math.pow(t,2)},easeOutQuad:function(t){return-(Math.pow(t-1,2)-1)},easeInOutQuad:function(t){return(t/=.5)<1?.5*Math.pow(t,2):-.5*((t-=2)*t-2)},easeInCubic:function(t){return Math.pow(t,3)},easeOutCubic:function(t){return Math.pow(t-1,3)+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*Math.pow(t,3):.5*(Math.pow(t-2,3)+2)},easeInQuart:function(t){return Math.pow(t,4)},easeOutQuart:function(t){return-(Math.pow(t-1,4)-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},easeInSine:function(t){return 1-Math.cos(t*s.PI_2)},easeOutSine:function(t){return Math.sin(t*s.PI_2)},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:1-Math.pow(2,-10*t)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},easeInCirc:function(t){return-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1-Math.pow(t-1,2))},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInBack:function(t){return t*t*(2.70158*t-1.70158)},easeOutBack:function(t){return--t*t*(2.70158*t+1.70158)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},getEasing:function(t){return"function"==typeof t?t:this[t]||this.easeLinear}},F=(t(z,[{key:"set",value:function(t,e){return this.x=t,this.y=e,this}},{key:"setX",value:function(t){return this.x=t,this}},{key:"setY",value:function(t){return this.y=t,this}},{key:"getGradient",value:function(){return 0!==this.x?Math.atan2(this.y,this.x):0<this.y?s.PI_2:this.y<0?-s.PI_2:void 0}},{key:"copy",value:function(t){return this.x=t.x,this.y=t.y,this}},{key:"add",value:function(t,e){return void 0!==e?this.addVectors(t,e):(this.x+=t.x,this.y+=t.y,this)}},{key:"addXY",value:function(t,e){return this.x+=t,this.y+=e,this}},{key:"addVectors",value:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}},{key:"sub",value:function(t,e){return void 0!==e?this.subVectors(t,e):(this.x-=t.x,this.y-=t.y,this)}},{key:"subVectors",value:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}},{key:"divideScalar",value:function(t){return 0!==t?(this.x/=t,this.y/=t):this.set(0,0),this}},{key:"multiplyScalar",value:function(t){return this.x*=t,this.y*=t,this}},{key:"negate",value:function(){return this.multiplyScalar(-1)}},{key:"dot",value:function(t){return this.x*t.x+this.y*t.y}},{key:"lengthSq",value:function(){return this.x*this.x+this.y*this.y}},{key:"length",value:function(){return Math.sqrt(this.x*this.x+this.y*this.y)}},{key:"normalize",value:function(){return this.divideScalar(this.length())}},{key:"distanceTo",value:function(t){return Math.sqrt(this.distanceToSquared(t))}},{key:"rotate",value:function(t){var e=this.x,i=this.y;return this.x=e*Math.cos(t)+i*Math.sin(t),this.y=-e*Math.sin(t)+i*Math.cos(t),this}},{key:"distanceToSquared",value:function(t){var e=this.x-t.x,t=this.y-t.y;return e*e+t*t}},{key:"lerp",value:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}},{key:"equals",value:function(t){return t.x===this.x&&t.y===this.y}},{key:"clear",value:function(){return this.x=0,this.y=0,this}},{key:"clone",value:function(){return new z(this.x,this.y)}}]),z);function z(t,e){o(this,z),this.x=t||0,this.y=e||0}var j=(t(N,[{key:"getDirection",value:function(){return Math.atan2(this.v.x,-this.v.y)*s.N180_PI}},{key:"reset",value:function(){return this.life=1/0,this.age=0,this.dead=!1,this.sleep=!1,this.body=null,this.sprite=null,this.parent=null,this.energy=1,this.mass=1,this.radius=10,this.alpha=1,this.scale=1,this.rotation=0,this.color=null,this.p.set(0,0),this.v.set(0,0),this.a.set(0,0),this.old.p.set(0,0),this.old.v.set(0,0),this.old.a.set(0,0),this.easing=U.easeLinear,this.rgb.reset(),P.emptyObject(this.data),this.removeAllBehaviours(),this}},{key:"update",value:function(t,e){this.sleep||(this.age+=t,this.applyBehaviours(t,e)),this.age<this.life?(e=this.easing(this.age/this.life),this.energy=Math.max(1-e,0)):this.destroy()}},{key:"applyBehaviours",value:function(t,e){for(var i=this.behaviours.length,a=void 0,a=0;a<i;a++)this.behaviours[a]&&this.behaviours[a].applyBehaviour(this,t,e)}},{key:"addBehaviour",value:function(t){this.behaviours.push(t),t.hasOwnProperty("parents")&&t.parents.push(this),t.initialize(this)}},{key:"addBehaviours",value:function(t){for(var e=t.length,i=void 0,i=0;i<e;i++)this.addBehaviour(t[i])}},{key:"removeBehaviour",value:function(t){t=this.behaviours.indexOf(t);-1<t&&(this.behaviours.splice(t,1).parents=null)}},{key:"removeAllBehaviours",value:function(){P.emptyArray(this.behaviours)}},{key:"destroy",value:function(){this.removeAllBehaviours(),this.energy=0,this.dead=!0,this.parent=null}}]),N);function N(t){o(this,N),this.id="",this.old={},this.data={},this.behaviours=[],this.p=[],this.v=[],this.a=[],this.rgb={},this.name="Particle",this.id=A.id(this.name),this.old={},this.data={},this.behaviours=[],this.p=new F,this.v=new F,this.a=new F,this.old.p=new F,this.old.v=new F,this.old.a=new F,this.rgb=new B,this.reset(),t&&P.setProp(this,t)}var H={hexToRgb:function(t){t="#"===t.charAt(0)?t.substring(1,7):t;return{r:parseInt(t.substring(0,2),16),g:parseInt(t.substring(2,4),16),b:parseInt(t.substring(4,6),16)}},rgbToHex:function(t){return"rgb("+t.r+", "+t.g+", "+t.b+")"},getHex16FromParticle:function(t){return 65536*Number(t.rgb.r)+256*Number(t.rgb.g)+Number(t.rgb.b)}},q=(t(G,[{key:"set",value:function(t,e){return this.r=t,this.tha=e,this}},{key:"setR",value:function(t){return this.r=t,this}},{key:"setTha",value:function(t){return this.tha=t,this}},{key:"copy",value:function(t){return this.r=t.r,this.tha=t.tha,this}},{key:"toVector",value:function(){return new F(this.getX(),this.getY())}},{key:"getX",value:function(){return this.r*Math.sin(this.tha)}},{key:"getY",value:function(){return-this.r*Math.cos(this.tha)}},{key:"normalize",value:function(){return this.r=1,this}},{key:"equals",value:function(t){return t.r===this.r&&t.tha===this.tha}},{key:"clear",value:function(){return this.r=0,this.tha=0,this}},{key:"clone",value:function(){return new G(this.r,this.tha)}}]),G);function G(t,e){o(this,G),this.r=Math.abs(t)||0,this.tha=e||0}var X={create:function(t){var e=new Float32Array(9);return t&&this.set(t,e),e},set:function(t,e){for(var i=0;i<9;i++)e[i]=t[i];return e},multiply:function(t,e,i){var a=t[0],r=t[1],n=t[2],s=t[3],o=t[4],h=t[6],l=t[7],u=e[0],c=e[1],d=e[2],y=e[3],p=e[4],t=e[6],e=e[7];return i[0]=u*a+c*s,i[1]=u*r+c*o,i[2]=n*d,i[3]=y*a+p*s,i[4]=y*r+p*o,i[6]=t*a+e*s+h,i[7]=t*r+e*o+l,i},inverse:function(t,e){var i=t[0],a=t[1],r=t[3],n=t[4],s=t[6],o=t[7],h=-r,t=o*r-n*s,r=1/(i*n+a*h);return e[0]=n*r,e[1]=-a*r,e[3]=h*r,e[4]=i*r,e[6]=t*r,e[7]=(-o*i+a*s)*r,e},multiplyVec2:function(t,e,i){var a=e[0],e=e[1];return i[0]=a*t[0]+e*t[3]+t[6],i[1]=a*t[1]+e*t[4]+t[7],i}},Y=(r(W,l),t(W,[{key:"getValue",value:function(){var t=P.getRandFromArray(this._arr);return"random"===t||"Random"===t?s.randomColor():t}}],[{key:"createArraySpan",value:function(t){return t?t instanceof W?t:new W(t):null}}]),W);function W(t){o(this,W);var e=h(this,(W.__proto__||Object.getPrototypeOf(W)).call(this));return e._arr=P.toArray(t),e}var Z=(t(Q,[{key:"contains",value:function(t,e){return t<=this.right&&t>=this.x&&e<=this.bottom&&e>=this.y}}]),Q);function Q(t,e,i,a){o(this,Q),this.x=t,this.y=e,this.width=i,this.height=a,this.bottom=this.y+this.height,this.right=this.x+this.width}var K=(t(J,[{key:"init",value:function(){this.startTime=0,this.nextTime=this.timePan.getValue()}},{key:"getValue",value:function(t){return this.startTime+=t,this.startTime>=this.nextTime?(this.startTime=0,this.nextTime=this.timePan.getValue(),1===this.numPan.b?.5<this.numPan.getValue(!1)?1:0:this.numPan.getValue(!0)):0}}]),J);function J(t,e){o(this,J),this.numPan=l.setSpanValue(P.initValue(t,1)),this.timePan=l.setSpanValue(P.initValue(e,1)),this.startTime=0,this.nextTime=0,this.init()}var $=(t(tt,[{key:"reset",value:function(){}},{key:"init",value:function(t,e){e?this.initialize(e):this.initialize(t)}},{key:"initialize",value:function(){}}]),tt);function tt(){o(this,tt)}var et=(r(it,$),t(it,[{key:"initialize",value:function(t){this.lifePan.a===1/0?t.life=1/0:t.life=this.lifePan.getValue()}}]),it);function it(t,e,i){o(this,it);var a=h(this,(it.__proto__||Object.getPrototypeOf(it)).call(this));return a.lifePan=l.setSpanValue(t,e,i),a.name="Life",a}var at=(t(rt,[{key:"getPosition",value:function(){}},{key:"crossing",value:function(){}}]),rt);function rt(){o(this,rt),this.vector=new F(0,0),this.random=0,this.crossType="dead",this.alert=!0}var nt=(r(st,at),t(st,[{key:"getPosition",value:function(){return this.vector.x=this.x,this.vector.y=this.y,this.vector}},{key:"crossing",value:function(){this.alert&&(console.error("Sorry, PointZone does not support crossing method!"),this.alert=!1)}}]),st);function st(t,e){o(this,st);var i=h(this,(st.__proto__||Object.getPrototypeOf(st)).call(this));return i.x=t,i.y=e,i}var ot=(r(ht,$),t(ht,[{key:"reset",value:function(t){this.zone=P.initValue(t,new nt)}},{key:"initialize",value:function(t){this.zone.getPosition(),t.p.x=this.zone.vector.x,t.p.y=this.zone.vector.y}}]),ht);function ht(t){o(this,ht);var e=h(this,(ht.__proto__||Object.getPrototypeOf(ht)).call(this));return e.zone=P.initValue(t,new nt),e.name="Position",e}var lt=(r(ut,$),t(ut,[{key:"reset",value:function(t,e,i){this.rPan=l.setSpanValue(t),this.thaPan=l.setSpanValue(e),this.type=P.initValue(i,"vector")}},{key:"normalizeVelocity",value:function(t){return t*V.MEASURE}},{key:"initialize",value:function(t){var e;"p"===this.type||"P"===this.type||"polar"===this.type?(e=new q(this.normalizeVelocity(this.rPan.getValue()),this.thaPan.getValue()*s.PI_180),t.v.x=e.getX(),t.v.y=e.getY()):(t.v.x=this.normalizeVelocity(this.rPan.getValue()),t.v.y=this.normalizeVelocity(this.thaPan.getValue()))}}]),ut);function ut(t,e,i){o(this,ut);var a=h(this,(ut.__proto__||Object.getPrototypeOf(ut)).call(this));return a.rPan=l.setSpanValue(t),a.thaPan=l.setSpanValue(e),a.type=P.initValue(i,"vector"),a.name="Velocity",a}var ct=(r(dt,$),t(dt,[{key:"initialize",value:function(t){t.mass=this.massPan.getValue()}}]),dt);function dt(t,e,i){o(this,dt);var a=h(this,(dt.__proto__||Object.getPrototypeOf(dt)).call(this));return a.massPan=l.setSpanValue(t,e,i),a.name="Mass",a}var yt=(r(pt,$),t(pt,[{key:"reset",value:function(t,e,i){this.radius=l.setSpanValue(t,e,i)}},{key:"initialize",value:function(t){t.radius=this.radius.getValue(),t.data.oldRadius=t.radius}}]),pt);function pt(t,e,i){o(this,pt);var a=h(this,(pt.__proto__||Object.getPrototypeOf(pt)).call(this));return a.radius=l.setSpanValue(t,e,i),a.name="Radius",a}var ft=(r(vt,$),t(vt,[{key:"initialize",value:function(t){var e=this.image.getValue();t.body="string"==typeof e?{width:this.w,height:this.h,src:e,isInner:!0,inner:!0}:e}},{key:"setSpanValue",value:function(t){return t instanceof Y?t:new Y(t)}}]),vt);function vt(t,e,i){o(this,vt);var a=h(this,(vt.__proto__||Object.getPrototypeOf(vt)).call(this));return a.image=a.setSpanValue(t),a.w=P.initValue(e,20),a.h=P.initValue(i,a.w),a.name="Body",a}var gt=(t(mt,[{key:"reset",value:function(t,e){this.life=P.initValue(t,1/0),this.easing=U.getEasing(e)}},{key:"normalizeForce",value:function(t){return t.multiplyScalar(V.MEASURE)}},{key:"normalizeValue",value:function(t){return t*V.MEASURE}},{key:"initialize",value:function(){}},{key:"calculate",value:function(t,e){this.age+=e,this.age>=this.life||this.dead?(this.energy=0,this.dead=!0,this.destroy()):(t=this.easing(t.age/t.life),this.energy=Math.max(1-t,0))}},{key:"destroy",value:function(){for(var t=this.parents.length;t--;)this.parents[t].removeBehaviour(this);this.parents.length=0}}]),mt);function mt(t,e){o(this,mt),this.life=P.initValue(t,1/0),this.easing=U.getEasing(e),this.age=0,this.energy=1,this.dead=!1,this.parents=[],this.id="Behaviour_"+mt.id++,this.name="Behaviour"}gt.id=0;var bt=(r(_t,gt),t(_t,[{key:"reset",value:function(t,e,i,a){this.force=this.normalizeForce(new F(t,e)),i&&n(_t.prototype.__proto__||Object.getPrototypeOf(_t.prototype),"reset",this).call(this,i,a)}},{key:"applyBehaviour",value:function(t,e,i){this.calculate(t,e,i),t.a.add(this.force)}}]),_t);function _t(t,e,i,a){o(this,_t);a=h(this,(_t.__proto__||Object.getPrototypeOf(_t)).call(this,i,a));return a.force=a.normalizeForce(new F(t,e)),a.name="Force",a}var xt=(r(kt,gt),t(kt,[{key:"reset",value:function(t,e,i,a,r){this.targetPosition=P.initValue(t,new F),this.radius=P.initValue(i,1e3),this.force=P.initValue(this.normalizeValue(e),100),this.radiusSq=this.radius*this.radius,this.attractionForce=new F,this.lengthSq=0,a&&n(kt.prototype.__proto__||Object.getPrototypeOf(kt.prototype),"reset",this).call(this,a,r)}},{key:"applyBehaviour",value:function(t,e,i){this.calculate(t,e,i),this.attractionForce.copy(this.targetPosition),this.attractionForce.sub(t.p),this.lengthSq=this.attractionForce.lengthSq(),4e-5<this.lengthSq&&this.lengthSq<this.radiusSq&&(this.attractionForce.normalize(),this.attractionForce.multiplyScalar(1-this.lengthSq/this.radiusSq),this.attractionForce.multiplyScalar(this.force),t.a.add(this.attractionForce))}}]),kt);function kt(t,e,i,a,r){o(this,kt);r=h(this,(kt.__proto__||Object.getPrototypeOf(kt)).call(this,a,r));return r.targetPosition=P.initValue(t,new F),r.radius=P.initValue(i,1e3),r.force=P.initValue(r.normalizeValue(e),100),r.radiusSq=r.radius*r.radius,r.attractionForce=new F,r.lengthSq=0,r.name="Attraction",r}var Pt=(r(Et,gt),t(Et,[{key:"reset",value:function(t,e,i,a,r){this.panFoce=new F(t,e),this.panFoce=this.normalizeForce(this.panFoce),this.delay=i,a&&n(Et.prototype.__proto__||Object.getPrototypeOf(Et.prototype),"reset",this).call(this,a,r)}},{key:"initialize",value:function(t){t.data.time=0}},{key:"applyBehaviour",value:function(t,e,i){this.calculate(t,e,i),t.data.time+=e,t.data.time>=this.delay&&(t.a.addXY(s.randomAToB(-this.panFoce.x,this.panFoce.x),s.randomAToB(-this.panFoce.y,this.panFoce.y)),t.data.time=0)}}]),Et);function Et(t,e,i,a,r){o(this,Et);r=h(this,(Et.__proto__||Object.getPrototypeOf(Et)).call(this,a,r));return r.reset(t,e,i),r.time=0,r.name="RandomDrift",r}var At=(r(Tt,bt),t(Tt,[{key:"reset",value:function(t,e,i){n(Tt.prototype.__proto__||Object.getPrototypeOf(Tt.prototype),"reset",this).call(this,0,t,e,i)}}]),Tt);function Tt(t,e,i){o(this,Tt);i=h(this,(Tt.__proto__||Object.getPrototypeOf(Tt)).call(this,0,t,e,i));return i.name="Gravity",i}var Rt=(r(Ot,gt),t(Ot,[{key:"reset",value:function(t,e,i,a,r){this.emitter=P.initValue(t,null),this.mass=P.initValue(e,!0),this.callback=P.initValue(i,null),this.collisionPool=[],this.delta=new F,a&&n(Ot.prototype.__proto__||Object.getPrototypeOf(Ot.prototype),"reset",this).call(this,a,r)}},{key:"applyBehaviour",value:function(t,e,i){for(var a,r,n,s,o,h,l=(this.emitter?this.emitter.particles:this.pool).slice(i),u=l.length,c=void 0,d=void 0,d=0;d<u;d++){(c=l[d])!==t&&(this.delta.copy(c.p),this.delta.sub(t.p),(a=this.delta.lengthSq())<=(h=t.radius+c.radius)*h&&(r=h-Math.sqrt(a),r+=.5,n=t.mass+c.mass,s=this.mass?c.mass/n:.5,o=this.mass?t.mass/n:.5,t.p.add(this.delta.clone().normalize().multiplyScalar(r*-s)),c.p.add(this.delta.normalize().multiplyScalar(r*o)),this.callback&&this.callback(t,c)))}}}]),Ot);function Ot(t,e,i,a,r){o(this,Ot);r=h(this,(Ot.__proto__||Object.getPrototypeOf(Ot)).call(this,a,r));return r.reset(t,e,i),r.name="Collision",r}var wt=(r(Ct,gt),t(Ct,[{key:"reset",value:function(t,e,i,a){this.zone=t,this.zone.crossType=P.initValue(e,"dead"),i&&n(Ct.prototype.__proto__||Object.getPrototypeOf(Ct.prototype),"reset",this).call(this,i,a)}},{key:"applyBehaviour",value:function(t,e,i){this.calculate(t,e,i),this.zone.crossing(t)}}]),Ct);function Ct(t,e,i,a){o(this,Ct);a=h(this,(Ct.__proto__||Object.getPrototypeOf(Ct)).call(this,i,a));return a.reset(t,e),a.name="CrossZone",a}var St=(r(It,gt),t(It,[{key:"reset",value:function(t,e,i,a){this.same=null==e,this.a=l.setSpanValue(P.initValue(t,1)),this.b=l.setSpanValue(e),i&&n(It.prototype.__proto__||Object.getPrototypeOf(It.prototype),"reset",this).call(this,i,a)}},{key:"initialize",value:function(t){t.data.alphaA=this.a.getValue(),this.same?t.data.alphaB=t.data.alphaA:t.data.alphaB=this.b.getValue()}},{key:"applyBehaviour",value:function(t,e,i){this.calculate(t,e,i),t.alpha=t.data.alphaB+(t.data.alphaA-t.data.alphaB)*this.energy,t.alpha<.001&&(t.alpha=0)}}]),It);function It(t,e,i,a){o(this,It);a=h(this,(It.__proto__||Object.getPrototypeOf(It)).call(this,i,a));return a.reset(t,e),a.name="Alpha",a}var Dt=(r(Vt,gt),t(Vt,[{key:"reset",value:function(t,e,i,a){this.same=null==e,this.a=l.setSpanValue(P.initValue(t,1)),this.b=l.setSpanValue(e),i&&n(Vt.prototype.__proto__||Object.getPrototypeOf(Vt.prototype),"reset",this).call(this,i,a)}},{key:"initialize",value:function(t){t.data.scaleA=this.a.getValue(),t.data.oldRadius=t.radius,t.data.scaleB=this.same?t.data.scaleA:this.b.getValue()}},{key:"applyBehaviour",value:function(t,e,i){this.calculate(t,e,i),t.scale=t.data.scaleB+(t.data.scaleA-t.data.scaleB)*this.energy,t.scale<1e-4&&(t.scale=0),t.radius=t.data.oldRadius*t.scale}}]),Vt);function Vt(t,e,i,a){o(this,Vt);a=h(this,(Vt.__proto__||Object.getPrototypeOf(Vt)).call(this,i,a));return a.reset(t,e),a.name="Scale",a}var Mt=(r(Bt,gt),t(Bt,[{key:"reset",value:function(t,e,i,a,r){this.same=null==e,this.a=l.setSpanValue(P.initValue(t,"Velocity")),this.b=l.setSpanValue(P.initValue(e,0)),this.style=P.initValue(i,"to"),a&&n(Bt.prototype.__proto__||Object.getPrototypeOf(Bt.prototype),"reset",this).call(this,a,r)}},{key:"initialize",value:function(t){t.rotation=this.a.getValue(),t.data.rotationA=this.a.getValue(),this.same||(t.data.rotationB=this.b.getValue())}},{key:"applyBehaviour",value:function(t,e,i){this.calculate(t,e,i),this.same?"V"!==this.a.a&&"Velocity"!==this.a.a&&"v"!==this.a.a||(t.rotation=t.getDirection()):"to"===this.style||"TO"===this.style||"_"===this.style?t.rotation+=t.data.rotationB+(t.data.rotationA-t.data.rotationB)*this.energy:t.rotation+=t.data.rotationB}}]),Bt);function Bt(t,e,i,a,r){o(this,Bt);r=h(this,(Bt.__proto__||Object.getPrototypeOf(Bt)).call(this,a,r));return r.reset(t,e,i),r.name="Rotate",r}var Lt=(r(Ut,gt),t(Ut,[{key:"reset",value:function(t,e,i,a){this.a=Y.createArraySpan(t),this.b=Y.createArraySpan(e),i&&n(Ut.prototype.__proto__||Object.getPrototypeOf(Ut.prototype),"reset",this).call(this,i,a)}},{key:"initialize",value:function(t){t.color=this.a.getValue(),t.data.colorA=H.hexToRgb(t.color),this.b&&(t.data.colorB=H.hexToRgb(this.b.getValue()))}},{key:"applyBehaviour",value:function(t,e,i){this.b?(this.calculate(t,e,i),t.rgb.r=t.data.colorB.r+(t.data.colorA.r-t.data.colorB.r)*this.energy,t.rgb.g=t.data.colorB.g+(t.data.colorA.g-t.data.colorB.g)*this.energy,t.rgb.b=t.data.colorB.b+(t.data.colorA.b-t.data.colorB.b)*this.energy,t.rgb.r=Math.floor(t.rgb.r),t.rgb.g=Math.floor(t.rgb.g),t.rgb.b=Math.floor(t.rgb.b)):(t.rgb.r=t.data.colorA.r,t.rgb.g=t.data.colorA.g,t.rgb.b=t.data.colorA.b)}}]),Ut);function Ut(t,e,i,a){o(this,Ut);a=h(this,(Ut.__proto__||Object.getPrototypeOf(Ut)).call(this,i,a));return a.reset(t,e),a.name="Color",a}var Ft="changing",zt=(r(jt,gt),t(jt,[{key:"setAngleAndForce",value:function(t,e){this.force=Ft,this.angle=s.PI/2,"right"===t?this.angle=s.PI/2:"left"===t?this.angle=-s.PI/2:"random"===t?this.angle="random":t instanceof l?(this.angle="span",this.span=t):t&&(this.angle=t),"changing"===String(e).toLowerCase()||"chang"===String(e).toLowerCase()||"auto"===String(e).toLowerCase()?this.force=Ft:e&&(this.force=e)}},{key:"reset",value:function(t,e,i,a){this.angle=s.PI/2,this.setAngleAndForce(t,e),i&&n(jt.prototype.__proto__||Object.getPrototypeOf(jt.prototype),"reset",this).call(this,i,a)}},{key:"initialize",value:function(t){"random"===this.angle?t.data.cangle=s.randomAToB(-s.PI,s.PI):"span"===this.angle&&(t.data.cangle=this.span.getValue()),t.data.cyclone=new F(0,0)}},{key:"applyBehaviour",value:function(t,e,i){this.calculate(t,e,i);e=void 0,i=t.v.getGradient();"random"===this.angle||"span"===this.angle?i+=t.data.cangle:i+=this.angle,e=this.force===Ft?t.v.length()/100:this.force,t.data.cyclone.x=e*Math.cos(i),t.data.cyclone.y=e*Math.sin(i),t.data.cyclone=this.normalizeForce(t.data.cyclone),t.a.add(t.data.cyclone)}}]),jt);function jt(t,e,i,a){o(this,jt);a=h(this,(jt.__proto__||Object.getPrototypeOf(jt)).call(this,i,a));return a.setAngleAndForce(t,e),a.name="Cyclone",a}var Nt=(r(Ht,xt),t(Ht,[{key:"reset",value:function(t,e,i,a,r){n(Ht.prototype.__proto__||Object.getPrototypeOf(Ht.prototype),"reset",this).call(this,t,e,i,a,r),this.force*=-1}}]),Ht);function Ht(t,e,i,a,r){o(this,Ht);r=h(this,(Ht.__proto__||Object.getPrototypeOf(Ht)).call(this,t,e,i,a,r));return r.force*=-1,r.name="Repulsion",r}var qt=(r(Gt,gt),t(Gt,[{key:"reset",value:function(t,e,i,a){this.distanceVec=new F,this.centerPoint=P.initValue(t,new F),this.force=P.initValue(this.normalizeValue(e),100),i&&n(Gt.prototype.__proto__||Object.getPrototypeOf(Gt.prototype),"reset",this).call(this,i,a)}},{key:"initialize",value:function(){}},{key:"applyBehaviour",value:function(t,e){this.distanceVec.set(this.centerPoint.x-t.p.x,this.centerPoint.y-t.p.y);var i,a=this.distanceVec.lengthSq();0!==a&&(i=this.distanceVec.length(),i=this.force*e/(a*i),t.v.x+=i*this.distanceVec.x,t.v.y+=i*this.distanceVec.y)}}]),Gt);function Gt(t,e,i,a){o(this,Gt);a=h(this,(Gt.__proto__||Object.getPrototypeOf(Gt)).call(this,i,a));return a.distanceVec=new F,a.centerPoint=P.initValue(t,new F),a.force=P.initValue(a.normalizeValue(e),100),a.name="GravityWell",a}var Xt={initialize:function(t,e,i){for(var a=i.length,r=void 0,r=0;r<a;r++)i[r]instanceof $?i[r].init(t,e):this.init(t,e,i[r]);this.bindEmitter(t,e)},init:function(t,e,i){P.setProp(e,i),P.setVectorVal(e,i)},bindEmitter:function(t,e){t.bindEmitter&&(e.p.add(t.p),e.v.add(t.v),e.a.add(t.a),e.v.rotate(s.degreeTransform(t.rotation)))}},Yt=(r(Wt,j),t(Wt,[{key:"emit",value:function(t,e){this.stoped=!1,this.emitTime=0,this.totalTime=P.initValue(t,1/0),!0===e||"life"===e||"destroy"===e?this.life="once"===t?1:this.totalTime:isNaN(e)||(this.life=e),this.rate.init()}},{key:"stop",value:function(){this.totalTime=-1,this.emitTime=0,this.stoped=!0}},{key:"preEmit",value:function(t){var e=this.stoped,i=this.emitTime,a=this.totalTime;this.stoped=!1,this.emitTime=0,this.totalTime=t,this.rate.init();for(;.0167<t;)t-=.0167,this.update(.0167);this.stoped=e,this.emitTime=i+Math.max(t,0),this.totalTime=a}},{key:"removeAllParticles",value:function(){for(var t=this.particles.length;t--;)this.particles[t].dead=!0}},{key:"addSelfInitialize",value:function(t){t.init?t.init(this):this.initAll()}},{key:"addInitialize",value:function(){for(var t=arguments.length,e=Array(t),i=0;i<t;i++)e[i]=arguments[i];for(var a=e.length;a--;)this.initializes.push(e[a])}},{key:"removeInitialize",value:function(t){t=this.initializes.indexOf(t);-1<t&&this.initializes.splice(t,1)}},{key:"removeAllInitializers",value:function(){P.emptyArray(this.initializes)}},{key:"addBehaviour",value:function(){for(var t=arguments.length,e=Array(t),i=0;i<t;i++)e[i]=arguments[i];for(var a=arguments.length;a--;){var r=e[a];this.behaviours.push(r),r.parents&&r.parents.push(this)}}},{key:"removeBehaviour",value:function(t){var e=this.behaviours.indexOf(t);return this.behaviours.splice(e,1),t.parents&&(e=t.parents.indexOf(t),t.parents.splice(e,1)),e}},{key:"removeAllBehaviours",value:function(){P.emptyArray(this.behaviours)}},{key:"update",value:function(t){this.age+=t,(this.age>=this.life||this.dead)&&this.destroy(),this.emitting(t),this.integrate(t)}},{key:"integrate",value:function(t){if(this.parent){var e=1-this.damping;this.parent.integrator.calculate(this,t,e);for(var i=void 0,a=void 0,i=this.particles.length-1;0<=i;i--)(a=this.particles[i]).update(t,i),this.parent.integrator.calculate(a,t,e),this.dispatch("PARTICLE_UPDATE",a),a.dead&&(this.dispatch("PARTICLE_DEAD",a),this.parent.pool.expire(a),this.particles.splice(i,1))}}},{key:"dispatch",value:function(t,e){this.parent&&this.parent.dispatchEvent(t,e),this.bindEvent&&this.dispatchEvent(t,e)}},{key:"emitting",value:function(t){if("once"===this.totalTime){var e=void 0,i=this.rate.getValue(99999);for(0<i&&(this.emitSpeed=i),e=0;e<i;e++)this.createParticle();this.totalTime="none"}else if(this.emitTime+=t,this.emitTime<this.totalTime){var a=this.rate.getValue(t),r=void 0;for(0<a&&(this.emitSpeed=a),r=0;r<a;r++)this.createParticle()}}},{key:"createParticle",value:function(t,e){var i=this.parent.pool.get(j);return this.setupParticle(i,t,e),this.dispatch("PARTICLE_CREATED",i),i}},{key:"setupParticle",value:function(t,e,i){var a=this.initializes,r=this.behaviours;e&&(a=P.toArray(e)),i&&(r=P.toArray(i)),t.reset(),Xt.initialize(this,t,a),t.addBehaviours(r),(t.parent=this).particles.push(t)}},{key:"remove",value:function(){this.stop(),P.destroyAll(this.particles)}},{key:"destroy",value:function(){this.dead=!0,this.remove(),this.removeAllInitializers(),this.removeAllBehaviours(),this.parent&&this.parent.removeEmitter(this)}}]),Wt);function Wt(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};o(this,Wt);t=h(this,(Wt.__proto__||Object.getPrototypeOf(Wt)).call(this,t));return t.particles=[],t.behaviours=[],t.initializes=[],t.emitTime=0,t.emitSpeed=0,t.totalTime=-1,t.damping=.006,t.bindEmitter=!0,t.rate=new K(1,.1),t.name="Emitter",t.id=A.id(t.name),t}C.bind(Yt);var Zt=(r(Qt,Yt),t(Qt,[{key:"addSelfBehaviour",value:function(){for(var t=arguments.length,e=Array(t),i=0;i<t;i++)e[i]=arguments[i];for(var a=void 0,r=e.length,a=0;a<r;a++){var n=e[a];this.selfBehaviours.push(n),n.initialize(this)}}},{key:"removeSelfBehaviour",value:function(t){t=this.selfBehaviours.indexOf(t);-1<t&&this.selfBehaviours.splice(t,1)}},{key:"update",value:function(t){if(n(Qt.prototype.__proto__||Object.getPrototypeOf(Qt.prototype),"update",this).call(this,t),!this.sleep)for(var e=this.selfBehaviours.length,i=void 0,i=0;i<e;i++)this.selfBehaviours[i].applyBehaviour(this,t,i)}}]),Qt);function Qt(t){o(this,Qt);t=h(this,(Qt.__proto__||Object.getPrototypeOf(Qt)).call(this,t));return t.selfBehaviours=[],t}var Kt=(r(Jt,Yt),t(Jt,[{key:"initEventHandler",value:function(){var e=this;this.mousemoveHandler=function(t){return e.mousemove.call(e,t)},this.mousedownHandler=function(t){return e.mousedown.call(e,t)},this.mouseupHandler=function(t){return e.mouseup.call(e,t)},this.mouseTarget.addEventListener("mousemove",this.mousemoveHandler,!1)}},{key:"emit",value:function(){this._allowEmitting=!0}},{key:"stop",value:function(){this._allowEmitting=!1}},{key:"mousemove",value:function(t){t.layerX||0===t.layerX?(this.p.x+=(t.layerX-this.p.x)*this.ease,this.p.y+=(t.layerY-this.p.y)*this.ease):!t.offsetX&&0!==t.offsetX||(this.p.x+=(t.offsetX-this.p.x)*this.ease,this.p.y+=(t.offsetY-this.p.y)*this.ease),this._allowEmitting&&n(Jt.prototype.__proto__||Object.getPrototypeOf(Jt.prototype),"emit",this).call(this,"once")}},{key:"destroy",value:function(){n(Jt.prototype.__proto__||Object.getPrototypeOf(Jt.prototype),"destroy",this).call(this),this.mouseTarget.removeEventListener("mousemove",this.mousemoveHandler,!1)}}]),Jt);function Jt(t,e,i){o(this,Jt);i=h(this,(Jt.__proto__||Object.getPrototypeOf(Jt)).call(this,i));return i.mouseTarget=P.initValue(t,window),i.ease=P.initValue(e,.7),i._allowEmitting=!1,i.initEventHandler(),i}var $t=(t(te,[{key:"setStroke",value:function(t,e){t=0<arguments.length&&void 0!==t?t:"#000000",e=1<arguments.length&&void 0!==e?e:1;this.stroke={color:t,thinkness:e}}},{key:"initHandler",value:function(){var e=this;this._protonUpdateHandler=function(){e.onProtonUpdate.call(e)},this._protonUpdateAfterHandler=function(){e.onProtonUpdateAfter.call(e)},this._emitterAddedHandler=function(t){e.onEmitterAdded.call(e,t)},this._emitterRemovedHandler=function(t){e.onEmitterRemoved.call(e,t)},this._particleCreatedHandler=function(t){e.onParticleCreated.call(e,t)},this._particleUpdateHandler=function(t){e.onParticleUpdate.call(e,t)},this._particleDeadHandler=function(t){e.onParticleDead.call(e,t)}}},{key:"init",value:function(t){(this.parent=t).addEventListener("PROTON_UPDATE",this._protonUpdateHandler),t.addEventListener("PROTON_UPDATE_AFTER",this._protonUpdateAfterHandler),t.addEventListener("EMITTER_ADDED",this._emitterAddedHandler),t.addEventListener("EMITTER_REMOVED",this._emitterRemovedHandler),t.addEventListener("PARTICLE_CREATED",this._particleCreatedHandler),t.addEventListener("PARTICLE_UPDATE",this._particleUpdateHandler),t.addEventListener("PARTICLE_DEAD",this._particleDeadHandler)}},{key:"resize",value:function(){}},{key:"destroy",value:function(){this.remove()}},{key:"remove",value:function(){this.parent.removeEventListener("PROTON_UPDATE",this._protonUpdateHandler),this.parent.removeEventListener("PROTON_UPDATE_AFTER",this._protonUpdateAfterHandler),this.parent.removeEventListener("EMITTER_ADDED",this._emitterAddedHandler),this.parent.removeEventListener("EMITTER_REMOVED",this._emitterRemovedHandler),this.parent.removeEventListener("PARTICLE_CREATED",this._particleCreatedHandler),this.parent.removeEventListener("PARTICLE_UPDATE",this._particleUpdateHandler),this.parent.removeEventListener("PARTICLE_DEAD",this._particleDeadHandler),this.parent=null}},{key:"onProtonUpdate",value:function(){}},{key:"onProtonUpdateAfter",value:function(){}},{key:"onEmitterAdded",value:function(){}},{key:"onEmitterRemoved",value:function(){}},{key:"onParticleCreated",value:function(){}},{key:"onParticleUpdate",value:function(){}},{key:"onParticleDead",value:function(){}}]),te);function te(t,e){o(this,te),this.pool=new T,this.element=t,this.stroke=e,this.circleConf={isCircle:!0},this.initHandler(),this.name="BaseRenderer"}var ee=(r(ie,$t),t(ie,[{key:"resize",value:function(t,e){this.element.width=t,this.element.height=e}},{key:"onProtonUpdate",value:function(){this.context.clearRect(0,0,this.element.width,this.element.height)}},{key:"onParticleCreated",value:function(t){t.body?x(t.body,this.addImg2Body,t):t.color=t.color||"#ff0000"}},{key:"onParticleUpdate",value:function(t){t.body?t.body instanceof Image&&this.drawImage(t):this.drawCircle(t)}},{key:"onParticleDead",value:function(t){t.body=null}},{key:"addImg2Body",value:function(t,e){e.body=t}},{key:"drawImage",value:function(t){var e,i=t.body.width*t.scale|0,a=t.body.height*t.scale|0,r=t.p.x-i/2,n=t.p.y-a/2;t.color?(t.data.buffer||(t.data.buffer=this.createBuffer(t.body)),(e=t.data.buffer.getContext("2d")).clearRect(0,0,t.data.buffer.width,t.data.buffer.height),e.globalAlpha=t.alpha,e.drawImage(t.body,0,0),e.globalCompositeOperation="source-atop",e.fillStyle=H.rgbToHex(t.rgb),e.fillRect(0,0,t.data.buffer.width,t.data.buffer.height),e.globalCompositeOperation="source-over",e.globalAlpha=1,this.context.drawImage(t.data.buffer,0,0,t.data.buffer.width,t.data.buffer.height,r,n,i,a)):(this.context.save(),this.context.globalAlpha=t.alpha,this.context.translate(t.p.x,t.p.y),this.context.rotate(s.degreeTransform(t.rotation)),this.context.translate(-t.p.x,-t.p.y),this.context.drawImage(t.body,0,0,t.body.width,t.body.height,r,n,i,a),this.context.globalAlpha=1,this.context.restore())}},{key:"drawCircle",value:function(t){t.rgb?this.context.fillStyle="rgba("+t.rgb.r+","+t.rgb.g+","+t.rgb.b+","+t.alpha+")":this.context.fillStyle=t.color,this.context.beginPath(),this.context.arc(t.p.x,t.p.y,t.radius,0,2*Math.PI,!0),this.stroke&&(this.context.strokeStyle=this.stroke.color,this.context.lineWidth=this.stroke.thinkness,this.context.stroke()),this.context.closePath(),this.context.fill()}},{key:"createBuffer",value:function(t){if(t instanceof Image){var e=t.width+"_"+t.height,i=this.bufferCache[e];return i||((i=document.createElement("canvas")).width=t.width,i.height=t.height,this.bufferCache[e]=i),i}}}]),ie);function ie(t){o(this,ie);t=h(this,(ie.__proto__||Object.getPrototypeOf(ie)).call(this,t));return t.stroke=null,t.context=t.element.getContext("2d"),t.bufferCache={},t.name="CanvasRenderer",t}var ae=(r(re,$t),t(re,[{key:"onParticleCreated",value:function(t){t.body?x(t.body,this.addImg2Body,t):(t.body=this.pool.get(this.circleConf,t),this.element.appendChild(t.body))}},{key:"onParticleUpdate",value:function(t){this.bodyReady(t)&&(this.transform3d?v.transform3d(t.body,t.p.x,t.p.y,t.scale,t.rotation):v.transform(t.body,t.p.x,t.p.y,t.scale,t.rotation),t.body.style.opacity=t.alpha,t.body.isCircle&&(t.body.style.backgroundColor=t.color||"#ff0000"))}},{key:"onParticleDead",value:function(t){this.bodyReady(t)&&(this.element.removeChild(t.body),this.pool.expire(t.body),t.body=null)}},{key:"bodyReady",value:function(t){return"object"===i(t.body)&&t.body&&!t.body.isInner}},{key:"addImg2Body",value:function(t,e){e.dead||(e.body=this.pool.get(t,e),v.resize(e.body,t.width,t.height),this.element.appendChild(e.body))}},{key:"createBody",value:function(t,e){return t.isCircle?this.createCircle(e):this.createSprite(t,e)}},{key:"createCircle",value:function(t){var e=v.createDiv(t.id+"_dom",2*t.radius,2*t.radius);return e.style.borderRadius=t.radius+"px",this.stroke&&(e.style.borderColor=this.stroke.color,e.style.borderWidth=this.stroke.thinkness+"px"),e.isCircle=!0,e}},{key:"createSprite",value:function(t,e){var i="string"==typeof t?t:t.src,t=v.createDiv(e.id+"_dom",t.width,t.height);return t.style.backgroundImage="url("+i+")",t}}]),re);function re(t){o(this,re);var i=h(this,(re.__proto__||Object.getPrototypeOf(re)).call(this,t));return i.stroke=null,i.pool.create=function(t,e){return i.createBody(t,e)},i.addImg2Body=i.addImg2Body.bind(i),i.transform3d=!1,i.name="DomRenderer",i}var ne=(r(se,$t),t(se,[{key:"onParticleCreated",value:function(t){t.body?this.createSprite(t):this.createCircle(t),this.element.addChild(t.body)}},{key:"onParticleUpdate",value:function(t){t.body&&(t.body.x=t.p.x,t.body.y=t.p.y,t.body.alpha=t.alpha,t.body.scaleX=t.body.scaleY=t.scale,t.body.rotation=t.rotation)}},{key:"onParticleDead",value:function(t){t.body&&(t.body.parent&&t.body.parent.removeChild(t.body),this.pool.expire(t.body),t.body=null),t.graphics&&this.pool.expire(t.graphics)}},{key:"createSprite",value:function(t){t.body=this.pool.get(t.body),t.body.parent||t.body.image&&(t.body.regX=t.body.image.width/2,t.body.regY=t.body.image.height/2)}},{key:"createCircle",value:function(t){var e=this.pool.get(createjs.Graphics);this.stroke&&(this.stroke instanceof String?e.beginStroke(this.stroke):e.beginStroke("#000000")),e.beginFill(t.color||"#ff0000").drawCircle(0,0,t.radius);var i=this.pool.get(createjs.Shape,[e]);t.body=i,t.graphics=e}}]),se);function se(t,e){o(this,se);t=h(this,(se.__proto__||Object.getPrototypeOf(se)).call(this,t));return t.stroke=e,t.name="EaselRenderer",t}var oe=(r(he,$t),t(he,[{key:"resize",value:function(t,e){this.element.width=t,this.element.height=e}},{key:"createImageData",value:function(t){this.rectangle=t||new Z(0,0,this.element.width,this.element.height),this.imageData=this.context.createImageData(this.rectangle.width,this.rectangle.height),this.context.putImageData(this.imageData,this.rectangle.x,this.rectangle.y)}},{key:"onProtonUpdate",value:function(){this.context.clearRect(this.rectangle.x,this.rectangle.y,this.rectangle.width,this.rectangle.height),this.imageData=this.context.getImageData(this.rectangle.x,this.rectangle.y,this.rectangle.width,this.rectangle.height)}},{key:"onProtonUpdateAfter",value:function(){this.context.putImageData(this.imageData,this.rectangle.x,this.rectangle.y)}},{key:"onParticleCreated",value:function(){}},{key:"onParticleUpdate",value:function(t){this.imageData&&this.setPixel(this.imageData,Math.floor(t.p.x-this.rectangle.x),Math.floor(t.p.y-this.rectangle.y),t)}},{key:"setPixel",value:function(t,e,i,a){var r=a.rgb;e<0||e>this.element.width||i<0||i>this.elementwidth||(e=4*((i>>0)*t.width+(e>>0)),t.data[e]=r.r,t.data[1+e]=r.g,t.data[2+e]=r.b,t.data[3+e]=255*a.alpha)}},{key:"onParticleDead",value:function(){}}]),he);function he(t,e){o(this,he);t=h(this,(he.__proto__||Object.getPrototypeOf(he)).call(this,t));return t.context=t.element.getContext("2d"),t.imageData=null,t.rectangle=null,t.rectangle=e,t.createImageData(e),t.name="PixelRenderer",t}var le=void 0,ue=(r(ce,$t),t(ce,[{key:"setPIXI",value:function(t){try{le=t||{Sprite:{}},this.createFromImage=le.Sprite.from||le.Sprite.fromImage}catch(t){}}},{key:"onProtonUpdate",value:function(){}},{key:"onParticleCreated",value:function(t){t.body?t.body=this.pool.get(t.body,t):t.body=this.pool.get(this.circleConf,t),this.blendMode&&(t.body.blendMode=this.blendMode),this.element.addChild(t.body)}},{key:"onParticleUpdate",value:function(t){this.transform(t,t.body),!0!==this.setColor&&!0!==this.color||(t.body.tint=H.getHex16FromParticle(t))}},{key:"onParticleDead",value:function(t){this.element.removeChild(t.body),this.pool.expire(t.body),t.body=null}},{key:"destroy",value:function(t){n(ce.prototype.__proto__||Object.getPrototypeOf(ce.prototype),"destroy",this).call(this),this.pool.destroy();for(var e=t.length;e--;){var i=t[e];i.body&&this.element.removeChild(i.body)}}},{key:"transform",value:function(t,e){e.x=t.p.x,e.y=t.p.y,e.alpha=t.alpha,e.scale.x=t.scale,e.scale.y=t.scale,e.rotation=t.rotation*s.PI_180}},{key:"createBody",value:function(t,e){return t.isCircle?this.createCircle(e):this.createSprite(t)}},{key:"createSprite",value:function(t){t=t.isInner?this.createFromImage(t.src):new le.Sprite(t);return t.anchor.x=.5,t.anchor.y=.5,t}},{key:"createCircle",value:function(t){var e,i=new le.Graphics;return this.stroke&&(e=this.stroke instanceof String?this.stroke:0,i.beginStroke(e)),i.beginFill(t.color||36077),i.drawCircle(0,0,t.radius),i.endFill(),i}}]),ce);function ce(t,e){o(this,ce);var i=h(this,(ce.__proto__||Object.getPrototypeOf(ce)).call(this,t));return i.stroke=e,i.color=!1,i.setColor=!1,i.blendMode=null,i.pool.create=function(t,e){return i.createBody(t,e)},i.setPIXI(window.PIXI),i.name="PixiRenderer",i}var de=(t(ye,[{key:"set",value:function(t,e){0===e?X.set(t,this.mats[0]):X.multiply(this.mats[e-1],t,this.mats[e]),this.size=Math.max(this.size,e+1)}},{key:"push",value:function(t){0===this.size?X.set(t,this.mats[0]):X.multiply(this.mats[this.size-1],t,this.mats[this.size]),this.size++}},{key:"pop",value:function(){0<this.size&&this.size--}},{key:"top",value:function(){return this.mats[this.size-1]}}]),ye);function ye(){o(this,ye),this.mats=[];for(var t=this.size=0;t<20;t++)this.mats.push(X.create([0,0,0,0,0,0,0,0,0]))}r(pe,$t),t(pe,[{key:"init",value:function(t){n(pe.prototype.__proto__||Object.getPrototypeOf(pe.prototype),"init",this).call(this,t),this.resize(this.element.width,this.element.height)}},{key:"resize",value:function(t,e){this.umat[4]=-2,this.umat[7]=1,this.smat[0]=1/t,this.smat[4]=1/e,this.mstack.set(this.umat,0),this.mstack.set(this.smat,1),this.gl.viewport(0,0,t,e),this.element.width=t,this.element.height=e}},{key:"setMaxRadius",value:function(t){this.circleCanvasURL=this.createCircle(t)}},{key:"getVertexShader",value:function(){return["uniform vec2 viewport;","attribute vec2 aVertexPosition;","attribute vec2 aTextureCoord;","uniform mat3 tMat;","varying vec2 vTextureCoord;","varying float alpha;","void main() {","vec3 v = tMat * vec3(aVertexPosition, 1.0);","gl_Position = vec4(v.x, v.y, 0, 1);","vTextureCoord = aTextureCoord;","alpha = tMat[0][2];","}"].join("\n")}},{key:"getFragmentShader",value:function(){return["precision mediump float;","varying vec2 vTextureCoord;","varying float alpha;","uniform sampler2D uSampler;","uniform vec4 color;","uniform bool useTexture;","uniform vec3 uColor;","void main() {","vec4 textureColor = texture2D(uSampler, vTextureCoord);","gl_FragColor = textureColor * vec4(uColor, 1.0);","gl_FragColor.w *= alpha;","}"].join("\n")}},{key:"initVar",value:function(){this.mstack=new de,this.umat=X.create([2,0,1,0,-2,0,-1,1,1]),this.smat=X.create([.01,0,1,0,.01,0,0,0,1]),this.texturebuffers={}}},{key:"blendEquation",value:function(t){this.gl.blendEquation(this.gl[t])}},{key:"blendFunc",value:function(t,e){this.gl.blendFunc(this.gl[t],this.gl[e])}},{key:"getShader",value:function(t,e,i){i=i?t.createShader(t.FRAGMENT_SHADER):t.createShader(t.VERTEX_SHADER);return t.shaderSource(i,e),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS)?i:(alert(t.getShaderInfoLog(i)),null)}},{key:"initShaders",value:function(){var t=this.getShader(this.gl,this.getFragmentShader(),!0),e=this.getShader(this.gl,this.getVertexShader(),!1);this.sprogram=this.gl.createProgram(),this.gl.attachShader(this.sprogram,e),this.gl.attachShader(this.sprogram,t),this.gl.linkProgram(this.sprogram),this.gl.getProgramParameter(this.sprogram,this.gl.LINK_STATUS)||alert("Could not initialise shaders"),this.gl.useProgram(this.sprogram),this.sprogram.vpa=this.gl.getAttribLocation(this.sprogram,"aVertexPosition"),this.sprogram.tca=this.gl.getAttribLocation(this.sprogram,"aTextureCoord"),this.gl.enableVertexAttribArray(this.sprogram.tca),this.gl.enableVertexAttribArray(this.sprogram.vpa),this.sprogram.tMatUniform=this.gl.getUniformLocation(this.sprogram,"tMat"),this.sprogram.samplerUniform=this.gl.getUniformLocation(this.sprogram,"uSampler"),this.sprogram.useTex=this.gl.getUniformLocation(this.sprogram,"useTexture"),this.sprogram.color=this.gl.getUniformLocation(this.sprogram,"uColor"),this.gl.uniform1i(this.sprogram.useTex,1)}},{key:"initBuffers",value:function(){var t;this.unitIBuffer=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.unitIBuffer),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,3,1,0,2,3]),this.gl.STATIC_DRAW);for(var e=void 0,i=[],e=0;e<100;e++)i.push(e);for(t=new Uint16Array(i),this.unitI33=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.unitI33),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,t,this.gl.STATIC_DRAW),i=[],e=0;e<100;e++)i.push(e,e+1,e+2);t=new Uint16Array(i),this.stripBuffer=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.stripBuffer),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,t,this.gl.STATIC_DRAW)}},{key:"createCircle",value:function(t){this.circleCanvasRadius=c(P.initValue(t,32));var e=v.createCanvas("circle_canvas",2*this.circleCanvasRadius,2*this.circleCanvasRadius),t=e.getContext("2d");return t.beginPath(),t.arc(this.circleCanvasRadius,this.circleCanvasRadius,this.circleCanvasRadius,0,2*Math.PI,!0),t.closePath(),t.fillStyle="#FFF",t.fill(),e.toDataURL()}},{key:"drawImg2Canvas",value:function(t){var e=t.body.width,i=t.body.height,a=c(t.body.width),r=c(t.body.height),n=t.body.width/a,s=t.body.height/r;this.texturebuffers[t.data.src]||(this.texturebuffers[t.data.src]=[this.gl.createTexture(),this.gl.createBuffer(),this.gl.createBuffer()]),t.data.texture=this.texturebuffers[t.data.src][0],t.data.vcBuffer=this.texturebuffers[t.data.src][1],t.data.tcBuffer=this.texturebuffers[t.data.src][2],this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t.data.tcBuffer),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([0,0,n,0,0,s,s,s]),this.gl.STATIC_DRAW),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t.data.vcBuffer),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([0,0,e,0,0,i,e,i]),this.gl.STATIC_DRAW);r=t.data.canvas.getContext("2d").getImageData(0,0,a,r);this.gl.bindTexture(this.gl.TEXTURE_2D,t.data.texture),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,r),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR_MIPMAP_NEAREST),this.gl.generateMipmap(this.gl.TEXTURE_2D),t.data.textureLoaded=!0,t.data.textureWidth=e,t.data.textureHeight=i}},{key:"onProtonUpdate",value:function(){}},{key:"onParticleCreated",value:function(t){t.data.textureLoaded=!1,t.data.tmat=X.create(),t.data.tmat[8]=1,t.data.imat=X.create(),t.data.imat[8]=1,t.body?x(t.body,this.addImg2Body,t):(x(this.circleCanvasURL,this.addImg2Body,t),t.data.oldScale=t.radius/this.circleCanvasRadius)}},{key:"addImg2Body",value:function(t,e){e.dead||(e.body=t,e.data.src=t.src,e.data.canvas=k(t),e.data.oldScale=1,this.drawImg2Canvas(e))}},{key:"onParticleUpdate",value:function(t){t.data.textureLoaded&&(this.updateMatrix(t),this.gl.uniform3f(this.sprogram.color,t.rgb.r/255,t.rgb.g/255,t.rgb.b/255),this.gl.uniformMatrix3fv(this.sprogram.tMatUniform,!1,this.mstack.top()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t.data.vcBuffer),this.gl.vertexAttribPointer(this.sprogram.vpa,2,this.gl.FLOAT,!1,0,0),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t.data.tcBuffer),this.gl.vertexAttribPointer(this.sprogram.tca,2,this.gl.FLOAT,!1,0,0),this.gl.bindTexture(this.gl.TEXTURE_2D,t.data.texture),this.gl.uniform1i(this.sprogram.samplerUniform,0),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.unitIBuffer),this.gl.drawElements(this.gl.TRIANGLES,6,this.gl.UNSIGNED_SHORT,0),this.mstack.pop())}},{key:"onParticleDead",value:function(){}},{key:"updateMatrix",value:function(t){var e=d(-t.data.textureWidth/2,-t.data.textureHeight/2),i=d(t.p.x,t.p.y),a=t.rotation*s.PI_180,r=y(a),a=t.scale*t.data.oldScale,a=p(a,a),a=f(e,a),a=f(a,r);a=f(a,i),X.inverse(a,t.data.imat),a[2]=t.alpha,this.mstack.push(a)}}]),C=pe;function pe(t){o(this,pe);t=h(this,(pe.__proto__||Object.getPrototypeOf(pe)).call(this,t));return t.gl=t.element.getContext("experimental-webgl",{antialias:!0,stencil:!1,depth:!1}),t.gl||alert("Sorry your browser do not suppest WebGL!"),t.initVar(),t.setMaxRadius(),t.initShaders(),t.initBuffers(),t.gl.blendEquation(t.gl.FUNC_ADD),t.gl.blendFunc(t.gl.SRC_ALPHA,t.gl.ONE_MINUS_SRC_ALPHA),t.gl.enable(t.gl.BLEND),t.addImg2Body=t.addImg2Body.bind(t),t.name="WebGLRenderer",t}r(fe,$t),$t=fe;function fe(t){o(this,fe);t=h(this,(fe.__proto__||Object.getPrototypeOf(fe)).call(this,t));return t.name="CustomRenderer",t}var ve=(r(ge,at),t(ge,[{key:"getPosition",value:function(){return this.random=Math.random(),this.vector.x=this.x1+this.random*this.length*Math.cos(this.gradient),this.vector.y=this.y1+this.random*this.length*Math.sin(this.gradient),this.vector}},{key:"getDirection",value:function(t,e){var i=this.dy,a=-this.dx;return 0<(i*t+a*e+this.dot)*(0==a?1:a)}},{key:"getDistance",value:function(t,e){return(this.dy*t+-this.dx*e+this.dot)/Math.sqrt(this.xxyy)}},{key:"getSymmetric",value:function(t){var e=t.getGradient(),i=2*(this.getGradient()-e),a=t.x,e=t.y;return t.x=a*Math.cos(i)-e*Math.sin(i),t.y=a*Math.sin(i)+e*Math.cos(i),t}},{key:"getGradient",value:function(){return Math.atan2(this.dy,this.dx)}},{key:"rangeOut",value:function(t){if(Math.abs(this.getGradient())<=s.PI/4){if(t.p.x<=this.maxx&&t.p.x>=this.minx)return!0}else if(t.p.y<=this.maxy&&t.p.y>=this.miny)return!0;return!1}},{key:"getLength",value:function(){return Math.sqrt(this.dx*this.dx+this.dy*this.dy)}},{key:"crossing",value:function(t){"dead"===this.crossType?">"===this.direction||"R"===this.direction||"right"===this.direction||"down"===this.direction?this.rangeOut(t)&&this.getDirection(t.p.x,t.p.y)&&(t.dead=!0):this.rangeOut(t)&&(this.getDirection(t.p.x,t.p.y)||(t.dead=!0)):"bound"===this.crossType?this.rangeOut(t)&&this.getDistance(t.p.x,t.p.y)<=t.radius&&(0===this.dx?t.v.x*=-1:0===this.dy?t.v.y*=-1:this.getSymmetric(t.v)):"cross"===this.crossType&&this.alert&&(console.error("Sorry, LineZone does not support cross method!"),this.alert=!1)}}]),ge);function ge(t,e,i,a,r){o(this,ge);var n=h(this,(ge.__proto__||Object.getPrototypeOf(ge)).call(this));return 0<=i-t?(n.x1=t,n.y1=e,n.x2=i,n.y2=a):(n.x1=i,n.y1=a,n.x2=t,n.y2=e),n.dx=n.x2-n.x1,n.dy=n.y2-n.y1,n.minx=Math.min(n.x1,n.x2),n.miny=Math.min(n.y1,n.y2),n.maxx=Math.max(n.x1,n.x2),n.maxy=Math.max(n.y1,n.y2),n.dot=n.x2*n.y1-n.x1*n.y2,n.xxyy=n.dx*n.dx+n.dy*n.dy,n.gradient=n.getGradient(),n.length=n.getLength(),n.direction=P.initValue(r,">"),n}var me=(r(be,at),t(be,[{key:"getPosition",value:function(){return this.angle=s.PIx2*Math.random(),this.randomRadius=Math.random()*this.radius,this.vector.x=this.x+this.randomRadius*Math.cos(this.angle),this.vector.y=this.y+this.randomRadius*Math.sin(this.angle),this.vector}},{key:"setCenter",value:function(t,e){this.center.x=t,this.center.y=e}},{key:"crossing",value:function(t){var e=t.p.distanceTo(this.center);"dead"===this.crossType?e-t.radius>this.radius&&(t.dead=!0):"bound"===this.crossType?e+t.radius>=this.radius&&this.getSymmetric(t):"cross"===this.crossType&&this.alert&&(console.error("Sorry, CircleZone does not support cross method!"),this.alert=!1)}},{key:"getSymmetric",value:function(t){var e=t.v.getGradient(),i=2*(this.getGradient(t)-e),a=t.v.x,e=t.v.y;t.v.x=a*Math.cos(i)-e*Math.sin(i),t.v.y=a*Math.sin(i)+e*Math.cos(i)}},{key:"getGradient",value:function(t){return-s.PI_2+Math.atan2(t.p.y-this.center.y,t.p.x-this.center.x)}}]),be);function be(t,e,i){o(this,be);var a=h(this,(be.__proto__||Object.getPrototypeOf(be)).call(this));return a.x=t,a.y=e,a.radius=i,a.angle=0,a.center={x:t,y:e},a}var _e=(r(xe,at),t(xe,[{key:"getPosition",value:function(){return this.vector.x=this.x+Math.random()*this.width,this.vector.y=this.y+Math.random()*this.height,this.vector}},{key:"crossing",value:function(t){"dead"===this.crossType?((t.p.x+t.radius<this.x||t.p.x-t.radius>this.x+this.width)&&(t.dead=!0),(t.p.y+t.radius<this.y||t.p.y-t.radius>this.y+this.height)&&(t.dead=!0)):"bound"===this.crossType?(t.p.x-t.radius<this.x?(t.p.x=this.x+t.radius,t.v.x*=-1):t.p.x+t.radius>this.x+this.width&&(t.p.x=this.x+this.width-t.radius,t.v.x*=-1),t.p.y-t.radius<this.y?(t.p.y=this.y+t.radius,t.v.y*=-1):t.p.y+t.radius>this.y+this.height&&(t.p.y=this.y+this.height-t.radius,t.v.y*=-1)):"cross"===this.crossType&&(t.p.x+t.radius<this.x&&t.v.x<=0?t.p.x=this.x+this.width+t.radius:t.p.x-t.radius>this.x+this.width&&0<=t.v.x&&(t.p.x=this.x-t.radius),t.p.y+t.radius<this.y&&t.v.y<=0?t.p.y=this.y+this.height+t.radius:t.p.y-t.radius>this.y+this.height&&0<=t.v.y&&(t.p.y=this.y-t.radius))}}]),xe);function xe(t,e,i,a){o(this,xe);var r=h(this,(xe.__proto__||Object.getPrototypeOf(xe)).call(this));return r.x=t,r.y=e,r.width=i,r.height=a,r}r(ke,at),t(ke,[{key:"reset",value:function(t,e,i,a){this.imageData=t,this.x=P.initValue(e,0),this.y=P.initValue(i,0),this.d=P.initValue(a,2),this.vectors=[],this.setVectors()}},{key:"setVectors",value:function(){for(var t=void 0,e=void 0,i=this.imageData.width,a=this.imageData.height,t=0;t<i;t+=this.d)for(e=0;e<a;e+=this.d){var r=4*((e>>0)*i+(t>>0));0<this.imageData.data[3+r]&&this.vectors.push({x:t+this.x,y:e+this.y})}return this.vector}},{key:"getBound",value:function(t,e){t=4*((e>>0)*this.imageData.width+(t>>0));return 0<this.imageData.data[3+t]}},{key:"getPosition",value:function(){var t=P.getRandFromArray(this.vectors);return this.vector.copy(t)}},{key:"getColor",value:function(t,e){t-=this.x;t=4*(((e-=this.y)>>0)*this.imageData.width+(t>>0));return{r:this.imageData.data[t],g:this.imageData.data[1+t],b:this.imageData.data[2+t],a:this.imageData.data[3+t]}}},{key:"crossing",value:function(t){"dead"===this.crossType?this.getBound(t.p.x-this.x,t.p.y-this.y)?t.dead=!0:t.dead=!1:"bound"===this.crossType&&(this.getBound(t.p.x-this.x,t.p.y-this.y)||t.v.negate())}}]),r=ke;function ke(t,e,i,a){o(this,ke);var r=h(this,(ke.__proto__||Object.getPrototypeOf(ke)).call(this));return r.reset(t,e,i,a),r}t={addEventListener:function(t,e){t.addEventListener("PROTON_UPDATE_AFTER",function(){return e()})},getStyle:function(t){t=H.hexToRgb(0<arguments.length&&void 0!==t?t:"#ff0000");return"rgba("+t.r+", "+t.g+", "+t.b+", 0.5)"},drawZone:function(t,e,i,a){var r=e.getContext("2d"),n=this.getStyle();this.addEventListener(t,function(){a&&r.clearRect(0,0,e.width,e.height),i instanceof nt?(r.beginPath(),r.fillStyle=n,r.arc(i.x,i.y,10,0,2*Math.PI,!0),r.fill(),r.closePath()):i instanceof ve?(r.beginPath(),r.strokeStyle=n,r.moveTo(i.x1,i.y1),r.lineTo(i.x2,i.y2),r.stroke(),r.closePath()):i instanceof _e?(r.beginPath(),r.strokeStyle=n,r.drawRect(i.x,i.y,i.width,i.height),r.stroke(),r.closePath()):i instanceof me&&(r.beginPath(),r.strokeStyle=n,r.arc(i.x,i.y,i.radius,0,2*Math.PI,!0),r.stroke(),r.closePath())})},drawEmitter:function(t,e,i,a){var r=e.getContext("2d"),n=this.getStyle();this.addEventListener(t,function(){a&&r.clearRect(0,0,e.width,e.height),r.beginPath(),r.fillStyle=n,r.arc(i.p.x,i.p.y,10,0,2*Math.PI,!0),r.fill(),r.closePath()})}};return V.Particle=j,V.Pool=T,V.Util=P,V.ColorUtil=H,V.MathUtil=s,V.Vector2D=V.Vector=F,V.Polar2D=V.Polar=q,V.ArraySpan=Y,V.Rectangle=Z,V.Rate=K,V.ease=U,V.Span=l,V.Mat3=X,V.getSpan=function(t,e,i){return new l(t,e,i)},V.createArraySpan=Y.createArraySpan,V.Initialize=V.Init=$,V.Life=V.L=et,V.Position=V.P=ot,V.Velocity=V.V=lt,V.Mass=V.M=ct,V.Radius=V.R=yt,V.Body=V.B=ft,V.Behaviour=gt,V.Force=V.F=bt,V.Attraction=V.A=xt,V.RandomDrift=V.RD=Pt,V.Gravity=V.G=At,V.Collision=Rt,V.CrossZone=wt,V.Alpha=St,V.Scale=V.S=Dt,V.Rotate=Mt,V.Color=Lt,V.Repulsion=Nt,V.Cyclone=zt,V.GravityWell=qt,V.Emitter=Yt,V.BehaviourEmitter=Zt,V.FollowEmitter=Kt,V.Zone=at,V.LineZone=ve,V.CircleZone=me,V.PointZone=nt,V.RectZone=_e,V.ImageZone=r,V.CanvasRenderer=ee,V.DomRenderer=ae,V.EaselRenderer=ne,V.PixiRenderer=ue,V.PixelRenderer=oe,V.WebGLRenderer=V.WebGlRenderer=C,V.CustomRenderer=$t,V.Debug=t,P.assign(V,U),V});


},{}],"pILq":[function(require,module,exports) {
"use strict";

require("regenerator-runtime/runtime");

var poseDetection = _interopRequireWildcard(require("@tensorflow-models/pose-detection"));

require("@tensorflow/tfjs-backend-webgl");

var _protonEngine = _interopRequireDefault(require("proton-engine"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var mainVideo = document.getElementsByClassName("html5-main-video")[0];
var intervalVideoPlayId;
var detector = poseDetection.createDetector(poseDetection.SupportedModels.MoveNet, {
  modelType: poseDetection.movenet.modelType.SINGLEPOSE_THUNDER
}).then(console.log("detector created"));
var img = new Image();
/**
 * Current animation type. Can be 'skeleton', 'img', 'particle'
 * @type {string}
 */

var currentAnimation = "skeleton";
var ctx;
var webGLtx;
var canvas;
var canvasGL; // Proton stuff (particles)

var proton;
var protonEmitterArray = [];
var particlesEffectType = 0;
var attractionBehaviour;
var attractionBehaviours = [];
var nosePosition = {
  x: 400,
  y: 200
};
var leftHandPosition = {
  x: 400,
  y: 200
};
var rightHandPosition = {
  x: 400,
  y: 200
};
var conf = {
  radius: 170,
  tha: 0
};
var isParticleInit = false; // only once init the particle system

var rendererGL;
var startParticleInit = true; //

var startTick = false; // Player popup initial don't show

var showPlayerPopup = false; // Config images to replace face

var usedImageArrayIndex = 0;
var imgArray = [{
  "imgWidth": 100,
  "imgHeight": 100,
  "url": "/images/cat.png",
  "rightEyeToLeft": 33,
  "rightEyeToTop": 50,
  "pixelsBetweenEyes": 25
}, {
  "imgWidth": 100,
  "imgHeight": 100,
  "url": "/images/smily.png",
  "rightEyeToLeft": 36,
  "rightEyeToTop": 34,
  "pixelsBetweenEyes": 25
}, {
  "imgWidth": 100,
  "imgHeight": 100,
  "url": "/images/sun.png",
  "rightEyeToLeft": 35,
  "rightEyeToTop": 35,
  "pixelsBetweenEyes": 35
}, {
  "imgWidth": 100,
  "imgHeight": 100,
  "url": "/images/monkey.png",
  "rightEyeToLeft": 37,
  "rightEyeToTop": 33,
  "pixelsBetweenEyes": 35
}, {
  "imgWidth": 100,
  "imgHeight": 45,
  "url": "/images/anonymous.png",
  "rightEyeToLeft": 33,
  "rightEyeToTop": 20,
  "pixelsBetweenEyes": 25
}];
/**
 * Check if URL Change and clear detector interval if we do not watch a video
 * https://www.youtube.com -> no video watching
 * https://www.youtube.com/watch* -> video watching
 *
 * @type {string}
 */

var lastUrl = location.href;
new MutationObserver(function () {
  var url = location.href;

  if (url !== lastUrl) {
    lastUrl = url;
    onUrlChange();
  }
}).observe(document, {
  subtree: true,
  childList: true
});
/**
 * Clear detector interval when we are not watching a video.
 */

function onUrlChange() {
  if (!location.href.includes("watch")) {
    clearInterval(intervalVideoPlayId);
  }
}
/**
 * Get message from popup.js and update content
 * We have 3 kinds of messages for the animation request
 * - skeleton: show skeleton
 * - img<value>: replace head with image
 * - particle<value>: show particle
 */


chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
  setNewAnimation(request.animation);
});

function setNewAnimation(animationId) {
  clearWebGL();

  if (animationId === "skeleton") {
    currentAnimation = "skeleton";
  } else if (animationId === "puppetsPlayer") {
    currentAnimation = "puppetsPlayer";
  } else if (animationId === "spiderWeb") {
    currentAnimation = "spiderWeb";
  } else if (animationId === "imgCat") {
    usedImageArrayIndex = 0;
    loadImage();
    currentAnimation = "img";
  } else if (animationId === "imgSmiley") {
    usedImageArrayIndex = 1;
    loadImage();
    currentAnimation = "img";
  } else if (animationId === "imgSun") {
    usedImageArrayIndex = 2;
    loadImage();
    currentAnimation = "img";
  } else if (animationId === "imgMonkey") {
    usedImageArrayIndex = 3;
    loadImage();
    currentAnimation = "img";
  } else if (animationId === "imgAnonymous") {
    usedImageArrayIndex = 4;
    loadImage();
    currentAnimation = "img";
  } else if (animationId === "particleHandsBall") {
    currentAnimation = "particle";
    particlesEffectType = 0;
    initParticles();
  } else if (animationId === "particle2BalHead") {
    currentAnimation = "particle";
    particlesEffectType = 1;
    initParticles();
  } else if (animationId === "particleRightHandLine") {
    currentAnimation = "particle";
    particlesEffectType = 2;
    initParticles();
  } else if (animationId === "particleNoseGravity") {
    currentAnimation = "particle";
    particlesEffectType = 3;
    initParticles();
  } else if (animationId === "particleNoseSupernova") {
    currentAnimation = "particle";
    particlesEffectType = 4;
    initParticles();
  } else if (animationId === "particleHandsTrackFromBorder") {
    currentAnimation = "particle";
    particlesEffectType = 5;
    initParticles();
  } else if (animationId === "particleUpperBodyGlow") {
    currentAnimation = "particle";
    particlesEffectType = 6;
    initParticles();
  } else if (animationId === "particleGlowPainting") {
    currentAnimation = "particle";
    particlesEffectType = 7;
    initParticles();
  } else if (animationId === "particlePainting") {
    currentAnimation = "particle";
    particlesEffectType = 8;
    initParticles();
  } else if (animationId === "particlePaintRandomDrift") {
    currentAnimation = "particle";
    particlesEffectType = 9;
    initParticles();
  } else if (animationId === "particleCometThrower") {
    currentAnimation = "particle";
    particlesEffectType = 10;
    initParticles();
  } else if (animationId === "particleBodyGlow") {
    currentAnimation = "particle";
    particlesEffectType = 11;
    initParticles();
  } else if (animationId === "particleBurningMan") {
    currentAnimation = "particle";
    particlesEffectType = 12;
    initParticles();
  }
}
/**
 * Prepare particle system
 */


function initParticles() {
  if (!currentAnimation.startsWith("particle")) {
    return;
  }

  startParticleInit = true;
  protonEmitterArray = []; // clear canvas2D content

  ctx.clearRect(0, 0, canvas.width, canvas.height);

  if (particlesEffectType === 0) {
    // hand left + hand right
    // ### Hand power balls
    proton = new _protonEngine.default();
    var emitter = new _protonEngine.default.Emitter(); // right hand

    emitter.addInitialize(new _protonEngine.default.Mass(10));
    var particleImage = new Image();
    particleImage.src = chrome.runtime.getURL("/images/particle.png");

    particleImage.onload = function () {
      emitter.addInitialize(new _protonEngine.default.Body(particleImage));
    };

    emitter.addInitialize(new _protonEngine.default.Life(.1, .4));
    emitter.rate = new _protonEngine.default.Rate(new _protonEngine.default.Span(20, 20), .1);
    emitter.addInitialize(new _protonEngine.default.V(new _protonEngine.default.Span(3, 5), new _protonEngine.default.Span(0, 360), 'polar'));
    emitter.addBehaviour(new _protonEngine.default.Alpha(1, 0));
    emitter.addBehaviour(new _protonEngine.default.Color("#3366b2", "#1155b2"));
    emitter.addBehaviour(new _protonEngine.default.Scale(_protonEngine.default.getSpan(1, 1.6), _protonEngine.default.getSpan(0, .1)));
    emitter.p.x = canvasGL.width / 2;
    emitter.p.y = canvasGL.height / 2;
    emitter.emit();
    proton.addEmitter(emitter);
    protonEmitterArray[0] = emitter; // left hand

    emitter = new _protonEngine.default.Emitter();
    emitter.addInitialize(new _protonEngine.default.Mass(10));
    var particleImage2 = new Image();
    particleImage2.src = chrome.runtime.getURL("/images/particle.png");

    particleImage2.onload = function () {
      emitter.addInitialize(new _protonEngine.default.Body(particleImage2));
    };

    emitter.addInitialize(new _protonEngine.default.Life(.1, .4));
    emitter.rate = new _protonEngine.default.Rate(new _protonEngine.default.Span(20, 20), .1);
    emitter.addInitialize(new _protonEngine.default.V(new _protonEngine.default.Span(3, 5), new _protonEngine.default.Span(0, 360), 'polar'));
    emitter.addBehaviour(new _protonEngine.default.Alpha(1, 0));
    emitter.addBehaviour(new _protonEngine.default.Color("#fdf753", "#f63a3f"));
    emitter.addBehaviour(new _protonEngine.default.Scale(_protonEngine.default.getSpan(1, 1.6), _protonEngine.default.getSpan(0, .1)));
    emitter.p.x = canvasGL.width / 2;
    emitter.p.y = canvasGL.height / 2;
    emitter.emit();
    proton.addEmitter(emitter);
    protonEmitterArray[1] = emitter;
    tryWebGLRendererInit();
  } else if (particlesEffectType === 1) {
    // ### Two head balls
    proton = new _protonEngine.default();
    protonEmitterArray[0] = createImageEmitter(canvas.width / 2 + conf.radius, canvas.height / 2, '#4F1500', '#0029FF');
    protonEmitterArray[1] = createImageEmitter(canvas.width / 2 - conf.radius, canvas.height / 2, '#004CFE', '#6600FF');
    tryWebGLRendererInit();
  } else if (particlesEffectType === 2) {
    // ### Right hand line
    proton = new _protonEngine.default();
    protonEmitterArray[0] = new _protonEngine.default.Emitter();
    protonEmitterArray[0].rate = new _protonEngine.default.Rate(new _protonEngine.default.Span(1, 50));
    protonEmitterArray[0].addInitialize(new _protonEngine.default.Radius(2, 10));
    protonEmitterArray[0].addInitialize(new _protonEngine.default.Life(1, 3));
    protonEmitterArray[0].addBehaviour(new _protonEngine.default.Color('random'));
    protonEmitterArray[0].addBehaviour(new _protonEngine.default.RandomDrift(10, 0, .035));
    protonEmitterArray[0].p.x = canvas.width / 2;
    protonEmitterArray[0].p.y = canvas.height / 2;
    protonEmitterArray[0].emit();
    proton.addEmitter(protonEmitterArray[0]);
    var renderer = new _protonEngine.default.CanvasRenderer(canvas);
    proton.addRenderer(renderer);
  } else if (particlesEffectType === 3) {
    // ### Nose gravity
    proton = new _protonEngine.default();
    protonEmitterArray[0] = new _protonEngine.default.Emitter();
    protonEmitterArray[0].damping = 0.0075;
    protonEmitterArray[0].rate = new _protonEngine.default.Rate(300);

    var _particleImage = new Image();

    _particleImage.src = chrome.runtime.getURL("/images/particle.png");

    _particleImage.onload = function () {
      emitter.addInitialize(new _protonEngine.default.Body(_particleImage, 128, 128));
    };

    protonEmitterArray[0].addInitialize(new _protonEngine.default.Mass(1), new _protonEngine.default.Radius(_protonEngine.default.getSpan(5, 10)));
    protonEmitterArray[0].addInitialize(new _protonEngine.default.Velocity(new _protonEngine.default.Span(1, 3), new _protonEngine.default.Span(0, 360), 'polar'));
    nosePosition = {
      x: canvas.width / 2,
      y: canvas.height / 2
    };
    attractionBehaviour = new _protonEngine.default.Attraction(nosePosition, 10, 100);
    protonEmitterArray[0].addBehaviour(attractionBehaviour, new _protonEngine.default.Color('random'));
    protonEmitterArray[0].addBehaviour(new _protonEngine.default.Scale(_protonEngine.default.getSpan(.1, .7)));
    protonEmitterArray[0].p.x = canvas.width / 2;
    protonEmitterArray[0].p.y = canvas.height / 2;
    protonEmitterArray[0].emit('once');
    proton.addEmitter(protonEmitterArray[0]);

    var _renderer = new _protonEngine.default.CanvasRenderer(canvas);

    proton.addRenderer(_renderer);
  } else if (particlesEffectType === 4) {
    // ### Nose supernova
    proton = new _protonEngine.default();
    protonEmitterArray[0] = new _protonEngine.default.Emitter();
    protonEmitterArray[0].rate = new _protonEngine.default.Rate(new _protonEngine.default.Span(5, 10), new _protonEngine.default.Span(.05, .2));

    var _particleImage2 = new Image();

    _particleImage2.src = chrome.runtime.getURL("/images/particle2.png");

    _particleImage2.onload = function () {
      protonEmitterArray[0].addInitialize(new _protonEngine.default.Body(_particleImage2));
    };

    protonEmitterArray[0].addInitialize(new _protonEngine.default.Body(image));
    protonEmitterArray[0].addInitialize(new _protonEngine.default.Mass(1));
    protonEmitterArray[0].addInitialize(new _protonEngine.default.Life(2, 4));
    protonEmitterArray[0].addInitialize(new _protonEngine.default.V(new _protonEngine.default.Span(0.5, 1.5), new _protonEngine.default.Span(0, 360), 'polar'));
    protonEmitterArray[0].addBehaviour(new _protonEngine.default.Alpha(1, [.7, 1]));
    var scale = new _protonEngine.default.Scale(1, 0);
    protonEmitterArray[0].addBehaviour(scale);
    protonEmitterArray[0].addBehaviour(new _protonEngine.default.Color('random', 'random', Infinity, _protonEngine.default.easeInSine));
    protonEmitterArray[0].p.x = canvas.width / 2;
    protonEmitterArray[0].p.y = canvas.height / 2;
    protonEmitterArray[0].emit();
    proton.addEmitter(protonEmitterArray[0]);

    var _renderer2 = new _protonEngine.default.CanvasRenderer(canvas);

    proton.addRenderer(_renderer2);
  } else if (particlesEffectType === 5) {
    // ### Hands track from border
    proton = new _protonEngine.default(4000);
    createEmitter(canvas.width + 50, canvas.height / 2, 0, '#fdf753', rightHandPosition, 0);
    createEmitter(canvas.width - 50, canvas.height / 2, 180, '#f80610', leftHandPosition, 1);

    var _renderer3 = new _protonEngine.default.CanvasRenderer(canvas);

    proton.addRenderer(_renderer3);
  } else if (particlesEffectType === 6) {
    // ### upper body glow
    proton = new _protonEngine.default();

    var _particleImage3 = new Image();

    _particleImage3.src = chrome.runtime.getURL("/images/particle.png");

    _particleImage3.onload = function () {
      createEmitterPointGlow(0, "#4F1500", "#e7af22", 90, _particleImage3);
      createEmitterPointGlow(1, "#4F1500", "#0029FF", 65, _particleImage3);
      createEmitterPointGlow(2, "#4F1500", "#6974f8", 0, _particleImage3);
      createEmitterPointGlow(3, "#4F1500", "#59b9e3", 0, _particleImage3);
      createEmitterPointGlow(4, "#4F1500", "#aa40e0", -65, _particleImage3);
      createEmitterPointGlow(5, "#4F1500", "#32fd16", -90, _particleImage3);
    };

    tryWebGLRendererInit();
  } else if (particlesEffectType === 7) {
    // ### glow painting
    proton = new _protonEngine.default();

    var _particleImage4 = new Image();

    _particleImage4.src = chrome.runtime.getURL("/images/particle.png");

    _particleImage4.onload = function () {
      createEmitterDrawGlow(0, "#4F1500", "#e7af22", 90, _particleImage4);
      createEmitterDrawGlow(1, "#4F1500", "#0029FF", -90, _particleImage4);
    };

    tryWebGLRendererInit();
  } else if (particlesEffectType === 8) {
    // ### particle painting
    proton = new _protonEngine.default();

    var _particleImage5 = new Image();

    _particleImage5.src = chrome.runtime.getURL("/images/particle.png");

    _particleImage5.onload = function () {
      createEmitterPointDraw(0, "#4F1500", "#e7af22", 90, _particleImage5);
      createEmitterPointDraw(1, "#4F1500", "#0029FF", -90, _particleImage5);
    };

    tryWebGLRendererInit();
  } else if (particlesEffectType === 9) {
    // ### particle painting with random drift
    proton = new _protonEngine.default();

    var _particleImage6 = new Image();

    _particleImage6.src = chrome.runtime.getURL("/images/particle.png");

    _particleImage6.onload = function () {
      createEmitterPointDrawRandomDrift(0, "#4F1500", "#e7af22", 90, _particleImage6);
      createEmitterPointDrawRandomDrift(1, "#4F1500", "#0029FF", -90, _particleImage6);
    };

    tryWebGLRendererInit();
  } else if (particlesEffectType === 10) {
    // ### particleCometThrower
    proton = new _protonEngine.default();
    var imageComet1 = new Image();
    imageComet1.src = chrome.runtime.getURL("/images/Comet_1.png");

    imageComet1.onload = function () {
      createEmitterCometThrower(0, imageComet1);
    };

    var imageComet2 = new Image();
    imageComet2.src = chrome.runtime.getURL("/images/Comet_2.png");

    imageComet2.onload = function () {
      createEmitterCometThrower(1, imageComet2);
    };

    var _renderer4 = new _protonEngine.default.CanvasRenderer(canvas);

    _renderer4.onProtonUpdate = function () {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    };

    proton.addRenderer(_renderer4);
  } else if (particlesEffectType === 11) {
    // ### body glow
    proton = new _protonEngine.default();

    var _particleImage7 = new Image();

    _particleImage7.src = chrome.runtime.getURL("/images/particle.png");

    _particleImage7.onload = function () {
      createEmitterPointGlow(0, "#4F1500", "#e7af22", 90, _particleImage7);
      createEmitterPointGlow(1, "#4F1500", "#0029FF", 65, _particleImage7);
      createEmitterPointGlow(2, "#4F1500", "#6974f8", 0, _particleImage7);
      createEmitterPointGlow(3, "#4F1500", "#59b9e3", 0, _particleImage7);
      createEmitterPointGlow(4, "#4F1500", "#aa40e0", -65, _particleImage7);
      createEmitterPointGlow(5, "#4F1500", "#32fd16", -90, _particleImage7);
      createEmitterPointGlow(6, "#031a17", "#e7af22", 90, _particleImage7);
      createEmitterPointGlow(7, "#44011b", "#0029FF", 65, _particleImage7);
      createEmitterPointGlow(8, "#493b01", "#6974f8", 0, _particleImage7);
      createEmitterPointGlow(9, "#0e0601", "#5cff24", -90, _particleImage7);
      createEmitterPointGlow(10, "#054b01", "#aa40e0", -65, _particleImage7);
      createEmitterPointGlow(11, "#1e012c", "#32fd16", 0, _particleImage7);
    };

    tryWebGLRendererInit();
  } else if (particlesEffectType === 12) {
    // ### burning man
    proton = new _protonEngine.default();

    var _particleImage8 = new Image();

    _particleImage8.src = chrome.runtime.getURL("/images/particle.png");

    _particleImage8.onload = function () {
      createEmitterPointGlow(0, "#C97024", "#290000", 90, _particleImage8);
      createEmitterPointGlow(1, "#C97024", "#290000", 65, _particleImage8);
      createEmitterPointGlow(2, "#C97024", "#290000", 0, _particleImage8);
      createEmitterPointGlow(3, "#C97024", "#290000", 0, _particleImage8);
      createEmitterPointGlow(4, "#C97024", "#290000", -65, _particleImage8);
      createEmitterPointGlow(5, "#C97024", "#290000", -90, _particleImage8);
      createEmitterPointGlow(6, "#C97024", "#290000", 90, _particleImage8);
      createEmitterPointGlow(7, "#C97024", "#290000", 65, _particleImage8);
      createEmitterPointGlow(8, "#C97024", "#290000", 0, _particleImage8);
      createEmitterPointGlow(9, "#C97024", "#290000", -90, _particleImage8);
      createEmitterPointGlow(10, "#C97024", "#290000", -65, _particleImage8);
      createEmitterPointGlow(11, "#C97024", "#290000", 0, _particleImage8);
      createEmitterPointGlow(12, "#C97024", "#290000", 225, _particleImage8);
      createEmitterPointGlow(13, "#C97024", "#290000", -225, _particleImage8);
      createEmitterPointGlow(14, "#C97024", "#290000", -65, _particleImage8);
      createEmitterPointGlow(15, "#C97024", "#290000", 65, _particleImage8);
      createEmitterPointGlow(16, "#C97024", "#290000", 0, _particleImage8);
      createEmitterPointGlow(17, "#C97024", "#290000", 65, _particleImage8);
      createEmitterPointGlow(18, "#C97024", "#290000", -65, _particleImage8);
    };

    tryWebGLRendererInit();
  }

  startParticleInit = false;
}

function createEmitterCometThrower(emitterIndex, image) {
  protonEmitterArray[emitterIndex] = new _protonEngine.default.Emitter();
  protonEmitterArray[emitterIndex].rate = new _protonEngine.default.Rate(new _protonEngine.default.Span(2, 5), .05);
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Body(image, 20, 40));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Mass(1));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Life(1.5, 2.2));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Velocity(2, _protonEngine.default.getSpan(0, 360), 'polar'));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Rotate());
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Gravity(3));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Alpha(0.6, 1)); // protonEmitterArray[emitterIndex].addBehaviour(new Proton.CrossZone(new Proton.RectZone(0, 0, canvas.width, canvas.height), 'bound'));

  protonEmitterArray[emitterIndex].p.x = canvas.width / 2;
  protonEmitterArray[emitterIndex].p.y = canvas.height / 2;
  proton.addEmitter(protonEmitterArray[emitterIndex]);
  protonEmitterArray[emitterIndex].emit();
}

function createEmitterPointDrawRandomDrift(emitterIndex, colorT, colorE, angle, image) {
  protonEmitterArray[emitterIndex] = new _protonEngine.default.Emitter();
  protonEmitterArray[emitterIndex].rate = new _protonEngine.default.Rate(new _protonEngine.default.Span(.1, .2), new _protonEngine.default.Span(.01, .015));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Mass(10));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Life(1, 2));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Body(image, 4));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Radius(2));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.V(new _protonEngine.default.Span(1, 2), angle, 'polar'));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Alpha(0.8, 0));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.RandomDrift(30, 30, 0));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Color(colorT, colorE));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Scale(1, 0));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.CrossZone(new _protonEngine.default.RectZone(0, 0, canvasGL.width, canvasGL.height), 'dead'));
  protonEmitterArray[emitterIndex].p.x = canvasGL.width / 2;
  protonEmitterArray[emitterIndex].p.y = canvasGL.height / 2;
  protonEmitterArray[emitterIndex].emit();
  proton.addEmitter(protonEmitterArray[emitterIndex]);
}

function createEmitterPointDraw(emitterIndex, colorT, colorE, angle, image) {
  protonEmitterArray[emitterIndex] = new _protonEngine.default.Emitter();
  protonEmitterArray[emitterIndex].rate = new _protonEngine.default.Rate(new _protonEngine.default.Span(.1, .2), new _protonEngine.default.Span(.01, .015));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Mass(1));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Life(1, 50));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Body(image, 4));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Radius(2));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.V(new _protonEngine.default.Span(1, 2), angle, 'polar'));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Alpha(0.8, 0));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Color(colorT, colorE));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Scale(1, 0.1));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.CrossZone(new _protonEngine.default.RectZone(0, 0, canvasGL.width, canvasGL.height), 'dead'));
  protonEmitterArray[emitterIndex].p.x = canvasGL.width / 2;
  protonEmitterArray[emitterIndex].p.y = canvasGL.height / 2;
  protonEmitterArray[emitterIndex].emit();
  proton.addEmitter(protonEmitterArray[emitterIndex]);
}

function createEmitterPointGlow(emitterIndex, colorT, colorE, angle, image) {
  protonEmitterArray[emitterIndex] = new _protonEngine.default.Emitter();
  protonEmitterArray[emitterIndex].rate = new _protonEngine.default.Rate(new _protonEngine.default.Span(.1, .2), new _protonEngine.default.Span(.01, .015));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Mass(1));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Life(1, 2));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Body(image, 32));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Radius(2));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.V(new _protonEngine.default.Span(1, 2), angle, 'polar'));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Alpha(0.2, 0));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Color(colorT, colorE));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Scale(3, 0.1));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.CrossZone(new _protonEngine.default.RectZone(0, 0, canvasGL.width, canvasGL.height), 'dead'));
  protonEmitterArray[emitterIndex].p.x = canvasGL.width / 2;
  protonEmitterArray[emitterIndex].p.y = canvasGL.height / 2;
  protonEmitterArray[emitterIndex].emit();
  proton.addEmitter(protonEmitterArray[emitterIndex]);
}

function createEmitterDrawGlow(emitterIndex, colorT, colorE, angle, image) {
  protonEmitterArray[emitterIndex] = new _protonEngine.default.Emitter();
  protonEmitterArray[emitterIndex].rate = new _protonEngine.default.Rate(new _protonEngine.default.Span(.1, .2), new _protonEngine.default.Span(.01, .015));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Mass(1));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Life(1, 50));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Body(image, 32));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Radius(2));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.V(new _protonEngine.default.Span(1, 2), angle, 'polar'));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Alpha(0.2, 0));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Color(colorT, colorE));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Scale(3, 0.1));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.CrossZone(new _protonEngine.default.RectZone(0, 0, canvasGL.width, canvasGL.height), 'dead'));
  protonEmitterArray[emitterIndex].p.x = canvasGL.width / 2;
  protonEmitterArray[emitterIndex].p.y = canvasGL.height / 2;
  protonEmitterArray[emitterIndex].emit();
  proton.addEmitter(protonEmitterArray[emitterIndex]);
}

function tryWebGLRendererInit() {
  var removeOtherRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  // Try WebGLRender. If not posssible fallback to Canvas renderer
  try {
    rendererGL = new _protonEngine.default.WebGLRenderer(canvasGL);
    rendererGL.blendFunc("SRC_ALPHA", "ONE");
    proton.addRenderer(rendererGL);
  } catch (e) {
    var renderer = new _protonEngine.default.CanvasRenderer(canvas);
    proton.addRenderer(renderer);
  }
}

function createEmitter(x, y, angle, color, handPos, emitterIndex) {
  protonEmitterArray[emitterIndex] = new _protonEngine.default.Emitter();
  protonEmitterArray[emitterIndex].rate = new _protonEngine.default.Rate(new _protonEngine.default.Span(10, 30), new _protonEngine.default.Span(.1));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Mass(1));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Life(3, 6));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.Radius(4, 0.1));
  protonEmitterArray[emitterIndex].addInitialize(new _protonEngine.default.V(new _protonEngine.default.Span(0.5, 1), new _protonEngine.default.Span(90, 10, true), 'polar'));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Alpha(1, 0));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Color(color));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.Attraction(handPos, 10, 500));
  protonEmitterArray[emitterIndex].addBehaviour(new _protonEngine.default.CrossZone(new _protonEngine.default.RectZone(0, 0, canvas.width, canvas.height), 'cross'));
  protonEmitterArray[emitterIndex].p.x = x;
  protonEmitterArray[emitterIndex].p.y = y;
  protonEmitterArray[emitterIndex].emit();
  protonEmitterArray[emitterIndex].rotation = angle;
  proton.addEmitter(protonEmitterArray[emitterIndex]);
}

function createImageEmitter(x, y, color1, color2) {
  var emitter = new _protonEngine.default.Emitter();
  emitter.rate = new _protonEngine.default.Rate(new _protonEngine.default.Span(5, 7), new _protonEngine.default.Span(.01, .02));
  emitter.addInitialize(new _protonEngine.default.Mass(1));
  emitter.addInitialize(new _protonEngine.default.Life(1));
  var particleImage = new Image();
  particleImage.src = chrome.runtime.getURL("/images/particle.png");

  particleImage.onload = function () {
    emitter.addInitialize(new _protonEngine.default.Body(particleImage, 32));
  };

  emitter.addInitialize(new _protonEngine.default.Radius(40));
  emitter.addBehaviour(new _protonEngine.default.Alpha(1, 0));
  emitter.addBehaviour(new _protonEngine.default.Color(color1, color2));
  emitter.addBehaviour(new _protonEngine.default.Scale(3.5, 0.1));
  emitter.addBehaviour(new _protonEngine.default.CrossZone(new _protonEngine.default.RectZone(0, 0, canvas.width, canvas.height), 'dead'));
  var attractionBehaviour = new _protonEngine.default.Attraction(nosePosition, 0, 0);
  attractionBehaviours.push(attractionBehaviour);
  emitter.addBehaviour(attractionBehaviour);
  emitter.p.x = x;
  emitter.p.y = y;
  emitter.emit();
  proton.addEmitter(emitter);
  return emitter;
}
/**
 * Update particles emitter position on specific keypoints.
 *
 * @param keypoints from detector
 */


function updateParticles(keypoints) {
  if (keypoints === undefined) {
    return;
  }

  if (startParticleInit === true) {
    return;
  }

  switch (particlesEffectType) {
    case 0:
      // blue and yellow hand
      protonEmitterArray[0].p.x = keypoints[10].x;
      protonEmitterArray[0].p.y = keypoints[10].y;
      protonEmitterArray[1].p.x = keypoints[9].x;
      protonEmitterArray[1].p.y = keypoints[9].y;
      break;

    case 1:
      // circle head effect. center is nose
      protonEmitterArray[0].p.x = keypoints[0].x + conf.radius * Math.sin(Math.PI / 2 + conf.tha);
      protonEmitterArray[0].p.y = keypoints[0].y + conf.radius * Math.cos(Math.PI / 2 + conf.tha);
      protonEmitterArray[1].p.x = keypoints[0].x + conf.radius * Math.sin(-Math.PI / 2 + conf.tha);
      protonEmitterArray[1].p.y = keypoints[0].y + conf.radius * Math.cos(-Math.PI / 2 + conf.tha);
      conf.tha += .1;
      break;

    case 2:
      protonEmitterArray[0].p.x = keypoints[10].x;
      protonEmitterArray[0].p.y = keypoints[10].y;
      break;

    case 3:
      nosePosition.x = keypoints[0].x;
      nosePosition.y = keypoints[0].y;
      protonEmitterArray[0].p.x = keypoints[0].x;
      protonEmitterArray[0].p.y = keypoints[0].y;
      break;

    case 4:
      protonEmitterArray[0].p.x = keypoints[0].x;
      protonEmitterArray[0].p.y = keypoints[0].y;
      break;

    case 5:
      leftHandPosition.x = keypoints[9].x;
      leftHandPosition.y = keypoints[9].y;
      rightHandPosition.x = keypoints[10].x;
      rightHandPosition.y = keypoints[10].y;
      break;

    case 6:
      /**
       * Mapping emitter to pos in array (->)
       0: nose
       1: left_eye
       2: right_eye
       3: left_ear
       4: right_ear
       5: left_shoulder   -> 2
       6: right_shoulder  -> 3
       7: left_elbow      -> 1
       8: right_elbow     -> 4
       9: left_wrist      -> 0
       10: right_wrist    -> 5
       11: left_hip
       12: right_hip
       13: left_knee
       14: right_knee
       15: left_ankle
       16: right_ankle
       */
      protonEmitterArray[0].p.x = keypoints[9].x;
      protonEmitterArray[0].p.y = keypoints[9].y;
      protonEmitterArray[1].p.x = keypoints[7].x;
      protonEmitterArray[1].p.y = keypoints[7].y;
      protonEmitterArray[2].p.x = keypoints[5].x;
      protonEmitterArray[2].p.y = keypoints[5].y;
      protonEmitterArray[3].p.x = keypoints[6].x;
      protonEmitterArray[3].p.y = keypoints[6].y;
      protonEmitterArray[4].p.x = keypoints[8].x;
      protonEmitterArray[4].p.y = keypoints[8].y;
      protonEmitterArray[5].p.x = keypoints[10].x;
      protonEmitterArray[5].p.y = keypoints[10].y;
      break;

    case 7:
      leftRightWristUpdate(keypoints);
      break;

    case 8:
      leftRightWristUpdate(keypoints);
      break;

    case 9:
      leftRightWristUpdate(keypoints);
      break;

    case 10:
      leftRightWristUpdate(keypoints);
      break;

    case 11:
      protonEmitterArray[0].p.x = keypoints[9].x;
      protonEmitterArray[0].p.y = keypoints[9].y;
      protonEmitterArray[1].p.x = keypoints[7].x;
      protonEmitterArray[1].p.y = keypoints[7].y;
      protonEmitterArray[2].p.x = keypoints[5].x;
      protonEmitterArray[2].p.y = keypoints[5].y;
      protonEmitterArray[3].p.x = keypoints[6].x;
      protonEmitterArray[3].p.y = keypoints[6].y;
      protonEmitterArray[4].p.x = keypoints[8].x;
      protonEmitterArray[4].p.y = keypoints[8].y;
      protonEmitterArray[5].p.x = keypoints[10].x;
      protonEmitterArray[5].p.y = keypoints[10].y;
      protonEmitterArray[6].p.x = keypoints[11].x;
      protonEmitterArray[6].p.y = keypoints[11].y;
      protonEmitterArray[7].p.x = keypoints[13].x;
      protonEmitterArray[7].p.y = keypoints[13].y;
      protonEmitterArray[8].p.x = keypoints[15].x;
      protonEmitterArray[8].p.y = keypoints[15].y;
      protonEmitterArray[9].p.x = keypoints[12].x;
      protonEmitterArray[9].p.y = keypoints[12].y;
      protonEmitterArray[10].p.x = keypoints[14].x;
      protonEmitterArray[10].p.y = keypoints[14].y;
      protonEmitterArray[11].p.x = keypoints[16].x;
      protonEmitterArray[11].p.y = keypoints[16].y;
      break;

    case 12:
      protonEmitterArray[0].p.x = keypoints[9].x;
      protonEmitterArray[0].p.y = keypoints[9].y;
      protonEmitterArray[1].p.x = keypoints[7].x;
      protonEmitterArray[1].p.y = keypoints[7].y;
      protonEmitterArray[2].p.x = keypoints[5].x;
      protonEmitterArray[2].p.y = keypoints[5].y;
      protonEmitterArray[3].p.x = keypoints[6].x;
      protonEmitterArray[3].p.y = keypoints[6].y;
      protonEmitterArray[4].p.x = keypoints[8].x;
      protonEmitterArray[4].p.y = keypoints[8].y;
      protonEmitterArray[5].p.x = keypoints[10].x;
      protonEmitterArray[5].p.y = keypoints[10].y;
      protonEmitterArray[6].p.x = keypoints[11].x;
      protonEmitterArray[6].p.y = keypoints[11].y;
      protonEmitterArray[7].p.x = keypoints[13].x;
      protonEmitterArray[7].p.y = keypoints[13].y;
      protonEmitterArray[8].p.x = keypoints[15].x;
      protonEmitterArray[8].p.y = keypoints[15].y;
      protonEmitterArray[9].p.x = keypoints[12].x;
      protonEmitterArray[9].p.y = keypoints[12].y;
      protonEmitterArray[10].p.x = keypoints[14].x;
      protonEmitterArray[10].p.y = keypoints[14].y;
      protonEmitterArray[11].p.x = keypoints[16].x;
      protonEmitterArray[11].p.y = keypoints[16].y;
      protonEmitterArray[12].p.x = keypoints[5].x;
      protonEmitterArray[12].p.y = keypoints[5].y;
      protonEmitterArray[13].p.x = keypoints[6].x;
      protonEmitterArray[13].p.y = keypoints[6].y;
      protonEmitterArray[14].p.x = keypoints[15].x;
      protonEmitterArray[14].p.y = keypoints[15].y;
      protonEmitterArray[15].p.x = keypoints[16].x;
      protonEmitterArray[15].p.y = keypoints[16].y;
      protonEmitterArray[16].p.x = keypoints[0].x;
      protonEmitterArray[16].p.y = keypoints[0].y;
      protonEmitterArray[17].p.x = keypoints[3].x;
      protonEmitterArray[17].p.y = keypoints[3].y;
      protonEmitterArray[18].p.x = keypoints[4].x;
      protonEmitterArray[18].p.y = keypoints[4].y;
      break;

    default:
      break;
  }
}
/**
 * Update proton emitter position for left/right wrist from keypoint detection
 */


function leftRightWristUpdate(keypoints) {
  protonEmitterArray[0].p.x = keypoints[9].x;
  protonEmitterArray[0].p.y = keypoints[9].y;
  protonEmitterArray[1].p.x = keypoints[10].x;
  protonEmitterArray[1].p.y = keypoints[10].y;
}
/**
 * Particle animation frame
 */


function tick() {
  requestAnimationFrame(tick);

  if (!currentAnimation.startsWith("particle")) {
    return;
  }

  if (proton !== null) {
    proton.update();
  }
}

function clearWebGL() {
  // clear WebGLCanvas and particles
  protonEmitterArray.forEach(function (emitter) {
    emitter.removeAllParticles();
    emitter.destroy();
  });
  webGLtx.clear(webGLtx.DEPTH_BUFFER_BIT | webGLtx.COLOR_BUFFER_BIT | webGLtx.STENCIL_BUFFER_BIT);
}
/**
 * Loads image for head replacement
 */


function loadImage() {
  img.src = chrome.runtime.getURL(imgArray[usedImageArrayIndex].url);

  img.onload = function () {// This is intentional
  };
}
/**
 * Video event listener.
 * If video is playing, start detection interval
 */


mainVideo.addEventListener('loadeddata', function (event) {
  var animControlsButton = document.getElementsByClassName("ytp-right-controls");
  var button = document.createElement('button');
  button.className = 'ytp-button it-player-button';
  button.dataset.title = "PoseDream";

  button.onclick = function () {
    document.dispatchEvent(new CustomEvent('displayPoseDreamPopup', {
      detail: {
        animationID: 'skeleton'
      }
    }));
  };

  animControlsButton[0].insertBefore(button, animControlsButton[0].childNodes[0]);
  var playerImage = new Image();
  playerImage.src = chrome.runtime.getURL("/images/logo48.png");

  playerImage.onload = function () {
    var imgTag = document.createElement('img');
    imgTag.src = playerImage.src;
    button.appendChild(imgTag);
  };

  var div = document.createElement('div');
  div.className = 'posedream-video-popup';
  div.innerHTML = "\n    Fun with lines\n<ol>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'skeleton'} }));\">skeleton</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'puppetsPlayer'} }));\">Puppets player</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'spiderWeb'} }));\">Spider web</button></li>\n</ol>\n<br>\nReplace head with image\n<ol>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'imgCat'} }));\">Cat</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'imgSmiley'} }));\">Smiley</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'imgSun'} }));\">Sun</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'imgMonkey'} }));\">Monkey</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'imgAnonymous'} }));\">Anonymous</button></li>\n</ol>\n<br>\nShow particle animation\n<ol>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'particleHandsBall'} }));\">Hand power balls</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'particle2BalHead'} }));\">Two head balls</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'particleRightHandLine'} }));\">Right hand line</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'particleNoseGravity'} }));\">Nose gravity</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'particleNoseSupernova'} }));\">Nose supernova</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'particleHandsTrackFromBorder'} }));\">Hands track from border</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'particleUpperBodyGlow'} }));\">Upper body glow</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'particleGlowPainting'} }));\">Glow painting</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'particlePainting'} }));\">Particle painting</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'particlePaintRandomDrift'} }));\">Particle painting with random drift</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'particleCometThrower'} }));\">Comet thrower</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'particleBodyGlow'} }));\">Body glow</button></li>\n  <li><button id=\"particleBurningMan\" class=\"pdVideoButton\" onclick=\"document.dispatchEvent(new CustomEvent('changeVisualizationFromPlayer', { detail: {animationID:'particleBurningMan'} }));\">Burning Man</button></li>\n</ol>\n    ";
  var html5VideoPlayer = document.getElementsByClassName("html5-video-player");
  html5VideoPlayer[0].appendChild(div);

  mainVideo.onplaying = function () {
    if (document.getElementById("canvasdummy") === null) {
      canvas = document.createElement('canvas'); // creates new canvas element

      canvas.id = 'canvasdummy'; // gives canvas id

      if (mainVideo.length !== 0) {
        canvas.height = mainVideo.clientHeight; //get original canvas height

        canvas.width = mainVideo.clientWidth; // get original canvas width
      } else {
        canvas.height = 600;
        canvas.width = 600;
      }

      var videoContainerDIV = document.getElementsByClassName("html5-video-container")[0];
      videoContainerDIV.appendChild(canvas); // adds the canvas to the body element

      setCanvasStyle(canvas);
      ctx = canvas.getContext('2d');
    }

    if (document.getElementById("canvasdummyGL") === null) {
      canvasGL = document.createElement('canvas'); // creates new canvas element

      canvasGL.id = 'canvasdummyGL'; // gives canvas id

      if (mainVideo.length !== 0) {
        canvasGL.height = mainVideo.clientHeight; //get original canvas height

        canvasGL.width = mainVideo.clientWidth; // get original canvas width
      } else {
        canvasGL.height = 600;
        canvasGL.width = 600;
      }

      var _videoContainerDIV = document.getElementsByClassName("html5-video-container")[0];

      _videoContainerDIV.appendChild(canvasGL); // adds the canvas to the body element


      setCanvasStyle(canvasGL);
      webGLtx = canvasGL.getContext("experimental-webgl");
    }

    if (isParticleInit === false) {
      isParticleInit = true;
      initParticles();
    }

    resizeObserver.observe(mainVideo);
    createDetectorInterval(); // only call tick once.

    if (startTick === false) {
      startTick = true;
      tick();
    }
  };
});

function createDetectorInterval() {
  intervalVideoPlayId = setInterval(function () {
    if (detector !== undefined) {
      detector.then(function (poseDetector) {
        if (mainVideo === undefined || !location.href.includes("watch")) {
          return;
        }

        poseDetector.estimatePoses(mainVideo).then(function (pose) {
          if (pose !== undefined && pose[0] !== undefined && pose[0].keypoints !== undefined) {
            if (currentAnimation === "skeleton") {
              ctx.clearRect(0, 0, canvas.width, canvas.height);
              drawKeyPoints(pose[0].keypoints);
              drawSkeleton(pose[0].keypoints);
            }

            if (currentAnimation === "puppetsPlayer") {
              ctx.clearRect(0, 0, canvas.width, canvas.height);
              drawPuppets(pose[0].keypoints);
            }

            if (currentAnimation === "spiderWeb") {
              ctx.clearRect(0, 0, canvas.width, canvas.height);
              drawSpiderWeb(pose[0].keypoints);
            }

            if (currentAnimation === "img") {
              ctx.clearRect(0, 0, canvas.width, canvas.height);
              drawImage(pose[0].keypoints);
            }

            if (currentAnimation === "particle") {
              updateParticles(pose[0].keypoints);
            }
          }
        });
      });
    }
  }, 100);
}

mainVideo.onpause = function () {
  clearInterval(intervalVideoPlayId);
};

function setCanvasStyle(tmpCanvas) {
  tmpCanvas.style.position = "absolute";
  tmpCanvas.style.top = "0px";
  tmpCanvas.style.right = "0px";
  tmpCanvas.style.left = mainVideo.style.cssText.split("; ")[2].split(": ")[1];
  tmpCanvas.style.bottom = "0px";
}

var resizeObserver = new ResizeObserver(function (entries) {
  if (intervalVideoPlayId !== undefined) {
    clearInterval(intervalVideoPlayId);
  }

  mainVideo = document.getElementsByClassName("html5-main-video")[0];
  setCanvasStyle(canvas);
  canvas.width = entries[0].target.clientWidth;
  canvas.height = entries[0].target.clientHeight;
  ctx.width = entries[0].target.clientWidth;
  ctx.height = entries[0].target.clientHeight; // canvasGL.style.left   = mainVideo.style.cssText.split("; ")[2].split(": ")[1]

  setCanvasStyle(canvasGL);
  canvasGL.width = entries[0].target.clientWidth;
  canvasGL.height = entries[0].target.clientHeight;
  webGLtx.width = entries[0].target.clientWidth;
  webGLtx.height = entries[0].target.clientHeight;
  initParticles();
  createDetectorInterval();
});

function drawImage(keypoints) {
  if (keypoints !== undefined) {
    var spaceBetweenRightLeftEye = keypoints[1].x - keypoints[2].x;
    var ratio = spaceBetweenRightLeftEye / imgArray[usedImageArrayIndex].pixelsBetweenEyes;
    ratio = ratio === 0 ? 1 : ratio;
    ctx.drawImage(img, keypoints[2].x - imgArray[usedImageArrayIndex].rightEyeToLeft * ratio, keypoints[2].y - imgArray[usedImageArrayIndex].rightEyeToTop * ratio, imgArray[usedImageArrayIndex].imgWidth * ratio, imgArray[usedImageArrayIndex].imgHeight * ratio);
  }
}

function drawKeyPoints(keypoints) {
  var _iterator = _createForOfIteratorHelper(keypoints),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var keypoint = _step.value;
      ctx.beginPath();
      ctx.arc(keypoint.x, keypoint.y, 2, 0, 2 * Math.PI);
      ctx.fillStyle = 'blue';
      ctx.fill();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

function drawSkeleton(keypoints) {
  ctx.fillStyle = 'white';
  ctx.strokeStyle = 'red';
  ctx.lineWidth = 1;
  poseDetection.util.getAdjacentPairs(poseDetection.SupportedModels.MoveNet).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        i = _ref2[0],
        j = _ref2[1];

    var kp1 = keypoints[i];
    var kp2 = keypoints[j]; // If score is null, just show the keypoint.

    var score1 = kp1.score != null ? kp1.score : 1;
    var score2 = kp2.score != null ? kp2.score : 1;
    var scoreThreshold = 0.3;

    if (score1 >= scoreThreshold && score2 >= scoreThreshold) {
      ctx.beginPath();
      ctx.moveTo(kp1.x, kp1.y);
      ctx.lineTo(kp2.x, kp2.y);
      ctx.stroke();
    }
  });
}

function drawPuppets(keypoints) {
  ctx.fillStyle = 'white';
  ctx.strokeStyle = 'blue';
  ctx.lineWidth = 2;
  drawLine(keypoints[10].x, keypoints[10].y, keypoints[10].x, 0);
  drawLine(keypoints[9].x, keypoints[9].y, keypoints[9].x, 0);
  drawLine(keypoints[0].x, keypoints[0].y, keypoints[0].x, 0);
  drawLine(keypoints[6].x, keypoints[6].y, keypoints[6].x, 0);
  drawLine(keypoints[5].x, keypoints[5].y, keypoints[5].x, 0);
  drawLine(keypoints[15].x, keypoints[15].y, keypoints[15].x, 0);
  drawLine(keypoints[16].x, keypoints[16].y, keypoints[16].x, 0);
}

function drawLine(startX, startY, endX, endY) {
  ctx.beginPath();
  ctx.moveTo(startX, startY);
  ctx.lineTo(endX, endY);
  ctx.stroke();
}

function drawSpiderWeb(keypoints) {
  ctx.fillStyle = 'white';
  ctx.strokeStyle = 'yellow';
  ctx.lineWidth = 2;
  drawLine(keypoints[0].x, keypoints[0].y, canvas.width / 2, 0);
  drawLine(keypoints[1].x, keypoints[1].y, canvas.width / 2 * (1 + 0.25), 0);
  drawLine(keypoints[3].x, keypoints[3].y, canvas.width / 2 * (1 + 0.5), 0);
  drawLine(keypoints[2].x, keypoints[2].y, canvas.width / 2 * (1 - 0.25), 0);
  drawLine(keypoints[4].x, keypoints[4].y, canvas.width / 2 * (1 - 0.5), 0);
  drawLine(keypoints[6].x, keypoints[6].y, 0, canvas.height / 2 * (1 - 0.5));
  drawLine(keypoints[8].x, keypoints[8].y, 0, canvas.height / 2 * (1 - 0.25));
  drawLine(keypoints[9].x, keypoints[9].y, canvas.width, canvas.height / 2);
  drawLine(keypoints[10].x, keypoints[10].y, 0, canvas.height / 2);
  drawLine(keypoints[12].x, keypoints[12].y, 0, canvas.height / 2 * (1 + 0.3));
  drawLine(keypoints[14].x, keypoints[14].y, 0, canvas.height / 2 * (1 + 0.6));
  drawLine(keypoints[16].x, keypoints[16].y, 0, canvas.height / 2 * (1 + 0.9));
  drawLine(keypoints[5].x, keypoints[5].y, canvas.width, canvas.height / 2 * (1 - 0.5));
  drawLine(keypoints[7].x, keypoints[7].y, canvas.width, canvas.height / 2 * (1 - 0.25));
  drawLine(keypoints[11].x, keypoints[11].y, canvas.width, canvas.height / 2 * (1 + 0.3));
  drawLine(keypoints[13].x, keypoints[13].y, canvas.width, canvas.height / 2 * (1 + 0.6));
  drawLine(keypoints[15].x, keypoints[15].y, canvas.width, canvas.height / 2 * (1 + 0.9));
}
/**
 * Called from player popup to change visualization.
 */


document.addEventListener('changeVisualizationFromPlayer', function (e) {
  setNewAnimation(e.detail.animationID);
});
/**
 * Called from player control icon to switch display of player popup
 */

document.addEventListener('displayPoseDreamPopup', function (e) {
  var playerPopup = document.getElementsByClassName('posedream-video-popup');

  if (showPlayerPopup) {
    playerPopup[0].style.display = "none";
  } else {
    playerPopup[0].style.display = "block";
  }

  showPlayerPopup = !showPlayerPopup;
});
},{"regenerator-runtime/runtime":"QVnC","@tensorflow-models/pose-detection":"CoLD","@tensorflow/tfjs-backend-webgl":"gNVZ","proton-engine":"l8qd"}]},{},["pILq"], null)
//# sourceMappingURL=/content.js.map